// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.27.1
// source: tiktok-schema.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "TikTok";

export enum AuditStatus {
  AUDITSTATUSUNKNOWN = 0,
  AUDITSTATUSPASS = 1,
  AUDITSTATUSFAILED = 2,
  AUDITSTATUSREVIEWING = 3,
  AUDITSTATUSFORBIDDEN = 4,
  UNRECOGNIZED = -1,
}

export function auditStatusFromJSON(object: any): AuditStatus {
  switch (object) {
    case 0:
    case "AUDITSTATUSUNKNOWN":
      return AuditStatus.AUDITSTATUSUNKNOWN;
    case 1:
    case "AUDITSTATUSPASS":
      return AuditStatus.AUDITSTATUSPASS;
    case 2:
    case "AUDITSTATUSFAILED":
      return AuditStatus.AUDITSTATUSFAILED;
    case 3:
    case "AUDITSTATUSREVIEWING":
      return AuditStatus.AUDITSTATUSREVIEWING;
    case 4:
    case "AUDITSTATUSFORBIDDEN":
      return AuditStatus.AUDITSTATUSFORBIDDEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuditStatus.UNRECOGNIZED;
  }
}

export function auditStatusToJSON(object: AuditStatus): string {
  switch (object) {
    case AuditStatus.AUDITSTATUSUNKNOWN:
      return "AUDITSTATUSUNKNOWN";
    case AuditStatus.AUDITSTATUSPASS:
      return "AUDITSTATUSPASS";
    case AuditStatus.AUDITSTATUSFAILED:
      return "AUDITSTATUSFAILED";
    case AuditStatus.AUDITSTATUSREVIEWING:
      return "AUDITSTATUSREVIEWING";
    case AuditStatus.AUDITSTATUSFORBIDDEN:
      return "AUDITSTATUSFORBIDDEN";
    case AuditStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EmoteType {
  EMOTETYPENORMAL = 0,
  EMOTETYPEWITHSTICKER = 1,
  UNRECOGNIZED = -1,
}

export function emoteTypeFromJSON(object: any): EmoteType {
  switch (object) {
    case 0:
    case "EMOTETYPENORMAL":
      return EmoteType.EMOTETYPENORMAL;
    case 1:
    case "EMOTETYPEWITHSTICKER":
      return EmoteType.EMOTETYPEWITHSTICKER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EmoteType.UNRECOGNIZED;
  }
}

export function emoteTypeToJSON(object: EmoteType): string {
  switch (object) {
    case EmoteType.EMOTETYPENORMAL:
      return "EMOTETYPENORMAL";
    case EmoteType.EMOTETYPEWITHSTICKER:
      return "EMOTETYPEWITHSTICKER";
    case EmoteType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContentSource {
  CONTENTSOURCEUNKNOWN = 0,
  CONTENTSOURCENORMAL = 1,
  CONTENTSOURCECAMERA = 2,
  UNRECOGNIZED = -1,
}

export function contentSourceFromJSON(object: any): ContentSource {
  switch (object) {
    case 0:
    case "CONTENTSOURCEUNKNOWN":
      return ContentSource.CONTENTSOURCEUNKNOWN;
    case 1:
    case "CONTENTSOURCENORMAL":
      return ContentSource.CONTENTSOURCENORMAL;
    case 2:
    case "CONTENTSOURCECAMERA":
      return ContentSource.CONTENTSOURCECAMERA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentSource.UNRECOGNIZED;
  }
}

export function contentSourceToJSON(object: ContentSource): string {
  switch (object) {
    case ContentSource.CONTENTSOURCEUNKNOWN:
      return "CONTENTSOURCEUNKNOWN";
    case ContentSource.CONTENTSOURCENORMAL:
      return "CONTENTSOURCENORMAL";
    case ContentSource.CONTENTSOURCECAMERA:
      return "CONTENTSOURCECAMERA";
    case ContentSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EmotePrivateType {
  EMOTE_PRIVATE_TYPE_NORMAL = 0,
  EMOTE_PRIVATE_TYPE_SUB_WAVE = 1,
  UNRECOGNIZED = -1,
}

export function emotePrivateTypeFromJSON(object: any): EmotePrivateType {
  switch (object) {
    case 0:
    case "EMOTE_PRIVATE_TYPE_NORMAL":
      return EmotePrivateType.EMOTE_PRIVATE_TYPE_NORMAL;
    case 1:
    case "EMOTE_PRIVATE_TYPE_SUB_WAVE":
      return EmotePrivateType.EMOTE_PRIVATE_TYPE_SUB_WAVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EmotePrivateType.UNRECOGNIZED;
  }
}

export function emotePrivateTypeToJSON(object: EmotePrivateType): string {
  switch (object) {
    case EmotePrivateType.EMOTE_PRIVATE_TYPE_NORMAL:
      return "EMOTE_PRIVATE_TYPE_NORMAL";
    case EmotePrivateType.EMOTE_PRIVATE_TYPE_SUB_WAVE:
      return "EMOTE_PRIVATE_TYPE_SUB_WAVE";
    case EmotePrivateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TextType {
  DISPLAY_TEXT = 0,
  CONTENT = 1,
  UNRECOGNIZED = -1,
}

export function textTypeFromJSON(object: any): TextType {
  switch (object) {
    case 0:
    case "DISPLAY_TEXT":
      return TextType.DISPLAY_TEXT;
    case 1:
    case "CONTENT":
      return TextType.CONTENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TextType.UNRECOGNIZED;
  }
}

export function textTypeToJSON(object: TextType): string {
  switch (object) {
    case TextType.DISPLAY_TEXT:
      return "DISPLAY_TEXT";
    case TextType.CONTENT:
      return "CONTENT";
    case TextType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkmicApplierSortSetting {
  LINKMIC_APPLIER_SORT_SETTING_NONE = 0,
  LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE = 1,
  UNRECOGNIZED = -1,
}

export function linkmicApplierSortSettingFromJSON(object: any): LinkmicApplierSortSetting {
  switch (object) {
    case 0:
    case "LINKMIC_APPLIER_SORT_SETTING_NONE":
      return LinkmicApplierSortSetting.LINKMIC_APPLIER_SORT_SETTING_NONE;
    case 1:
    case "LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE":
      return LinkmicApplierSortSetting.LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkmicApplierSortSetting.UNRECOGNIZED;
  }
}

export function linkmicApplierSortSettingToJSON(object: LinkmicApplierSortSetting): string {
  switch (object) {
    case LinkmicApplierSortSetting.LINKMIC_APPLIER_SORT_SETTING_NONE:
      return "LINKMIC_APPLIER_SORT_SETTING_NONE";
    case LinkmicApplierSortSetting.LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE:
      return "LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE";
    case LinkmicApplierSortSetting.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HashtagNamespace {
  GLOBAL = 0,
  GAMING = 1,
  UNRECOGNIZED = -1,
}

export function hashtagNamespaceFromJSON(object: any): HashtagNamespace {
  switch (object) {
    case 0:
    case "GLOBAL":
      return HashtagNamespace.GLOBAL;
    case 1:
    case "GAMING":
      return HashtagNamespace.GAMING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HashtagNamespace.UNRECOGNIZED;
  }
}

export function hashtagNamespaceToJSON(object: HashtagNamespace): string {
  switch (object) {
    case HashtagNamespace.GLOBAL:
      return "GLOBAL";
    case HashtagNamespace.GAMING:
      return "GAMING";
    case HashtagNamespace.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AgreeStatus {
  AGREE_UNKNOWN = 0,
  AGREE = 1,
  REJECT = 2,
  UNRECOGNIZED = -1,
}

export function agreeStatusFromJSON(object: any): AgreeStatus {
  switch (object) {
    case 0:
    case "AGREE_UNKNOWN":
      return AgreeStatus.AGREE_UNKNOWN;
    case 1:
    case "AGREE":
      return AgreeStatus.AGREE;
    case 2:
    case "REJECT":
      return AgreeStatus.REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AgreeStatus.UNRECOGNIZED;
  }
}

export function agreeStatusToJSON(object: AgreeStatus): string {
  switch (object) {
    case AgreeStatus.AGREE_UNKNOWN:
      return "AGREE_UNKNOWN";
    case AgreeStatus.AGREE:
      return "AGREE";
    case AgreeStatus.REJECT:
      return "REJECT";
    case AgreeStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum KickoutReason {
  KICKOUT_REASON_UNKNOWN = 0,
  KICKOUT_REASON_FIRST_FRAME_TIMEOUT = 1,
  KICKOUT_REASON_BY_HOST = 2,
  KICKOUT_REASON_RTC_LOST_CONNECTION = 3,
  KICKOUT_REASON_BY_PUNISH = 4,
  KICKOUT_REASON_BY_ADMIN = 5,
  KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS = 6,
  UNRECOGNIZED = -1,
}

export function kickoutReasonFromJSON(object: any): KickoutReason {
  switch (object) {
    case 0:
    case "KICKOUT_REASON_UNKNOWN":
      return KickoutReason.KICKOUT_REASON_UNKNOWN;
    case 1:
    case "KICKOUT_REASON_FIRST_FRAME_TIMEOUT":
      return KickoutReason.KICKOUT_REASON_FIRST_FRAME_TIMEOUT;
    case 2:
    case "KICKOUT_REASON_BY_HOST":
      return KickoutReason.KICKOUT_REASON_BY_HOST;
    case 3:
    case "KICKOUT_REASON_RTC_LOST_CONNECTION":
      return KickoutReason.KICKOUT_REASON_RTC_LOST_CONNECTION;
    case 4:
    case "KICKOUT_REASON_BY_PUNISH":
      return KickoutReason.KICKOUT_REASON_BY_PUNISH;
    case 5:
    case "KICKOUT_REASON_BY_ADMIN":
      return KickoutReason.KICKOUT_REASON_BY_ADMIN;
    case 6:
    case "KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS":
      return KickoutReason.KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KickoutReason.UNRECOGNIZED;
  }
}

export function kickoutReasonToJSON(object: KickoutReason): string {
  switch (object) {
    case KickoutReason.KICKOUT_REASON_UNKNOWN:
      return "KICKOUT_REASON_UNKNOWN";
    case KickoutReason.KICKOUT_REASON_FIRST_FRAME_TIMEOUT:
      return "KICKOUT_REASON_FIRST_FRAME_TIMEOUT";
    case KickoutReason.KICKOUT_REASON_BY_HOST:
      return "KICKOUT_REASON_BY_HOST";
    case KickoutReason.KICKOUT_REASON_RTC_LOST_CONNECTION:
      return "KICKOUT_REASON_RTC_LOST_CONNECTION";
    case KickoutReason.KICKOUT_REASON_BY_PUNISH:
      return "KICKOUT_REASON_BY_PUNISH";
    case KickoutReason.KICKOUT_REASON_BY_ADMIN:
      return "KICKOUT_REASON_BY_ADMIN";
    case KickoutReason.KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS:
      return "KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS";
    case KickoutReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GroupStatus {
  GROUP_STATUS_UNKNOWN = 0,
  GROUP_STATUS_WAITING = 1,
  GROUP_STATUS_LINKED = 3,
  UNRECOGNIZED = -1,
}

export function groupStatusFromJSON(object: any): GroupStatus {
  switch (object) {
    case 0:
    case "GROUP_STATUS_UNKNOWN":
      return GroupStatus.GROUP_STATUS_UNKNOWN;
    case 1:
    case "GROUP_STATUS_WAITING":
      return GroupStatus.GROUP_STATUS_WAITING;
    case 3:
    case "GROUP_STATUS_LINKED":
      return GroupStatus.GROUP_STATUS_LINKED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GroupStatus.UNRECOGNIZED;
  }
}

export function groupStatusToJSON(object: GroupStatus): string {
  switch (object) {
    case GroupStatus.GROUP_STATUS_UNKNOWN:
      return "GROUP_STATUS_UNKNOWN";
    case GroupStatus.GROUP_STATUS_WAITING:
      return "GROUP_STATUS_WAITING";
    case GroupStatus.GROUP_STATUS_LINKED:
      return "GROUP_STATUS_LINKED";
    case GroupStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BusinessCase {
  BUSINESS_NOT_SET = 0,
  APPLY_BIZ_CONTENT = 1,
  INVITE_BIZ_CONTENT = 2,
  REPLY_BIZ_CONTENT = 3,
  PERMIT_BIZ_CONTENT = 4,
  JOIN_DIRECT_BIZ_CONTENT = 5,
  KICK_OUT_BIZ_CONTENT = 6,
  LIST_CHANGE_BIZ_CONTENT = 11,
  MULTI_LIVE_CONTENT = 100,
  COHOST_CONTENT = 200,
  UNRECOGNIZED = -1,
}

export function businessCaseFromJSON(object: any): BusinessCase {
  switch (object) {
    case 0:
    case "BUSINESS_NOT_SET":
      return BusinessCase.BUSINESS_NOT_SET;
    case 1:
    case "APPLY_BIZ_CONTENT":
      return BusinessCase.APPLY_BIZ_CONTENT;
    case 2:
    case "INVITE_BIZ_CONTENT":
      return BusinessCase.INVITE_BIZ_CONTENT;
    case 3:
    case "REPLY_BIZ_CONTENT":
      return BusinessCase.REPLY_BIZ_CONTENT;
    case 4:
    case "PERMIT_BIZ_CONTENT":
      return BusinessCase.PERMIT_BIZ_CONTENT;
    case 5:
    case "JOIN_DIRECT_BIZ_CONTENT":
      return BusinessCase.JOIN_DIRECT_BIZ_CONTENT;
    case 6:
    case "KICK_OUT_BIZ_CONTENT":
      return BusinessCase.KICK_OUT_BIZ_CONTENT;
    case 11:
    case "LIST_CHANGE_BIZ_CONTENT":
      return BusinessCase.LIST_CHANGE_BIZ_CONTENT;
    case 100:
    case "MULTI_LIVE_CONTENT":
      return BusinessCase.MULTI_LIVE_CONTENT;
    case 200:
    case "COHOST_CONTENT":
      return BusinessCase.COHOST_CONTENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BusinessCase.UNRECOGNIZED;
  }
}

export function businessCaseToJSON(object: BusinessCase): string {
  switch (object) {
    case BusinessCase.BUSINESS_NOT_SET:
      return "BUSINESS_NOT_SET";
    case BusinessCase.APPLY_BIZ_CONTENT:
      return "APPLY_BIZ_CONTENT";
    case BusinessCase.INVITE_BIZ_CONTENT:
      return "INVITE_BIZ_CONTENT";
    case BusinessCase.REPLY_BIZ_CONTENT:
      return "REPLY_BIZ_CONTENT";
    case BusinessCase.PERMIT_BIZ_CONTENT:
      return "PERMIT_BIZ_CONTENT";
    case BusinessCase.JOIN_DIRECT_BIZ_CONTENT:
      return "JOIN_DIRECT_BIZ_CONTENT";
    case BusinessCase.KICK_OUT_BIZ_CONTENT:
      return "KICK_OUT_BIZ_CONTENT";
    case BusinessCase.LIST_CHANGE_BIZ_CONTENT:
      return "LIST_CHANGE_BIZ_CONTENT";
    case BusinessCase.MULTI_LIVE_CONTENT:
      return "MULTI_LIVE_CONTENT";
    case BusinessCase.COHOST_CONTENT:
      return "COHOST_CONTENT";
    case BusinessCase.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ReplyStatus {
  REPLY_STATUS_UNKNOWN = 0,
  REPLY_STATUS_AGREE = 1,
  REPLY_STATUS_REFUSE_PERSONALLY = 2,
  REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT = 3,
  REPLY_STATUS_REFUSE_PROCESSING_INVITATION = 4,
  REPLY_STATUS_REFUSE_BY_TIMEOUT = 5,
  REPLY_STATUS_REFUSE_EXCEPTION = 6,
  REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED = 7,
  REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE = 8,
  REPLY_STATUS_REFUSE_IN_MICROOM = 9,
  REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN = 10,
  REPLY_STATUS_REFUSE_IN_MULTI_GUEST = 11,
  REPLY_STATUS_REFUSE_PAUSE_LIVE = 12,
  REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING = 13,
  REPLY_STATUS_REFUSE_DRAW_GUESSING = 14,
  REPLY_STATUS_REFUSE_RANDOM_MATCHING = 15,
  REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING = 16,
  REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST = 17,
  REPLY_STATUS_REFUSE_COHOST_FINISHED = 18,
  REPLY_STATUS_REFUSE_NOT_CONNECTED = 19,
  REPLY_STATUS_REFUSE_LINKMIC_FULL = 20,
  REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE = 21,
  REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE = 22,
  REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY = 23,
  REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST = 24,
  REPLY_STATUS_REFUSE_TOPIC_PAIRING = 25,
  UNRECOGNIZED = -1,
}

export function replyStatusFromJSON(object: any): ReplyStatus {
  switch (object) {
    case 0:
    case "REPLY_STATUS_UNKNOWN":
      return ReplyStatus.REPLY_STATUS_UNKNOWN;
    case 1:
    case "REPLY_STATUS_AGREE":
      return ReplyStatus.REPLY_STATUS_AGREE;
    case 2:
    case "REPLY_STATUS_REFUSE_PERSONALLY":
      return ReplyStatus.REPLY_STATUS_REFUSE_PERSONALLY;
    case 3:
    case "REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT":
      return ReplyStatus.REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT;
    case 4:
    case "REPLY_STATUS_REFUSE_PROCESSING_INVITATION":
      return ReplyStatus.REPLY_STATUS_REFUSE_PROCESSING_INVITATION;
    case 5:
    case "REPLY_STATUS_REFUSE_BY_TIMEOUT":
      return ReplyStatus.REPLY_STATUS_REFUSE_BY_TIMEOUT;
    case 6:
    case "REPLY_STATUS_REFUSE_EXCEPTION":
      return ReplyStatus.REPLY_STATUS_REFUSE_EXCEPTION;
    case 7:
    case "REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED":
      return ReplyStatus.REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED;
    case 8:
    case "REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE":
      return ReplyStatus.REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE;
    case 9:
    case "REPLY_STATUS_REFUSE_IN_MICROOM":
      return ReplyStatus.REPLY_STATUS_REFUSE_IN_MICROOM;
    case 10:
    case "REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN":
      return ReplyStatus.REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN;
    case 11:
    case "REPLY_STATUS_REFUSE_IN_MULTI_GUEST":
      return ReplyStatus.REPLY_STATUS_REFUSE_IN_MULTI_GUEST;
    case 12:
    case "REPLY_STATUS_REFUSE_PAUSE_LIVE":
      return ReplyStatus.REPLY_STATUS_REFUSE_PAUSE_LIVE;
    case 13:
    case "REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING":
      return ReplyStatus.REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING;
    case 14:
    case "REPLY_STATUS_REFUSE_DRAW_GUESSING":
      return ReplyStatus.REPLY_STATUS_REFUSE_DRAW_GUESSING;
    case 15:
    case "REPLY_STATUS_REFUSE_RANDOM_MATCHING":
      return ReplyStatus.REPLY_STATUS_REFUSE_RANDOM_MATCHING;
    case 16:
    case "REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING":
      return ReplyStatus.REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING;
    case 17:
    case "REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST":
      return ReplyStatus.REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST;
    case 18:
    case "REPLY_STATUS_REFUSE_COHOST_FINISHED":
      return ReplyStatus.REPLY_STATUS_REFUSE_COHOST_FINISHED;
    case 19:
    case "REPLY_STATUS_REFUSE_NOT_CONNECTED":
      return ReplyStatus.REPLY_STATUS_REFUSE_NOT_CONNECTED;
    case 20:
    case "REPLY_STATUS_REFUSE_LINKMIC_FULL":
      return ReplyStatus.REPLY_STATUS_REFUSE_LINKMIC_FULL;
    case 21:
    case "REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE":
      return ReplyStatus.REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE;
    case 22:
    case "REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE":
      return ReplyStatus.REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE;
    case 23:
    case "REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY":
      return ReplyStatus.REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY;
    case 24:
    case "REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST":
      return ReplyStatus.REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST;
    case 25:
    case "REPLY_STATUS_REFUSE_TOPIC_PAIRING":
      return ReplyStatus.REPLY_STATUS_REFUSE_TOPIC_PAIRING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReplyStatus.UNRECOGNIZED;
  }
}

export function replyStatusToJSON(object: ReplyStatus): string {
  switch (object) {
    case ReplyStatus.REPLY_STATUS_UNKNOWN:
      return "REPLY_STATUS_UNKNOWN";
    case ReplyStatus.REPLY_STATUS_AGREE:
      return "REPLY_STATUS_AGREE";
    case ReplyStatus.REPLY_STATUS_REFUSE_PERSONALLY:
      return "REPLY_STATUS_REFUSE_PERSONALLY";
    case ReplyStatus.REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT:
      return "REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT";
    case ReplyStatus.REPLY_STATUS_REFUSE_PROCESSING_INVITATION:
      return "REPLY_STATUS_REFUSE_PROCESSING_INVITATION";
    case ReplyStatus.REPLY_STATUS_REFUSE_BY_TIMEOUT:
      return "REPLY_STATUS_REFUSE_BY_TIMEOUT";
    case ReplyStatus.REPLY_STATUS_REFUSE_EXCEPTION:
      return "REPLY_STATUS_REFUSE_EXCEPTION";
    case ReplyStatus.REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED:
      return "REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED";
    case ReplyStatus.REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE:
      return "REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE";
    case ReplyStatus.REPLY_STATUS_REFUSE_IN_MICROOM:
      return "REPLY_STATUS_REFUSE_IN_MICROOM";
    case ReplyStatus.REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN:
      return "REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN";
    case ReplyStatus.REPLY_STATUS_REFUSE_IN_MULTI_GUEST:
      return "REPLY_STATUS_REFUSE_IN_MULTI_GUEST";
    case ReplyStatus.REPLY_STATUS_REFUSE_PAUSE_LIVE:
      return "REPLY_STATUS_REFUSE_PAUSE_LIVE";
    case ReplyStatus.REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING:
      return "REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING";
    case ReplyStatus.REPLY_STATUS_REFUSE_DRAW_GUESSING:
      return "REPLY_STATUS_REFUSE_DRAW_GUESSING";
    case ReplyStatus.REPLY_STATUS_REFUSE_RANDOM_MATCHING:
      return "REPLY_STATUS_REFUSE_RANDOM_MATCHING";
    case ReplyStatus.REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING:
      return "REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING";
    case ReplyStatus.REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST:
      return "REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST";
    case ReplyStatus.REPLY_STATUS_REFUSE_COHOST_FINISHED:
      return "REPLY_STATUS_REFUSE_COHOST_FINISHED";
    case ReplyStatus.REPLY_STATUS_REFUSE_NOT_CONNECTED:
      return "REPLY_STATUS_REFUSE_NOT_CONNECTED";
    case ReplyStatus.REPLY_STATUS_REFUSE_LINKMIC_FULL:
      return "REPLY_STATUS_REFUSE_LINKMIC_FULL";
    case ReplyStatus.REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE:
      return "REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE";
    case ReplyStatus.REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE:
      return "REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE";
    case ReplyStatus.REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY:
      return "REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY";
    case ReplyStatus.REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST:
      return "REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST";
    case ReplyStatus.REPLY_STATUS_REFUSE_TOPIC_PAIRING:
      return "REPLY_STATUS_REFUSE_TOPIC_PAIRING";
    case ReplyStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SubscribeType {
  SUBSCRIBETYPE_ONCE = 0,
  SUBSCRIBETYPE_AUTO = 1,
  SUBSCRIBETYPE_DEFAULT = 100,
  UNRECOGNIZED = -1,
}

export function subscribeTypeFromJSON(object: any): SubscribeType {
  switch (object) {
    case 0:
    case "SUBSCRIBETYPE_ONCE":
      return SubscribeType.SUBSCRIBETYPE_ONCE;
    case 1:
    case "SUBSCRIBETYPE_AUTO":
      return SubscribeType.SUBSCRIBETYPE_AUTO;
    case 100:
    case "SUBSCRIBETYPE_DEFAULT":
      return SubscribeType.SUBSCRIBETYPE_DEFAULT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SubscribeType.UNRECOGNIZED;
  }
}

export function subscribeTypeToJSON(object: SubscribeType): string {
  switch (object) {
    case SubscribeType.SUBSCRIBETYPE_ONCE:
      return "SUBSCRIBETYPE_ONCE";
    case SubscribeType.SUBSCRIBETYPE_AUTO:
      return "SUBSCRIBETYPE_AUTO";
    case SubscribeType.SUBSCRIBETYPE_DEFAULT:
      return "SUBSCRIBETYPE_DEFAULT";
    case SubscribeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OldSubscribeStatus {
  OLD_SUBSCRIBE_STATUS_FIRST = 0,
  OLD_SUBSCRIBE_STATUS_RESUB = 1,
  OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD = 2,
  OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD = 3,
  OLD_SUBSCRIBE_STATUS_DEFAULT = 100,
  UNRECOGNIZED = -1,
}

export function oldSubscribeStatusFromJSON(object: any): OldSubscribeStatus {
  switch (object) {
    case 0:
    case "OLD_SUBSCRIBE_STATUS_FIRST":
      return OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_FIRST;
    case 1:
    case "OLD_SUBSCRIBE_STATUS_RESUB":
      return OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_RESUB;
    case 2:
    case "OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD":
      return OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD;
    case 3:
    case "OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD":
      return OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD;
    case 100:
    case "OLD_SUBSCRIBE_STATUS_DEFAULT":
      return OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_DEFAULT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OldSubscribeStatus.UNRECOGNIZED;
  }
}

export function oldSubscribeStatusToJSON(object: OldSubscribeStatus): string {
  switch (object) {
    case OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_FIRST:
      return "OLD_SUBSCRIBE_STATUS_FIRST";
    case OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_RESUB:
      return "OLD_SUBSCRIBE_STATUS_RESUB";
    case OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD:
      return "OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD";
    case OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD:
      return "OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD";
    case OldSubscribeStatus.OLD_SUBSCRIBE_STATUS_DEFAULT:
      return "OLD_SUBSCRIBE_STATUS_DEFAULT";
    case OldSubscribeStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SubscribingStatus {
  SUBSCRIBING_STATUS_UNKNOWN = 0,
  SUBSCRIBING_STATUS_ONCE = 1,
  SUBSCRIBING_STATUS_CIRCLE = 2,
  SUBSCRIBING_STATUS_CIRCLE_CANCEL = 3,
  SUBSCRIBING_STATUS_REFUND = 4,
  SUBSCRIBING_STATUS_IN_GRACE_PERIOD = 5,
  SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD = 6,
  UNRECOGNIZED = -1,
}

export function subscribingStatusFromJSON(object: any): SubscribingStatus {
  switch (object) {
    case 0:
    case "SUBSCRIBING_STATUS_UNKNOWN":
      return SubscribingStatus.SUBSCRIBING_STATUS_UNKNOWN;
    case 1:
    case "SUBSCRIBING_STATUS_ONCE":
      return SubscribingStatus.SUBSCRIBING_STATUS_ONCE;
    case 2:
    case "SUBSCRIBING_STATUS_CIRCLE":
      return SubscribingStatus.SUBSCRIBING_STATUS_CIRCLE;
    case 3:
    case "SUBSCRIBING_STATUS_CIRCLE_CANCEL":
      return SubscribingStatus.SUBSCRIBING_STATUS_CIRCLE_CANCEL;
    case 4:
    case "SUBSCRIBING_STATUS_REFUND":
      return SubscribingStatus.SUBSCRIBING_STATUS_REFUND;
    case 5:
    case "SUBSCRIBING_STATUS_IN_GRACE_PERIOD":
      return SubscribingStatus.SUBSCRIBING_STATUS_IN_GRACE_PERIOD;
    case 6:
    case "SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD":
      return SubscribingStatus.SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SubscribingStatus.UNRECOGNIZED;
  }
}

export function subscribingStatusToJSON(object: SubscribingStatus): string {
  switch (object) {
    case SubscribingStatus.SUBSCRIBING_STATUS_UNKNOWN:
      return "SUBSCRIBING_STATUS_UNKNOWN";
    case SubscribingStatus.SUBSCRIBING_STATUS_ONCE:
      return "SUBSCRIBING_STATUS_ONCE";
    case SubscribingStatus.SUBSCRIBING_STATUS_CIRCLE:
      return "SUBSCRIBING_STATUS_CIRCLE";
    case SubscribingStatus.SUBSCRIBING_STATUS_CIRCLE_CANCEL:
      return "SUBSCRIBING_STATUS_CIRCLE_CANCEL";
    case SubscribingStatus.SUBSCRIBING_STATUS_REFUND:
      return "SUBSCRIBING_STATUS_REFUND";
    case SubscribingStatus.SUBSCRIBING_STATUS_IN_GRACE_PERIOD:
      return "SUBSCRIBING_STATUS_IN_GRACE_PERIOD";
    case SubscribingStatus.SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD:
      return "SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD";
    case SubscribingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkmicStatus {
  Disable = 0,
  Enable = 1,
  Just_Following = 2,
  Multi_Linking = 3,
  Multi_Linking_Only_Following = 4,
  UNRECOGNIZED = -1,
}

export function linkmicStatusFromJSON(object: any): LinkmicStatus {
  switch (object) {
    case 0:
    case "Disable":
      return LinkmicStatus.Disable;
    case 1:
    case "Enable":
      return LinkmicStatus.Enable;
    case 2:
    case "Just_Following":
      return LinkmicStatus.Just_Following;
    case 3:
    case "Multi_Linking":
      return LinkmicStatus.Multi_Linking;
    case 4:
    case "Multi_Linking_Only_Following":
      return LinkmicStatus.Multi_Linking_Only_Following;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkmicStatus.UNRECOGNIZED;
  }
}

export function linkmicStatusToJSON(object: LinkmicStatus): string {
  switch (object) {
    case LinkmicStatus.Disable:
      return "Disable";
    case LinkmicStatus.Enable:
      return "Enable";
    case LinkmicStatus.Just_Following:
      return "Just_Following";
    case LinkmicStatus.Multi_Linking:
      return "Multi_Linking";
    case LinkmicStatus.Multi_Linking_Only_Following:
      return "Multi_Linking_Only_Following";
    case LinkmicStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MemberMessageAction {
  UNKNOWN = 0,
  /** JOINED - User Joined the Stream */
  JOINED = 1,
  /** SUBSCRIBED - User Subscribed to the Host */
  SUBSCRIBED = 3,
  UNRECOGNIZED = -1,
}

export function memberMessageActionFromJSON(object: any): MemberMessageAction {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return MemberMessageAction.UNKNOWN;
    case 1:
    case "JOINED":
      return MemberMessageAction.JOINED;
    case 3:
    case "SUBSCRIBED":
      return MemberMessageAction.SUBSCRIBED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MemberMessageAction.UNRECOGNIZED;
  }
}

export function memberMessageActionToJSON(object: MemberMessageAction): string {
  switch (object) {
    case MemberMessageAction.UNKNOWN:
      return "UNKNOWN";
    case MemberMessageAction.JOINED:
      return "JOINED";
    case MemberMessageAction.SUBSCRIBED:
      return "SUBSCRIBED";
    case MemberMessageAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ControlAction {
  CONTROL_ACTION_FALLBACK_UNKNOWN = 0,
  CONTROL_ACTION_STREAM_PAUSED = 1,
  CONTROL_ACTION_STREAM_UNPAUSED = 2,
  CONTROL_ACTION_STREAM_ENDED = 3,
  CONTROL_ACTION_STREAM_SUSPENDED = 4,
  UNRECOGNIZED = -1,
}

export function controlActionFromJSON(object: any): ControlAction {
  switch (object) {
    case 0:
    case "CONTROL_ACTION_FALLBACK_UNKNOWN":
      return ControlAction.CONTROL_ACTION_FALLBACK_UNKNOWN;
    case 1:
    case "CONTROL_ACTION_STREAM_PAUSED":
      return ControlAction.CONTROL_ACTION_STREAM_PAUSED;
    case 2:
    case "CONTROL_ACTION_STREAM_UNPAUSED":
      return ControlAction.CONTROL_ACTION_STREAM_UNPAUSED;
    case 3:
    case "CONTROL_ACTION_STREAM_ENDED":
      return ControlAction.CONTROL_ACTION_STREAM_ENDED;
    case 4:
    case "CONTROL_ACTION_STREAM_SUSPENDED":
      return ControlAction.CONTROL_ACTION_STREAM_SUSPENDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ControlAction.UNRECOGNIZED;
  }
}

export function controlActionToJSON(object: ControlAction): string {
  switch (object) {
    case ControlAction.CONTROL_ACTION_FALLBACK_UNKNOWN:
      return "CONTROL_ACTION_FALLBACK_UNKNOWN";
    case ControlAction.CONTROL_ACTION_STREAM_PAUSED:
      return "CONTROL_ACTION_STREAM_PAUSED";
    case ControlAction.CONTROL_ACTION_STREAM_UNPAUSED:
      return "CONTROL_ACTION_STREAM_UNPAUSED";
    case ControlAction.CONTROL_ACTION_STREAM_ENDED:
      return "CONTROL_ACTION_STREAM_ENDED";
    case ControlAction.CONTROL_ACTION_STREAM_SUSPENDED:
      return "CONTROL_ACTION_STREAM_SUSPENDED";
    case ControlAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkLayerMessageType {
  Linker_Unknown = 0,
  Linker_Create = 1,
  Linker_Invite = 2,
  Linker_Apply = 3,
  Linker_Permit = 4,
  Linker_Reply = 5,
  Linker_Kick_Out = 6,
  Linker_Cancel_Apply = 7,
  Linker_Cancel_Invite = 8,
  Linker_Leave = 9,
  Linker_Finish = 10,
  Linker_List_Change = 11,
  Linker_Join_Direct = 12,
  Linker_Join_Group = 13,
  Linker_Permit_Group = 14,
  Linker_Cancel_Group = 15,
  Linker_Leave_Group = 16,
  Linker_P2P_Group_Change = 17,
  Linker_Group_Change = 18,
  UNRECOGNIZED = -1,
}

export function linkLayerMessageTypeFromJSON(object: any): LinkLayerMessageType {
  switch (object) {
    case 0:
    case "Linker_Unknown":
      return LinkLayerMessageType.Linker_Unknown;
    case 1:
    case "Linker_Create":
      return LinkLayerMessageType.Linker_Create;
    case 2:
    case "Linker_Invite":
      return LinkLayerMessageType.Linker_Invite;
    case 3:
    case "Linker_Apply":
      return LinkLayerMessageType.Linker_Apply;
    case 4:
    case "Linker_Permit":
      return LinkLayerMessageType.Linker_Permit;
    case 5:
    case "Linker_Reply":
      return LinkLayerMessageType.Linker_Reply;
    case 6:
    case "Linker_Kick_Out":
      return LinkLayerMessageType.Linker_Kick_Out;
    case 7:
    case "Linker_Cancel_Apply":
      return LinkLayerMessageType.Linker_Cancel_Apply;
    case 8:
    case "Linker_Cancel_Invite":
      return LinkLayerMessageType.Linker_Cancel_Invite;
    case 9:
    case "Linker_Leave":
      return LinkLayerMessageType.Linker_Leave;
    case 10:
    case "Linker_Finish":
      return LinkLayerMessageType.Linker_Finish;
    case 11:
    case "Linker_List_Change":
      return LinkLayerMessageType.Linker_List_Change;
    case 12:
    case "Linker_Join_Direct":
      return LinkLayerMessageType.Linker_Join_Direct;
    case 13:
    case "Linker_Join_Group":
      return LinkLayerMessageType.Linker_Join_Group;
    case 14:
    case "Linker_Permit_Group":
      return LinkLayerMessageType.Linker_Permit_Group;
    case 15:
    case "Linker_Cancel_Group":
      return LinkLayerMessageType.Linker_Cancel_Group;
    case 16:
    case "Linker_Leave_Group":
      return LinkLayerMessageType.Linker_Leave_Group;
    case 17:
    case "Linker_P2P_Group_Change":
      return LinkLayerMessageType.Linker_P2P_Group_Change;
    case 18:
    case "Linker_Group_Change":
      return LinkLayerMessageType.Linker_Group_Change;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkLayerMessageType.UNRECOGNIZED;
  }
}

export function linkLayerMessageTypeToJSON(object: LinkLayerMessageType): string {
  switch (object) {
    case LinkLayerMessageType.Linker_Unknown:
      return "Linker_Unknown";
    case LinkLayerMessageType.Linker_Create:
      return "Linker_Create";
    case LinkLayerMessageType.Linker_Invite:
      return "Linker_Invite";
    case LinkLayerMessageType.Linker_Apply:
      return "Linker_Apply";
    case LinkLayerMessageType.Linker_Permit:
      return "Linker_Permit";
    case LinkLayerMessageType.Linker_Reply:
      return "Linker_Reply";
    case LinkLayerMessageType.Linker_Kick_Out:
      return "Linker_Kick_Out";
    case LinkLayerMessageType.Linker_Cancel_Apply:
      return "Linker_Cancel_Apply";
    case LinkLayerMessageType.Linker_Cancel_Invite:
      return "Linker_Cancel_Invite";
    case LinkLayerMessageType.Linker_Leave:
      return "Linker_Leave";
    case LinkLayerMessageType.Linker_Finish:
      return "Linker_Finish";
    case LinkLayerMessageType.Linker_List_Change:
      return "Linker_List_Change";
    case LinkLayerMessageType.Linker_Join_Direct:
      return "Linker_Join_Direct";
    case LinkLayerMessageType.Linker_Join_Group:
      return "Linker_Join_Group";
    case LinkLayerMessageType.Linker_Permit_Group:
      return "Linker_Permit_Group";
    case LinkLayerMessageType.Linker_Cancel_Group:
      return "Linker_Cancel_Group";
    case LinkLayerMessageType.Linker_Leave_Group:
      return "Linker_Leave_Group";
    case LinkLayerMessageType.Linker_P2P_Group_Change:
      return "Linker_P2P_Group_Change";
    case LinkLayerMessageType.Linker_Group_Change:
      return "Linker_Group_Change";
    case LinkLayerMessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BarrageType {
  BarrageType_Unknown = 0,
  EComOrdering = 1,
  EComBuying = 2,
  Normal = 3,
  Subscribe = 4,
  EventView = 5,
  EventRegistered = 6,
  SubscribeGift = 7,
  UserUpgrade = 8,
  GradeUserEntranceNotification = 9,
  FansLevelUpgrade = 10,
  FansLevelEntrance = 11,
  GamePartnership = 12,
  UNRECOGNIZED = -1,
}

export function barrageTypeFromJSON(object: any): BarrageType {
  switch (object) {
    case 0:
    case "BarrageType_Unknown":
      return BarrageType.BarrageType_Unknown;
    case 1:
    case "EComOrdering":
      return BarrageType.EComOrdering;
    case 2:
    case "EComBuying":
      return BarrageType.EComBuying;
    case 3:
    case "Normal":
      return BarrageType.Normal;
    case 4:
    case "Subscribe":
      return BarrageType.Subscribe;
    case 5:
    case "EventView":
      return BarrageType.EventView;
    case 6:
    case "EventRegistered":
      return BarrageType.EventRegistered;
    case 7:
    case "SubscribeGift":
      return BarrageType.SubscribeGift;
    case 8:
    case "UserUpgrade":
      return BarrageType.UserUpgrade;
    case 9:
    case "GradeUserEntranceNotification":
      return BarrageType.GradeUserEntranceNotification;
    case 10:
    case "FansLevelUpgrade":
      return BarrageType.FansLevelUpgrade;
    case 11:
    case "FansLevelEntrance":
      return BarrageType.FansLevelEntrance;
    case 12:
    case "GamePartnership":
      return BarrageType.GamePartnership;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BarrageType.UNRECOGNIZED;
  }
}

export function barrageTypeToJSON(object: BarrageType): string {
  switch (object) {
    case BarrageType.BarrageType_Unknown:
      return "BarrageType_Unknown";
    case BarrageType.EComOrdering:
      return "EComOrdering";
    case BarrageType.EComBuying:
      return "EComBuying";
    case BarrageType.Normal:
      return "Normal";
    case BarrageType.Subscribe:
      return "Subscribe";
    case BarrageType.EventView:
      return "EventView";
    case BarrageType.EventRegistered:
      return "EventRegistered";
    case BarrageType.SubscribeGift:
      return "SubscribeGift";
    case BarrageType.UserUpgrade:
      return "UserUpgrade";
    case BarrageType.GradeUserEntranceNotification:
      return "GradeUserEntranceNotification";
    case BarrageType.FansLevelUpgrade:
      return "FansLevelUpgrade";
    case BarrageType.FansLevelEntrance:
      return "FansLevelEntrance";
    case BarrageType.GamePartnership:
      return "GamePartnership";
    case BarrageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EnvelopeBusinessType {
  BusinessTypeUnknown = 0,
  BusinessTypeUserDiamond = 1,
  BusinessTypePlatformDiamond = 2,
  BusinessTypePlatformShell = 3,
  BusinessTypePortal = 4,
  BusinessTypePlatformMerch = 5,
  BusinessTypeEoYDiamond = 6,
  BusinessTypeFanClubGtM = 7,
  UNRECOGNIZED = -1,
}

export function envelopeBusinessTypeFromJSON(object: any): EnvelopeBusinessType {
  switch (object) {
    case 0:
    case "BusinessTypeUnknown":
      return EnvelopeBusinessType.BusinessTypeUnknown;
    case 1:
    case "BusinessTypeUserDiamond":
      return EnvelopeBusinessType.BusinessTypeUserDiamond;
    case 2:
    case "BusinessTypePlatformDiamond":
      return EnvelopeBusinessType.BusinessTypePlatformDiamond;
    case 3:
    case "BusinessTypePlatformShell":
      return EnvelopeBusinessType.BusinessTypePlatformShell;
    case 4:
    case "BusinessTypePortal":
      return EnvelopeBusinessType.BusinessTypePortal;
    case 5:
    case "BusinessTypePlatformMerch":
      return EnvelopeBusinessType.BusinessTypePlatformMerch;
    case 6:
    case "BusinessTypeEoYDiamond":
      return EnvelopeBusinessType.BusinessTypeEoYDiamond;
    case 7:
    case "BusinessTypeFanClubGtM":
      return EnvelopeBusinessType.BusinessTypeFanClubGtM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EnvelopeBusinessType.UNRECOGNIZED;
  }
}

export function envelopeBusinessTypeToJSON(object: EnvelopeBusinessType): string {
  switch (object) {
    case EnvelopeBusinessType.BusinessTypeUnknown:
      return "BusinessTypeUnknown";
    case EnvelopeBusinessType.BusinessTypeUserDiamond:
      return "BusinessTypeUserDiamond";
    case EnvelopeBusinessType.BusinessTypePlatformDiamond:
      return "BusinessTypePlatformDiamond";
    case EnvelopeBusinessType.BusinessTypePlatformShell:
      return "BusinessTypePlatformShell";
    case EnvelopeBusinessType.BusinessTypePortal:
      return "BusinessTypePortal";
    case EnvelopeBusinessType.BusinessTypePlatformMerch:
      return "BusinessTypePlatformMerch";
    case EnvelopeBusinessType.BusinessTypeEoYDiamond:
      return "BusinessTypeEoYDiamond";
    case EnvelopeBusinessType.BusinessTypeFanClubGtM:
      return "BusinessTypeFanClubGtM";
    case EnvelopeBusinessType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EnvelopeFollowShowStatus {
  ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN = 0,
  ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW = 1,
  ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW = 2,
  UNRECOGNIZED = -1,
}

export function envelopeFollowShowStatusFromJSON(object: any): EnvelopeFollowShowStatus {
  switch (object) {
    case 0:
    case "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN":
      return EnvelopeFollowShowStatus.ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN;
    case 1:
    case "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW":
      return EnvelopeFollowShowStatus.ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW;
    case 2:
    case "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW":
      return EnvelopeFollowShowStatus.ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EnvelopeFollowShowStatus.UNRECOGNIZED;
  }
}

export function envelopeFollowShowStatusToJSON(object: EnvelopeFollowShowStatus): string {
  switch (object) {
    case EnvelopeFollowShowStatus.ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN:
      return "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN";
    case EnvelopeFollowShowStatus.ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW:
      return "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW";
    case EnvelopeFollowShowStatus.ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW:
      return "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW";
    case EnvelopeFollowShowStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EnvelopeDisplay {
  ENVELOPE_DISPLAY_UNKNOWN = 0,
  ENVELOPE_DISPLAY_NEW = 1,
  ENVELOPE_DISPLAY_HIDE = 2,
  UNRECOGNIZED = -1,
}

export function envelopeDisplayFromJSON(object: any): EnvelopeDisplay {
  switch (object) {
    case 0:
    case "ENVELOPE_DISPLAY_UNKNOWN":
      return EnvelopeDisplay.ENVELOPE_DISPLAY_UNKNOWN;
    case 1:
    case "ENVELOPE_DISPLAY_NEW":
      return EnvelopeDisplay.ENVELOPE_DISPLAY_NEW;
    case 2:
    case "ENVELOPE_DISPLAY_HIDE":
      return EnvelopeDisplay.ENVELOPE_DISPLAY_HIDE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EnvelopeDisplay.UNRECOGNIZED;
  }
}

export function envelopeDisplayToJSON(object: EnvelopeDisplay): string {
  switch (object) {
    case EnvelopeDisplay.ENVELOPE_DISPLAY_UNKNOWN:
      return "ENVELOPE_DISPLAY_UNKNOWN";
    case EnvelopeDisplay.ENVELOPE_DISPLAY_NEW:
      return "ENVELOPE_DISPLAY_NEW";
    case EnvelopeDisplay.ENVELOPE_DISPLAY_HIDE:
      return "ENVELOPE_DISPLAY_HIDE";
    case EnvelopeDisplay.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CommonContentCase {
  COMMON_CONTENT_NOT_SET = 0,
  CREATE_CHANNEL_CONTENT = 100,
  LIST_CHANGE_CONTENT = 102,
  INVITE_CONTENT = 103,
  APPLY_CONTENT = 104,
  PERMIT_APPLY_CONTENT = 105,
  REPLY_INVITE_CONTENT = 106,
  KICK_OUT_CONTENT = 107,
  CANCEL_APPLY_CONTENT = 108,
  CANCEL_INVITE_CONTENT = 109,
  LEAVE_CONTENT = 110,
  FINISH_CONTENT = 111,
  JOIN_DIRECT_CONTENT = 112,
  JOIN_GROUP_CONTENT = 113,
  PERMIT_GROUP_CONTENT = 114,
  CANCEL_GROUP_CONTENT = 115,
  LEAVE_GROUP_CONTENT = 116,
  P2P_GROUP_CHANGE_CONTENT = 117,
  GROUP_CHANGE_CONTENT = 118,
  UNRECOGNIZED = -1,
}

export function commonContentCaseFromJSON(object: any): CommonContentCase {
  switch (object) {
    case 0:
    case "COMMON_CONTENT_NOT_SET":
      return CommonContentCase.COMMON_CONTENT_NOT_SET;
    case 100:
    case "CREATE_CHANNEL_CONTENT":
      return CommonContentCase.CREATE_CHANNEL_CONTENT;
    case 102:
    case "LIST_CHANGE_CONTENT":
      return CommonContentCase.LIST_CHANGE_CONTENT;
    case 103:
    case "INVITE_CONTENT":
      return CommonContentCase.INVITE_CONTENT;
    case 104:
    case "APPLY_CONTENT":
      return CommonContentCase.APPLY_CONTENT;
    case 105:
    case "PERMIT_APPLY_CONTENT":
      return CommonContentCase.PERMIT_APPLY_CONTENT;
    case 106:
    case "REPLY_INVITE_CONTENT":
      return CommonContentCase.REPLY_INVITE_CONTENT;
    case 107:
    case "KICK_OUT_CONTENT":
      return CommonContentCase.KICK_OUT_CONTENT;
    case 108:
    case "CANCEL_APPLY_CONTENT":
      return CommonContentCase.CANCEL_APPLY_CONTENT;
    case 109:
    case "CANCEL_INVITE_CONTENT":
      return CommonContentCase.CANCEL_INVITE_CONTENT;
    case 110:
    case "LEAVE_CONTENT":
      return CommonContentCase.LEAVE_CONTENT;
    case 111:
    case "FINISH_CONTENT":
      return CommonContentCase.FINISH_CONTENT;
    case 112:
    case "JOIN_DIRECT_CONTENT":
      return CommonContentCase.JOIN_DIRECT_CONTENT;
    case 113:
    case "JOIN_GROUP_CONTENT":
      return CommonContentCase.JOIN_GROUP_CONTENT;
    case 114:
    case "PERMIT_GROUP_CONTENT":
      return CommonContentCase.PERMIT_GROUP_CONTENT;
    case 115:
    case "CANCEL_GROUP_CONTENT":
      return CommonContentCase.CANCEL_GROUP_CONTENT;
    case 116:
    case "LEAVE_GROUP_CONTENT":
      return CommonContentCase.LEAVE_GROUP_CONTENT;
    case 117:
    case "P2P_GROUP_CHANGE_CONTENT":
      return CommonContentCase.P2P_GROUP_CHANGE_CONTENT;
    case 118:
    case "GROUP_CHANGE_CONTENT":
      return CommonContentCase.GROUP_CHANGE_CONTENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommonContentCase.UNRECOGNIZED;
  }
}

export function commonContentCaseToJSON(object: CommonContentCase): string {
  switch (object) {
    case CommonContentCase.COMMON_CONTENT_NOT_SET:
      return "COMMON_CONTENT_NOT_SET";
    case CommonContentCase.CREATE_CHANNEL_CONTENT:
      return "CREATE_CHANNEL_CONTENT";
    case CommonContentCase.LIST_CHANGE_CONTENT:
      return "LIST_CHANGE_CONTENT";
    case CommonContentCase.INVITE_CONTENT:
      return "INVITE_CONTENT";
    case CommonContentCase.APPLY_CONTENT:
      return "APPLY_CONTENT";
    case CommonContentCase.PERMIT_APPLY_CONTENT:
      return "PERMIT_APPLY_CONTENT";
    case CommonContentCase.REPLY_INVITE_CONTENT:
      return "REPLY_INVITE_CONTENT";
    case CommonContentCase.KICK_OUT_CONTENT:
      return "KICK_OUT_CONTENT";
    case CommonContentCase.CANCEL_APPLY_CONTENT:
      return "CANCEL_APPLY_CONTENT";
    case CommonContentCase.CANCEL_INVITE_CONTENT:
      return "CANCEL_INVITE_CONTENT";
    case CommonContentCase.LEAVE_CONTENT:
      return "LEAVE_CONTENT";
    case CommonContentCase.FINISH_CONTENT:
      return "FINISH_CONTENT";
    case CommonContentCase.JOIN_DIRECT_CONTENT:
      return "JOIN_DIRECT_CONTENT";
    case CommonContentCase.JOIN_GROUP_CONTENT:
      return "JOIN_GROUP_CONTENT";
    case CommonContentCase.PERMIT_GROUP_CONTENT:
      return "PERMIT_GROUP_CONTENT";
    case CommonContentCase.CANCEL_GROUP_CONTENT:
      return "CANCEL_GROUP_CONTENT";
    case CommonContentCase.LEAVE_GROUP_CONTENT:
      return "LEAVE_GROUP_CONTENT";
    case CommonContentCase.P2P_GROUP_CHANGE_CONTENT:
      return "P2P_GROUP_CHANGE_CONTENT";
    case CommonContentCase.GROUP_CHANGE_CONTENT:
      return "GROUP_CHANGE_CONTENT";
    case CommonContentCase.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkMessageType {
  TYPE_LINKER_UNKNOWN = 0,
  TYPE_LINKER_CREATE = 1,
  TYPE_LINKER_CLOSE = 2,
  TYPE_LINKER_INVITE = 3,
  TYPE_LINKER_APPLY = 4,
  TYPE_LINKER_REPLY = 5,
  TYPE_LINKER_ENTER = 6,
  TYPE_LINKER_LEAVE = 7,
  TYPE_LINKER_PERMIT = 8,
  TYPE_LINKER_CANCEL_INVITE = 9,
  TYPE_LINKER_WAITING_LIST_CHANGE = 10,
  TYPE_LINKER_LINKED_LIST_CHANGE = 11,
  TYPE_LINKER_UPDATE_USER = 12,
  TYPE_LINKER_KICK_OUT = 13,
  TYPE_LINKER_CANCEL_APPLY = 14,
  TYPE_LINKER_MUTE = 15,
  TYPE_LINKER_MATCH = 16,
  TYPE_LINKER_UPDATE_USER_SETTING = 17,
  TYPE_LINKER_MIC_IDX_UPDATE = 18,
  TYPE_LINKER_LEAVE_V2 = 19,
  TYPE_LINKER_WAITING_LIST_CHANGE_V2 = 20,
  TYPE_LINKER_LINKED_LIST_CHANGE_V2 = 21,
  TYPE_LINKER_COHOST_LIST_CHANGE = 22,
  TYPE_LINKER_MEDIA_CHANGE = 23,
  TYPE_LINKER_ACCEPT_NOTICE = 24,
  TYPE_LINKER_SYS_KICK_OUT = 101,
  TYPE_LINKMIC_USER_TOAST = 102,
  UNRECOGNIZED = -1,
}

export function linkMessageTypeFromJSON(object: any): LinkMessageType {
  switch (object) {
    case 0:
    case "TYPE_LINKER_UNKNOWN":
      return LinkMessageType.TYPE_LINKER_UNKNOWN;
    case 1:
    case "TYPE_LINKER_CREATE":
      return LinkMessageType.TYPE_LINKER_CREATE;
    case 2:
    case "TYPE_LINKER_CLOSE":
      return LinkMessageType.TYPE_LINKER_CLOSE;
    case 3:
    case "TYPE_LINKER_INVITE":
      return LinkMessageType.TYPE_LINKER_INVITE;
    case 4:
    case "TYPE_LINKER_APPLY":
      return LinkMessageType.TYPE_LINKER_APPLY;
    case 5:
    case "TYPE_LINKER_REPLY":
      return LinkMessageType.TYPE_LINKER_REPLY;
    case 6:
    case "TYPE_LINKER_ENTER":
      return LinkMessageType.TYPE_LINKER_ENTER;
    case 7:
    case "TYPE_LINKER_LEAVE":
      return LinkMessageType.TYPE_LINKER_LEAVE;
    case 8:
    case "TYPE_LINKER_PERMIT":
      return LinkMessageType.TYPE_LINKER_PERMIT;
    case 9:
    case "TYPE_LINKER_CANCEL_INVITE":
      return LinkMessageType.TYPE_LINKER_CANCEL_INVITE;
    case 10:
    case "TYPE_LINKER_WAITING_LIST_CHANGE":
      return LinkMessageType.TYPE_LINKER_WAITING_LIST_CHANGE;
    case 11:
    case "TYPE_LINKER_LINKED_LIST_CHANGE":
      return LinkMessageType.TYPE_LINKER_LINKED_LIST_CHANGE;
    case 12:
    case "TYPE_LINKER_UPDATE_USER":
      return LinkMessageType.TYPE_LINKER_UPDATE_USER;
    case 13:
    case "TYPE_LINKER_KICK_OUT":
      return LinkMessageType.TYPE_LINKER_KICK_OUT;
    case 14:
    case "TYPE_LINKER_CANCEL_APPLY":
      return LinkMessageType.TYPE_LINKER_CANCEL_APPLY;
    case 15:
    case "TYPE_LINKER_MUTE":
      return LinkMessageType.TYPE_LINKER_MUTE;
    case 16:
    case "TYPE_LINKER_MATCH":
      return LinkMessageType.TYPE_LINKER_MATCH;
    case 17:
    case "TYPE_LINKER_UPDATE_USER_SETTING":
      return LinkMessageType.TYPE_LINKER_UPDATE_USER_SETTING;
    case 18:
    case "TYPE_LINKER_MIC_IDX_UPDATE":
      return LinkMessageType.TYPE_LINKER_MIC_IDX_UPDATE;
    case 19:
    case "TYPE_LINKER_LEAVE_V2":
      return LinkMessageType.TYPE_LINKER_LEAVE_V2;
    case 20:
    case "TYPE_LINKER_WAITING_LIST_CHANGE_V2":
      return LinkMessageType.TYPE_LINKER_WAITING_LIST_CHANGE_V2;
    case 21:
    case "TYPE_LINKER_LINKED_LIST_CHANGE_V2":
      return LinkMessageType.TYPE_LINKER_LINKED_LIST_CHANGE_V2;
    case 22:
    case "TYPE_LINKER_COHOST_LIST_CHANGE":
      return LinkMessageType.TYPE_LINKER_COHOST_LIST_CHANGE;
    case 23:
    case "TYPE_LINKER_MEDIA_CHANGE":
      return LinkMessageType.TYPE_LINKER_MEDIA_CHANGE;
    case 24:
    case "TYPE_LINKER_ACCEPT_NOTICE":
      return LinkMessageType.TYPE_LINKER_ACCEPT_NOTICE;
    case 101:
    case "TYPE_LINKER_SYS_KICK_OUT":
      return LinkMessageType.TYPE_LINKER_SYS_KICK_OUT;
    case 102:
    case "TYPE_LINKMIC_USER_TOAST":
      return LinkMessageType.TYPE_LINKMIC_USER_TOAST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkMessageType.UNRECOGNIZED;
  }
}

export function linkMessageTypeToJSON(object: LinkMessageType): string {
  switch (object) {
    case LinkMessageType.TYPE_LINKER_UNKNOWN:
      return "TYPE_LINKER_UNKNOWN";
    case LinkMessageType.TYPE_LINKER_CREATE:
      return "TYPE_LINKER_CREATE";
    case LinkMessageType.TYPE_LINKER_CLOSE:
      return "TYPE_LINKER_CLOSE";
    case LinkMessageType.TYPE_LINKER_INVITE:
      return "TYPE_LINKER_INVITE";
    case LinkMessageType.TYPE_LINKER_APPLY:
      return "TYPE_LINKER_APPLY";
    case LinkMessageType.TYPE_LINKER_REPLY:
      return "TYPE_LINKER_REPLY";
    case LinkMessageType.TYPE_LINKER_ENTER:
      return "TYPE_LINKER_ENTER";
    case LinkMessageType.TYPE_LINKER_LEAVE:
      return "TYPE_LINKER_LEAVE";
    case LinkMessageType.TYPE_LINKER_PERMIT:
      return "TYPE_LINKER_PERMIT";
    case LinkMessageType.TYPE_LINKER_CANCEL_INVITE:
      return "TYPE_LINKER_CANCEL_INVITE";
    case LinkMessageType.TYPE_LINKER_WAITING_LIST_CHANGE:
      return "TYPE_LINKER_WAITING_LIST_CHANGE";
    case LinkMessageType.TYPE_LINKER_LINKED_LIST_CHANGE:
      return "TYPE_LINKER_LINKED_LIST_CHANGE";
    case LinkMessageType.TYPE_LINKER_UPDATE_USER:
      return "TYPE_LINKER_UPDATE_USER";
    case LinkMessageType.TYPE_LINKER_KICK_OUT:
      return "TYPE_LINKER_KICK_OUT";
    case LinkMessageType.TYPE_LINKER_CANCEL_APPLY:
      return "TYPE_LINKER_CANCEL_APPLY";
    case LinkMessageType.TYPE_LINKER_MUTE:
      return "TYPE_LINKER_MUTE";
    case LinkMessageType.TYPE_LINKER_MATCH:
      return "TYPE_LINKER_MATCH";
    case LinkMessageType.TYPE_LINKER_UPDATE_USER_SETTING:
      return "TYPE_LINKER_UPDATE_USER_SETTING";
    case LinkMessageType.TYPE_LINKER_MIC_IDX_UPDATE:
      return "TYPE_LINKER_MIC_IDX_UPDATE";
    case LinkMessageType.TYPE_LINKER_LEAVE_V2:
      return "TYPE_LINKER_LEAVE_V2";
    case LinkMessageType.TYPE_LINKER_WAITING_LIST_CHANGE_V2:
      return "TYPE_LINKER_WAITING_LIST_CHANGE_V2";
    case LinkMessageType.TYPE_LINKER_LINKED_LIST_CHANGE_V2:
      return "TYPE_LINKER_LINKED_LIST_CHANGE_V2";
    case LinkMessageType.TYPE_LINKER_COHOST_LIST_CHANGE:
      return "TYPE_LINKER_COHOST_LIST_CHANGE";
    case LinkMessageType.TYPE_LINKER_MEDIA_CHANGE:
      return "TYPE_LINKER_MEDIA_CHANGE";
    case LinkMessageType.TYPE_LINKER_ACCEPT_NOTICE:
      return "TYPE_LINKER_ACCEPT_NOTICE";
    case LinkMessageType.TYPE_LINKER_SYS_KICK_OUT:
      return "TYPE_LINKER_SYS_KICK_OUT";
    case LinkMessageType.TYPE_LINKMIC_USER_TOAST:
      return "TYPE_LINKMIC_USER_TOAST";
    case LinkMessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MessageType {
  MESSAGE_TYPE_SUB_SUCCESS = 0,
  MESSAGE_TYPE_ANCHOR_REMINDER = 1,
  MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON = 2,
  MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR = 3,
  MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE = 4,
  MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR = 5,
  MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE = 6,
  MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE = 7,
  MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE = 8,
  MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE = 9,
  MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE = 10,
  MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE = 11,
  MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE = 12,
  MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE = 13,
  MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK = 14,
  UNRECOGNIZED = -1,
}

export function messageTypeFromJSON(object: any): MessageType {
  switch (object) {
    case 0:
    case "MESSAGE_TYPE_SUB_SUCCESS":
      return MessageType.MESSAGE_TYPE_SUB_SUCCESS;
    case 1:
    case "MESSAGE_TYPE_ANCHOR_REMINDER":
      return MessageType.MESSAGE_TYPE_ANCHOR_REMINDER;
    case 2:
    case "MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON":
      return MessageType.MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON;
    case 3:
    case "MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR":
      return MessageType.MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR;
    case 4:
    case "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE":
      return MessageType.MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE;
    case 5:
    case "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR":
      return MessageType.MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR;
    case 6:
    case "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE":
      return MessageType.MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE;
    case 7:
    case "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE":
      return MessageType.MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE;
    case 8:
    case "MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE":
      return MessageType.MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE;
    case 9:
    case "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE":
      return MessageType.MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE;
    case 10:
    case "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE":
      return MessageType.MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE;
    case 11:
    case "MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE":
      return MessageType.MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE;
    case 12:
    case "MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE":
      return MessageType.MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE;
    case 13:
    case "MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE":
      return MessageType.MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE;
    case 14:
    case "MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK":
      return MessageType.MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageType.UNRECOGNIZED;
  }
}

export function messageTypeToJSON(object: MessageType): string {
  switch (object) {
    case MessageType.MESSAGE_TYPE_SUB_SUCCESS:
      return "MESSAGE_TYPE_SUB_SUCCESS";
    case MessageType.MESSAGE_TYPE_ANCHOR_REMINDER:
      return "MESSAGE_TYPE_ANCHOR_REMINDER";
    case MessageType.MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON:
      return "MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON";
    case MessageType.MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR:
      return "MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR";
    case MessageType.MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE:
      return "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE";
    case MessageType.MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR:
      return "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR";
    case MessageType.MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE:
      return "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE";
    case MessageType.MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE:
      return "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE";
    case MessageType.MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE:
      return "MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE";
    case MessageType.MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE:
      return "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE";
    case MessageType.MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE:
      return "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE";
    case MessageType.MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE:
      return "MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE";
    case MessageType.MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE:
      return "MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE";
    case MessageType.MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE:
      return "MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE";
    case MessageType.MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK:
      return "MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK";
    case MessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Scene {
  SCENE_UNKNOWN = 0,
  SCENE_CO_HOST = 2,
  SCENE_MULTI_LIVE = 4,
  UNRECOGNIZED = -1,
}

export function sceneFromJSON(object: any): Scene {
  switch (object) {
    case 0:
    case "SCENE_UNKNOWN":
      return Scene.SCENE_UNKNOWN;
    case 2:
    case "SCENE_CO_HOST":
      return Scene.SCENE_CO_HOST;
    case 4:
    case "SCENE_MULTI_LIVE":
      return Scene.SCENE_MULTI_LIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Scene.UNRECOGNIZED;
  }
}

export function sceneToJSON(object: Scene): string {
  switch (object) {
    case Scene.SCENE_UNKNOWN:
      return "SCENE_UNKNOWN";
    case Scene.SCENE_CO_HOST:
      return "SCENE_CO_HOST";
    case Scene.SCENE_MULTI_LIVE:
      return "SCENE_MULTI_LIVE";
    case Scene.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum RewardCondition {
  REWARD_CONDITION_SUBSCRIPTION = 0,
  REWARD_CONDITION_SUB_WAVE_CUSTOM = 1,
  UNRECOGNIZED = -1,
}

export function rewardConditionFromJSON(object: any): RewardCondition {
  switch (object) {
    case 0:
    case "REWARD_CONDITION_SUBSCRIPTION":
      return RewardCondition.REWARD_CONDITION_SUBSCRIPTION;
    case 1:
    case "REWARD_CONDITION_SUB_WAVE_CUSTOM":
      return RewardCondition.REWARD_CONDITION_SUB_WAVE_CUSTOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RewardCondition.UNRECOGNIZED;
  }
}

export function rewardConditionToJSON(object: RewardCondition): string {
  switch (object) {
    case RewardCondition.REWARD_CONDITION_SUBSCRIPTION:
      return "REWARD_CONDITION_SUBSCRIPTION";
    case RewardCondition.REWARD_CONDITION_SUB_WAVE_CUSTOM:
      return "REWARD_CONDITION_SUB_WAVE_CUSTOM";
    case RewardCondition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UserEmoteUploadSource {
  USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0,
  USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1,
  USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2,
  UNRECOGNIZED = -1,
}

export function userEmoteUploadSourceFromJSON(object: any): UserEmoteUploadSource {
  switch (object) {
    case 0:
    case "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR":
      return UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR;
    case 1:
    case "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER":
      return UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER;
    case 2:
    case "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR":
      return UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserEmoteUploadSource.UNRECOGNIZED;
  }
}

export function userEmoteUploadSourceToJSON(object: UserEmoteUploadSource): string {
  switch (object) {
    case UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR:
      return "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR";
    case UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER:
      return "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER";
    case UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR:
      return "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR";
    case UserEmoteUploadSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EmoteScene {
  EMOTE_SCENE_SUBSCRIPTION = 0,
  EMOTE_SCENE_GAME = 1,
  UNRECOGNIZED = -1,
}

export function emoteSceneFromJSON(object: any): EmoteScene {
  switch (object) {
    case 0:
    case "EMOTE_SCENE_SUBSCRIPTION":
      return EmoteScene.EMOTE_SCENE_SUBSCRIPTION;
    case 1:
    case "EMOTE_SCENE_GAME":
      return EmoteScene.EMOTE_SCENE_GAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EmoteScene.UNRECOGNIZED;
  }
}

export function emoteSceneToJSON(object: EmoteScene): string {
  switch (object) {
    case EmoteScene.EMOTE_SCENE_SUBSCRIPTION:
      return "EMOTE_SCENE_SUBSCRIPTION";
    case EmoteScene.EMOTE_SCENE_GAME:
      return "EMOTE_SCENE_GAME";
    case EmoteScene.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PunishTypeId {
  PUNISH_TYPE_IDUN_KNOWN = 0,
  PUNISH_TYPE_ID_BAN_LINK_MIC = 9,
  PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP = 25,
  PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP = 26,
  PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC = 55,
  PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH = 57,
  PUNISH_TYPE_ID_BAN_VOICE_CHAT = 59,
  PUNISH_TYPE_ID_BAN_LIVE_GOAL = 64,
  PUNISH_TYPE_ID_VIEWER_LIMIT = 70,
  UNRECOGNIZED = -1,
}

export function punishTypeIdFromJSON(object: any): PunishTypeId {
  switch (object) {
    case 0:
    case "PUNISH_TYPE_IDUN_KNOWN":
      return PunishTypeId.PUNISH_TYPE_IDUN_KNOWN;
    case 9:
    case "PUNISH_TYPE_ID_BAN_LINK_MIC":
      return PunishTypeId.PUNISH_TYPE_ID_BAN_LINK_MIC;
    case 25:
    case "PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP":
      return PunishTypeId.PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP;
    case 26:
    case "PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP":
      return PunishTypeId.PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP;
    case 55:
    case "PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC":
      return PunishTypeId.PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC;
    case 57:
    case "PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH":
      return PunishTypeId.PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH;
    case 59:
    case "PUNISH_TYPE_ID_BAN_VOICE_CHAT":
      return PunishTypeId.PUNISH_TYPE_ID_BAN_VOICE_CHAT;
    case 64:
    case "PUNISH_TYPE_ID_BAN_LIVE_GOAL":
      return PunishTypeId.PUNISH_TYPE_ID_BAN_LIVE_GOAL;
    case 70:
    case "PUNISH_TYPE_ID_VIEWER_LIMIT":
      return PunishTypeId.PUNISH_TYPE_ID_VIEWER_LIMIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PunishTypeId.UNRECOGNIZED;
  }
}

export function punishTypeIdToJSON(object: PunishTypeId): string {
  switch (object) {
    case PunishTypeId.PUNISH_TYPE_IDUN_KNOWN:
      return "PUNISH_TYPE_IDUN_KNOWN";
    case PunishTypeId.PUNISH_TYPE_ID_BAN_LINK_MIC:
      return "PUNISH_TYPE_ID_BAN_LINK_MIC";
    case PunishTypeId.PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP:
      return "PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP";
    case PunishTypeId.PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP:
      return "PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP";
    case PunishTypeId.PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC:
      return "PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC";
    case PunishTypeId.PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH:
      return "PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH";
    case PunishTypeId.PUNISH_TYPE_ID_BAN_VOICE_CHAT:
      return "PUNISH_TYPE_ID_BAN_VOICE_CHAT";
    case PunishTypeId.PUNISH_TYPE_ID_BAN_LIVE_GOAL:
      return "PUNISH_TYPE_ID_BAN_LIVE_GOAL";
    case PunishTypeId.PUNISH_TYPE_ID_VIEWER_LIMIT:
      return "PUNISH_TYPE_ID_VIEWER_LIMIT";
    case PunishTypeId.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MultiplierType {
  MULTIPLIER_TYPE_UNSPECIFIED = 0,
  MULTIPLIER_TYPE_CRITICAL_STRIKE = 1,
  MULTIPLIER_TYPE_TOP_2 = 2,
  MULTIPLIER_TYPE_TOP_3 = 3,
  UNRECOGNIZED = -1,
}

export function multiplierTypeFromJSON(object: any): MultiplierType {
  switch (object) {
    case 0:
    case "MULTIPLIER_TYPE_UNSPECIFIED":
      return MultiplierType.MULTIPLIER_TYPE_UNSPECIFIED;
    case 1:
    case "MULTIPLIER_TYPE_CRITICAL_STRIKE":
      return MultiplierType.MULTIPLIER_TYPE_CRITICAL_STRIKE;
    case 2:
    case "MULTIPLIER_TYPE_TOP_2":
      return MultiplierType.MULTIPLIER_TYPE_TOP_2;
    case 3:
    case "MULTIPLIER_TYPE_TOP_3":
      return MultiplierType.MULTIPLIER_TYPE_TOP_3;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MultiplierType.UNRECOGNIZED;
  }
}

export function multiplierTypeToJSON(object: MultiplierType): string {
  switch (object) {
    case MultiplierType.MULTIPLIER_TYPE_UNSPECIFIED:
      return "MULTIPLIER_TYPE_UNSPECIFIED";
    case MultiplierType.MULTIPLIER_TYPE_CRITICAL_STRIKE:
      return "MULTIPLIER_TYPE_CRITICAL_STRIKE";
    case MultiplierType.MULTIPLIER_TYPE_TOP_2:
      return "MULTIPLIER_TYPE_TOP_2";
    case MultiplierType.MULTIPLIER_TYPE_TOP_3:
      return "MULTIPLIER_TYPE_TOP_3";
    case MultiplierType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkmicGiftExpressionStrategy {
  LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1 = 0,
  LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1 = 1,
  LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2 = 2,
  UNRECOGNIZED = -1,
}

export function linkmicGiftExpressionStrategyFromJSON(object: any): LinkmicGiftExpressionStrategy {
  switch (object) {
    case 0:
    case "LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1":
      return LinkmicGiftExpressionStrategy.LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1;
    case 1:
    case "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1":
      return LinkmicGiftExpressionStrategy.LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1;
    case 2:
    case "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2":
      return LinkmicGiftExpressionStrategy.LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkmicGiftExpressionStrategy.UNRECOGNIZED;
  }
}

export function linkmicGiftExpressionStrategyToJSON(object: LinkmicGiftExpressionStrategy): string {
  switch (object) {
    case LinkmicGiftExpressionStrategy.LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1:
      return "LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1";
    case LinkmicGiftExpressionStrategy.LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1:
      return "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1";
    case LinkmicGiftExpressionStrategy.LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2:
      return "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2";
    case LinkmicGiftExpressionStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GiftMessageVersion {
  GIFT_MESSAGE_VERSION_0 = 0,
  GIFT_MESSAGE_VERSION_1 = 1,
  UNRECOGNIZED = -1,
}

export function giftMessageVersionFromJSON(object: any): GiftMessageVersion {
  switch (object) {
    case 0:
    case "GIFT_MESSAGE_VERSION_0":
      return GiftMessageVersion.GIFT_MESSAGE_VERSION_0;
    case 1:
    case "GIFT_MESSAGE_VERSION_1":
      return GiftMessageVersion.GIFT_MESSAGE_VERSION_1;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GiftMessageVersion.UNRECOGNIZED;
  }
}

export function giftMessageVersionToJSON(object: GiftMessageVersion): string {
  switch (object) {
    case GiftMessageVersion.GIFT_MESSAGE_VERSION_0:
      return "GIFT_MESSAGE_VERSION_0";
    case GiftMessageVersion.GIFT_MESSAGE_VERSION_1:
      return "GIFT_MESSAGE_VERSION_1";
    case GiftMessageVersion.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TagType {
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN = 0,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE = 1,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL = 2,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO = 3,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM = 4,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT = 5,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM = 6,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS = 7,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM = 8,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM = 9,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM = 10,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM = 11,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT = 12,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY = 13,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP = 14,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME = 15,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM = 16,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE = 17,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT = 18,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES = 19,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION = 20,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT = 21,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP = 22,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE = 28,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION = 29,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM = 30,
  TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM = 31,
  UNRECOGNIZED = -1,
}

export function tagTypeFromJSON(object: any): TagType {
  switch (object) {
    case 0:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN;
    case 1:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE;
    case 2:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL;
    case 3:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO;
    case 4:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM;
    case 5:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT;
    case 6:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM;
    case 7:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS;
    case 8:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM;
    case 9:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM;
    case 10:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM;
    case 11:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM;
    case 12:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT;
    case 13:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY;
    case 14:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP;
    case 15:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME;
    case 16:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM;
    case 17:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE;
    case 18:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT;
    case 19:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES;
    case 20:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION;
    case 21:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT;
    case 22:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP;
    case 28:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE;
    case 29:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION;
    case 30:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM;
    case 31:
    case "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM":
      return TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TagType.UNRECOGNIZED;
  }
}

export function tagTypeToJSON(object: TagType): string {
  switch (object) {
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM";
    case TagType.TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM:
      return "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM";
    case TagType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TopicActionType {
  TOPIC_ACTION_TYPE_UNKNOWN = 0,
  TOPIC_ACTION_TYPE_FOLLOW = 1,
  UNRECOGNIZED = -1,
}

export function topicActionTypeFromJSON(object: any): TopicActionType {
  switch (object) {
    case 0:
    case "TOPIC_ACTION_TYPE_UNKNOWN":
      return TopicActionType.TOPIC_ACTION_TYPE_UNKNOWN;
    case 1:
    case "TOPIC_ACTION_TYPE_FOLLOW":
      return TopicActionType.TOPIC_ACTION_TYPE_FOLLOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TopicActionType.UNRECOGNIZED;
  }
}

export function topicActionTypeToJSON(object: TopicActionType): string {
  switch (object) {
    case TopicActionType.TOPIC_ACTION_TYPE_UNKNOWN:
      return "TOPIC_ACTION_TYPE_UNKNOWN";
    case TopicActionType.TOPIC_ACTION_TYPE_FOLLOW:
      return "TOPIC_ACTION_TYPE_FOLLOW";
    case TopicActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UserMetricsType {
  USER_METRICS_TYPE_UNKNOWN = 0,
  USER_METRICS_TYPE_GRADE = 1,
  USER_METRICS_TYPE_SUBSCRIBE = 2,
  USER_METRICS_TYPE_FOLLOW = 3,
  USER_METRICS_TYPE_FANS_CLUB = 4,
  USER_METRICS_TYPE_TOP_VIEWER = 5,
  USER_METRICS_TYPE_GIFT = 6,
  UNRECOGNIZED = -1,
}

export function userMetricsTypeFromJSON(object: any): UserMetricsType {
  switch (object) {
    case 0:
    case "USER_METRICS_TYPE_UNKNOWN":
      return UserMetricsType.USER_METRICS_TYPE_UNKNOWN;
    case 1:
    case "USER_METRICS_TYPE_GRADE":
      return UserMetricsType.USER_METRICS_TYPE_GRADE;
    case 2:
    case "USER_METRICS_TYPE_SUBSCRIBE":
      return UserMetricsType.USER_METRICS_TYPE_SUBSCRIBE;
    case 3:
    case "USER_METRICS_TYPE_FOLLOW":
      return UserMetricsType.USER_METRICS_TYPE_FOLLOW;
    case 4:
    case "USER_METRICS_TYPE_FANS_CLUB":
      return UserMetricsType.USER_METRICS_TYPE_FANS_CLUB;
    case 5:
    case "USER_METRICS_TYPE_TOP_VIEWER":
      return UserMetricsType.USER_METRICS_TYPE_TOP_VIEWER;
    case 6:
    case "USER_METRICS_TYPE_GIFT":
      return UserMetricsType.USER_METRICS_TYPE_GIFT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserMetricsType.UNRECOGNIZED;
  }
}

export function userMetricsTypeToJSON(object: UserMetricsType): string {
  switch (object) {
    case UserMetricsType.USER_METRICS_TYPE_UNKNOWN:
      return "USER_METRICS_TYPE_UNKNOWN";
    case UserMetricsType.USER_METRICS_TYPE_GRADE:
      return "USER_METRICS_TYPE_GRADE";
    case UserMetricsType.USER_METRICS_TYPE_SUBSCRIBE:
      return "USER_METRICS_TYPE_SUBSCRIBE";
    case UserMetricsType.USER_METRICS_TYPE_FOLLOW:
      return "USER_METRICS_TYPE_FOLLOW";
    case UserMetricsType.USER_METRICS_TYPE_FANS_CLUB:
      return "USER_METRICS_TYPE_FANS_CLUB";
    case UserMetricsType.USER_METRICS_TYPE_TOP_VIEWER:
      return "USER_METRICS_TYPE_TOP_VIEWER";
    case UserMetricsType.USER_METRICS_TYPE_GIFT:
      return "USER_METRICS_TYPE_GIFT";
    case UserMetricsType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GiftMessageIgnoreConfig {
  GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE = 0,
  GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY = 1,
  GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M = 2,
  GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M = 3,
  UNRECOGNIZED = -1,
}

export function giftMessageIgnoreConfigFromJSON(object: any): GiftMessageIgnoreConfig {
  switch (object) {
    case 0:
    case "GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE":
      return GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE;
    case 1:
    case "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY":
      return GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY;
    case 2:
    case "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M":
      return GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M;
    case 3:
    case "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M":
      return GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GiftMessageIgnoreConfig.UNRECOGNIZED;
  }
}

export function giftMessageIgnoreConfigToJSON(object: GiftMessageIgnoreConfig): string {
  switch (object) {
    case GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE:
      return "GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE";
    case GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY:
      return "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY";
    case GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M:
      return "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M";
    case GiftMessageIgnoreConfig.GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M:
      return "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M";
    case GiftMessageIgnoreConfig.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HorizontalOnclickTriggerType {
  HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN = 0,
  HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT = 1,
  HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE = 2,
  HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT = 3,
  HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA = 4,
  UNRECOGNIZED = -1,
}

export function horizontalOnclickTriggerTypeFromJSON(object: any): HorizontalOnclickTriggerType {
  switch (object) {
    case 0:
    case "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN":
      return HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN;
    case 1:
    case "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT":
      return HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT;
    case 2:
    case "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE":
      return HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE;
    case 3:
    case "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT":
      return HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT;
    case 4:
    case "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA":
      return HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HorizontalOnclickTriggerType.UNRECOGNIZED;
  }
}

export function horizontalOnclickTriggerTypeToJSON(object: HorizontalOnclickTriggerType): string {
  switch (object) {
    case HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN:
      return "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN";
    case HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT:
      return "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT";
    case HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE:
      return "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE";
    case HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT:
      return "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT";
    case HorizontalOnclickTriggerType.HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA:
      return "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA";
    case HorizontalOnclickTriggerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ShowType {
  SHOW_TYPE_NORMAL = 0,
  SHOW_TYPE_FADE_IN_OUT = 1,
  UNRECOGNIZED = -1,
}

export function showTypeFromJSON(object: any): ShowType {
  switch (object) {
    case 0:
    case "SHOW_TYPE_NORMAL":
      return ShowType.SHOW_TYPE_NORMAL;
    case 1:
    case "SHOW_TYPE_FADE_IN_OUT":
      return ShowType.SHOW_TYPE_FADE_IN_OUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ShowType.UNRECOGNIZED;
  }
}

export function showTypeToJSON(object: ShowType): string {
  switch (object) {
    case ShowType.SHOW_TYPE_NORMAL:
      return "SHOW_TYPE_NORMAL";
    case ShowType.SHOW_TYPE_FADE_IN_OUT:
      return "SHOW_TYPE_FADE_IN_OUT";
    case ShowType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum RenderType {
  RENDER_TYPE_NATIVE = 0,
  RENDER_TYPE_HYBRID = 1,
  RENDER_TYPE_ALPHA = 2,
  UNRECOGNIZED = -1,
}

export function renderTypeFromJSON(object: any): RenderType {
  switch (object) {
    case 0:
    case "RENDER_TYPE_NATIVE":
      return RenderType.RENDER_TYPE_NATIVE;
    case 1:
    case "RENDER_TYPE_HYBRID":
      return RenderType.RENDER_TYPE_HYBRID;
    case 2:
    case "RENDER_TYPE_ALPHA":
      return RenderType.RENDER_TYPE_ALPHA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RenderType.UNRECOGNIZED;
  }
}

export function renderTypeToJSON(object: RenderType): string {
  switch (object) {
    case RenderType.RENDER_TYPE_NATIVE:
      return "RENDER_TYPE_NATIVE";
    case RenderType.RENDER_TYPE_HYBRID:
      return "RENDER_TYPE_HYBRID";
    case RenderType.RENDER_TYPE_ALPHA:
      return "RENDER_TYPE_ALPHA";
    case RenderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IconDisplayType {
  ICON_DISPLAY_TYPE_IMAGE = 0,
  ICON_DISPLAY_TYPE_BADGE = 1,
  UNRECOGNIZED = -1,
}

export function iconDisplayTypeFromJSON(object: any): IconDisplayType {
  switch (object) {
    case 0:
    case "ICON_DISPLAY_TYPE_IMAGE":
      return IconDisplayType.ICON_DISPLAY_TYPE_IMAGE;
    case 1:
    case "ICON_DISPLAY_TYPE_BADGE":
      return IconDisplayType.ICON_DISPLAY_TYPE_BADGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IconDisplayType.UNRECOGNIZED;
  }
}

export function iconDisplayTypeToJSON(object: IconDisplayType): string {
  switch (object) {
    case IconDisplayType.ICON_DISPLAY_TYPE_IMAGE:
      return "ICON_DISPLAY_TYPE_IMAGE";
    case IconDisplayType.ICON_DISPLAY_TYPE_BADGE:
      return "ICON_DISPLAY_TYPE_BADGE";
    case IconDisplayType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CommentTag {
  COMMENT_TAG_NORMAL = 0,
  COMMENT_TAG_CANDIDATE = 1,
  COMMENT_TAG_OVERAGE = 2,
  UNRECOGNIZED = -1,
}

export function commentTagFromJSON(object: any): CommentTag {
  switch (object) {
    case 0:
    case "COMMENT_TAG_NORMAL":
      return CommentTag.COMMENT_TAG_NORMAL;
    case 1:
    case "COMMENT_TAG_CANDIDATE":
      return CommentTag.COMMENT_TAG_CANDIDATE;
    case 2:
    case "COMMENT_TAG_OVERAGE":
      return CommentTag.COMMENT_TAG_OVERAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommentTag.UNRECOGNIZED;
  }
}

export function commentTagToJSON(object: CommentTag): string {
  switch (object) {
    case CommentTag.COMMENT_TAG_NORMAL:
      return "COMMENT_TAG_NORMAL";
    case CommentTag.COMMENT_TAG_CANDIDATE:
      return "COMMENT_TAG_CANDIDATE";
    case CommentTag.COMMENT_TAG_OVERAGE:
      return "COMMENT_TAG_OVERAGE";
    case CommentTag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PerceptionDialogIconType {
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17,
  PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18,
  UNRECOGNIZED = -1,
}

export function perceptionDialogIconTypeFromJSON(object: any): PerceptionDialogIconType {
  switch (object) {
    case 0:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE;
    case 1:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING;
    case 2:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC;
    case 3:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC;
    case 4:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE;
    case 5:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX;
    case 6:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE;
    case 7:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED;
    case 8:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM;
    case 9:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM;
    case 10:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN;
    case 11:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT;
    case 12:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS;
    case 13:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH;
    case 14:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL;
    case 15:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION;
    case 16:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT;
    case 17:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING;
    case 18:
    case "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON":
      return PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PerceptionDialogIconType.UNRECOGNIZED;
  }
}

export function perceptionDialogIconTypeToJSON(object: PerceptionDialogIconType): string {
  switch (object) {
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING";
    case PerceptionDialogIconType.PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON:
      return "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON";
    case PerceptionDialogIconType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GoalMessageSource {
  GOAL_MESSAGE_SOURCE_UNKNOWN = 0,
  GOAL_MESSAGE_SOURCE_COMMIT = 1,
  GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE = 2,
  GOAL_MESSAGE_SOURCE_PIN = 3,
  GOAL_MESSAGE_SOURCE_UNPIN = 4,
  GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK = 5,
  GOAL_MESSAGE_SOURCE_SUSPEND = 6,
  GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT = 7,
  UNRECOGNIZED = -1,
}

export function goalMessageSourceFromJSON(object: any): GoalMessageSource {
  switch (object) {
    case 0:
    case "GOAL_MESSAGE_SOURCE_UNKNOWN":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_UNKNOWN;
    case 1:
    case "GOAL_MESSAGE_SOURCE_COMMIT":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_COMMIT;
    case 2:
    case "GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE;
    case 3:
    case "GOAL_MESSAGE_SOURCE_PIN":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_PIN;
    case 4:
    case "GOAL_MESSAGE_SOURCE_UNPIN":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_UNPIN;
    case 5:
    case "GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK;
    case 6:
    case "GOAL_MESSAGE_SOURCE_SUSPEND":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_SUSPEND;
    case 7:
    case "GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT":
      return GoalMessageSource.GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GoalMessageSource.UNRECOGNIZED;
  }
}

export function goalMessageSourceToJSON(object: GoalMessageSource): string {
  switch (object) {
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_UNKNOWN:
      return "GOAL_MESSAGE_SOURCE_UNKNOWN";
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_COMMIT:
      return "GOAL_MESSAGE_SOURCE_COMMIT";
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE:
      return "GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE";
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_PIN:
      return "GOAL_MESSAGE_SOURCE_PIN";
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_UNPIN:
      return "GOAL_MESSAGE_SOURCE_UNPIN";
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK:
      return "GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK";
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_SUSPEND:
      return "GOAL_MESSAGE_SOURCE_SUSPEND";
    case GoalMessageSource.GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT:
      return "GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT";
    case GoalMessageSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ExhibitionType {
  EXHIBITION_TYPE_DEFAULT = 0,
  EXHIBITION_TYPE_FOLD = 1,
  EXHIBITION_TYPE_PUBLIC_SCREEN = 2,
  UNRECOGNIZED = -1,
}

export function exhibitionTypeFromJSON(object: any): ExhibitionType {
  switch (object) {
    case 0:
    case "EXHIBITION_TYPE_DEFAULT":
      return ExhibitionType.EXHIBITION_TYPE_DEFAULT;
    case 1:
    case "EXHIBITION_TYPE_FOLD":
      return ExhibitionType.EXHIBITION_TYPE_FOLD;
    case 2:
    case "EXHIBITION_TYPE_PUBLIC_SCREEN":
      return ExhibitionType.EXHIBITION_TYPE_PUBLIC_SCREEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExhibitionType.UNRECOGNIZED;
  }
}

export function exhibitionTypeToJSON(object: ExhibitionType): string {
  switch (object) {
    case ExhibitionType.EXHIBITION_TYPE_DEFAULT:
      return "EXHIBITION_TYPE_DEFAULT";
    case ExhibitionType.EXHIBITION_TYPE_FOLD:
      return "EXHIBITION_TYPE_FOLD";
    case ExhibitionType.EXHIBITION_TYPE_PUBLIC_SCREEN:
      return "EXHIBITION_TYPE_PUBLIC_SCREEN";
    case ExhibitionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GiftSource {
  GIFT_SOURCE_UNKNOWN = 0,
  GIFT_SOURCE_PLATFORM = 1,
  GIFT_SOURCE_USER_BUY_RANDOM = 2,
  GIFT_SOURCE_USER_BUY_SPECIFIC = 3,
  UNRECOGNIZED = -1,
}

export function giftSourceFromJSON(object: any): GiftSource {
  switch (object) {
    case 0:
    case "GIFT_SOURCE_UNKNOWN":
      return GiftSource.GIFT_SOURCE_UNKNOWN;
    case 1:
    case "GIFT_SOURCE_PLATFORM":
      return GiftSource.GIFT_SOURCE_PLATFORM;
    case 2:
    case "GIFT_SOURCE_USER_BUY_RANDOM":
      return GiftSource.GIFT_SOURCE_USER_BUY_RANDOM;
    case 3:
    case "GIFT_SOURCE_USER_BUY_SPECIFIC":
      return GiftSource.GIFT_SOURCE_USER_BUY_SPECIFIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GiftSource.UNRECOGNIZED;
  }
}

export function giftSourceToJSON(object: GiftSource): string {
  switch (object) {
    case GiftSource.GIFT_SOURCE_UNKNOWN:
      return "GIFT_SOURCE_UNKNOWN";
    case GiftSource.GIFT_SOURCE_PLATFORM:
      return "GIFT_SOURCE_PLATFORM";
    case GiftSource.GIFT_SOURCE_USER_BUY_RANDOM:
      return "GIFT_SOURCE_USER_BUY_RANDOM";
    case GiftSource.GIFT_SOURCE_USER_BUY_SPECIFIC:
      return "GIFT_SOURCE_USER_BUY_SPECIFIC";
    case GiftSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MessageDisplayStyle {
  MESSAGE_DISPLAY_STYLE_DEFAULT = 0,
  MESSAGE_DISPLAY_STYLE_POPUP = 1,
  UNRECOGNIZED = -1,
}

export function messageDisplayStyleFromJSON(object: any): MessageDisplayStyle {
  switch (object) {
    case 0:
    case "MESSAGE_DISPLAY_STYLE_DEFAULT":
      return MessageDisplayStyle.MESSAGE_DISPLAY_STYLE_DEFAULT;
    case 1:
    case "MESSAGE_DISPLAY_STYLE_POPUP":
      return MessageDisplayStyle.MESSAGE_DISPLAY_STYLE_POPUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageDisplayStyle.UNRECOGNIZED;
  }
}

export function messageDisplayStyleToJSON(object: MessageDisplayStyle): string {
  switch (object) {
    case MessageDisplayStyle.MESSAGE_DISPLAY_STYLE_DEFAULT:
      return "MESSAGE_DISPLAY_STYLE_DEFAULT";
    case MessageDisplayStyle.MESSAGE_DISPLAY_STYLE_POPUP:
      return "MESSAGE_DISPLAY_STYLE_POPUP";
    case MessageDisplayStyle.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ProfitRankType {
  PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0,
  PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1,
  PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2,
  PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3,
  PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4,
  PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5,
  PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6,
  PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7,
  PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8,
  PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9,
  PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10,
  PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11,
  PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12,
  PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13,
  PROFIT_RANK_TYPE_DAILY_ROOKIE = 14,
  PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15,
  PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16,
  PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20,
  PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21,
  PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22,
  PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23,
  PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24,
  PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25,
  UNRECOGNIZED = -1,
}

export function profitRankTypeFromJSON(object: any): ProfitRankType {
  switch (object) {
    case 0:
    case "PROFIT_RANK_TYPE_TYPE_HOURLY_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_HOURLY_RANK;
    case 1:
    case "PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK;
    case 2:
    case "PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK;
    case 3:
    case "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY;
    case 4:
    case "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK;
    case 5:
    case "PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE;
    case 6:
    case "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY;
    case 7:
    case "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY;
    case 8:
    case "PROFIT_RANK_TYPE_TYPE_DAILY_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_RANK;
    case 9:
    case "PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK;
    case 10:
    case "PROFIT_RANK_TYPE_TYPE_GAME_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_GAME_RANK;
    case 11:
    case "PROFIT_RANK_TYPE_TYPE_DAILY_GAME":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME;
    case 12:
    case "PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK;
    case 13:
    case "PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE;
    case 14:
    case "PROFIT_RANK_TYPE_DAILY_ROOKIE":
      return ProfitRankType.PROFIT_RANK_TYPE_DAILY_ROOKIE;
    case 15:
    case "PROFIT_RANK_TYPE_TYPE_TEAM_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_TEAM_RANK;
    case 16:
    case "PROFIT_RANK_TYPE_TYPE_CLASS_RANK":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_CLASS_RANK;
    case 20:
    case "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G;
    case 21:
    case "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B;
    case 22:
    case "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE;
    case 23:
    case "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE;
    case 24:
    case "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO;
    case 25:
    case "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE":
      return ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProfitRankType.UNRECOGNIZED;
  }
}

export function profitRankTypeToJSON(object: ProfitRankType): string {
  switch (object) {
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_HOURLY_RANK:
      return "PROFIT_RANK_TYPE_TYPE_HOURLY_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK:
      return "PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK:
      return "PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY:
      return "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK:
      return "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE:
      return "PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY:
      return "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY:
      return "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_RANK:
      return "PROFIT_RANK_TYPE_TYPE_DAILY_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK:
      return "PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_GAME_RANK:
      return "PROFIT_RANK_TYPE_TYPE_GAME_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME:
      return "PROFIT_RANK_TYPE_TYPE_DAILY_GAME";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK:
      return "PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE:
      return "PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE";
    case ProfitRankType.PROFIT_RANK_TYPE_DAILY_ROOKIE:
      return "PROFIT_RANK_TYPE_DAILY_ROOKIE";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_TEAM_RANK:
      return "PROFIT_RANK_TYPE_TYPE_TEAM_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_CLASS_RANK:
      return "PROFIT_RANK_TYPE_TYPE_CLASS_RANK";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G:
      return "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B:
      return "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE:
      return "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE:
      return "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO:
      return "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO";
    case ProfitRankType.PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE:
      return "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE";
    case ProfitRankType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UnionAnimationInfoType {
  UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION = 0,
  UNION_ANIMATION_INFO_TYPE_LOOP = 1,
  UNION_ANIMATION_INFO_TYPE_LOCK = 2,
  UNRECOGNIZED = -1,
}

export function unionAnimationInfoTypeFromJSON(object: any): UnionAnimationInfoType {
  switch (object) {
    case 0:
    case "UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION":
      return UnionAnimationInfoType.UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION;
    case 1:
    case "UNION_ANIMATION_INFO_TYPE_LOOP":
      return UnionAnimationInfoType.UNION_ANIMATION_INFO_TYPE_LOOP;
    case 2:
    case "UNION_ANIMATION_INFO_TYPE_LOCK":
      return UnionAnimationInfoType.UNION_ANIMATION_INFO_TYPE_LOCK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UnionAnimationInfoType.UNRECOGNIZED;
  }
}

export function unionAnimationInfoTypeToJSON(object: UnionAnimationInfoType): string {
  switch (object) {
    case UnionAnimationInfoType.UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION:
      return "UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION";
    case UnionAnimationInfoType.UNION_ANIMATION_INFO_TYPE_LOOP:
      return "UNION_ANIMATION_INFO_TYPE_LOOP";
    case UnionAnimationInfoType.UNION_ANIMATION_INFO_TYPE_LOCK:
      return "UNION_ANIMATION_INFO_TYPE_LOCK";
    case UnionAnimationInfoType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DisplayStyle {
  DISPLAY_STYLE_NORMAL = 0,
  DISPLAY_STYLE_STAY = 1,
  DISPLAY_STYLE_CHAT = 2,
  UNRECOGNIZED = -1,
}

export function displayStyleFromJSON(object: any): DisplayStyle {
  switch (object) {
    case 0:
    case "DISPLAY_STYLE_NORMAL":
      return DisplayStyle.DISPLAY_STYLE_NORMAL;
    case 1:
    case "DISPLAY_STYLE_STAY":
      return DisplayStyle.DISPLAY_STYLE_STAY;
    case 2:
    case "DISPLAY_STYLE_CHAT":
      return DisplayStyle.DISPLAY_STYLE_CHAT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DisplayStyle.UNRECOGNIZED;
  }
}

export function displayStyleToJSON(object: DisplayStyle): string {
  switch (object) {
    case DisplayStyle.DISPLAY_STYLE_NORMAL:
      return "DISPLAY_STYLE_NORMAL";
    case DisplayStyle.DISPLAY_STYLE_STAY:
      return "DISPLAY_STYLE_STAY";
    case DisplayStyle.DISPLAY_STYLE_CHAT:
      return "DISPLAY_STYLE_CHAT";
    case DisplayStyle.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HitABStatus {
  HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT = 0,
  HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1,
  HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT = 2,
  UNRECOGNIZED = -1,
}

export function hitABStatusFromJSON(object: any): HitABStatus {
  switch (object) {
    case 0:
    case "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT":
      return HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT;
    case 1:
    case "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT":
      return HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT;
    case 2:
    case "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT":
      return HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HitABStatus.UNRECOGNIZED;
  }
}

export function hitABStatusToJSON(object: HitABStatus): string {
  switch (object) {
    case HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT:
      return "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT";
    case HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT:
      return "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT";
    case HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT:
      return "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT";
    case HitABStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PollKind {
  POLL_KIND_NORMAL = 0,
  POLL_KIND_GIFT = 1,
  POLL_KIND_CUSTOMIZABLE = 2,
  POLL_KIND_CUSTOMIZABLE_GIFT = 3,
  POLL_KIND_QUICK_GIFT = 4,
  POLL_KIND_EMOTE = 5,
  UNRECOGNIZED = -1,
}

export function pollKindFromJSON(object: any): PollKind {
  switch (object) {
    case 0:
    case "POLL_KIND_NORMAL":
      return PollKind.POLL_KIND_NORMAL;
    case 1:
    case "POLL_KIND_GIFT":
      return PollKind.POLL_KIND_GIFT;
    case 2:
    case "POLL_KIND_CUSTOMIZABLE":
      return PollKind.POLL_KIND_CUSTOMIZABLE;
    case 3:
    case "POLL_KIND_CUSTOMIZABLE_GIFT":
      return PollKind.POLL_KIND_CUSTOMIZABLE_GIFT;
    case 4:
    case "POLL_KIND_QUICK_GIFT":
      return PollKind.POLL_KIND_QUICK_GIFT;
    case 5:
    case "POLL_KIND_EMOTE":
      return PollKind.POLL_KIND_EMOTE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PollKind.UNRECOGNIZED;
  }
}

export function pollKindToJSON(object: PollKind): string {
  switch (object) {
    case PollKind.POLL_KIND_NORMAL:
      return "POLL_KIND_NORMAL";
    case PollKind.POLL_KIND_GIFT:
      return "POLL_KIND_GIFT";
    case PollKind.POLL_KIND_CUSTOMIZABLE:
      return "POLL_KIND_CUSTOMIZABLE";
    case PollKind.POLL_KIND_CUSTOMIZABLE_GIFT:
      return "POLL_KIND_CUSTOMIZABLE_GIFT";
    case PollKind.POLL_KIND_QUICK_GIFT:
      return "POLL_KIND_QUICK_GIFT";
    case PollKind.POLL_KIND_EMOTE:
      return "POLL_KIND_EMOTE";
    case PollKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PollTemplateStatus {
  POLL_TEMPLATE_STATUS_TO_BE_REVIEWED = 0,
  POLL_TEMPLATE_STATUS_UNDER_REVIEW = 1,
  POLL_TEMPLATE_STATUS_REVIEWED = 2,
  POLL_TEMPLATE_STATUS_REFUSED = 3,
  UNRECOGNIZED = -1,
}

export function pollTemplateStatusFromJSON(object: any): PollTemplateStatus {
  switch (object) {
    case 0:
    case "POLL_TEMPLATE_STATUS_TO_BE_REVIEWED":
      return PollTemplateStatus.POLL_TEMPLATE_STATUS_TO_BE_REVIEWED;
    case 1:
    case "POLL_TEMPLATE_STATUS_UNDER_REVIEW":
      return PollTemplateStatus.POLL_TEMPLATE_STATUS_UNDER_REVIEW;
    case 2:
    case "POLL_TEMPLATE_STATUS_REVIEWED":
      return PollTemplateStatus.POLL_TEMPLATE_STATUS_REVIEWED;
    case 3:
    case "POLL_TEMPLATE_STATUS_REFUSED":
      return PollTemplateStatus.POLL_TEMPLATE_STATUS_REFUSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PollTemplateStatus.UNRECOGNIZED;
  }
}

export function pollTemplateStatusToJSON(object: PollTemplateStatus): string {
  switch (object) {
    case PollTemplateStatus.POLL_TEMPLATE_STATUS_TO_BE_REVIEWED:
      return "POLL_TEMPLATE_STATUS_TO_BE_REVIEWED";
    case PollTemplateStatus.POLL_TEMPLATE_STATUS_UNDER_REVIEW:
      return "POLL_TEMPLATE_STATUS_UNDER_REVIEW";
    case PollTemplateStatus.POLL_TEMPLATE_STATUS_REVIEWED:
      return "POLL_TEMPLATE_STATUS_REVIEWED";
    case PollTemplateStatus.POLL_TEMPLATE_STATUS_REFUSED:
      return "POLL_TEMPLATE_STATUS_REFUSED";
    case PollTemplateStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PollAppealStatus {
  POLL_APPEAL_STATUS_UNKNOWN = 0,
  POLL_APPEAL_STATUS_PASS = 1,
  POLL_APPEAL_STATUS_FAIL = 2,
  UNRECOGNIZED = -1,
}

export function pollAppealStatusFromJSON(object: any): PollAppealStatus {
  switch (object) {
    case 0:
    case "POLL_APPEAL_STATUS_UNKNOWN":
      return PollAppealStatus.POLL_APPEAL_STATUS_UNKNOWN;
    case 1:
    case "POLL_APPEAL_STATUS_PASS":
      return PollAppealStatus.POLL_APPEAL_STATUS_PASS;
    case 2:
    case "POLL_APPEAL_STATUS_FAIL":
      return PollAppealStatus.POLL_APPEAL_STATUS_FAIL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PollAppealStatus.UNRECOGNIZED;
  }
}

export function pollAppealStatusToJSON(object: PollAppealStatus): string {
  switch (object) {
    case PollAppealStatus.POLL_APPEAL_STATUS_UNKNOWN:
      return "POLL_APPEAL_STATUS_UNKNOWN";
    case PollAppealStatus.POLL_APPEAL_STATUS_PASS:
      return "POLL_APPEAL_STATUS_PASS";
    case PollAppealStatus.POLL_APPEAL_STATUS_FAIL:
      return "POLL_APPEAL_STATUS_FAIL";
    case PollAppealStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum RankTestMessageScene {
  RANK_TEST_MESSAGE_SCENE_UNKNOWN = 0,
  RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN = 1,
  UNRECOGNIZED = -1,
}

export function rankTestMessageSceneFromJSON(object: any): RankTestMessageScene {
  switch (object) {
    case 0:
    case "RANK_TEST_MESSAGE_SCENE_UNKNOWN":
      return RankTestMessageScene.RANK_TEST_MESSAGE_SCENE_UNKNOWN;
    case 1:
    case "RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN":
      return RankTestMessageScene.RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RankTestMessageScene.UNRECOGNIZED;
  }
}

export function rankTestMessageSceneToJSON(object: RankTestMessageScene): string {
  switch (object) {
    case RankTestMessageScene.RANK_TEST_MESSAGE_SCENE_UNKNOWN:
      return "RANK_TEST_MESSAGE_SCENE_UNKNOWN";
    case RankTestMessageScene.RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN:
      return "RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN";
    case RankTestMessageScene.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TriggerReason {
  TRIGGER_REASON_UNKNOWN = 0,
  TRIGGER_REASON_SCORE_UPDATE = 1,
  TRIGGER_REASON_BATTLE_END = 2,
  TRIGGER_REASON_OPT_OUT_UPDATE = 3,
  TRIGGER_REASON_KEEP_ALIVE = 4,
  UNRECOGNIZED = -1,
}

export function triggerReasonFromJSON(object: any): TriggerReason {
  switch (object) {
    case 0:
    case "TRIGGER_REASON_UNKNOWN":
      return TriggerReason.TRIGGER_REASON_UNKNOWN;
    case 1:
    case "TRIGGER_REASON_SCORE_UPDATE":
      return TriggerReason.TRIGGER_REASON_SCORE_UPDATE;
    case 2:
    case "TRIGGER_REASON_BATTLE_END":
      return TriggerReason.TRIGGER_REASON_BATTLE_END;
    case 3:
    case "TRIGGER_REASON_OPT_OUT_UPDATE":
      return TriggerReason.TRIGGER_REASON_OPT_OUT_UPDATE;
    case 4:
    case "TRIGGER_REASON_KEEP_ALIVE":
      return TriggerReason.TRIGGER_REASON_KEEP_ALIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TriggerReason.UNRECOGNIZED;
  }
}

export function triggerReasonToJSON(object: TriggerReason): string {
  switch (object) {
    case TriggerReason.TRIGGER_REASON_UNKNOWN:
      return "TRIGGER_REASON_UNKNOWN";
    case TriggerReason.TRIGGER_REASON_SCORE_UPDATE:
      return "TRIGGER_REASON_SCORE_UPDATE";
    case TriggerReason.TRIGGER_REASON_BATTLE_END:
      return "TRIGGER_REASON_BATTLE_END";
    case TriggerReason.TRIGGER_REASON_OPT_OUT_UPDATE:
      return "TRIGGER_REASON_OPT_OUT_UPDATE";
    case TriggerReason.TRIGGER_REASON_KEEP_ALIVE:
      return "TRIGGER_REASON_KEEP_ALIVE";
    case TriggerReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Reason {
  REASON_TIME_UP = 0,
  REASON_CUT_SHORT = 1,
  UNRECOGNIZED = -1,
}

export function reasonFromJSON(object: any): Reason {
  switch (object) {
    case 0:
    case "REASON_TIME_UP":
      return Reason.REASON_TIME_UP;
    case 1:
    case "REASON_CUT_SHORT":
      return Reason.REASON_CUT_SHORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Reason.UNRECOGNIZED;
  }
}

export function reasonToJSON(object: Reason): string {
  switch (object) {
    case Reason.REASON_TIME_UP:
      return "REASON_TIME_UP";
    case Reason.REASON_CUT_SHORT:
      return "REASON_CUT_SHORT";
    case Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BattleTaskMessageType {
  BATTLE_TASK_MESSAGE_TYPE_START = 0,
  BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE = 1,
  BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE = 2,
  BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE = 3,
  UNRECOGNIZED = -1,
}

export function battleTaskMessageTypeFromJSON(object: any): BattleTaskMessageType {
  switch (object) {
    case 0:
    case "BATTLE_TASK_MESSAGE_TYPE_START":
      return BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_START;
    case 1:
    case "BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE":
      return BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE;
    case 2:
    case "BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE":
      return BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE;
    case 3:
    case "BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE":
      return BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BattleTaskMessageType.UNRECOGNIZED;
  }
}

export function battleTaskMessageTypeToJSON(object: BattleTaskMessageType): string {
  switch (object) {
    case BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_START:
      return "BATTLE_TASK_MESSAGE_TYPE_START";
    case BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE:
      return "BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE";
    case BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE:
      return "BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE";
    case BattleTaskMessageType.BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE:
      return "BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE";
    case BattleTaskMessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum RewardStatus {
  REWARD_STATUS_SUCCEED = 0,
  REWARD_STATUS_FAILED = 1,
  UNRECOGNIZED = -1,
}

export function rewardStatusFromJSON(object: any): RewardStatus {
  switch (object) {
    case 0:
    case "REWARD_STATUS_SUCCEED":
      return RewardStatus.REWARD_STATUS_SUCCEED;
    case 1:
    case "REWARD_STATUS_FAILED":
      return RewardStatus.REWARD_STATUS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RewardStatus.UNRECOGNIZED;
  }
}

export function rewardStatusToJSON(object: RewardStatus): string {
  switch (object) {
    case RewardStatus.REWARD_STATUS_SUCCEED:
      return "REWARD_STATUS_SUCCEED";
    case RewardStatus.REWARD_STATUS_FAILED:
      return "REWARD_STATUS_FAILED";
    case RewardStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BattleAction {
  BATTLE_ACTION_UNKNOWN = 0,
  BATTLE_ACTION_INVITE = 1,
  BATTLE_ACTION_REJECT = 2,
  BATTLE_ACTION_CANCEL = 3,
  BATTLE_ACTION_OPEN = 4,
  BATTLE_ACTION_FINISH = 5,
  BATTLE_ACTION_CUT_SHORT = 6,
  BATTLE_ACTION_ACCEPT = 7,
  BATTLE_ACTION_QUIT_APPLY = 8,
  BATTLE_ACTION_DECLINE_QUIT = 9,
  BATTLE_ACTION_DECLINE_OFF_QUIT = 10,
  BATTLE_ACTION_LEAVE_LINK_MIC = 11,
  UNRECOGNIZED = -1,
}

export function battleActionFromJSON(object: any): BattleAction {
  switch (object) {
    case 0:
    case "BATTLE_ACTION_UNKNOWN":
      return BattleAction.BATTLE_ACTION_UNKNOWN;
    case 1:
    case "BATTLE_ACTION_INVITE":
      return BattleAction.BATTLE_ACTION_INVITE;
    case 2:
    case "BATTLE_ACTION_REJECT":
      return BattleAction.BATTLE_ACTION_REJECT;
    case 3:
    case "BATTLE_ACTION_CANCEL":
      return BattleAction.BATTLE_ACTION_CANCEL;
    case 4:
    case "BATTLE_ACTION_OPEN":
      return BattleAction.BATTLE_ACTION_OPEN;
    case 5:
    case "BATTLE_ACTION_FINISH":
      return BattleAction.BATTLE_ACTION_FINISH;
    case 6:
    case "BATTLE_ACTION_CUT_SHORT":
      return BattleAction.BATTLE_ACTION_CUT_SHORT;
    case 7:
    case "BATTLE_ACTION_ACCEPT":
      return BattleAction.BATTLE_ACTION_ACCEPT;
    case 8:
    case "BATTLE_ACTION_QUIT_APPLY":
      return BattleAction.BATTLE_ACTION_QUIT_APPLY;
    case 9:
    case "BATTLE_ACTION_DECLINE_QUIT":
      return BattleAction.BATTLE_ACTION_DECLINE_QUIT;
    case 10:
    case "BATTLE_ACTION_DECLINE_OFF_QUIT":
      return BattleAction.BATTLE_ACTION_DECLINE_OFF_QUIT;
    case 11:
    case "BATTLE_ACTION_LEAVE_LINK_MIC":
      return BattleAction.BATTLE_ACTION_LEAVE_LINK_MIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BattleAction.UNRECOGNIZED;
  }
}

export function battleActionToJSON(object: BattleAction): string {
  switch (object) {
    case BattleAction.BATTLE_ACTION_UNKNOWN:
      return "BATTLE_ACTION_UNKNOWN";
    case BattleAction.BATTLE_ACTION_INVITE:
      return "BATTLE_ACTION_INVITE";
    case BattleAction.BATTLE_ACTION_REJECT:
      return "BATTLE_ACTION_REJECT";
    case BattleAction.BATTLE_ACTION_CANCEL:
      return "BATTLE_ACTION_CANCEL";
    case BattleAction.BATTLE_ACTION_OPEN:
      return "BATTLE_ACTION_OPEN";
    case BattleAction.BATTLE_ACTION_FINISH:
      return "BATTLE_ACTION_FINISH";
    case BattleAction.BATTLE_ACTION_CUT_SHORT:
      return "BATTLE_ACTION_CUT_SHORT";
    case BattleAction.BATTLE_ACTION_ACCEPT:
      return "BATTLE_ACTION_ACCEPT";
    case BattleAction.BATTLE_ACTION_QUIT_APPLY:
      return "BATTLE_ACTION_QUIT_APPLY";
    case BattleAction.BATTLE_ACTION_DECLINE_QUIT:
      return "BATTLE_ACTION_DECLINE_QUIT";
    case BattleAction.BATTLE_ACTION_DECLINE_OFF_QUIT:
      return "BATTLE_ACTION_DECLINE_OFF_QUIT";
    case BattleAction.BATTLE_ACTION_LEAVE_LINK_MIC:
      return "BATTLE_ACTION_LEAVE_LINK_MIC";
    case BattleAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Result {
  RESULT_WIN = 0,
  RESULT_LOSE = 1,
  RESULT_DRAW = 2,
  UNRECOGNIZED = -1,
}

export function resultFromJSON(object: any): Result {
  switch (object) {
    case 0:
    case "RESULT_WIN":
      return Result.RESULT_WIN;
    case 1:
    case "RESULT_LOSE":
      return Result.RESULT_LOSE;
    case 2:
    case "RESULT_DRAW":
      return Result.RESULT_DRAW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Result.UNRECOGNIZED;
  }
}

export function resultToJSON(object: Result): string {
  switch (object) {
    case Result.RESULT_WIN:
      return "RESULT_WIN";
    case Result.RESULT_LOSE:
      return "RESULT_LOSE";
    case Result.RESULT_DRAW:
      return "RESULT_DRAW";
    case Result.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GiftPermissionType {
  GIFT_PERMISSION_TYPE_UNKNOWN_TYPE = 0,
  GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION = 1,
  GIFT_PERMISSION_TYPE_ANCHOR_CLOSE = 2,
  GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION = 3,
  GIFT_PERMISSION_TYPE_ANCHOR_BANNED = 4,
  UNRECOGNIZED = -1,
}

export function giftPermissionTypeFromJSON(object: any): GiftPermissionType {
  switch (object) {
    case 0:
    case "GIFT_PERMISSION_TYPE_UNKNOWN_TYPE":
      return GiftPermissionType.GIFT_PERMISSION_TYPE_UNKNOWN_TYPE;
    case 1:
    case "GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION":
      return GiftPermissionType.GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION;
    case 2:
    case "GIFT_PERMISSION_TYPE_ANCHOR_CLOSE":
      return GiftPermissionType.GIFT_PERMISSION_TYPE_ANCHOR_CLOSE;
    case 3:
    case "GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION":
      return GiftPermissionType.GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION;
    case 4:
    case "GIFT_PERMISSION_TYPE_ANCHOR_BANNED":
      return GiftPermissionType.GIFT_PERMISSION_TYPE_ANCHOR_BANNED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GiftPermissionType.UNRECOGNIZED;
  }
}

export function giftPermissionTypeToJSON(object: GiftPermissionType): string {
  switch (object) {
    case GiftPermissionType.GIFT_PERMISSION_TYPE_UNKNOWN_TYPE:
      return "GIFT_PERMISSION_TYPE_UNKNOWN_TYPE";
    case GiftPermissionType.GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION:
      return "GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION";
    case GiftPermissionType.GIFT_PERMISSION_TYPE_ANCHOR_CLOSE:
      return "GIFT_PERMISSION_TYPE_ANCHOR_CLOSE";
    case GiftPermissionType.GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION:
      return "GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION";
    case GiftPermissionType.GIFT_PERMISSION_TYPE_ANCHOR_BANNED:
      return "GIFT_PERMISSION_TYPE_ANCHOR_BANNED";
    case GiftPermissionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BattleABTestType {
  BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE = 0,
  BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE = 1,
  BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT = 2,
  BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL = 3,
  BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT = 4,
  BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE = 5,
  BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048 = 6,
  BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE = 7,
  UNRECOGNIZED = -1,
}

export function battleABTestTypeFromJSON(object: any): BattleABTestType {
  switch (object) {
    case 0:
    case "BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE;
    case 1:
    case "BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE;
    case 2:
    case "BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT;
    case 3:
    case "BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL;
    case 4:
    case "BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT;
    case 5:
    case "BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE;
    case 6:
    case "BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048;
    case 7:
    case "BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE":
      return BattleABTestType.BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BattleABTestType.UNRECOGNIZED;
  }
}

export function battleABTestTypeToJSON(object: BattleABTestType): string {
  switch (object) {
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE:
      return "BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE";
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE:
      return "BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE";
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT:
      return "BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT";
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL:
      return "BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL";
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT:
      return "BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT";
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE:
      return "BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE";
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048:
      return "BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048";
    case BattleABTestType.BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE:
      return "BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE";
    case BattleABTestType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PlayScene {
  PLAY_SCENE_UNKNOWN = 0,
  PLAY_SCENE_COUNTDOWN_FOR_ALL = 1,
  PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2,
  PLAY_SCENE_LIVE_SHOW = 3,
  PLAY_SCENE_AIG_C = 4,
  PLAY_SCENE_KARAOKE = 5,
  PLAY_SCENE_DRAW_GUESS = 6,
  PLAY_SCENE_ENLARGE_GRID = 7,
  PLAY_SCENE_GIFT_PRIORITY_LINK = 8,
  PLAY_SCENE_GIFT_THRESHOLD_LINK = 9,
  PLAY_SCENE_NOTICE_BOARD = 10,
  PLAY_SCENE_PLAY_BOOK = 11,
  PLAY_SCENE_GUEST_SHOWDOWN = 12,
  UNRECOGNIZED = -1,
}

export function playSceneFromJSON(object: any): PlayScene {
  switch (object) {
    case 0:
    case "PLAY_SCENE_UNKNOWN":
      return PlayScene.PLAY_SCENE_UNKNOWN;
    case 1:
    case "PLAY_SCENE_COUNTDOWN_FOR_ALL":
      return PlayScene.PLAY_SCENE_COUNTDOWN_FOR_ALL;
    case 2:
    case "PLAY_SCENE_COUNTDOWN_FOR_SINGLE":
      return PlayScene.PLAY_SCENE_COUNTDOWN_FOR_SINGLE;
    case 3:
    case "PLAY_SCENE_LIVE_SHOW":
      return PlayScene.PLAY_SCENE_LIVE_SHOW;
    case 4:
    case "PLAY_SCENE_AIG_C":
      return PlayScene.PLAY_SCENE_AIG_C;
    case 5:
    case "PLAY_SCENE_KARAOKE":
      return PlayScene.PLAY_SCENE_KARAOKE;
    case 6:
    case "PLAY_SCENE_DRAW_GUESS":
      return PlayScene.PLAY_SCENE_DRAW_GUESS;
    case 7:
    case "PLAY_SCENE_ENLARGE_GRID":
      return PlayScene.PLAY_SCENE_ENLARGE_GRID;
    case 8:
    case "PLAY_SCENE_GIFT_PRIORITY_LINK":
      return PlayScene.PLAY_SCENE_GIFT_PRIORITY_LINK;
    case 9:
    case "PLAY_SCENE_GIFT_THRESHOLD_LINK":
      return PlayScene.PLAY_SCENE_GIFT_THRESHOLD_LINK;
    case 10:
    case "PLAY_SCENE_NOTICE_BOARD":
      return PlayScene.PLAY_SCENE_NOTICE_BOARD;
    case 11:
    case "PLAY_SCENE_PLAY_BOOK":
      return PlayScene.PLAY_SCENE_PLAY_BOOK;
    case 12:
    case "PLAY_SCENE_GUEST_SHOWDOWN":
      return PlayScene.PLAY_SCENE_GUEST_SHOWDOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlayScene.UNRECOGNIZED;
  }
}

export function playSceneToJSON(object: PlayScene): string {
  switch (object) {
    case PlayScene.PLAY_SCENE_UNKNOWN:
      return "PLAY_SCENE_UNKNOWN";
    case PlayScene.PLAY_SCENE_COUNTDOWN_FOR_ALL:
      return "PLAY_SCENE_COUNTDOWN_FOR_ALL";
    case PlayScene.PLAY_SCENE_COUNTDOWN_FOR_SINGLE:
      return "PLAY_SCENE_COUNTDOWN_FOR_SINGLE";
    case PlayScene.PLAY_SCENE_LIVE_SHOW:
      return "PLAY_SCENE_LIVE_SHOW";
    case PlayScene.PLAY_SCENE_AIG_C:
      return "PLAY_SCENE_AIG_C";
    case PlayScene.PLAY_SCENE_KARAOKE:
      return "PLAY_SCENE_KARAOKE";
    case PlayScene.PLAY_SCENE_DRAW_GUESS:
      return "PLAY_SCENE_DRAW_GUESS";
    case PlayScene.PLAY_SCENE_ENLARGE_GRID:
      return "PLAY_SCENE_ENLARGE_GRID";
    case PlayScene.PLAY_SCENE_GIFT_PRIORITY_LINK:
      return "PLAY_SCENE_GIFT_PRIORITY_LINK";
    case PlayScene.PLAY_SCENE_GIFT_THRESHOLD_LINK:
      return "PLAY_SCENE_GIFT_THRESHOLD_LINK";
    case PlayScene.PLAY_SCENE_NOTICE_BOARD:
      return "PLAY_SCENE_NOTICE_BOARD";
    case PlayScene.PLAY_SCENE_PLAY_BOOK:
      return "PLAY_SCENE_PLAY_BOOK";
    case PlayScene.PLAY_SCENE_GUEST_SHOWDOWN:
      return "PLAY_SCENE_GUEST_SHOWDOWN";
    case PlayScene.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkType {
  LINK_TYPE_TYPE_UNKNOWN = 0,
  LINK_TYPE_TYPE_VIDEO = 1,
  LINK_TYPE_TYPE_AUDIO = 2,
  LINK_TYPE_TYPE_VIRTUAL = 3,
  UNRECOGNIZED = -1,
}

export function linkTypeFromJSON(object: any): LinkType {
  switch (object) {
    case 0:
    case "LINK_TYPE_TYPE_UNKNOWN":
      return LinkType.LINK_TYPE_TYPE_UNKNOWN;
    case 1:
    case "LINK_TYPE_TYPE_VIDEO":
      return LinkType.LINK_TYPE_TYPE_VIDEO;
    case 2:
    case "LINK_TYPE_TYPE_AUDIO":
      return LinkType.LINK_TYPE_TYPE_AUDIO;
    case 3:
    case "LINK_TYPE_TYPE_VIRTUAL":
      return LinkType.LINK_TYPE_TYPE_VIRTUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkType.UNRECOGNIZED;
  }
}

export function linkTypeToJSON(object: LinkType): string {
  switch (object) {
    case LinkType.LINK_TYPE_TYPE_UNKNOWN:
      return "LINK_TYPE_TYPE_UNKNOWN";
    case LinkType.LINK_TYPE_TYPE_VIDEO:
      return "LINK_TYPE_TYPE_VIDEO";
    case LinkType.LINK_TYPE_TYPE_AUDIO:
      return "LINK_TYPE_TYPE_AUDIO";
    case LinkType.LINK_TYPE_TYPE_VIRTUAL:
      return "LINK_TYPE_TYPE_VIRTUAL";
    case LinkType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkSilenceStatus {
  LINK_SILENCE_STATUS_STATUS_UN_SILENCE = 0,
  LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF = 1,
  LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER = 2,
  UNRECOGNIZED = -1,
}

export function linkSilenceStatusFromJSON(object: any): LinkSilenceStatus {
  switch (object) {
    case 0:
    case "LINK_SILENCE_STATUS_STATUS_UN_SILENCE":
      return LinkSilenceStatus.LINK_SILENCE_STATUS_STATUS_UN_SILENCE;
    case 1:
    case "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF":
      return LinkSilenceStatus.LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF;
    case 2:
    case "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER":
      return LinkSilenceStatus.LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkSilenceStatus.UNRECOGNIZED;
  }
}

export function linkSilenceStatusToJSON(object: LinkSilenceStatus): string {
  switch (object) {
    case LinkSilenceStatus.LINK_SILENCE_STATUS_STATUS_UN_SILENCE:
      return "LINK_SILENCE_STATUS_STATUS_UN_SILENCE";
    case LinkSilenceStatus.LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF:
      return "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF";
    case LinkSilenceStatus.LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER:
      return "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER";
    case LinkSilenceStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkmicRoleType {
  LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN = 0,
  LINKMIC_ROLE_TYPE_LEADER = 1,
  LINKMIC_ROLE_TYPE_PLAYER = 2,
  LINKMIC_ROLE_TYPE_INVITEE = 3,
  UNRECOGNIZED = -1,
}

export function linkmicRoleTypeFromJSON(object: any): LinkmicRoleType {
  switch (object) {
    case 0:
    case "LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN":
      return LinkmicRoleType.LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN;
    case 1:
    case "LINKMIC_ROLE_TYPE_LEADER":
      return LinkmicRoleType.LINKMIC_ROLE_TYPE_LEADER;
    case 2:
    case "LINKMIC_ROLE_TYPE_PLAYER":
      return LinkmicRoleType.LINKMIC_ROLE_TYPE_PLAYER;
    case 3:
    case "LINKMIC_ROLE_TYPE_INVITEE":
      return LinkmicRoleType.LINKMIC_ROLE_TYPE_INVITEE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkmicRoleType.UNRECOGNIZED;
  }
}

export function linkmicRoleTypeToJSON(object: LinkmicRoleType): string {
  switch (object) {
    case LinkmicRoleType.LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN:
      return "LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN";
    case LinkmicRoleType.LINKMIC_ROLE_TYPE_LEADER:
      return "LINKMIC_ROLE_TYPE_LEADER";
    case LinkmicRoleType.LINKMIC_ROLE_TYPE_PLAYER:
      return "LINKMIC_ROLE_TYPE_PLAYER";
    case LinkmicRoleType.LINKMIC_ROLE_TYPE_INVITEE:
      return "LINKMIC_ROLE_TYPE_INVITEE";
    case LinkmicRoleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkRoleType {
  LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN = 0,
  LINK_ROLE_TYPE_TYPE_LEADER = 1,
  LINK_ROLE_TYPE_TYPE_PLAYER = 2,
  LINK_ROLE_TYPE_TYPE_INVITEE = 3,
  LINK_ROLE_TYPE_TYPE_APPLIER = 4,
  UNRECOGNIZED = -1,
}

export function linkRoleTypeFromJSON(object: any): LinkRoleType {
  switch (object) {
    case 0:
    case "LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN":
      return LinkRoleType.LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN;
    case 1:
    case "LINK_ROLE_TYPE_TYPE_LEADER":
      return LinkRoleType.LINK_ROLE_TYPE_TYPE_LEADER;
    case 2:
    case "LINK_ROLE_TYPE_TYPE_PLAYER":
      return LinkRoleType.LINK_ROLE_TYPE_TYPE_PLAYER;
    case 3:
    case "LINK_ROLE_TYPE_TYPE_INVITEE":
      return LinkRoleType.LINK_ROLE_TYPE_TYPE_INVITEE;
    case 4:
    case "LINK_ROLE_TYPE_TYPE_APPLIER":
      return LinkRoleType.LINK_ROLE_TYPE_TYPE_APPLIER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkRoleType.UNRECOGNIZED;
  }
}

export function linkRoleTypeToJSON(object: LinkRoleType): string {
  switch (object) {
    case LinkRoleType.LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN:
      return "LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN";
    case LinkRoleType.LINK_ROLE_TYPE_TYPE_LEADER:
      return "LINK_ROLE_TYPE_TYPE_LEADER";
    case LinkRoleType.LINK_ROLE_TYPE_TYPE_PLAYER:
      return "LINK_ROLE_TYPE_TYPE_PLAYER";
    case LinkRoleType.LINK_ROLE_TYPE_TYPE_INVITEE:
      return "LINK_ROLE_TYPE_TYPE_INVITEE";
    case LinkRoleType.LINK_ROLE_TYPE_TYPE_APPLIER:
      return "LINK_ROLE_TYPE_TYPE_APPLIER";
    case LinkRoleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MuteStatus {
  MUTE_STATUS_MUTE = 0,
  MUTE_STATUS_UN_MUTE = 1,
  UNRECOGNIZED = -1,
}

export function muteStatusFromJSON(object: any): MuteStatus {
  switch (object) {
    case 0:
    case "MUTE_STATUS_MUTE":
      return MuteStatus.MUTE_STATUS_MUTE;
    case 1:
    case "MUTE_STATUS_UN_MUTE":
      return MuteStatus.MUTE_STATUS_UN_MUTE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MuteStatus.UNRECOGNIZED;
  }
}

export function muteStatusToJSON(object: MuteStatus): string {
  switch (object) {
    case MuteStatus.MUTE_STATUS_MUTE:
      return "MUTE_STATUS_MUTE";
    case MuteStatus.MUTE_STATUS_UN_MUTE:
      return "MUTE_STATUS_UN_MUTE";
    case MuteStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GuestMicCameraManageOp {
  GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC = 0,
  GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA = 1,
  GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC = 2,
  GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA = 3,
  GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH = 4,
  UNRECOGNIZED = -1,
}

export function guestMicCameraManageOpFromJSON(object: any): GuestMicCameraManageOp {
  switch (object) {
    case 0:
    case "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC":
      return GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC;
    case 1:
    case "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA":
      return GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA;
    case 2:
    case "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC":
      return GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC;
    case 3:
    case "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA":
      return GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA;
    case 4:
    case "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH":
      return GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GuestMicCameraManageOp.UNRECOGNIZED;
  }
}

export function guestMicCameraManageOpToJSON(object: GuestMicCameraManageOp): string {
  switch (object) {
    case GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC:
      return "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC";
    case GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA:
      return "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA";
    case GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC:
      return "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC";
    case GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA:
      return "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA";
    case GuestMicCameraManageOp.GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH:
      return "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH";
    case GuestMicCameraManageOp.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GuestMicCameraChangeScene {
  GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN = 0,
  GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO = 1,
  GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL = 2,
  GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END = 3,
  UNRECOGNIZED = -1,
}

export function guestMicCameraChangeSceneFromJSON(object: any): GuestMicCameraChangeScene {
  switch (object) {
    case 0:
    case "GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN":
      return GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN;
    case 1:
    case "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO":
      return GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO;
    case 2:
    case "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL":
      return GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL;
    case 3:
    case "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END":
      return GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GuestMicCameraChangeScene.UNRECOGNIZED;
  }
}

export function guestMicCameraChangeSceneToJSON(object: GuestMicCameraChangeScene): string {
  switch (object) {
    case GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN:
      return "GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN";
    case GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO:
      return "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO";
    case GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL:
      return "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL";
    case GuestMicCameraChangeScene.GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END:
      return "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END";
    case GuestMicCameraChangeScene.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkMicUserAdminType {
  LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0,
  LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1,
  LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2,
  UNRECOGNIZED = -1,
}

export function linkMicUserAdminTypeFromJSON(object: any): LinkMicUserAdminType {
  switch (object) {
    case 0:
    case "LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE":
      return LinkMicUserAdminType.LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE;
    case 1:
    case "LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE":
      return LinkMicUserAdminType.LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE;
    case 2:
    case "LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE":
      return LinkMicUserAdminType.LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkMicUserAdminType.UNRECOGNIZED;
  }
}

export function linkMicUserAdminTypeToJSON(object: LinkMicUserAdminType): string {
  switch (object) {
    case LinkMicUserAdminType.LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE:
      return "LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE";
    case LinkMicUserAdminType.LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE:
      return "LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE";
    case LinkMicUserAdminType.LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE:
      return "LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE";
    case LinkMicUserAdminType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkmicMultiLiveEnum {
  LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0,
  LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1,
  UNRECOGNIZED = -1,
}

export function linkmicMultiLiveEnumFromJSON(object: any): LinkmicMultiLiveEnum {
  switch (object) {
    case 0:
    case "LINKMIC_MULTI_LIVE_ENUM_DEFAULT":
      return LinkmicMultiLiveEnum.LINKMIC_MULTI_LIVE_ENUM_DEFAULT;
    case 1:
    case "LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT":
      return LinkmicMultiLiveEnum.LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkmicMultiLiveEnum.UNRECOGNIZED;
  }
}

export function linkmicMultiLiveEnumToJSON(object: LinkmicMultiLiveEnum): string {
  switch (object) {
    case LinkmicMultiLiveEnum.LINKMIC_MULTI_LIVE_ENUM_DEFAULT:
      return "LINKMIC_MULTI_LIVE_ENUM_DEFAULT";
    case LinkmicMultiLiveEnum.LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT:
      return "LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT";
    case LinkmicMultiLiveEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PollEndType {
  POLL_END_TYPE_POLL_END_BY_TIME = 0,
  POLL_END_TYPE_POLL_END_BY_OWNER = 1,
  POLL_END_TYPE_POLL_END_BY_OTHER = 2,
  POLL_END_TYPE_POLL_END_BY_ADMIN = 3,
  UNRECOGNIZED = -1,
}

export function pollEndTypeFromJSON(object: any): PollEndType {
  switch (object) {
    case 0:
    case "POLL_END_TYPE_POLL_END_BY_TIME":
      return PollEndType.POLL_END_TYPE_POLL_END_BY_TIME;
    case 1:
    case "POLL_END_TYPE_POLL_END_BY_OWNER":
      return PollEndType.POLL_END_TYPE_POLL_END_BY_OWNER;
    case 2:
    case "POLL_END_TYPE_POLL_END_BY_OTHER":
      return PollEndType.POLL_END_TYPE_POLL_END_BY_OTHER;
    case 3:
    case "POLL_END_TYPE_POLL_END_BY_ADMIN":
      return PollEndType.POLL_END_TYPE_POLL_END_BY_ADMIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PollEndType.UNRECOGNIZED;
  }
}

export function pollEndTypeToJSON(object: PollEndType): string {
  switch (object) {
    case PollEndType.POLL_END_TYPE_POLL_END_BY_TIME:
      return "POLL_END_TYPE_POLL_END_BY_TIME";
    case PollEndType.POLL_END_TYPE_POLL_END_BY_OWNER:
      return "POLL_END_TYPE_POLL_END_BY_OWNER";
    case PollEndType.POLL_END_TYPE_POLL_END_BY_OTHER:
      return "POLL_END_TYPE_POLL_END_BY_OTHER";
    case PollEndType.POLL_END_TYPE_POLL_END_BY_ADMIN:
      return "POLL_END_TYPE_POLL_END_BY_ADMIN";
    case PollEndType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CohostABTestType {
  COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN = 0,
  COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY = 1,
  COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION = 2,
  COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH = 3,
  COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT = 4,
  UNRECOGNIZED = -1,
}

export function cohostABTestTypeFromJSON(object: any): CohostABTestType {
  switch (object) {
    case 0:
    case "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN":
      return CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN;
    case 1:
    case "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY":
      return CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY;
    case 2:
    case "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION":
      return CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION;
    case 3:
    case "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH":
      return CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH;
    case 4:
    case "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT":
      return CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CohostABTestType.UNRECOGNIZED;
  }
}

export function cohostABTestTypeToJSON(object: CohostABTestType): string {
  switch (object) {
    case CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN:
      return "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN";
    case CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY:
      return "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY";
    case CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION:
      return "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION";
    case CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH:
      return "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH";
    case CohostABTestType.COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT:
      return "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT";
    case CohostABTestType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OptPairStatus {
  OPT_PAIR_STATUS_UNKNOWN = 0,
  OPT_PAIR_STATUS_OFFLINE = 1,
  OPT_PAIR_STATUS_FINISHED = 2,
  UNRECOGNIZED = -1,
}

export function optPairStatusFromJSON(object: any): OptPairStatus {
  switch (object) {
    case 0:
    case "OPT_PAIR_STATUS_UNKNOWN":
      return OptPairStatus.OPT_PAIR_STATUS_UNKNOWN;
    case 1:
    case "OPT_PAIR_STATUS_OFFLINE":
      return OptPairStatus.OPT_PAIR_STATUS_OFFLINE;
    case 2:
    case "OPT_PAIR_STATUS_FINISHED":
      return OptPairStatus.OPT_PAIR_STATUS_FINISHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OptPairStatus.UNRECOGNIZED;
  }
}

export function optPairStatusToJSON(object: OptPairStatus): string {
  switch (object) {
    case OptPairStatus.OPT_PAIR_STATUS_UNKNOWN:
      return "OPT_PAIR_STATUS_UNKNOWN";
    case OptPairStatus.OPT_PAIR_STATUS_OFFLINE:
      return "OPT_PAIR_STATUS_OFFLINE";
    case OptPairStatus.OPT_PAIR_STATUS_FINISHED:
      return "OPT_PAIR_STATUS_FINISHED";
    case OptPairStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContentPositionType {
  CONTENT_POSITION_TYPE_UNKNOWN = 0,
  CONTENT_POSITION_TYPE_STREAM = 1,
  CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2,
  CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3,
  UNRECOGNIZED = -1,
}

export function contentPositionTypeFromJSON(object: any): ContentPositionType {
  switch (object) {
    case 0:
    case "CONTENT_POSITION_TYPE_UNKNOWN":
      return ContentPositionType.CONTENT_POSITION_TYPE_UNKNOWN;
    case 1:
    case "CONTENT_POSITION_TYPE_STREAM":
      return ContentPositionType.CONTENT_POSITION_TYPE_STREAM;
    case 2:
    case "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT":
      return ContentPositionType.CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT;
    case 3:
    case "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE":
      return ContentPositionType.CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentPositionType.UNRECOGNIZED;
  }
}

export function contentPositionTypeToJSON(object: ContentPositionType): string {
  switch (object) {
    case ContentPositionType.CONTENT_POSITION_TYPE_UNKNOWN:
      return "CONTENT_POSITION_TYPE_UNKNOWN";
    case ContentPositionType.CONTENT_POSITION_TYPE_STREAM:
      return "CONTENT_POSITION_TYPE_STREAM";
    case ContentPositionType.CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT:
      return "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT";
    case ContentPositionType.CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE:
      return "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE";
    case ContentPositionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MultiGuestOutsideRoomInviteSource {
  MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN = 0,
  MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL = 1,
  MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE = 2,
  MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION = 3,
  UNRECOGNIZED = -1,
}

export function multiGuestOutsideRoomInviteSourceFromJSON(object: any): MultiGuestOutsideRoomInviteSource {
  switch (object) {
    case 0:
    case "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN":
      return MultiGuestOutsideRoomInviteSource
        .MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN;
    case 1:
    case "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL":
      return MultiGuestOutsideRoomInviteSource.MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL;
    case 2:
    case "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE":
      return MultiGuestOutsideRoomInviteSource
        .MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE;
    case 3:
    case "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION":
      return MultiGuestOutsideRoomInviteSource
        .MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MultiGuestOutsideRoomInviteSource.UNRECOGNIZED;
  }
}

export function multiGuestOutsideRoomInviteSourceToJSON(object: MultiGuestOutsideRoomInviteSource): string {
  switch (object) {
    case MultiGuestOutsideRoomInviteSource.MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN:
      return "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN";
    case MultiGuestOutsideRoomInviteSource.MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL:
      return "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL";
    case MultiGuestOutsideRoomInviteSource.MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE:
      return "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE";
    case MultiGuestOutsideRoomInviteSource
      .MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION:
      return "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION";
    case MultiGuestOutsideRoomInviteSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkUserType {
  LINK_USER_TYPE_DEFAULT = 0,
  LINK_USER_TYPE_KARAOKE = 1,
  UNRECOGNIZED = -1,
}

export function linkUserTypeFromJSON(object: any): LinkUserType {
  switch (object) {
    case 0:
    case "LINK_USER_TYPE_DEFAULT":
      return LinkUserType.LINK_USER_TYPE_DEFAULT;
    case 1:
    case "LINK_USER_TYPE_KARAOKE":
      return LinkUserType.LINK_USER_TYPE_KARAOKE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkUserType.UNRECOGNIZED;
  }
}

export function linkUserTypeToJSON(object: LinkUserType): string {
  switch (object) {
    case LinkUserType.LINK_USER_TYPE_DEFAULT:
      return "LINK_USER_TYPE_DEFAULT";
    case LinkUserType.LINK_USER_TYPE_KARAOKE:
      return "LINK_USER_TYPE_KARAOKE";
    case LinkUserType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContentInviteSource {
  CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN = 0,
  CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE = 1,
  CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE = 2,
  CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE = 3,
  CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE = 4,
  UNRECOGNIZED = -1,
}

export function contentInviteSourceFromJSON(object: any): ContentInviteSource {
  switch (object) {
    case 0:
    case "CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN":
      return ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN;
    case 1:
    case "CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE":
      return ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE;
    case 2:
    case "CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE":
      return ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE;
    case 3:
    case "CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE":
      return ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE;
    case 4:
    case "CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE":
      return ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentInviteSource.UNRECOGNIZED;
  }
}

export function contentInviteSourceToJSON(object: ContentInviteSource): string {
  switch (object) {
    case ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN:
      return "CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN";
    case ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE:
      return "CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE";
    case ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE:
      return "CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE";
    case ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE:
      return "CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE";
    case ContentInviteSource.CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE:
      return "CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE";
    case ContentInviteSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LinkmicShareRevenueSetting {
  LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET = 0,
  LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN = 1,
  LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE = 2,
  UNRECOGNIZED = -1,
}

export function linkmicShareRevenueSettingFromJSON(object: any): LinkmicShareRevenueSetting {
  switch (object) {
    case 0:
    case "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET":
      return LinkmicShareRevenueSetting.LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET;
    case 1:
    case "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN":
      return LinkmicShareRevenueSetting.LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN;
    case 2:
    case "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE":
      return LinkmicShareRevenueSetting.LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkmicShareRevenueSetting.UNRECOGNIZED;
  }
}

export function linkmicShareRevenueSettingToJSON(object: LinkmicShareRevenueSetting): string {
  switch (object) {
    case LinkmicShareRevenueSetting.LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET:
      return "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET";
    case LinkmicShareRevenueSetting.LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN:
      return "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN";
    case LinkmicShareRevenueSetting.LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE:
      return "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE";
    case LinkmicShareRevenueSetting.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PosIdentityType {
  POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT = 0,
  POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID = 1,
  POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID = 2,
  POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID = 3,
  UNRECOGNIZED = -1,
}

export function posIdentityTypeFromJSON(object: any): PosIdentityType {
  switch (object) {
    case 0:
    case "POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT":
      return PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT;
    case 1:
    case "POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID":
      return PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID;
    case 2:
    case "POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID":
      return PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID;
    case 3:
    case "POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID":
      return PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PosIdentityType.UNRECOGNIZED;
  }
}

export function posIdentityTypeToJSON(object: PosIdentityType): string {
  switch (object) {
    case PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT:
      return "POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT";
    case PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID:
      return "POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID";
    case PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID:
      return "POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID";
    case PosIdentityType.POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID:
      return "POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID";
    case PosIdentityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum JoinType {
  JOIN_TYPE_UNKNOWN = 0,
  JOIN_TYPE_CHANNEL_APPLY = 1,
  JOIN_TYPE_CHANNEL_INVITE = 2,
  JOIN_TYPE_GROUP_APPLY = 100,
  JOIN_TYPE_GROUP_APPLY_FOLLOW = 101,
  JOIN_TYPE_GROUP_INVITE = 102,
  JOIN_TYPE_GROUP_INVITE_FOLLOW = 103,
  JOIN_TYPE_GROUP_OWNER_JOIN = 104,
  UNRECOGNIZED = -1,
}

export function joinTypeFromJSON(object: any): JoinType {
  switch (object) {
    case 0:
    case "JOIN_TYPE_UNKNOWN":
      return JoinType.JOIN_TYPE_UNKNOWN;
    case 1:
    case "JOIN_TYPE_CHANNEL_APPLY":
      return JoinType.JOIN_TYPE_CHANNEL_APPLY;
    case 2:
    case "JOIN_TYPE_CHANNEL_INVITE":
      return JoinType.JOIN_TYPE_CHANNEL_INVITE;
    case 100:
    case "JOIN_TYPE_GROUP_APPLY":
      return JoinType.JOIN_TYPE_GROUP_APPLY;
    case 101:
    case "JOIN_TYPE_GROUP_APPLY_FOLLOW":
      return JoinType.JOIN_TYPE_GROUP_APPLY_FOLLOW;
    case 102:
    case "JOIN_TYPE_GROUP_INVITE":
      return JoinType.JOIN_TYPE_GROUP_INVITE;
    case 103:
    case "JOIN_TYPE_GROUP_INVITE_FOLLOW":
      return JoinType.JOIN_TYPE_GROUP_INVITE_FOLLOW;
    case 104:
    case "JOIN_TYPE_GROUP_OWNER_JOIN":
      return JoinType.JOIN_TYPE_GROUP_OWNER_JOIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JoinType.UNRECOGNIZED;
  }
}

export function joinTypeToJSON(object: JoinType): string {
  switch (object) {
    case JoinType.JOIN_TYPE_UNKNOWN:
      return "JOIN_TYPE_UNKNOWN";
    case JoinType.JOIN_TYPE_CHANNEL_APPLY:
      return "JOIN_TYPE_CHANNEL_APPLY";
    case JoinType.JOIN_TYPE_CHANNEL_INVITE:
      return "JOIN_TYPE_CHANNEL_INVITE";
    case JoinType.JOIN_TYPE_GROUP_APPLY:
      return "JOIN_TYPE_GROUP_APPLY";
    case JoinType.JOIN_TYPE_GROUP_APPLY_FOLLOW:
      return "JOIN_TYPE_GROUP_APPLY_FOLLOW";
    case JoinType.JOIN_TYPE_GROUP_INVITE:
      return "JOIN_TYPE_GROUP_INVITE";
    case JoinType.JOIN_TYPE_GROUP_INVITE_FOLLOW:
      return "JOIN_TYPE_GROUP_INVITE_FOLLOW";
    case JoinType.JOIN_TYPE_GROUP_OWNER_JOIN:
      return "JOIN_TYPE_GROUP_OWNER_JOIN";
    case JoinType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CohostLayoutMode {
  COHOST_LAYOUT_MODE_NORMAL = 0,
  COHOST_LAYOUT_MODE_SCREEN_SHARE = 1,
  UNRECOGNIZED = -1,
}

export function cohostLayoutModeFromJSON(object: any): CohostLayoutMode {
  switch (object) {
    case 0:
    case "COHOST_LAYOUT_MODE_NORMAL":
      return CohostLayoutMode.COHOST_LAYOUT_MODE_NORMAL;
    case 1:
    case "COHOST_LAYOUT_MODE_SCREEN_SHARE":
      return CohostLayoutMode.COHOST_LAYOUT_MODE_SCREEN_SHARE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CohostLayoutMode.UNRECOGNIZED;
  }
}

export function cohostLayoutModeToJSON(object: CohostLayoutMode): string {
  switch (object) {
    case CohostLayoutMode.COHOST_LAYOUT_MODE_NORMAL:
      return "COHOST_LAYOUT_MODE_NORMAL";
    case CohostLayoutMode.COHOST_LAYOUT_MODE_SCREEN_SHARE:
      return "COHOST_LAYOUT_MODE_SCREEN_SHARE";
    case CohostLayoutMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TagClassification {
  TAG_CLASSIFICATION_UNKNOWN = 0,
  TAG_CLASSIFICATION_COHOST_HISTORY = 1,
  TAG_CLASSIFICATION_FIRST_DEGREE_RELATION = 2,
  TAG_CLASSIFICATION_SECOND_DEGREE_RELATION = 3,
  TAG_CLASSIFICATION_RANK = 4,
  TAG_CLASSIFICATION_SIMILAR_INTERESTS = 5,
  UNRECOGNIZED = -1,
}

export function tagClassificationFromJSON(object: any): TagClassification {
  switch (object) {
    case 0:
    case "TAG_CLASSIFICATION_UNKNOWN":
      return TagClassification.TAG_CLASSIFICATION_UNKNOWN;
    case 1:
    case "TAG_CLASSIFICATION_COHOST_HISTORY":
      return TagClassification.TAG_CLASSIFICATION_COHOST_HISTORY;
    case 2:
    case "TAG_CLASSIFICATION_FIRST_DEGREE_RELATION":
      return TagClassification.TAG_CLASSIFICATION_FIRST_DEGREE_RELATION;
    case 3:
    case "TAG_CLASSIFICATION_SECOND_DEGREE_RELATION":
      return TagClassification.TAG_CLASSIFICATION_SECOND_DEGREE_RELATION;
    case 4:
    case "TAG_CLASSIFICATION_RANK":
      return TagClassification.TAG_CLASSIFICATION_RANK;
    case 5:
    case "TAG_CLASSIFICATION_SIMILAR_INTERESTS":
      return TagClassification.TAG_CLASSIFICATION_SIMILAR_INTERESTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TagClassification.UNRECOGNIZED;
  }
}

export function tagClassificationToJSON(object: TagClassification): string {
  switch (object) {
    case TagClassification.TAG_CLASSIFICATION_UNKNOWN:
      return "TAG_CLASSIFICATION_UNKNOWN";
    case TagClassification.TAG_CLASSIFICATION_COHOST_HISTORY:
      return "TAG_CLASSIFICATION_COHOST_HISTORY";
    case TagClassification.TAG_CLASSIFICATION_FIRST_DEGREE_RELATION:
      return "TAG_CLASSIFICATION_FIRST_DEGREE_RELATION";
    case TagClassification.TAG_CLASSIFICATION_SECOND_DEGREE_RELATION:
      return "TAG_CLASSIFICATION_SECOND_DEGREE_RELATION";
    case TagClassification.TAG_CLASSIFICATION_RANK:
      return "TAG_CLASSIFICATION_RANK";
    case TagClassification.TAG_CLASSIFICATION_SIMILAR_INTERESTS:
      return "TAG_CLASSIFICATION_SIMILAR_INTERESTS";
    case TagClassification.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SourceType {
  SOURCE_TYPE_UNKNOWN = 0,
  SOURCE_TYPE_FRIEND_LIST = 1,
  SOURCE_TYPE_RECOMMEND_LIST = 2,
  SOURCE_TYPE_RECENT = 3,
  SOURCE_TYPE_OTHER_FOLLOW = 4,
  SOURCE_TYPE_QUICK_PAIR = 5,
  SOURCE_TYPE_ACTIVITY = 6,
  SOURCE_TYPE_QUICK_RECOMMEND = 7,
  SOURCE_TYPE_OFFICIAL_CHANNEL = 8,
  SOURCE_TYPE_BEST_TEAMMATE = 9,
  SOURCE_TYPE_RESERVATION = 10,
  SOURCE_TYPE_PAIRING = 11,
  SOURCE_TYPE_PAIRING_ON_RESERVATION = 12,
  SOURCE_TYPE_TOPIC_QUICK_PAIR = 13,
  SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14,
  SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15,
  SOURCE_TYPE_WEEKLY_RANK = 20,
  SOURCE_TYPE_HOURLY_RANK = 21,
  SOURCE_TYPE_WEEKLY_RISING = 23,
  SOURCE_TYPE_WEEKLY_ROOKIE = 24,
  SOURCE_TYPE_CONNECTION_LIST = 25,
  SOURCE_TYPE_DAILY_RANK = 26,
  SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27,
  SOURCE_TYPE_RESERVATION_BUBBLE = 28,
  SOURCE_TYPE_PAIRING_BUBBLE = 29,
  SOURCE_TYPE_LEAGUE_PHASE_ONE = 30,
  SOURCE_TYPE_LEAGUE_PHASE_TWO = 31,
  SOURCE_TYPE_LEAGUE_PHASE_THREE = 32,
  SOURCE_TYPE_DAILY_ROOKIE = 33,
  SOURCE_TYPE_MAY_KNOW_LIST = 34,
  SOURCE_TYPE_BANNER = 35,
  SOURCE_TYPE_FANS_TEAM_RANK = 36,
  SOURCE_TYPE_SEARCH = 37,
  SOURCE_TYPE_E_OY_RANK_LIST = 38,
  SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39,
  SOURCE_TYPE_CREATOR_CLASS_RANK = 40,
  SOURCE_TYPE_HISTORY = 41,
  SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43,
  UNRECOGNIZED = -1,
}

export function sourceTypeFromJSON(object: any): SourceType {
  switch (object) {
    case 0:
    case "SOURCE_TYPE_UNKNOWN":
      return SourceType.SOURCE_TYPE_UNKNOWN;
    case 1:
    case "SOURCE_TYPE_FRIEND_LIST":
      return SourceType.SOURCE_TYPE_FRIEND_LIST;
    case 2:
    case "SOURCE_TYPE_RECOMMEND_LIST":
      return SourceType.SOURCE_TYPE_RECOMMEND_LIST;
    case 3:
    case "SOURCE_TYPE_RECENT":
      return SourceType.SOURCE_TYPE_RECENT;
    case 4:
    case "SOURCE_TYPE_OTHER_FOLLOW":
      return SourceType.SOURCE_TYPE_OTHER_FOLLOW;
    case 5:
    case "SOURCE_TYPE_QUICK_PAIR":
      return SourceType.SOURCE_TYPE_QUICK_PAIR;
    case 6:
    case "SOURCE_TYPE_ACTIVITY":
      return SourceType.SOURCE_TYPE_ACTIVITY;
    case 7:
    case "SOURCE_TYPE_QUICK_RECOMMEND":
      return SourceType.SOURCE_TYPE_QUICK_RECOMMEND;
    case 8:
    case "SOURCE_TYPE_OFFICIAL_CHANNEL":
      return SourceType.SOURCE_TYPE_OFFICIAL_CHANNEL;
    case 9:
    case "SOURCE_TYPE_BEST_TEAMMATE":
      return SourceType.SOURCE_TYPE_BEST_TEAMMATE;
    case 10:
    case "SOURCE_TYPE_RESERVATION":
      return SourceType.SOURCE_TYPE_RESERVATION;
    case 11:
    case "SOURCE_TYPE_PAIRING":
      return SourceType.SOURCE_TYPE_PAIRING;
    case 12:
    case "SOURCE_TYPE_PAIRING_ON_RESERVATION":
      return SourceType.SOURCE_TYPE_PAIRING_ON_RESERVATION;
    case 13:
    case "SOURCE_TYPE_TOPIC_QUICK_PAIR":
      return SourceType.SOURCE_TYPE_TOPIC_QUICK_PAIR;
    case 14:
    case "SOURCE_TYPE_TOPIC_QUICK_RECOMMEND":
      return SourceType.SOURCE_TYPE_TOPIC_QUICK_RECOMMEND;
    case 15:
    case "SOURCE_TYPE_ONLINE_FRIEND_CAPSULE":
      return SourceType.SOURCE_TYPE_ONLINE_FRIEND_CAPSULE;
    case 20:
    case "SOURCE_TYPE_WEEKLY_RANK":
      return SourceType.SOURCE_TYPE_WEEKLY_RANK;
    case 21:
    case "SOURCE_TYPE_HOURLY_RANK":
      return SourceType.SOURCE_TYPE_HOURLY_RANK;
    case 23:
    case "SOURCE_TYPE_WEEKLY_RISING":
      return SourceType.SOURCE_TYPE_WEEKLY_RISING;
    case 24:
    case "SOURCE_TYPE_WEEKLY_ROOKIE":
      return SourceType.SOURCE_TYPE_WEEKLY_ROOKIE;
    case 25:
    case "SOURCE_TYPE_CONNECTION_LIST":
      return SourceType.SOURCE_TYPE_CONNECTION_LIST;
    case 26:
    case "SOURCE_TYPE_DAILY_RANK":
      return SourceType.SOURCE_TYPE_DAILY_RANK;
    case 27:
    case "SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME":
      return SourceType.SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME;
    case 28:
    case "SOURCE_TYPE_RESERVATION_BUBBLE":
      return SourceType.SOURCE_TYPE_RESERVATION_BUBBLE;
    case 29:
    case "SOURCE_TYPE_PAIRING_BUBBLE":
      return SourceType.SOURCE_TYPE_PAIRING_BUBBLE;
    case 30:
    case "SOURCE_TYPE_LEAGUE_PHASE_ONE":
      return SourceType.SOURCE_TYPE_LEAGUE_PHASE_ONE;
    case 31:
    case "SOURCE_TYPE_LEAGUE_PHASE_TWO":
      return SourceType.SOURCE_TYPE_LEAGUE_PHASE_TWO;
    case 32:
    case "SOURCE_TYPE_LEAGUE_PHASE_THREE":
      return SourceType.SOURCE_TYPE_LEAGUE_PHASE_THREE;
    case 33:
    case "SOURCE_TYPE_DAILY_ROOKIE":
      return SourceType.SOURCE_TYPE_DAILY_ROOKIE;
    case 34:
    case "SOURCE_TYPE_MAY_KNOW_LIST":
      return SourceType.SOURCE_TYPE_MAY_KNOW_LIST;
    case 35:
    case "SOURCE_TYPE_BANNER":
      return SourceType.SOURCE_TYPE_BANNER;
    case 36:
    case "SOURCE_TYPE_FANS_TEAM_RANK":
      return SourceType.SOURCE_TYPE_FANS_TEAM_RANK;
    case 37:
    case "SOURCE_TYPE_SEARCH":
      return SourceType.SOURCE_TYPE_SEARCH;
    case 38:
    case "SOURCE_TYPE_E_OY_RANK_LIST":
      return SourceType.SOURCE_TYPE_E_OY_RANK_LIST;
    case 39:
    case "SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK":
      return SourceType.SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK;
    case 40:
    case "SOURCE_TYPE_CREATOR_CLASS_RANK":
      return SourceType.SOURCE_TYPE_CREATOR_CLASS_RANK;
    case 41:
    case "SOURCE_TYPE_HISTORY":
      return SourceType.SOURCE_TYPE_HISTORY;
    case 43:
    case "SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST":
      return SourceType.SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SourceType.UNRECOGNIZED;
  }
}

export function sourceTypeToJSON(object: SourceType): string {
  switch (object) {
    case SourceType.SOURCE_TYPE_UNKNOWN:
      return "SOURCE_TYPE_UNKNOWN";
    case SourceType.SOURCE_TYPE_FRIEND_LIST:
      return "SOURCE_TYPE_FRIEND_LIST";
    case SourceType.SOURCE_TYPE_RECOMMEND_LIST:
      return "SOURCE_TYPE_RECOMMEND_LIST";
    case SourceType.SOURCE_TYPE_RECENT:
      return "SOURCE_TYPE_RECENT";
    case SourceType.SOURCE_TYPE_OTHER_FOLLOW:
      return "SOURCE_TYPE_OTHER_FOLLOW";
    case SourceType.SOURCE_TYPE_QUICK_PAIR:
      return "SOURCE_TYPE_QUICK_PAIR";
    case SourceType.SOURCE_TYPE_ACTIVITY:
      return "SOURCE_TYPE_ACTIVITY";
    case SourceType.SOURCE_TYPE_QUICK_RECOMMEND:
      return "SOURCE_TYPE_QUICK_RECOMMEND";
    case SourceType.SOURCE_TYPE_OFFICIAL_CHANNEL:
      return "SOURCE_TYPE_OFFICIAL_CHANNEL";
    case SourceType.SOURCE_TYPE_BEST_TEAMMATE:
      return "SOURCE_TYPE_BEST_TEAMMATE";
    case SourceType.SOURCE_TYPE_RESERVATION:
      return "SOURCE_TYPE_RESERVATION";
    case SourceType.SOURCE_TYPE_PAIRING:
      return "SOURCE_TYPE_PAIRING";
    case SourceType.SOURCE_TYPE_PAIRING_ON_RESERVATION:
      return "SOURCE_TYPE_PAIRING_ON_RESERVATION";
    case SourceType.SOURCE_TYPE_TOPIC_QUICK_PAIR:
      return "SOURCE_TYPE_TOPIC_QUICK_PAIR";
    case SourceType.SOURCE_TYPE_TOPIC_QUICK_RECOMMEND:
      return "SOURCE_TYPE_TOPIC_QUICK_RECOMMEND";
    case SourceType.SOURCE_TYPE_ONLINE_FRIEND_CAPSULE:
      return "SOURCE_TYPE_ONLINE_FRIEND_CAPSULE";
    case SourceType.SOURCE_TYPE_WEEKLY_RANK:
      return "SOURCE_TYPE_WEEKLY_RANK";
    case SourceType.SOURCE_TYPE_HOURLY_RANK:
      return "SOURCE_TYPE_HOURLY_RANK";
    case SourceType.SOURCE_TYPE_WEEKLY_RISING:
      return "SOURCE_TYPE_WEEKLY_RISING";
    case SourceType.SOURCE_TYPE_WEEKLY_ROOKIE:
      return "SOURCE_TYPE_WEEKLY_ROOKIE";
    case SourceType.SOURCE_TYPE_CONNECTION_LIST:
      return "SOURCE_TYPE_CONNECTION_LIST";
    case SourceType.SOURCE_TYPE_DAILY_RANK:
      return "SOURCE_TYPE_DAILY_RANK";
    case SourceType.SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME:
      return "SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME";
    case SourceType.SOURCE_TYPE_RESERVATION_BUBBLE:
      return "SOURCE_TYPE_RESERVATION_BUBBLE";
    case SourceType.SOURCE_TYPE_PAIRING_BUBBLE:
      return "SOURCE_TYPE_PAIRING_BUBBLE";
    case SourceType.SOURCE_TYPE_LEAGUE_PHASE_ONE:
      return "SOURCE_TYPE_LEAGUE_PHASE_ONE";
    case SourceType.SOURCE_TYPE_LEAGUE_PHASE_TWO:
      return "SOURCE_TYPE_LEAGUE_PHASE_TWO";
    case SourceType.SOURCE_TYPE_LEAGUE_PHASE_THREE:
      return "SOURCE_TYPE_LEAGUE_PHASE_THREE";
    case SourceType.SOURCE_TYPE_DAILY_ROOKIE:
      return "SOURCE_TYPE_DAILY_ROOKIE";
    case SourceType.SOURCE_TYPE_MAY_KNOW_LIST:
      return "SOURCE_TYPE_MAY_KNOW_LIST";
    case SourceType.SOURCE_TYPE_BANNER:
      return "SOURCE_TYPE_BANNER";
    case SourceType.SOURCE_TYPE_FANS_TEAM_RANK:
      return "SOURCE_TYPE_FANS_TEAM_RANK";
    case SourceType.SOURCE_TYPE_SEARCH:
      return "SOURCE_TYPE_SEARCH";
    case SourceType.SOURCE_TYPE_E_OY_RANK_LIST:
      return "SOURCE_TYPE_E_OY_RANK_LIST";
    case SourceType.SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK:
      return "SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK";
    case SourceType.SOURCE_TYPE_CREATOR_CLASS_RANK:
      return "SOURCE_TYPE_CREATOR_CLASS_RANK";
    case SourceType.SOURCE_TYPE_HISTORY:
      return "SOURCE_TYPE_HISTORY";
    case SourceType.SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST:
      return "SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST";
    case SourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BattleType {
  BATTLE_TYPE_UNKNOWN_BATTLE_TYPE = 0,
  BATTLE_TYPE_NORMAL_BATTLE = 1,
  BATTLE_TYPE_TEAM_BATTLE = 2,
  BATTLE_TYPE_INDIVIDUAL_BATTLE = 3,
  BATTLE_TYPE_1_V_N = 4,
  BATTLE_TYPE_TAKE_THE_STAGE = 51,
  BATTLE_TYPE_GROUP_SHOW = 52,
  UNRECOGNIZED = -1,
}

export function battleTypeFromJSON(object: any): BattleType {
  switch (object) {
    case 0:
    case "BATTLE_TYPE_UNKNOWN_BATTLE_TYPE":
      return BattleType.BATTLE_TYPE_UNKNOWN_BATTLE_TYPE;
    case 1:
    case "BATTLE_TYPE_NORMAL_BATTLE":
      return BattleType.BATTLE_TYPE_NORMAL_BATTLE;
    case 2:
    case "BATTLE_TYPE_TEAM_BATTLE":
      return BattleType.BATTLE_TYPE_TEAM_BATTLE;
    case 3:
    case "BATTLE_TYPE_INDIVIDUAL_BATTLE":
      return BattleType.BATTLE_TYPE_INDIVIDUAL_BATTLE;
    case 4:
    case "BATTLE_TYPE_1_V_N":
      return BattleType.BATTLE_TYPE_1_V_N;
    case 51:
    case "BATTLE_TYPE_TAKE_THE_STAGE":
      return BattleType.BATTLE_TYPE_TAKE_THE_STAGE;
    case 52:
    case "BATTLE_TYPE_GROUP_SHOW":
      return BattleType.BATTLE_TYPE_GROUP_SHOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BattleType.UNRECOGNIZED;
  }
}

export function battleTypeToJSON(object: BattleType): string {
  switch (object) {
    case BattleType.BATTLE_TYPE_UNKNOWN_BATTLE_TYPE:
      return "BATTLE_TYPE_UNKNOWN_BATTLE_TYPE";
    case BattleType.BATTLE_TYPE_NORMAL_BATTLE:
      return "BATTLE_TYPE_NORMAL_BATTLE";
    case BattleType.BATTLE_TYPE_TEAM_BATTLE:
      return "BATTLE_TYPE_TEAM_BATTLE";
    case BattleType.BATTLE_TYPE_INDIVIDUAL_BATTLE:
      return "BATTLE_TYPE_INDIVIDUAL_BATTLE";
    case BattleType.BATTLE_TYPE_1_V_N:
      return "BATTLE_TYPE_1_V_N";
    case BattleType.BATTLE_TYPE_TAKE_THE_STAGE:
      return "BATTLE_TYPE_TAKE_THE_STAGE";
    case BattleType.BATTLE_TYPE_GROUP_SHOW:
      return "BATTLE_TYPE_GROUP_SHOW";
    case BattleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BattleInviteType {
  BATTLE_INVITE_TYPE_NORMAL = 0,
  BATTLE_INVITE_TYPE_AGAIN = 1,
  UNRECOGNIZED = -1,
}

export function battleInviteTypeFromJSON(object: any): BattleInviteType {
  switch (object) {
    case 0:
    case "BATTLE_INVITE_TYPE_NORMAL":
      return BattleInviteType.BATTLE_INVITE_TYPE_NORMAL;
    case 1:
    case "BATTLE_INVITE_TYPE_AGAIN":
      return BattleInviteType.BATTLE_INVITE_TYPE_AGAIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BattleInviteType.UNRECOGNIZED;
  }
}

export function battleInviteTypeToJSON(object: BattleInviteType): string {
  switch (object) {
    case BattleInviteType.BATTLE_INVITE_TYPE_NORMAL:
      return "BATTLE_INVITE_TYPE_NORMAL";
    case BattleInviteType.BATTLE_INVITE_TYPE_AGAIN:
      return "BATTLE_INVITE_TYPE_AGAIN";
    case BattleInviteType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** @Common */
export interface CommonMessageData {
  method: string;
  msgId: string;
  roomId: string;
  createTime: string;
  monitor: number;
  isShowMsg: boolean;
  describe: string;
  displayText: Text | undefined;
  foldType: string;
  anchorFoldType: string;
  priorityScore: string;
  logId: string;
  msgProcessFilterK: string;
  msgProcessFilterV: string;
  fromIdc: string;
  toIdc: string;
  filterMsgTagsList: string[];
  sei: CommonMessageData_LiveMessageSEI | undefined;
  dependRootId: CommonMessageData_LiveMessageID | undefined;
  dependId: CommonMessageData_LiveMessageID | undefined;
  anchorPriorityScore: string;
  roomMessageHeatLevel: string;
  foldTypeForWeb: string;
  anchorFoldTypeForWeb: string;
  clientSendTime: string;
  /** Enum */
  dispatchStrategy: CommonMessageData_IMDispatchStrategy;
}

export enum CommonMessageData_IMDispatchStrategy {
  IM_DISPATCH_STRATEGY_DEFAULT = 0,
  IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE = 1,
  UNRECOGNIZED = -1,
}

export function commonMessageData_IMDispatchStrategyFromJSON(object: any): CommonMessageData_IMDispatchStrategy {
  switch (object) {
    case 0:
    case "IM_DISPATCH_STRATEGY_DEFAULT":
      return CommonMessageData_IMDispatchStrategy.IM_DISPATCH_STRATEGY_DEFAULT;
    case 1:
    case "IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE":
      return CommonMessageData_IMDispatchStrategy.IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommonMessageData_IMDispatchStrategy.UNRECOGNIZED;
  }
}

export function commonMessageData_IMDispatchStrategyToJSON(object: CommonMessageData_IMDispatchStrategy): string {
  switch (object) {
    case CommonMessageData_IMDispatchStrategy.IM_DISPATCH_STRATEGY_DEFAULT:
      return "IM_DISPATCH_STRATEGY_DEFAULT";
    case CommonMessageData_IMDispatchStrategy.IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE:
      return "IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE";
    case CommonMessageData_IMDispatchStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CommonMessageData_LiveMessageSEI {
  uniqueId: CommonMessageData_LiveMessageID | undefined;
  timestamp: string;
}

export interface CommonMessageData_LiveMessageID {
  primaryId: string;
  messageScene: string;
}

/** @Text */
export interface Text {
  displayType: string;
  defaultPattern: string;
  defaultFormat: Text_TextFormat | undefined;
  piecesList: Text_TextPiece[];
}

export enum Text_ShowType {
  SHOW_TYPE_NORMAL = 0,
  SHOW_TYPE_FADE_IN_OUT = 1,
  UNRECOGNIZED = -1,
}

export function text_ShowTypeFromJSON(object: any): Text_ShowType {
  switch (object) {
    case 0:
    case "SHOW_TYPE_NORMAL":
      return Text_ShowType.SHOW_TYPE_NORMAL;
    case 1:
    case "SHOW_TYPE_FADE_IN_OUT":
      return Text_ShowType.SHOW_TYPE_FADE_IN_OUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Text_ShowType.UNRECOGNIZED;
  }
}

export function text_ShowTypeToJSON(object: Text_ShowType): string {
  switch (object) {
    case Text_ShowType.SHOW_TYPE_NORMAL:
      return "SHOW_TYPE_NORMAL";
    case Text_ShowType.SHOW_TYPE_FADE_IN_OUT:
      return "SHOW_TYPE_FADE_IN_OUT";
    case Text_ShowType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Text_TextPiece {
  type: number;
  format: Text_TextFormat | undefined;
  stringValue: string;
  userValue?: Text_TextPieceUser | undefined;
  giftValue?: Text_TextPieceGift | undefined;
  patternRefValue: Text_TextPiecePatternRef | undefined;
}

export interface Text_TextFormat {
  color: string;
  bold: boolean;
  italic: boolean;
  weight: number;
  italicAngle: number;
  fontSize: number;
  useHeighLightColor: boolean;
  useRemoteClor: boolean;
}

export interface Text_TextPieceGift {
  giftId: number;
  nameRef:
    | Text_PatternRef
    | undefined;
  /** Enum */
  showType: Text_ShowType;
  colorId: string;
}

export interface Text_TextPiecePatternRef {
  key: string;
  defaultPattern: string;
}

export interface Text_TextPieceUser {
  user: User | undefined;
  withColon: boolean;
}

export interface Text_PatternRef {
  key: string;
  defaultPattern: string;
}

/** @Image */
export interface Image {
  url: string[];
  mUri: string;
  height: number;
  width: number;
  avgColor: string;
  imageType: number;
  schema: string;
  content: Image_Content | undefined;
  isAnimated: boolean;
}

export interface Image_Content {
  name: string;
  fontColor: string;
  level: string;
}

/** @Badge */
export interface BadgeStruct {
  /** Enum */
  badgeDisplayType: BadgeStruct_BadgeDisplayType;
  badgePriorityType: BadgeStruct_BadgePriorityType;
  badgeScene: BadgeStruct_BadgeSceneType;
  position: BadgeStruct_Position;
  displayStatus: BadgeStruct_DisplayStatus;
  greyedByClient: string;
  exhibitionType: BadgeStruct_BadgeExhibitionType;
  schemaUrl: string;
  display: boolean;
  logExtra: PrivilegeLogExtra | undefined;
  image?: BadgeStruct_ImageBadge | undefined;
  text?: BadgeStruct_TextBadge | undefined;
  str?: BadgeStruct_StringBadge | undefined;
  combine?: BadgeStruct_CombineBadge | undefined;
  isCustomized: boolean;
}

export enum BadgeStruct_BadgeDisplayType {
  BADGEDISPLAYTYPE_UNKNOWN = 0,
  BADGEDISPLAYTYPE_IMAGE = 1,
  BADGEDISPLAYTYPE_TEXT = 2,
  BADGEDISPLAYTYPE_STRING = 3,
  BADGEDISPLAYTYPE_COMBINE = 4,
  UNRECOGNIZED = -1,
}

export function badgeStruct_BadgeDisplayTypeFromJSON(object: any): BadgeStruct_BadgeDisplayType {
  switch (object) {
    case 0:
    case "BADGEDISPLAYTYPE_UNKNOWN":
      return BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_UNKNOWN;
    case 1:
    case "BADGEDISPLAYTYPE_IMAGE":
      return BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_IMAGE;
    case 2:
    case "BADGEDISPLAYTYPE_TEXT":
      return BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_TEXT;
    case 3:
    case "BADGEDISPLAYTYPE_STRING":
      return BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_STRING;
    case 4:
    case "BADGEDISPLAYTYPE_COMBINE":
      return BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_COMBINE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_BadgeDisplayType.UNRECOGNIZED;
  }
}

export function badgeStruct_BadgeDisplayTypeToJSON(object: BadgeStruct_BadgeDisplayType): string {
  switch (object) {
    case BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_UNKNOWN:
      return "BADGEDISPLAYTYPE_UNKNOWN";
    case BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_IMAGE:
      return "BADGEDISPLAYTYPE_IMAGE";
    case BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_TEXT:
      return "BADGEDISPLAYTYPE_TEXT";
    case BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_STRING:
      return "BADGEDISPLAYTYPE_STRING";
    case BadgeStruct_BadgeDisplayType.BADGEDISPLAYTYPE_COMBINE:
      return "BADGEDISPLAYTYPE_COMBINE";
    case BadgeStruct_BadgeDisplayType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BadgeStruct_BadgePriorityType {
  BADGE_PRIORITY_TYPE_UNKNOWN = 0,
  BADGE_PRIORITY_TYPE_STRONG_RELATION = 10,
  BADGE_PRIORITY_TYPE_PLATFORM = 20,
  BADGE_PRIORITY_TYPE_RELATION = 30,
  BADGE_PRIORITY_TYPE_ACTIVITY = 40,
  BADGE_PRIORITY_TYPE_RANK_LIST = 50,
  UNRECOGNIZED = -1,
}

export function badgeStruct_BadgePriorityTypeFromJSON(object: any): BadgeStruct_BadgePriorityType {
  switch (object) {
    case 0:
    case "BADGE_PRIORITY_TYPE_UNKNOWN":
      return BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_UNKNOWN;
    case 10:
    case "BADGE_PRIORITY_TYPE_STRONG_RELATION":
      return BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_STRONG_RELATION;
    case 20:
    case "BADGE_PRIORITY_TYPE_PLATFORM":
      return BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_PLATFORM;
    case 30:
    case "BADGE_PRIORITY_TYPE_RELATION":
      return BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_RELATION;
    case 40:
    case "BADGE_PRIORITY_TYPE_ACTIVITY":
      return BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_ACTIVITY;
    case 50:
    case "BADGE_PRIORITY_TYPE_RANK_LIST":
      return BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_RANK_LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_BadgePriorityType.UNRECOGNIZED;
  }
}

export function badgeStruct_BadgePriorityTypeToJSON(object: BadgeStruct_BadgePriorityType): string {
  switch (object) {
    case BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_UNKNOWN:
      return "BADGE_PRIORITY_TYPE_UNKNOWN";
    case BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_STRONG_RELATION:
      return "BADGE_PRIORITY_TYPE_STRONG_RELATION";
    case BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_PLATFORM:
      return "BADGE_PRIORITY_TYPE_PLATFORM";
    case BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_RELATION:
      return "BADGE_PRIORITY_TYPE_RELATION";
    case BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_ACTIVITY:
      return "BADGE_PRIORITY_TYPE_ACTIVITY";
    case BadgeStruct_BadgePriorityType.BADGE_PRIORITY_TYPE_RANK_LIST:
      return "BADGE_PRIORITY_TYPE_RANK_LIST";
    case BadgeStruct_BadgePriorityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BadgeStruct_BadgeSceneType {
  BADGE_SCENE_TYPE_UNKNOWN = 0,
  BADGE_SCENE_TYPE_ADMIN = 1,
  BADGE_SCENE_TYPE_FIRST_RECHARGE = 2,
  BADGE_SCENE_TYPE_FRIENDS = 3,
  BADGE_SCENE_TYPE_SUBSCRIBER = 4,
  BADGE_SCENE_TYPE_ACTIVITY = 5,
  BADGE_SCENE_TYPE_RANK_LIST = 6,
  BADGE_SCENE_TYPE_NEW_SUBSCRIBER = 7,
  BADGE_SCENE_TYPE_USER_GRADE = 8,
  BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA = 9,
  BADGE_SCENE_TYPE_FANS = 10,
  BADGE_SCENE_TYPE_LIVE_PRO = 11,
  BADGE_SCENE_TYPE_ANCHOR = 12,
  UNRECOGNIZED = -1,
}

export function badgeStruct_BadgeSceneTypeFromJSON(object: any): BadgeStruct_BadgeSceneType {
  switch (object) {
    case 0:
    case "BADGE_SCENE_TYPE_UNKNOWN":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_UNKNOWN;
    case 1:
    case "BADGE_SCENE_TYPE_ADMIN":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_ADMIN;
    case 2:
    case "BADGE_SCENE_TYPE_FIRST_RECHARGE":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_FIRST_RECHARGE;
    case 3:
    case "BADGE_SCENE_TYPE_FRIENDS":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_FRIENDS;
    case 4:
    case "BADGE_SCENE_TYPE_SUBSCRIBER":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_SUBSCRIBER;
    case 5:
    case "BADGE_SCENE_TYPE_ACTIVITY":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_ACTIVITY;
    case 6:
    case "BADGE_SCENE_TYPE_RANK_LIST":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_RANK_LIST;
    case 7:
    case "BADGE_SCENE_TYPE_NEW_SUBSCRIBER":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_NEW_SUBSCRIBER;
    case 8:
    case "BADGE_SCENE_TYPE_USER_GRADE":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_USER_GRADE;
    case 9:
    case "BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA;
    case 10:
    case "BADGE_SCENE_TYPE_FANS":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_FANS;
    case 11:
    case "BADGE_SCENE_TYPE_LIVE_PRO":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_LIVE_PRO;
    case 12:
    case "BADGE_SCENE_TYPE_ANCHOR":
      return BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_ANCHOR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_BadgeSceneType.UNRECOGNIZED;
  }
}

export function badgeStruct_BadgeSceneTypeToJSON(object: BadgeStruct_BadgeSceneType): string {
  switch (object) {
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_UNKNOWN:
      return "BADGE_SCENE_TYPE_UNKNOWN";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_ADMIN:
      return "BADGE_SCENE_TYPE_ADMIN";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_FIRST_RECHARGE:
      return "BADGE_SCENE_TYPE_FIRST_RECHARGE";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_FRIENDS:
      return "BADGE_SCENE_TYPE_FRIENDS";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_SUBSCRIBER:
      return "BADGE_SCENE_TYPE_SUBSCRIBER";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_ACTIVITY:
      return "BADGE_SCENE_TYPE_ACTIVITY";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_RANK_LIST:
      return "BADGE_SCENE_TYPE_RANK_LIST";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_NEW_SUBSCRIBER:
      return "BADGE_SCENE_TYPE_NEW_SUBSCRIBER";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_USER_GRADE:
      return "BADGE_SCENE_TYPE_USER_GRADE";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA:
      return "BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_FANS:
      return "BADGE_SCENE_TYPE_FANS";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_LIVE_PRO:
      return "BADGE_SCENE_TYPE_LIVE_PRO";
    case BadgeStruct_BadgeSceneType.BADGE_SCENE_TYPE_ANCHOR:
      return "BADGE_SCENE_TYPE_ANCHOR";
    case BadgeStruct_BadgeSceneType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BadgeStruct_DisplayStatus {
  DISPLAY_STATUS_NORMAL = 0,
  DISPLAY_STATUS_SHADOW = 1,
  UNRECOGNIZED = -1,
}

export function badgeStruct_DisplayStatusFromJSON(object: any): BadgeStruct_DisplayStatus {
  switch (object) {
    case 0:
    case "DISPLAY_STATUS_NORMAL":
      return BadgeStruct_DisplayStatus.DISPLAY_STATUS_NORMAL;
    case 1:
    case "DISPLAY_STATUS_SHADOW":
      return BadgeStruct_DisplayStatus.DISPLAY_STATUS_SHADOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_DisplayStatus.UNRECOGNIZED;
  }
}

export function badgeStruct_DisplayStatusToJSON(object: BadgeStruct_DisplayStatus): string {
  switch (object) {
    case BadgeStruct_DisplayStatus.DISPLAY_STATUS_NORMAL:
      return "DISPLAY_STATUS_NORMAL";
    case BadgeStruct_DisplayStatus.DISPLAY_STATUS_SHADOW:
      return "DISPLAY_STATUS_SHADOW";
    case BadgeStruct_DisplayStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BadgeStruct_BadgeExhibitionType {
  BADGE_EXHIBITION_TYPE_BADGE = 0,
  BADGE_EXHIBITION_TYPE_IDENTITY_LABEL = 1,
  UNRECOGNIZED = -1,
}

export function badgeStruct_BadgeExhibitionTypeFromJSON(object: any): BadgeStruct_BadgeExhibitionType {
  switch (object) {
    case 0:
    case "BADGE_EXHIBITION_TYPE_BADGE":
      return BadgeStruct_BadgeExhibitionType.BADGE_EXHIBITION_TYPE_BADGE;
    case 1:
    case "BADGE_EXHIBITION_TYPE_IDENTITY_LABEL":
      return BadgeStruct_BadgeExhibitionType.BADGE_EXHIBITION_TYPE_IDENTITY_LABEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_BadgeExhibitionType.UNRECOGNIZED;
  }
}

export function badgeStruct_BadgeExhibitionTypeToJSON(object: BadgeStruct_BadgeExhibitionType): string {
  switch (object) {
    case BadgeStruct_BadgeExhibitionType.BADGE_EXHIBITION_TYPE_BADGE:
      return "BADGE_EXHIBITION_TYPE_BADGE";
    case BadgeStruct_BadgeExhibitionType.BADGE_EXHIBITION_TYPE_IDENTITY_LABEL:
      return "BADGE_EXHIBITION_TYPE_IDENTITY_LABEL";
    case BadgeStruct_BadgeExhibitionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BadgeStruct_Position {
  POSITIONUNKNOWN = 0,
  POSITIONLEFT = 1,
  POSITIONRIGHT = 2,
  UNRECOGNIZED = -1,
}

export function badgeStruct_PositionFromJSON(object: any): BadgeStruct_Position {
  switch (object) {
    case 0:
    case "POSITIONUNKNOWN":
      return BadgeStruct_Position.POSITIONUNKNOWN;
    case 1:
    case "POSITIONLEFT":
      return BadgeStruct_Position.POSITIONLEFT;
    case 2:
    case "POSITIONRIGHT":
      return BadgeStruct_Position.POSITIONRIGHT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_Position.UNRECOGNIZED;
  }
}

export function badgeStruct_PositionToJSON(object: BadgeStruct_Position): string {
  switch (object) {
    case BadgeStruct_Position.POSITIONUNKNOWN:
      return "POSITIONUNKNOWN";
    case BadgeStruct_Position.POSITIONLEFT:
      return "POSITIONLEFT";
    case BadgeStruct_Position.POSITIONRIGHT:
      return "POSITIONRIGHT";
    case BadgeStruct_Position.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BadgeStruct_HorizontalPaddingRule {
  HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH = 0,
  HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT = 1,
  UNRECOGNIZED = -1,
}

export function badgeStruct_HorizontalPaddingRuleFromJSON(object: any): BadgeStruct_HorizontalPaddingRule {
  switch (object) {
    case 0:
    case "HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH":
      return BadgeStruct_HorizontalPaddingRule.HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH;
    case 1:
    case "HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT":
      return BadgeStruct_HorizontalPaddingRule.HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_HorizontalPaddingRule.UNRECOGNIZED;
  }
}

export function badgeStruct_HorizontalPaddingRuleToJSON(object: BadgeStruct_HorizontalPaddingRule): string {
  switch (object) {
    case BadgeStruct_HorizontalPaddingRule.HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH:
      return "HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH";
    case BadgeStruct_HorizontalPaddingRule.HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT:
      return "HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT";
    case BadgeStruct_HorizontalPaddingRule.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BadgeStruct_VerticalPaddingRule {
  VERTICAL_PADDING_RULE_USE_DEFAULT = 0,
  VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM = 1,
  UNRECOGNIZED = -1,
}

export function badgeStruct_VerticalPaddingRuleFromJSON(object: any): BadgeStruct_VerticalPaddingRule {
  switch (object) {
    case 0:
    case "VERTICAL_PADDING_RULE_USE_DEFAULT":
      return BadgeStruct_VerticalPaddingRule.VERTICAL_PADDING_RULE_USE_DEFAULT;
    case 1:
    case "VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM":
      return BadgeStruct_VerticalPaddingRule.VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BadgeStruct_VerticalPaddingRule.UNRECOGNIZED;
  }
}

export function badgeStruct_VerticalPaddingRuleToJSON(object: BadgeStruct_VerticalPaddingRule): string {
  switch (object) {
    case BadgeStruct_VerticalPaddingRule.VERTICAL_PADDING_RULE_USE_DEFAULT:
      return "VERTICAL_PADDING_RULE_USE_DEFAULT";
    case BadgeStruct_VerticalPaddingRule.VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM:
      return "VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM";
    case BadgeStruct_VerticalPaddingRule.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BadgeStruct_CombineBadge {
  badgeDisplayType: number;
  icon: Image | undefined;
  text: BadgeStruct_TextBadge | undefined;
  str: string;
  padding: BadgeStruct_PaddingInfo | undefined;
  fontStyle: FontStyle | undefined;
  profileCardPanel: BadgeStruct_ProfileCardPanel | undefined;
  background: BadgeStruct_CombineBadgeBackground | undefined;
  backgroundDarkMode: BadgeStruct_CombineBadgeBackground | undefined;
  iconAutoMirrored: boolean;
  bgAutoMirrored: boolean;
  publicScreenShowStyle: number;
  personalCardShowStyle: number;
  rankListOnlineAudienceShowStyle: number;
  multiGuestShowStyle: number;
  arrowConfig: BadgeStruct_ArrowConfig | undefined;
  paddingNewFont: BadgeStruct_PaddingInfo | undefined;
}

export interface BadgeStruct_ArrowConfig {
  icon: Image | undefined;
}

export interface BadgeStruct_ProfileContent {
  useContent: boolean;
  iconList: BadgeStruct_IconConfig[];
  numberConfig: BadgeStruct_NumberConfig | undefined;
}

export interface BadgeStruct_ProjectionConfig {
  useProjection: boolean;
  icon: Image | undefined;
}

export interface BadgeStruct_NumberConfig {
  number: string;
  fontStyle: FontStyle | undefined;
  background: BadgeStruct_CombineBadgeBackground | undefined;
}

export interface BadgeStruct_ProfileCardPanel {
  useNewProfileCardStyle: boolean;
  /** BadgeTextPosition badgeTextPosition = 2; // Enum */
  projectionConfig: BadgeStruct_ProjectionConfig | undefined;
  profileContent: BadgeStruct_ProfileContent | undefined;
}

export interface BadgeStruct_CombineBadgeBackground {
  image: Image | undefined;
  backgroundColorCode: string;
  borderColorCode: string;
}

export interface BadgeStruct_ImageBadge {
  badgeDisplayType: BadgeStruct_BadgeDisplayType;
  image: Image | undefined;
}

export interface BadgeStruct_TextBadge {
  badgeDisplayType: BadgeStruct_BadgeDisplayType;
  key: string;
  defaultPattern: string;
  pieces: string[];
}

export interface BadgeStruct_IconConfig {
  icon: Image | undefined;
  background: BadgeStruct_CombineBadgeBackground | undefined;
}

export interface BadgeStruct_StringBadge {
  badgeDisplayType: BadgeStruct_BadgeDisplayType;
  str: string;
}

export interface BadgeStruct_PaddingInfo {
  useSpecific: boolean;
  middlePadding: number;
  badgeWidth: number;
  leftPadding: number;
  rightPadding: number;
  iconTopPadding: number;
  iconBottomPadding: number;
  horizontalPaddingRule: BadgeStruct_HorizontalPaddingRule;
  verticalPaddingRule: BadgeStruct_VerticalPaddingRule;
}

/** @Gift */
export interface Gift {
  giftImage: Image | undefined;
  describe: string;
  duration: number;
  id: string;
  forLinkMic: boolean;
  combo: boolean;
  giftType: number;
  diamondCount: number;
  isDisplayedOnPanel: boolean;
  primaryEffectId: string;
  giftLabelIcon: Image | undefined;
  giftName: string;
  icon: Image | undefined;
  goldEffect: string;
  previewImage: Image | undefined;
  giftPanelBanner: Gift_GiftPanelBanner | undefined;
  isBroadcastGift: boolean;
  isEffectBefview: boolean;
  isRandomGift: boolean;
  isBoxGift: boolean;
  canPutInGiftBox: boolean;
  giftBoxInfo: Gift_GiftBoxInfo | undefined;
}

export interface Gift_GiftPanelBanner {
  displayText: Text | undefined;
  leftIcon: Image | undefined;
  schemaUrl: string;
  bgColors: string[];
  bannerLynxUrl: string;
  bannerPriority: number;
  bannerLynxExtra: string;
  bgImage: Image | undefined;
}

export interface Gift_BatchGiftInfo {
  canBatchSend: boolean;
  availableCounts: string[];
}

export interface Gift_CrossScreenEffectInfo {
  singleActionEffectIds: { [key: string]: number };
  actionEffectIds: { [key: string]: number };
  reactionEffectIds: { [key: string]: number };
}

export interface Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry {
  key: string;
  value: number;
}

export interface Gift_CrossScreenEffectInfo_ActionEffectIdsEntry {
  key: string;
  value: number;
}

export interface Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry {
  key: string;
  value: number;
}

export interface Gift_GiftSponsorInfo {
  sponsorId: string;
  sponsorCount: string;
  currentCount: string;
  leftCountToSponsor: string;
  canSponsor: boolean;
}

export interface Gift_UGGiftStructInfo {
  isUgGift: boolean;
  ugPointsCost: string;
}

export interface Gift_GiftSkin {
  giftSkinId: string;
  giftSkinName: string;
  staticImage: Image | undefined;
  animatedImage: Image | undefined;
}

export interface Gift_GiftText {
  giftTextId: string;
  giftTextName: string;
}

export interface Gift_GiftSkinToGiftTextsInfo {
  giftSkinId: string;
  giftTextIds: string[];
}

export interface Gift_GiftBoxInfo {
  capacity: string;
  isPrimaryBox: boolean;
  schemeUrl: string;
}

/** @User */
export interface User {
  userId: string;
  nickname: string;
  bioDescription: string;
  profilePicture: Image | undefined;
  profilePictureMedium: Image | undefined;
  profilePictureLarge: Image | undefined;
  verified: boolean;
  status: number;
  createTime: string;
  modifyTime: string;
  secret: number;
  shareQrcodeUri: string;
  badgeImageList: Image[];
  followInfo: User_FollowInfo | undefined;
  userHonor: UserHonor | undefined;
  fansClub: FansClubMember | undefined;
  border: BorderInfo | undefined;
  specialId: string;
  avatarBorder: Image | undefined;
  medal: Image | undefined;
  userBadges: Image[];
  newUserBadges: Image[];
  topVipNo: number;
  userAttr: User_UserAttr | undefined;
  ownRoom: User_OwnRoom | undefined;
  payScore: string;
  fanTicketCount: string;
  anchorInfo: User_AnchorLevel | undefined;
  linkMicStats: LinkmicStatus;
  uniqueId: string;
  enableShowCommerceSale: boolean;
  withFusionShopEntry: boolean;
  payScores: string;
  anchorLevel: User_AnchorLevel | undefined;
  verifiedContent: string;
  authorInfo: Author | undefined;
  topFans: User[];
  secUid: string;
  userRole: number;
  rewardInfo: User_ActivityInfo | undefined;
  personalCard: Image | undefined;
  authenticationInfo: User_AuthenticationInfo | undefined;
  mediaBadgeImageList: Image[];
  commerceWebcastConfigIds: string[];
  borders: BorderInfo[];
  comboBadgeInfo: User_ComboBadgeInfo | undefined;
  subscribeInfo: User_SubscribeInfo | undefined;
  badges: BadgeStruct[];
  mintTypeLabel: string[];
  fansClubInfo: User_FansClubInfo | undefined;
  allowFindByContacts: boolean;
  allowOthersDownloadVideo: boolean;
  allowOthersDownloadWhenSharingVideo: boolean;
  allowShareShowProfile: boolean;
  allowShowInGossip: boolean;
  allowShowMyAction: boolean;
  allowStrangeComment: boolean;
  allowUnfollowerComment: boolean;
  allowUseLinkmic: boolean;
  avatarJpg: Image | undefined;
  backgroundImgUrl: string;
  blockStatus: number;
  commentRestrict: number;
  constellation: string;
  disableIchat: number;
  enableIchatImg: string;
  exp: number;
  foldStrangerChat: boolean;
  followStatus: string;
  ichatRestrictType: number;
  idStr: string;
  isFollower: boolean;
  isFollowing: boolean;
  needProfileGuide: boolean;
  pushCommentStatus: boolean;
  pushDigg: boolean;
  pushFollow: boolean;
  pushFriendAction: boolean;
  pushIchat: boolean;
  pushStatus: boolean;
  pushVideoPost: boolean;
  pushVideoRecommend: boolean;
  verifiedReason: string;
  enableCarManagementPermission: boolean;
  upcomingEventList: User_LiveEventInfo[];
  scmLabel: string;
  ecommerceEntrance: User_EcommerceEntrance | undefined;
  isBlock: boolean;
  isSubscribe: boolean;
  isAnchorMarked: boolean;
}

export interface User_LiveEventInfo {
  eventId: string;
  startTime: string;
  duration: string;
  title: string;
  description: string;
  hasSubscribed: boolean;
  isPaidEvent: boolean;
  ticketAmount: string;
  /** @warning Enum not found, should be PayMethod */
  payMethod: string;
}

/**
 * @EventPayMethod
 * webcast.data.LiveEventInfo
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export enum User_LiveEventInfo_EventPayMethod {
  EVENTPAYMETHODINVALID = 0,
  EVENTPAYMETHODCOINS = 1,
  EVENTPAYMETHODCASH = 2,
  UNRECOGNIZED = -1,
}

export function user_LiveEventInfo_EventPayMethodFromJSON(object: any): User_LiveEventInfo_EventPayMethod {
  switch (object) {
    case 0:
    case "EVENTPAYMETHODINVALID":
      return User_LiveEventInfo_EventPayMethod.EVENTPAYMETHODINVALID;
    case 1:
    case "EVENTPAYMETHODCOINS":
      return User_LiveEventInfo_EventPayMethod.EVENTPAYMETHODCOINS;
    case 2:
    case "EVENTPAYMETHODCASH":
      return User_LiveEventInfo_EventPayMethod.EVENTPAYMETHODCASH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_LiveEventInfo_EventPayMethod.UNRECOGNIZED;
  }
}

export function user_LiveEventInfo_EventPayMethodToJSON(object: User_LiveEventInfo_EventPayMethod): string {
  switch (object) {
    case User_LiveEventInfo_EventPayMethod.EVENTPAYMETHODINVALID:
      return "EVENTPAYMETHODINVALID";
    case User_LiveEventInfo_EventPayMethod.EVENTPAYMETHODCOINS:
      return "EVENTPAYMETHODCOINS";
    case User_LiveEventInfo_EventPayMethod.EVENTPAYMETHODCASH:
      return "EVENTPAYMETHODCASH";
    case User_LiveEventInfo_EventPayMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * @WalletPackage
 * proto.webcast.data.LiveEventInfo
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_LiveEventInfo_WalletPackage {
  iapId: string;
  usdPriceShow: string;
}

/**
 * @ActivityInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_ActivityInfo {
  badge: Image | undefined;
  storytag: Image | undefined;
}

/**
 * @AnchorLevel
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_AnchorLevel {
  level: string;
  experience: string;
  lowestExperienceThisLevel: string;
  highestExperienceThisLevel: string;
  taskStartExperience: string;
  taskStartTime: string;
  taskDecreaseExperience: string;
  taskTargetExperience: string;
  taskEndTime: string;
  profileDialogBg: Image | undefined;
  profileDialogBgBack: Image | undefined;
  stageLevel: Image | undefined;
  smallIcon: Image | undefined;
}

/**
 * @AuthenticationInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_AuthenticationInfo {
  customVerify: string;
  enterpriseVerifyReason: string;
  authenticationBadge: Image | undefined;
}

/**
 * @AuthorStats
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_AuthorStats {
  videoTotalCount: string;
  videoTotalPlayCount: string;
  videoTotalShareCount: string;
  videoTotalSeriesCount: string;
  varietyShowPlayCount: string;
  videoTotalFavoriteCount: string;
}

/**
 * @Border
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_Border {
  icon: Image | undefined;
  level: string;
  source: string;
  profileDecorationRibbon: Image | undefined;
  avatarBackgroundColor: string;
  avatarBackgroundBorderColor: string;
}

/**
 * @ComboBadgeInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_ComboBadgeInfo {
  icon: Image | undefined;
  comboCount: string;
}

/**
 * @EcommerceEntrance
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance {
  /** Enum */
  entranceType: User_EcommerceEntrance_EntranceType;
  /** Enum */
  creatorType: User_EcommerceEntrance_CreatorType;
  schema: string;
  shopEntranceInfo: User_EcommerceEntrance_ShopEntranceInfo | undefined;
  showcaseEntranceInfo: User_EcommerceEntrance_ShowcaseEntranceInfo | undefined;
}

/**
 * @CreatorType
 * webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export enum User_EcommerceEntrance_CreatorType {
  UNDEFINED = 0,
  OFFICIAL = 1,
  MARKET = 2,
  NORMAL = 3,
  UNRECOGNIZED = -1,
}

export function user_EcommerceEntrance_CreatorTypeFromJSON(object: any): User_EcommerceEntrance_CreatorType {
  switch (object) {
    case 0:
    case "UNDEFINED":
      return User_EcommerceEntrance_CreatorType.UNDEFINED;
    case 1:
    case "OFFICIAL":
      return User_EcommerceEntrance_CreatorType.OFFICIAL;
    case 2:
    case "MARKET":
      return User_EcommerceEntrance_CreatorType.MARKET;
    case 3:
    case "NORMAL":
      return User_EcommerceEntrance_CreatorType.NORMAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_EcommerceEntrance_CreatorType.UNRECOGNIZED;
  }
}

export function user_EcommerceEntrance_CreatorTypeToJSON(object: User_EcommerceEntrance_CreatorType): string {
  switch (object) {
    case User_EcommerceEntrance_CreatorType.UNDEFINED:
      return "UNDEFINED";
    case User_EcommerceEntrance_CreatorType.OFFICIAL:
      return "OFFICIAL";
    case User_EcommerceEntrance_CreatorType.MARKET:
      return "MARKET";
    case User_EcommerceEntrance_CreatorType.NORMAL:
      return "NORMAL";
    case User_EcommerceEntrance_CreatorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * @EntranceType
 * webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export enum User_EcommerceEntrance_EntranceType {
  PROFILE = 0,
  SHOWCASE = 1,
  SHOP = 2,
  UNRECOGNIZED = -1,
}

export function user_EcommerceEntrance_EntranceTypeFromJSON(object: any): User_EcommerceEntrance_EntranceType {
  switch (object) {
    case 0:
    case "PROFILE":
      return User_EcommerceEntrance_EntranceType.PROFILE;
    case 1:
    case "SHOWCASE":
      return User_EcommerceEntrance_EntranceType.SHOWCASE;
    case 2:
    case "SHOP":
      return User_EcommerceEntrance_EntranceType.SHOP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_EcommerceEntrance_EntranceType.UNRECOGNIZED;
  }
}

export function user_EcommerceEntrance_EntranceTypeToJSON(object: User_EcommerceEntrance_EntranceType): string {
  switch (object) {
    case User_EcommerceEntrance_EntranceType.PROFILE:
      return "PROFILE";
    case User_EcommerceEntrance_EntranceType.SHOWCASE:
      return "SHOWCASE";
    case User_EcommerceEntrance_EntranceType.SHOP:
      return "SHOP";
    case User_EcommerceEntrance_EntranceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * @ShopEntranceInfo
 * proto.webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo {
  shopId: string;
  shopName: string;
  shopRating: string;
  storeLabel: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel | undefined;
  formatSoldCount: string;
  soldCount: string;
  expRatePercentile: number;
  expRateTopDisplay: string;
  rateDisplayStyle: number;
  showRateNotApplicable: boolean;
}

/**
 * @StoreLabel
 * proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
  officialLabel: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel | undefined;
  isBytemall: boolean;
}

/**
 * @StoreBrandLabelType
 * webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export enum User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType {
  NONE = 0,
  OFFICIAL = 1,
  AUTHORIZED = 2,
  STORE_BRAND_LABEL_TYPE_BLUE_V = 3,
  STORE_BRAND_LABEL_TYPE_TOP_CHOICE = 4,
  UNRECOGNIZED = -1,
}

export function user_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelTypeFromJSON(
  object: any,
): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType {
  switch (object) {
    case 0:
    case "NONE":
      return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.NONE;
    case 1:
    case "OFFICIAL":
      return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.OFFICIAL;
    case 2:
    case "AUTHORIZED":
      return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.AUTHORIZED;
    case 3:
    case "STORE_BRAND_LABEL_TYPE_BLUE_V":
      return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.STORE_BRAND_LABEL_TYPE_BLUE_V;
    case 4:
    case "STORE_BRAND_LABEL_TYPE_TOP_CHOICE":
      return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.STORE_BRAND_LABEL_TYPE_TOP_CHOICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.UNRECOGNIZED;
  }
}

export function user_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelTypeToJSON(
  object: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType,
): string {
  switch (object) {
    case User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.NONE:
      return "NONE";
    case User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.OFFICIAL:
      return "OFFICIAL";
    case User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.AUTHORIZED:
      return "AUTHORIZED";
    case User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.STORE_BRAND_LABEL_TYPE_BLUE_V:
      return "STORE_BRAND_LABEL_TYPE_BLUE_V";
    case User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.STORE_BRAND_LABEL_TYPE_TOP_CHOICE:
      return "STORE_BRAND_LABEL_TYPE_TOP_CHOICE";
    case User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * @StoreOfficialLabel
 * proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
  labelImageLight: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage | undefined;
  labelImageDark:
    | User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage
    | undefined;
  /** @warning Enum not found, should be LabelType */
  labelType: string;
  labelTypeStr: string;
}

/**
 * @ShopLabelImage
 * proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
  height: number;
  width: number;
  minetype: string;
  thumbUri: string;
  thumbUriList: string[];
  uri: string;
  urlList: string[];
  color: string;
}

/**
 * @ShowcaseEntranceInfo
 * proto.webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShowcaseEntranceInfo {
  formatSoldCount: string;
  soldCount: string;
}

/**
 * @FansClub
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FansClub {
  data: User_FansClub_FansClubData | undefined;
}

/**
 * @PreferntialType
 * webcast.data.User.FansClub
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export enum User_FansClub_PreferntialType {
  PRESONALPROFILE = 0,
  OTHERROOM = 1,
  UNRECOGNIZED = -1,
}

export function user_FansClub_PreferntialTypeFromJSON(object: any): User_FansClub_PreferntialType {
  switch (object) {
    case 0:
    case "PRESONALPROFILE":
      return User_FansClub_PreferntialType.PRESONALPROFILE;
    case 1:
    case "OTHERROOM":
      return User_FansClub_PreferntialType.OTHERROOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_FansClub_PreferntialType.UNRECOGNIZED;
  }
}

export function user_FansClub_PreferntialTypeToJSON(object: User_FansClub_PreferntialType): string {
  switch (object) {
    case User_FansClub_PreferntialType.PRESONALPROFILE:
      return "PRESONALPROFILE";
    case User_FansClub_PreferntialType.OTHERROOM:
      return "OTHERROOM";
    case User_FansClub_PreferntialType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * @FansClubData
 * proto.webcast.data.User.FansClub
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FansClub_FansClubData {
  clubName: string;
  level: number;
  /** Enum */
  userFansClubStatus: User_FansClub_FansClubData_UserFansClubStatus;
  availableGiftIdsList: string[];
  anchorId: string;
}

/**
 * @BadgeIcon
 * webcast.data.User.FansClub.FansClubData
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export enum User_FansClub_FansClubData_BadgeIcon {
  UNKNOWN = 0,
  ICON = 1,
  SMALLICON = 2,
  UNRECOGNIZED = -1,
}

export function user_FansClub_FansClubData_BadgeIconFromJSON(object: any): User_FansClub_FansClubData_BadgeIcon {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return User_FansClub_FansClubData_BadgeIcon.UNKNOWN;
    case 1:
    case "ICON":
      return User_FansClub_FansClubData_BadgeIcon.ICON;
    case 2:
    case "SMALLICON":
      return User_FansClub_FansClubData_BadgeIcon.SMALLICON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_FansClub_FansClubData_BadgeIcon.UNRECOGNIZED;
  }
}

export function user_FansClub_FansClubData_BadgeIconToJSON(object: User_FansClub_FansClubData_BadgeIcon): string {
  switch (object) {
    case User_FansClub_FansClubData_BadgeIcon.UNKNOWN:
      return "UNKNOWN";
    case User_FansClub_FansClubData_BadgeIcon.ICON:
      return "ICON";
    case User_FansClub_FansClubData_BadgeIcon.SMALLICON:
      return "SMALLICON";
    case User_FansClub_FansClubData_BadgeIcon.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * @UserFansClubStatus
 * webcast.data.User.FansClub.FansClubData
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export enum User_FansClub_FansClubData_UserFansClubStatus {
  NOTJOINED = 0,
  ACTIVE = 1,
  INACTIVE = 2,
  UNRECOGNIZED = -1,
}

export function user_FansClub_FansClubData_UserFansClubStatusFromJSON(
  object: any,
): User_FansClub_FansClubData_UserFansClubStatus {
  switch (object) {
    case 0:
    case "NOTJOINED":
      return User_FansClub_FansClubData_UserFansClubStatus.NOTJOINED;
    case 1:
    case "ACTIVE":
      return User_FansClub_FansClubData_UserFansClubStatus.ACTIVE;
    case 2:
    case "INACTIVE":
      return User_FansClub_FansClubData_UserFansClubStatus.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_FansClub_FansClubData_UserFansClubStatus.UNRECOGNIZED;
  }
}

export function user_FansClub_FansClubData_UserFansClubStatusToJSON(
  object: User_FansClub_FansClubData_UserFansClubStatus,
): string {
  switch (object) {
    case User_FansClub_FansClubData_UserFansClubStatus.NOTJOINED:
      return "NOTJOINED";
    case User_FansClub_FansClubData_UserFansClubStatus.ACTIVE:
      return "ACTIVE";
    case User_FansClub_FansClubData_UserFansClubStatus.INACTIVE:
      return "INACTIVE";
    case User_FansClub_FansClubData_UserFansClubStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * @FansClubInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FansClubInfo {
  isSleeping: boolean;
  fansLevel: string;
  fansScore: string;
  badge: Image | undefined;
  fansCount: string;
  fansClubName: string;
}

/**
 * @FollowInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FollowInfo {
  followingCount: string;
  followerCount: string;
  followStatus: string;
  pushStatus: string;
}

/**
 * @OwnRoom
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_OwnRoom {
  roomIdsList: string[];
  roomIdsStrList: string[];
}

/**
 * @PayGrade
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_PayGrade {
  diamondIcon: Image | undefined;
  name: string;
  icon: Image | undefined;
  nextName: string;
  level: string;
  nextIcon: Image | undefined;
  gradeDescribe: string;
  gradeIconList: GradeIcon[];
  screenChatType: string;
  imIcon: Image | undefined;
  imIconWithLevel: Image | undefined;
  liveIcon: Image | undefined;
  newImIconWithLevel: Image | undefined;
  newLiveIcon: Image | undefined;
  upgradeNeedConsume: string;
  nextPrivileges: string;
  background: Image | undefined;
  backgroundBack: Image | undefined;
  score: string;
  gradeBanner: string;
  profileDialogBg: Image | undefined;
  profileDialogBgBack: Image | undefined;
}

/**
 * @SubscribeBadge
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_SubscribeBadge {
  originImg: Image | undefined;
  previewImg: Image | undefined;
}

/**
 * @SubscribeInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_SubscribeInfo {
  qualification: boolean;
  isSubscribe: boolean;
  badge: User_SubscribeBadge | undefined;
  enableSubscription: boolean;
  subscriberCount: string;
  isInGracePeriod: boolean;
  isSubscribedToAnchor: boolean;
  userGiftSubAuth: boolean;
  anchorGiftSubAuth: boolean;
}

/**
 * @UserAttr
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_UserAttr {
  isMuted: boolean;
  isAdmin: boolean;
  isSuperAdmin: boolean;
  muteDuration: string;
}

/**
 * @UserStats
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_UserStats {
  id: string;
  idStr: string;
  followingCount: string;
  followerCount: string;
  recordCount: string;
  totalDuration: string;
  dailyFanTicketCount: string;
  dailyIncome: string;
  itemCount: string;
  favoriteItemCount: string;
  diamondConsumedCount: string;
  tuwenItemCount: string;
}

/** @Emote */
export interface Emote {
  emoteId: string;
  image:
    | Image
    | undefined;
  /** Enum */
  auditStatus: AuditStatus;
  uuid: string;
  /** Enum */
  emoteType: EmoteType;
  /** Enum */
  contentSource: ContentSource;
  /** Enum */
  emotePrivateType: EmotePrivateType;
  packageId: string;
  auditInfo: Emote_AuditInfo | undefined;
  rewardCondition: RewardCondition;
  emoteUploadInfo: Emote_EmoteUploadInfo | undefined;
  createTime: string;
  emoteScene: EmoteScene;
}

export interface Emote_AuditInfo {
  violationId: string;
  taskType: Emote_AuditInfo_AuditTaskType;
}

export enum Emote_AuditInfo_AuditTaskType {
  AUDIT_TASK_TYPE_DEFAULT = 0,
  AUDIT_TASK_TYPE_APPEAL = 1,
  UNRECOGNIZED = -1,
}

export function emote_AuditInfo_AuditTaskTypeFromJSON(object: any): Emote_AuditInfo_AuditTaskType {
  switch (object) {
    case 0:
    case "AUDIT_TASK_TYPE_DEFAULT":
      return Emote_AuditInfo_AuditTaskType.AUDIT_TASK_TYPE_DEFAULT;
    case 1:
    case "AUDIT_TASK_TYPE_APPEAL":
      return Emote_AuditInfo_AuditTaskType.AUDIT_TASK_TYPE_APPEAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Emote_AuditInfo_AuditTaskType.UNRECOGNIZED;
  }
}

export function emote_AuditInfo_AuditTaskTypeToJSON(object: Emote_AuditInfo_AuditTaskType): string {
  switch (object) {
    case Emote_AuditInfo_AuditTaskType.AUDIT_TASK_TYPE_DEFAULT:
      return "AUDIT_TASK_TYPE_DEFAULT";
    case Emote_AuditInfo_AuditTaskType.AUDIT_TASK_TYPE_APPEAL:
      return "AUDIT_TASK_TYPE_APPEAL";
    case Emote_AuditInfo_AuditTaskType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Emote_EmoteUploadInfo {
  userId: string;
  emoteUploadSource: UserEmoteUploadSource;
  userInfo: User | undefined;
  userIdStr: string;
}

/** @PunishEventInfo */
export interface PunishEventInfo {
  punishType: string;
  punishReason: string;
  punishId: string;
  violationUid: string;
  /** Enum */
  punishTypeId: PunishTypeId;
  duration: string;
  punishPerceptionCode: string;
  violationUidStr: string;
  showReason: string;
}

/** @MsgFilter */
export interface MsgFilter {
  isGifter: boolean;
  isSubscribedToAnchor: boolean;
}

/**
 * @UserIdentity
 * proto.webcast.data
 */
export interface UserIdentity {
  isGiftGiverOfAnchor: boolean;
  isSubscriberOfAnchor: boolean;
  isMutualFollowingWithAnchor: boolean;
  isFollowerOfAnchor: boolean;
  isModeratorOfAnchor: boolean;
  isAnchor: boolean;
}

/**
 * @Goal
 * proto.webcast.data
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LiveStreamGoal {
  id: string;
  type: number;
  status: number;
  subGoals: LiveStreamGoal_LiveStreamSubGoal[];
  description: string;
  auditStatus: AuditStatus;
  cycleType: number;
  startTime: string;
  expireTime: string;
  realFinishTime: string;
  contributors: LiveStreamGoal_LiveStreamGoalContributor[];
  contributorsLength: number;
  idStr: string;
  auditDescription: string;
  stats: LiveStreamGoal_GoalStats | undefined;
  goalExtraInfo: string;
  mode: number;
  auditInfo: LiveStreamGoal_AuditInfo | undefined;
  challengeType: string;
  isUneditable: boolean;
}

export interface LiveStreamGoal_AuditInfo {
  violationId: string;
  taskType: number;
}

export interface LiveStreamGoal_LiveStreamSubGoal {
  type: number;
  id: string;
  progress: string;
  target: string;
  gift: LiveStreamGoal_LiveStreamSubGoalGift | undefined;
  idStr: string;
  pinInfo: LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo | undefined;
  source: number;
  recommendedText: string;
  recommendedHeader: string;
}

export interface LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo {
  pinStartTime: string;
  pinEndTime: string;
  pinReadyTime: string;
}

export interface LiveStreamGoal_LiveStreamSubGoalGift {
  name: string;
  icon: Image | undefined;
  diamondCount: string;
  type: number;
}

export interface LiveStreamGoal_LiveStreamGoalContributor {
  userId: string;
  avatar: Image | undefined;
  displayId: string;
  score: string;
  userIdStr: string;
  inRoom: boolean;
  isFriend: boolean;
  followByOwner: boolean;
  isFistContribute: boolean;
  subGoalContributions: LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution[];
}

export interface LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution {
  id: string;
  contributionCount: string;
}

export interface LiveStreamGoal_GoalStats {
  totalCoins: string;
  totalContributor: string;
  comparison: LiveStreamGoal_GoalStats_GoalComparison | undefined;
  totalNewFans: string;
}

export interface LiveStreamGoal_GoalStats_GoalComparison {
  coinsIncr: string;
  contributorIncr: string;
}

/**
 * @Indicator
 * proto.webcast.data
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LiveStreamGoalIndicator {
  key: string;
  op: number;
}

export interface Ranking {
  type: string;
  label: string;
  color: TikTokColor | undefined;
  details: ValueLabel[];
}

export interface TikTokColor {
  color: string;
  id: string;
  data1: number;
}

export interface ValueLabel {
  data: number;
  label: string;
  label2: string;
  label3: string;
}

export interface TimeStampContainer {
  timestamp1: string;
  timestamp2: string;
  timestamp3: string;
}

export interface PollStartContent {
  StartTime: string;
  EndTime: string;
  OptionList: PollOptionInfo[];
  Title: string;
  Operator: User | undefined;
}

export interface PollEndContent {
  EndType: PollEndType;
  OptionList: PollOptionInfo[];
  Operator: User | undefined;
}

export interface PollOptionInfo {
  Votes: number;
  DisplayContent: string;
  OptionIdx: number;
  VoteUserList: VoteUser[];
}

export interface VoteUser {
  UserId: string;
  NickName: string;
  AvatarThumb: Image | undefined;
}

export interface PollUpdateVotesContent {
  OptionList: PollOptionInfo[];
}

export interface UserFanTicket {
  UserId: string;
  FanTicket: string;
  MatchTotalScore: string;
  MatchRank: number;
}

export interface FanTicketRoomNoticeContent {
  UserFanTicketList: UserFanTicket[];
  TotalLinkMicFanTicket: string;
  MatchId: string;
  EventTime: string;
  FanTicketIconUrl: string;
  playId: string;
  playScene: PlayScene;
}

export interface LinkerAcceptNoticeContent {
  fromUserId: string;
  fromRoomId: string;
  toUserId: string;
}

export interface LinkerCancelContent {
  fromUserId: string;
  toUserId: string;
  cancelType: string;
  actionId: string;
}

export interface ListUser {
  user: User | undefined;
  linkmicId: string;
  linkmicIdStr: string;
  linkStatus: LinkmicRoleType;
  linkType: LinkType;
  userPosition: number;
  silenceStatus: LinkSilenceStatus;
  modifyTime: string;
  linkerId: string;
  roleType: LinkRoleType;
}

/** it is just empty */
export interface LinkerCloseContent {
}

export interface LinkerCreateContent {
  ownerId: string;
  ownerRoomId: string;
  /** Assuming this is LinkType enum */
  linkType: string;
}

export interface LinkerEnterContent {
  linkedUsersList: ListUser[];
  anchorMultiLiveEnum: LinkmicMultiLiveEnum;
  anchorSettingInfo: MultiLiveAnchorPanelSettings | undefined;
}

export interface LinkerInviteContent {
  fromUserId: string;
  fromRoomId: string;
  toRtcExtInfo: string;
  rtcJoinChannel: boolean;
  vendor: string;
  secFromUserId: string;
  toLinkmicIdStr: string;
  fromUser: User | undefined;
  requiredMicIdx: string;
  rtcExtInfoMap: { [key: string]: string };
  multiLiveLayoutEnable: LinkmicMultiLiveEnum;
  multiLiveSetting: MultiLiveAnchorPanelSettings | undefined;
  fromLinkmicIdStr: string;
  fromTopHostInfo: LinkerInviteContent_InviteTopHostInfo | undefined;
  actionId: string;
  linkedUsers: LinkerInviteContent_LinkmicUserInfo[];
  dialogInfo: LinkerInviteContent_PerceptionDialogInfo | undefined;
  punishEventInfo: PunishEventInfo | undefined;
  fromRoomAgeRestricted: number;
  abTestSetting: LinkerInviteContent_CohostABTestSetting[];
  linkerInviteMsgExtra: LinkerInviteContent_LinkerInviteMessageExtra | undefined;
}

export interface LinkerInviteContent_RtcExtInfoMapEntry {
  key: string;
  value: string;
}

export interface LinkerInviteContent_InviteTopHostInfo {
  rankType: string;
  topIndex: string;
}

export interface LinkerInviteContent_LinkmicUserInfo {
  userId: string;
  linkmicIdStr: string;
  roomId: string;
  linkedTime: string;
}

export interface LinkerInviteContent_PerceptionDialogInfo {
  iconType: PerceptionDialogIconType;
  title: Text | undefined;
  subTitle: Text | undefined;
  adviceActionText: Text | undefined;
  defaultActionText: Text | undefined;
  violationDetailUrl: string;
  scene: Scene;
  targetUserId: string;
  targetRoomId: string;
  countDownTime: string;
  showFeedback: boolean;
  feedbackOptions: LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption[];
  policyTip: string;
  appealPopup: number;
}

export interface LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption {
  id: string;
  contentKey: string;
}

export interface LinkerInviteContent_CohostABTestSetting {
  key: string;
  value: LinkerInviteContent_CohostABTestSetting_CohostABTestList | undefined;
}

export interface LinkerInviteContent_CohostABTestSetting_CohostABTestList {
  abTestList: LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest[];
}

export interface LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest {
  abTestType: CohostABTestType;
  group: string;
}

export interface LinkerInviteContent_LinkerInviteMessageExtra {
  matchType: number;
  inviteType: number;
  subType: number;
  theme: string;
  duration: number;
  layout: number;
  tips: string;
  inviterRivalExtra: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra | undefined;
  otherRivalExtra: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra[];
  topicInfo: CohostTopic | undefined;
  algoRequestId: string;
}

export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra {
  textType: TextType;
  text: string;
  label: string;
  userCount: number;
  avatarThumb: Image | undefined;
  displayId: string;
  authenticationInfo: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo | undefined;
  nickname: string;
  followStatus: string;
  mHashtag: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag | undefined;
  userId: string;
  isBestTeammate: boolean;
  optPairInfo: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo | undefined;
  followerCount: string;
}

export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo {
  customVerify: string;
  enterpriseVerifyReason: string;
  authenticationBadge: Image | undefined;
}

export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag {
  id: string;
  title: string;
  image: Image | undefined;
  namespace: HashtagNamespace;
}

export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo {
  mappingId: string;
  displayUserList: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser[];
  buttonNoticeType: OptPairStatus;
  expectedTimeSec: string;
  optPairType: string;
}

export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser {
  user: User | undefined;
  roomId: string;
}

export interface CohostTopic {
  id: string;
  titleKey: string;
  titleText: string;
  liked: boolean;
  totalHeat: string;
  totalRivals: string;
  rivalsAvatar: Image[];
}

export interface LinkerKickOutContent {
  fromUserId: string;
  kickoutReason: KickoutReason;
}

export interface LinkerLeaveContent {
  userId: string;
  linkmicIdStr: string;
  sendLeaveUid: string;
  leaveReason: string;
}

/** Empty */
export interface LinkerLinkedListChangeContent {
}

/** Empty */
export interface CohostListChangeContent {
}

export interface LinkerListChangeContent {
  linkedUsers: ListUser[];
  appliedUsers: ListUser[];
  connectingUsers: ListUser[];
}

export interface LinkerMediaChangeContent {
  op: GuestMicCameraManageOp;
  toUserId: string;
  anchorId: string;
  roomId: string;
  changeScene: GuestMicCameraChangeScene;
  operatorInfo: LinkerMediaChangeContent_LinkerMediaChangeOperator | undefined;
}

export interface LinkerMediaChangeContent_LinkerMediaChangeOperator {
  userId: string;
  operatorType: LinkMicUserAdminType;
  nickName: string;
  displayId: string;
}

/** Empty */
export interface LinkerMicIdxUpdateContent {
}

export interface LinkerMuteContent {
  userId: string;
  status: MuteStatus;
}

export interface LinkerRandomMatchContent {
  user: User | undefined;
  roomId: string;
  inviteType: string;
  matchId: string;
  innerChannelId: string;
}

export interface LinkerReplyContent {
  fromUserId: string;
  fromRoomId: string;
  fromUserLinkmicInfo: LinkerReplyContent_LinkmicInfo | undefined;
  toUserId: string;
  toUserLinkmicInfo: LinkerReplyContent_LinkmicInfo | undefined;
  linkType: string;
  replyStatus: string;
  linkerSetting: LinkerSetting | undefined;
  fromUser: User | undefined;
  toUser: User | undefined;
}

export interface LinkerReplyContent_LinkmicInfo {
  accessKey: string;
  linkMicId: string;
  joinable: boolean;
  confluenceType: number;
  rtcExtInfo: string;
  rtcAppId: string;
  rtcAppSign: string;
  linkmicIdStr: string;
  vendor: string;
}

export interface LinkerSetting {
  MaxMemberLimit: string;
  LinkType: string;
  Scene: Scene;
  OwnerUserId: string;
  OwnerRoomId: string;
  Vendor: string;
}

export interface LinkerSysKickOutContent {
  userId: string;
  linkmicIdStr: string;
}

export interface LinkmicUserToastContent {
  userId: string;
  roomId: string;
  displayText: Text | undefined;
  leavedUserId: string;
}

export interface LinkerUpdateUserContent {
  fromUserId: string;
  toUserId: string;
  updateInfo: { [key: string]: string };
}

export interface LinkerUpdateUserContent_UpdateInfoEntry {
  key: string;
  value: string;
}

export interface LinkerUpdateUserSettingContent {
  multiLiveAnchorPanelSettings: MultiLiveAnchorPanelSettings | undefined;
}

/** Empty */
export interface LinkerWaitingListChangeContent {
}

export interface MultiLiveAnchorPanelSettings {
  userId: string;
  layout: string;
  fixMicNum: string;
  allowRequestFromUser: string;
  allowRequestFromFollowerOnly: string;
  applierSortSetting: LinkmicApplierSortSetting;
  applierSortGiftScoreThreshold: string;
  allowRequestFromFriends: number;
  allowRequestFromFollowers: number;
  allowRequestFromOthers: number;
  enableShowMultiGuestLayout: number;
}

export interface Player {
  roomId: string;
  userId: string;
}

export interface AllListUser {
  linkedList: LinkLayerListUser[];
  appliedList: LinkLayerListUser[];
  invitedList: LinkLayerListUser[];
  readyList: LinkLayerListUser[];
}

export interface LinkLayerListUser {
  user: User | undefined;
  linkmicId: string;
  pos: Position | undefined;
  linkedTimeNano: string;
  appVersion: string;
  magicNumber1: string;
}

export interface Position {
  type: number;
  link: LinkPosition | undefined;
}

export interface LinkPosition {
  position: number;
  opt: number;
}

export interface GroupPlayer {
  channelId: string;
  user: User | undefined;
}

export interface DSLConfig {
  sceneVersion: number;
  layoutId: string;
}

export interface GroupChannelAllUser {
  groupChannelId: string;
  userList: GroupChannelUser[];
  contentVersion: string;
}

export interface GroupChannelUser {
  channelId: string;
  status: GroupStatus;
  type: TextType;
  allUser: AllListUser | undefined;
  joinTime: string;
  linkedTime: string;
  ownerUser: GroupPlayer | undefined;
  groupLinkmicId: string;
}

export interface RTCExtraInfo {
  liveRtcEngineConfig: RTCExtraInfo_RTCEngineConfig | undefined;
  liveRtcVideoParamList: RTCExtraInfo_RTCLiveVideoParam[];
  rtcBitrateMap: RTCExtraInfo_RTCBitrateMap | undefined;
  rtcFps: number;
  rtcMixBase: RTCExtraInfo_RTCMixBase | undefined;
  byteRtcExtInfo: RTCExtraInfo_ByteRTCExtInfo | undefined;
  rtcInfoExtra: RTCExtraInfo_RTCInfoExtra | undefined;
  rtcBusinessId: string;
  rtcOther: RTCExtraInfo_RTCOther | undefined;
  interactClientType: number;
}

export interface RTCExtraInfo_RTCMixBase {
  bitrate: number;
}

export interface RTCExtraInfo_ByteRTCExtInfo {
  defaultSignaling: number;
}

export interface RTCExtraInfo_RTCInfoExtra {
  version: string;
}

export interface RTCExtraInfo_RTCOther {
  transCodingSecond: number;
}

export interface RTCExtraInfo_RTCEngineConfig {
  rtcAppId: string;
  rtcUserId: string;
  rtcToken: string;
  rtcChannelId: string;
}

export interface RTCExtraInfo_RTCLiveVideoParam {
  strategyId: number;
  params: RTCExtraInfo_RTCVideoParam | undefined;
}

export interface RTCExtraInfo_RTCVideoParam {
  width: number;
  height: number;
  fps: number;
  bitrateKbps: number;
}

export interface RTCExtraInfo_RTCBitrateMap {
  xx1: number;
  xx2: number;
  xx3: number;
  xx4: number;
}

export interface CreateChannelContent {
  owner: Player | undefined;
  ownerLinkMicId: string;
}

export interface ListChangeContent {
  listChangeType: number;
  userList: AllListUser | undefined;
  linkedUserUiPositions: string[];
  contentPos: ContentPosition[];
}

export interface ContentPosition {
  contentID: string;
  contentType: ContentPositionType;
  pos: MicPositionData | undefined;
  contentLinkmicID: string;
  startTimeNano: string;
}

export interface MicPositionData {
  type: number;
  linkPosition: LinkPosition | undefined;
}

export interface MultiLiveContent {
  applyBizContent: MultiLiveContent_ApplyBizContent | undefined;
  inviteBizContent: MultiLiveContent_InviteBizContent | undefined;
  replyBizContent: MultiLiveContent_ReplyBizContent | undefined;
  permitBizContent: MultiLiveContent_PermitBizContent | undefined;
  joinDirectBizContent: MultiLiveContent_JoinDirectBizContent | undefined;
  kickOutBizContent: MultiLiveContent_KickOutBizContent | undefined;
}

export interface MultiLiveContent_ApplyBizContent {
  user: User | undefined;
}

export interface MultiLiveContent_JoinDirectBizContent {
  replyImMsgId: string;
  outsideRoomInviteSource: MultiGuestOutsideRoomInviteSource;
}

export interface MultiLiveContent_InviteBizContent {
  anchorSettingInfo: MultiLiveAnchorPanelSettings | undefined;
  inviteSource: ContentInviteSource;
  operatorUserInfo: User | undefined;
  operatorLinkAdminType: LinkMicUserAdminType;
  inviteeUserInfo: User | undefined;
  shareRevenueSetting: LinkmicShareRevenueSetting;
}

export interface MultiLiveContent_ReplyBizContent {
  linkType: number;
  isTurnOffInvitation: number;
  replyUserInfo: User | undefined;
}

export interface MultiLiveContent_PermitBizContent {
  anchorSettingInfo: MultiLiveAnchorPanelSettings | undefined;
  expireTimestamp: string;
  operatorUserInfo: User | undefined;
  operatorLinkAdminType: LinkMicUserAdminType;
  linkUserType: LinkUserType;
}

export interface MultiLiveContent_KickOutBizContent {
  operatorUserInfo: User | undefined;
  operatorLinkAdminType: LinkMicUserAdminType;
  kickPlayerUserInfo: User | undefined;
}

export interface InviteContent {
  invitor: Player | undefined;
  inviteeRtcExtInfo: RTCExtraInfo | undefined;
  invitorLinkMicId: string;
  inviteeLinkMicId: string;
  isOwner: boolean;
  pos: Position | undefined;
  dsl: DSLConfig | undefined;
  invitee: User | undefined;
  operator: User | undefined;
}

/**
 * @ApplyContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface ApplyContent {
  applier: Player | undefined;
  applierLinkMicId: string;
}

/**
 * @PermitApplyContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface PermitApplyContent {
  permiter: Player | undefined;
  permiterLinkMicId: string;
  applierPos:
    | Position
    | undefined;
  /** Enum */
  replyStatus: ReplyStatus;
  dsl: DSLConfig | undefined;
  applier: User | undefined;
  operator: User | undefined;
  applierLinkMicId: string;
}

/**
 * @ReplyInviteContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface ReplyInviteContent {
  invitee: Player | undefined;
  replyStatus: ReplyStatus;
  inviteeLinkMicId: string;
  inviteePos: Position | undefined;
  inviteOperatorUser: Player | undefined;
  linkedUserUiPositions: string[];
  uiPos: PosIdentity[];
}

/**
 * @KickOutContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface KickOutContent {
  offliner: Player | undefined;
  kickoutReason: KickoutReason;
  linkedUserUiPositions: string[];
  uiPos: PosIdentity[];
}

export interface PosIdentity {
  type: PosIdentityType;
  value: string;
}

/**
 * @CancelApplyContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface CancelApplyContent {
  applier: Player | undefined;
  applierLinkMicId: string;
}

/**
 * @CancelInviteContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface CancelInviteContent {
  invitor: Player | undefined;
  invitorLinkMicId: string;
  inviteeLinkMicId: string;
  inviteSeqId: string;
  invitee: Player | undefined;
}

/**
 * @LeaveContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LeaveContent {
  leaver: Player | undefined;
  leaveReason: string;
  linkedUserUiPositions: string[];
  uiPos: PosIdentity[];
}

/**
 * @FinishChannelContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface FinishChannelContent {
  owner: Player | undefined;
  finishReason: string;
}

/**
 * @JoinDirectContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface JoinDirectContent {
  joiner: LinkLayerListUser | undefined;
  allUsers: AllListUser | undefined;
}

/**
 * @LeaveJoinGroupContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LeaveJoinGroupContent {
  operator: GroupPlayer | undefined;
  groupChannelId: string;
  leaveSource: string;
  linkedUserUiPositions: string[];
}

/**
 * @PermitJoinGroupContent
 * proto.webcast.im
 */
export interface PermitJoinGroupContent {
  approver: GroupPlayer | undefined;
  agreeStatus: AgreeStatus;
  type: JoinType;
  groupExtInfoList: RTCExtraInfo[];
  groupUser: GroupChannelAllUser | undefined;
  migrationDetails: MigrationDetails | undefined;
  linkedUserUiPositions: string[];
}

export interface MigrationDetails {
  isMigrate: boolean;
  sourceGroupChannelId: string;
  targetGroupChannelId: string;
}

/**
 * @CancelJoinGroupContent
 * proto.webcast.im
 */
export interface CancelJoinGroupContent {
  leaverList: GroupPlayer[];
  operator: GroupPlayer | undefined;
  type: JoinType;
  groupUser: GroupChannelAllUser | undefined;
}

export interface P2PGroupChangeContent {
  groupExtInfoList: RTCExtraInfo[];
  groupUser: GroupChannelAllUser | undefined;
  migrationDetails: MigrationDetails | undefined;
  contentPos: ContentPosition[];
}

export interface GroupChangeContent {
  groupUser: GroupChannelAllUser | undefined;
  linkedUserUiPositions: string[];
}

export interface BusinessContent {
  overLength: string;
  multiLiveContent: MultiLiveContent | undefined;
  cohostContent: BusinessContent_CohostContent | undefined;
}

export interface BusinessContent_CohostContent {
  joinGroupBizContent: BusinessContent_JoinGroupBizContent | undefined;
  permitJoinGroupBizContent: BusinessContent_PermitJoinGroupBizContent | undefined;
  listChangeBizContent: BusinessContent_ListChangeBizContent | undefined;
}

export interface BusinessContent_PermitJoinGroupBizContent {
  replyStatus: ReplyStatus;
  sourceType: SourceType;
}

export interface BusinessContent_ListChangeBizContent {
  userInfos: { [key: string]: BusinessContent_CohostUserInfo };
  waitingUsers: BusinessContent_ListChangeBizContent_VirtualWaitingUser[];
}

export interface BusinessContent_ListChangeBizContent_UserInfosEntry {
  key: string;
  value: BusinessContent_CohostUserInfo | undefined;
}

export interface BusinessContent_ListChangeBizContent_VirtualWaitingUser {
  userId: string;
  timestamp: string;
  avatars: Image[];
}

export interface BusinessContent_CohostUserInfo {
  permissionType: string;
  sourceType: SourceType;
  isLowVersion: boolean;
  bestTeammateUid: string;
  hasTopicPerm: boolean;
  streamConfig: BusinessContent_CohostUserInfo_CohostStreamConfig | undefined;
  inDifferentInviteTypeControlGroup: boolean;
  nickname: string;
  displayId: string;
  avatarThumb: Image | undefined;
  followStatus: string;
  userIdStr: string;
}

export interface BusinessContent_CohostUserInfo_CohostStreamConfig {
  screenShareStreamId: string;
}

export interface BusinessContent_JoinGroupBizContent {
  fromRoomAgeRestricted: number;
  fromTag: BusinessContent_Tag | undefined;
  dialog: BusinessContent_PerceptionDialogInfo | undefined;
  punishInfo: PunishEventInfo | undefined;
  topicInfo: CohostTopic | undefined;
  algoRequestId: string;
  cohostLayoutMode: CohostLayoutMode;
  tag: BusinessContent_JoinGroupBizContent_TagV2 | undefined;
  gameTag: BusinessContent_JoinGroupBizContent_RivalsGameTag | undefined;
  newUserEducation: string;
  joinGroupMsgExtra: BusinessContent_JoinGroupMessageExtra | undefined;
}

export interface BusinessContent_JoinGroupBizContent_RivalsGameTag {
  tagId: string;
  tagDisplayText: string;
}

export interface BusinessContent_JoinGroupBizContent_TagV2 {
  tagClassification: TagClassification;
  tagType: number;
  tagValue: string;
  starlingKey: string;
  secondDegreeRelationContent: BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent | undefined;
  cohostHistoryDay: string;
  similarInterestContent: BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent | undefined;
}

export interface BusinessContent_JoinGroupBizContent_TagV2_UserInfo {
  userId: string;
  nickName: string;
  avatarThumb: Image | undefined;
}

export interface BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent {
  relatedUsers: BusinessContent_JoinGroupBizContent_TagV2_UserInfo[];
  totalRelatedUserCnt: string;
}

export interface BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent {
  contentId: string;
  displayText: string;
}

export interface BusinessContent_Tag {
  tagType: number;
  tagValue: string;
  tagText: string;
}

export interface BusinessContent_PerceptionDialogInfo {
  /** @warning Enum not found, should be IconType */
  iconType: string;
  title: Text | undefined;
  subTitle: Text | undefined;
  adviceActionText: Text | undefined;
  defaultActionText: Text | undefined;
  violationDetailUrl: string;
  scene: number;
  targetUserId: string;
  targetRoomId: string;
  countDownTime: string;
  showFeedback: boolean;
  feedbackOptionsList: BusinessContent_PerceptionFeedbackOption[];
  policyTip: string;
}

export interface BusinessContent_PerceptionFeedbackOption {
  id: string;
  contentKey: string;
}

export interface BusinessContent_JoinGroupMessageExtra {
  sourceType: string;
  extra: BusinessContent_JoinGroupMessageExtra_RivalExtra | undefined;
  otherUsersList: BusinessContent_JoinGroupMessageExtra_RivalExtra[];
}

/**
 * @RivalExtra
 * proto.webcast.im.JoinGroupMessageExtra
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface BusinessContent_JoinGroupMessageExtra_RivalExtra {
  userCount: string;
  avatarThumb: Image | undefined;
  displayId: string;
  authenticationInfo: BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo | undefined;
  nickname: string;
  followStatus: string;
  hashtag: BusinessContent_Hashtag | undefined;
  topHostInfo: BusinessContent_TopHostInfo | undefined;
  userId: string;
  isBestTeammate: boolean;
}

export interface BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
  customVerify: string;
  enterpriseVerifyReason: string;
  authenticationBadge: Image | undefined;
}

export interface BusinessContent_Hashtag {
  id: string;
  title: string;
  image: Image | undefined;
  namespace: HashtagNamespace;
}

export interface BusinessContent_TopHostInfo {
  rankType: string;
  topIndex: string;
}

export interface JoinGroupContent {
  groupUser: GroupChannelAllUser | undefined;
  joinUser: GroupPlayer | undefined;
  type: JoinType;
  groupExtInfo: RTCExtraInfo[];
}

export interface PrivilegeLogExtra {
  dataVersion: string;
  privilegeId: string;
  privilegeVersion: string;
  privilegeOrderId: string;
  level: string;
}

export interface FontStyle {
  fontSize: number;
  fontWidth: number;
  fontColor: string;
  borderColor: string;
}

export interface UserHonor {
  totalDiamond: string;
  diamondIcon: Image | undefined;
  currentHonorName: string;
  currentHonorIcon: Image | undefined;
  nextHonorName: string;
  level: number;
  nextHonorIcon: Image | undefined;
  currentDiamond: string;
  thisGradeMinDiamond: string;
  thisGradeMaxDiamond: string;
  gradeDescribe: string;
  gradeIconList: GradeIcon[];
  screenChatType: string;
  imIcon: Image | undefined;
  imIconWithLevel: Image | undefined;
  liveIcon: Image | undefined;
  newImIconWithLevel: Image | undefined;
  newLiveIcon: Image | undefined;
  upgradeNeedConsume: string;
  nextPrivileges: string;
  profileDialogBg: Image | undefined;
  profileDialogBackBg: Image | undefined;
  score: string;
  gradeBanner: string;
}

/**
 * @GradeIcon
 * proto.webcast.data.User.PayGrade
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface GradeIcon {
  icon: Image | undefined;
  iconDiamond: string;
  level: string;
  levelStr: string;
}

export interface BorderInfo {
  icon: Image | undefined;
  level: string;
  source: string;
  profileDecorationRibbon: Image | undefined;
  borderLogExtra: PrivilegeLogExtra | undefined;
  ribbonLogExtra: PrivilegeLogExtra | undefined;
  avatarBackgroundColor: string;
  avatarBackgroundBorderColor: string;
}

export interface FansClubMember {
  data: FansClubData | undefined;
  preferData: { [key: number]: FansClubData };
}

export interface FansClubMember_PreferDataEntry {
  key: number;
  value: FansClubData | undefined;
}

export interface FansClubData {
  clubName: string;
  level: number;
  userFansClubStatus: number;
  badge: FansClubData_UserBadge | undefined;
  availableGiftIds: string[];
  anchorId: string;
}

export interface FansClubData_UserBadge {
  icons: { [key: number]: Image };
  title: string;
}

export interface FansClubData_UserBadge_IconsEntry {
  key: number;
  value: Image | undefined;
}

export interface Author {
  videoTotalCount: string;
  videoTotalPlayCount: string;
  videoTotalFavoriteCount: string;
}

export interface PublicAreaCommon {
  userLabel: Image | undefined;
  userConsumeInRoom: string;
}

export interface PublicAreaMessageCommon {
  scrollGapCount: string;
  anchorScrollGapCount: string;
  releaseToScrollArea: boolean;
  anchorReleaseToScrollArea: boolean;
  isAnchorMarked: boolean;
  creatorSuccessInfo: PublicAreaMessageCommon_CreatorSuccessInfo | undefined;
  portraitInfo: PublicAreaMessageCommon_PortraitInfo | undefined;
  userInteractionInfo: PublicAreaMessageCommon_UserInteractionInfo | undefined;
  adminFoldType: string;
}

export interface PublicAreaMessageCommon_TagItem {
  tagType: TagType;
  tagText: Text | undefined;
}

export interface PublicAreaMessageCommon_Topic {
  topicActionType: TopicActionType;
  topicText: Text | undefined;
  topicTips: Text | undefined;
}

export interface PublicAreaMessageCommon_CreatorSuccessInfo {
  tags: PublicAreaMessageCommon_TagItem[];
  topic: PublicAreaMessageCommon_Topic | undefined;
}

export interface PublicAreaMessageCommon_UserMetrics {
  type: UserMetricsType;
  metricsValue: string;
}

export interface PublicAreaMessageCommon_PortraitTag {
  tagId: string;
  priority: string;
  showValue: string;
  showArgs: string;
}

export interface PublicAreaMessageCommon_PortraitInfo {
  userMetrics: PublicAreaMessageCommon_UserMetrics[];
  portraitTag: PublicAreaMessageCommon_PortraitTag[];
}

export interface PublicAreaMessageCommon_UserInteractionInfo {
  likeCnt: string;
  commentCnt: string;
  shareCnt: string;
}

export interface GiftModeMeta {
  giftId: string;
  giftNameKey: string;
  giftIconImage: Image | undefined;
  giftModeDesc: Text | undefined;
}

export interface BattleTeamUser {
  userId: string;
  score: string;
  userIdStr: string;
}

export interface BattleSetting {
  battleId: string;
  startTimeMs: string;
  duration: number;
  channelId: string;
  status: number;
  inviteType: BattleInviteType;
  giftModeMeta: GiftModeMeta | undefined;
  battleType: BattleType;
  extraDurationSecond: string;
  endTimeMs: string;
}

export interface BattleTeamUserArmies {
  teamId: string;
  teamUsers: BattleTeamUser[];
  teamTotalScore: string;
  userArmies: BattleUserArmies | undefined;
  hostRank: string;
}

export interface BattleUserArmies {
  userArmy: BattleUserArmy[];
  hostScore: string;
  anchorIdStr: string;
}

export interface BattleUserArmy {
  userId: string;
  score: string;
  nickname: string;
  avatarThumb: Image | undefined;
  diamondScore: string;
  userIdStr: string;
}

export interface HighScoreControlCfg {
  normalControlApplied: boolean;
  threshold: string;
  originDisplayToUserList: string[];
}

export interface Message {
  type: string;
  binary: Uint8Array;
}

export interface WebsocketParam {
  name: string;
  value: string;
}

export interface WebcastRoomUserSeqMessage {
  common: CommonMessageData | undefined;
  viewerCount: number;
  ranksList: WebcastRoomUserSeqMessage_Contributor[];
  popStr: string;
  seatsList: WebcastRoomUserSeqMessage_Contributor[];
  popularity: string;
  totalUser: number;
  anonymous: string;
}

export interface WebcastRoomUserSeqMessage_Contributor {
  coinCount: number;
  user: User | undefined;
  rank: number;
  delta: string;
}

export interface ImageModel {
  mUrls: string[];
  mUri: string;
  height: number;
  width: number;
  avgColor: string;
  imageType: number;
  schema: string;
  content: ImageModel_Content | undefined;
  isAnimated: boolean;
}

export interface ImageModel_Content {
  name: string;
  fontColor: string;
  level: string;
}

export interface WebcastChatMessage {
  common: CommonMessageData | undefined;
  user: User | undefined;
  comment: string;
  visibleToSender: boolean;
  background: ImageModel | undefined;
  fullScreenTextColor: string;
  backgroundImageV2: ImageModel | undefined;
  publicAreaCommon: PublicAreaCommon | undefined;
  giftImage: ImageModel | undefined;
  inputType: number;
  atUser: User | undefined;
  emotes: WebcastSubEmote[];
  contentLanguage: string;
  msgFilter: MsgFilter | undefined;
  quickChatScene: number;
  communityflaggedStatus: number;
  commentQualityScores: WebcastChatMessage_CommentQualityScore[];
  userIdentity: WebcastChatMessage_UserIdentity | undefined;
  commentTag: WebcastChatMessage_CommentTag[];
  publicAreaMessageCommon: PublicAreaMessageCommon | undefined;
  screenTime: string;
  signature: string;
  signatureVersion: string;
  ecStreamerKey: string;
}

export enum WebcastChatMessage_CommentTag {
  COMMENT_TAG_NORMAL = 0,
  COMMENT_TAG_CANDIDATE = 1,
  COMMENT_TAG_OVERAGE = 2,
  UNRECOGNIZED = -1,
}

export function webcastChatMessage_CommentTagFromJSON(object: any): WebcastChatMessage_CommentTag {
  switch (object) {
    case 0:
    case "COMMENT_TAG_NORMAL":
      return WebcastChatMessage_CommentTag.COMMENT_TAG_NORMAL;
    case 1:
    case "COMMENT_TAG_CANDIDATE":
      return WebcastChatMessage_CommentTag.COMMENT_TAG_CANDIDATE;
    case 2:
    case "COMMENT_TAG_OVERAGE":
      return WebcastChatMessage_CommentTag.COMMENT_TAG_OVERAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastChatMessage_CommentTag.UNRECOGNIZED;
  }
}

export function webcastChatMessage_CommentTagToJSON(object: WebcastChatMessage_CommentTag): string {
  switch (object) {
    case WebcastChatMessage_CommentTag.COMMENT_TAG_NORMAL:
      return "COMMENT_TAG_NORMAL";
    case WebcastChatMessage_CommentTag.COMMENT_TAG_CANDIDATE:
      return "COMMENT_TAG_CANDIDATE";
    case WebcastChatMessage_CommentTag.COMMENT_TAG_OVERAGE:
      return "COMMENT_TAG_OVERAGE";
    case WebcastChatMessage_CommentTag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebcastChatMessage_UserIdentity {
  isGiftGiverOfAnchor: boolean;
  isSubscriberOfAnchor: boolean;
  isMutualFollowingWithAnchor: boolean;
  isFollowerOfAnchor: boolean;
  isModeratorOfAnchor: boolean;
  isAnchor: boolean;
}

export interface WebcastChatMessage_CommentQualityScore {
  version: string;
  score: string;
}

export interface EmoteUploadInfo {
  userId: string;
  emoteUploadSource?: EmoteUploadInfo_UserEmoteUploadSource | undefined;
  userInfo: User | undefined;
  userIdStr: string;
}

export enum EmoteUploadInfo_UserEmoteUploadSource {
  USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0,
  USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1,
  USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2,
  UNRECOGNIZED = -1,
}

export function emoteUploadInfo_UserEmoteUploadSourceFromJSON(object: any): EmoteUploadInfo_UserEmoteUploadSource {
  switch (object) {
    case 0:
    case "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR":
      return EmoteUploadInfo_UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR;
    case 1:
    case "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER":
      return EmoteUploadInfo_UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER;
    case 2:
    case "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR":
      return EmoteUploadInfo_UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EmoteUploadInfo_UserEmoteUploadSource.UNRECOGNIZED;
  }
}

export function emoteUploadInfo_UserEmoteUploadSourceToJSON(object: EmoteUploadInfo_UserEmoteUploadSource): string {
  switch (object) {
    case EmoteUploadInfo_UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR:
      return "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR";
    case EmoteUploadInfo_UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER:
      return "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER";
    case EmoteUploadInfo_UserEmoteUploadSource.USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR:
      return "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR";
    case EmoteUploadInfo_UserEmoteUploadSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Chat Emotes (Subscriber) */
export interface WebcastEmoteChatMessage {
  common: CommonMessageData | undefined;
  user: User | undefined;
  emoteList: Emote[];
  msgFilter: MsgFilter | undefined;
  userIdentity: UserIdentity | undefined;
}

export interface WebcastSubEmote {
  /** starting at 0, you insert the emote itself into the comment at that place */
  placeInComment: number;
  emote: EmoteDetails | undefined;
}

export interface WebcastMemberMessage {
  common: CommonMessageData | undefined;
  user: User | undefined;
  action: MemberMessageAction;
  memberCount: number;
  operator: User | undefined;
  isSetToAdmin: boolean;
  isTopUser: boolean;
  rankScore: string;
  topUserNo: string;
  enterType: string;
  actionDescription: string;
  userId: string;
  effectConfig: WebcastMemberMessage_EffectConfig | undefined;
  popStr: string;
  enterEffectConfig: WebcastMemberMessage_EffectConfig | undefined;
  backgroundImage: Image | undefined;
  backgroundImageV2: Image | undefined;
  anchorDisplayText: Text | undefined;
  clientEnterSource: string;
  clientEnterType: string;
  clientLiveReason: string;
  actionDuration: string;
  userShareType: string;
  displayStyle: WebcastMemberMessage_DisplayStyle;
  adminPermissions: { [key: number]: number };
  kickSource: number;
  allowPreviewTime: string;
  lastSubscriptionAction: string;
  publicAreaMessageCommon: PublicAreaMessageCommon | undefined;
  liveSubOnlyTier: string;
  liveSubOnlyMonth: string;
  ecStreamerKey: string;
  showWave: string;
  waveAlgorithmData: WebcastMemberMessage_WaveAlgorithmData | undefined;
  hitAbStatus: WebcastMemberMessage_HitABStatus;
}

export enum WebcastMemberMessage_DisplayStyle {
  DISPLAY_STYLE_NORMAL = 0,
  DISPLAY_STYLE_STAY = 1,
  DISPLAY_STYLE_CHAT = 2,
  UNRECOGNIZED = -1,
}

export function webcastMemberMessage_DisplayStyleFromJSON(object: any): WebcastMemberMessage_DisplayStyle {
  switch (object) {
    case 0:
    case "DISPLAY_STYLE_NORMAL":
      return WebcastMemberMessage_DisplayStyle.DISPLAY_STYLE_NORMAL;
    case 1:
    case "DISPLAY_STYLE_STAY":
      return WebcastMemberMessage_DisplayStyle.DISPLAY_STYLE_STAY;
    case 2:
    case "DISPLAY_STYLE_CHAT":
      return WebcastMemberMessage_DisplayStyle.DISPLAY_STYLE_CHAT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastMemberMessage_DisplayStyle.UNRECOGNIZED;
  }
}

export function webcastMemberMessage_DisplayStyleToJSON(object: WebcastMemberMessage_DisplayStyle): string {
  switch (object) {
    case WebcastMemberMessage_DisplayStyle.DISPLAY_STYLE_NORMAL:
      return "DISPLAY_STYLE_NORMAL";
    case WebcastMemberMessage_DisplayStyle.DISPLAY_STYLE_STAY:
      return "DISPLAY_STYLE_STAY";
    case WebcastMemberMessage_DisplayStyle.DISPLAY_STYLE_CHAT:
      return "DISPLAY_STYLE_CHAT";
    case WebcastMemberMessage_DisplayStyle.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WebcastMemberMessage_HitABStatus {
  HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT = 0,
  HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1,
  HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT = 2,
  UNRECOGNIZED = -1,
}

export function webcastMemberMessage_HitABStatusFromJSON(object: any): WebcastMemberMessage_HitABStatus {
  switch (object) {
    case 0:
    case "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT":
      return WebcastMemberMessage_HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT;
    case 1:
    case "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT":
      return WebcastMemberMessage_HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT;
    case 2:
    case "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT":
      return WebcastMemberMessage_HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastMemberMessage_HitABStatus.UNRECOGNIZED;
  }
}

export function webcastMemberMessage_HitABStatusToJSON(object: WebcastMemberMessage_HitABStatus): string {
  switch (object) {
    case WebcastMemberMessage_HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT:
      return "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT";
    case WebcastMemberMessage_HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT:
      return "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT";
    case WebcastMemberMessage_HitABStatus.HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT:
      return "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT";
    case WebcastMemberMessage_HitABStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebcastMemberMessage_AdminPermissionsEntry {
  key: number;
  value: number;
}

/**
 * @EffectConfig
 * proto.webcast.im.MemberMessage
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface WebcastMemberMessage_EffectConfig {
  type: string;
  icon: Image | undefined;
  avatarPos: string;
  text: Text | undefined;
  textIcon: Image | undefined;
  stayTime: number;
  animAssetId: string;
  badge: Image | undefined;
  flexSettingArrayList: string[];
}

export interface WebcastMemberMessage_WaveAlgorithmData {
  algorithmVersion: string;
  isAlgHit: boolean;
  predictScore: string;
  isRewatch: boolean;
  isFollow: boolean;
}

export interface WebcastMemberMessage_EffectConfigBean {
  type: number;
  icon: ImageModel | undefined;
  textKey: Text | undefined;
  badge: ImageModel | undefined;
}

export interface WebcastGiftMessage {
  common: CommonMessageData | undefined;
  giftId: number;
  user: User | undefined;
  repeatEnd: number;
  groupId: string;
  giftDetails: Gift | undefined;
  monitorExtra: string;
  fanTicketCount: string;
  groupCount: number;
  repeatCount: number;
  comboCount: number;
  toUser: User | undefined;
  textEffect: WebcastGiftMessage_TextEffect | undefined;
  incomeTaskgifts: string;
  roomFanTicketCount: string;
  priority: WebcastGiftMessage_GiftIMPriority | undefined;
  logId: string;
  sendType: string;
  publicAreaCommon: PublicAreaCommon | undefined;
  trayDisplayText: Text | undefined;
  bannedDisplayEffects: string;
  mTrayInfo: WebcastGiftMessage_GiftTrayInfo | undefined;
  giftExtra: WebcastGiftMessage_GiftMonitorInfo | undefined;
  colorId: string;
  isFirstSent: boolean;
  displayTextForAnchor: Text | undefined;
  displayTextForAudience: Text | undefined;
  orderId: string;
  giftsInBox: WebcastGiftMessage_GiftsBoxInfo | undefined;
  msgFilter: MsgFilter | undefined;
  lynxExtra: WebcastGiftMessage_LynxGiftExtra[];
  userIdentity: UserIdentity | undefined;
  matchInfo: WebcastGiftMessage_MatchInfo | undefined;
  linkmicGiftExpressionStrategy: LinkmicGiftExpressionStrategy;
  flyingMicResources: WebcastGiftMessage_FlyingMicResources | undefined;
  disableGiftTracking: boolean;
  asset: WebcastGiftMessage_AssetsModel | undefined;
  version: GiftMessageVersion;
  sponsorshipInfo: WebcastGiftMessage_SponsorshipInfo[];
  flyingMicResourcesV2: WebcastGiftMessage_FlyingMicResources | undefined;
  publicAreaMessageCommon: PublicAreaMessageCommon | undefined;
  signature: string;
  signatureVersion: string;
  multiGenerateMessage: boolean;
  toMemberId: string;
  toMemberIdInt: string;
  toMemberNickname: string;
  interactiveGiftInfo: WebcastGiftMessage_InteractiveGiftInfo | undefined;
}

export interface WebcastGiftMessage_InteractiveGiftInfo {
  crossScreenDelay: string;
  crossScreenRole: string;
  ignoreConfig: GiftMessageIgnoreConfig;
  uniqId: string;
  toUserTeamId: string;
}

export interface WebcastGiftMessage_GiftIMPriority {
  queueSizesList: string[];
  selfQueuePriority: string;
  priority: string;
}

export interface WebcastGiftMessage_TextEffect {
  portraitDetail: WebcastGiftMessage_TextEffect_Detail | undefined;
  landscapeDetail: WebcastGiftMessage_TextEffect_Detail | undefined;
}

export interface WebcastGiftMessage_TextEffect_Detail {
  text: Text | undefined;
  textFontSize: number;
  background: Image | undefined;
  start: string;
  duration: string;
  x: number;
  y: number;
  width: number;
  height: number;
  shadowDx: number;
  shadowDy: number;
  shadowRadius: number;
  shadowColor: string;
  strokeColor: string;
  strokeWidth: number;
}

export interface WebcastGiftMessage_GiftTrayInfo {
  mDynamicImg: Image | undefined;
  canMirror: boolean;
  trayNormalBgImg: Image | undefined;
  trayNormalBgColor: string[];
  traySmallBgImg: Image | undefined;
  traySmallBgColor: string[];
  rightTagText: Text | undefined;
  rightTagBgImg: Image | undefined;
  rightTagBgColor: string[];
  trayNameTextColor: string;
  trayDescTextColor: string;
  rightTagJumpSchema: string;
}

export interface WebcastGiftMessage_GiftMonitorInfo {
  anchorId: string;
  profitApiMessageDur: string;
  sendGiftProfitApiStartMs: string;
  sendGiftProfitCoreStartMs: string;
  sendGiftReqStartMs: string;
  sendGiftSendMessageSuccessMs: string;
  sendProfitApiDur: string;
  toUserId: string;
  sendGiftStartClientLocalMs: string;
  fromPlatform: string;
  fromVersion: string;
}

export interface WebcastGiftMessage_MatchInfo {
  critical: string;
  effectCardInUse: boolean;
  multiplierType: MultiplierType;
  multiplierValue: string;
}

export interface WebcastGiftMessage_GiftsBoxInfo {
  gifts: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox[];
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox {
  giftId: string;
  effectId: string;
  colorId: string;
  remainTimes: number;
  asset: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel | undefined;
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel {
  name: string;
  resourceUri: string;
  resourceModel: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel | undefined;
  describe: string;
  id: string;
  resourceType: number;
  md5: string;
  size: string;
  lokiExtraContent: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent | undefined;
  downloadType: number;
  resourceByteVC1Model: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel | undefined;
  bytevc1Md5: string;
  videoResourceList: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource[];
  faceRecognitionArchiveMeta: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta | undefined;
  lynxUrlSettingsKey: string;
  downgradeResourceType: number;
  assetExtra: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra | undefined;
  stickerAssetVariant: number;
  immediateDownload: boolean;
  stickerAssetVariantReason: number;
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra {
  effectStarlingKey: string;
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel {
  urlList: string[];
  uri: string;
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent {
  giftType: string;
  giftDuration: string;
  needScreenShot: boolean;
  ismultiFrame: boolean;
  viewOverlay: string;
  befViewRenderSize:
    | WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize
    | undefined;
  befViewRenderFPS: number;
  befViewFitMode: number;
  modelNames: string;
  requirements: string[];
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize {
  with: number;
  height: number;
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource {
  videoTypeName: string;
  videoUrl: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel | undefined;
  videoMd5: string;
}

export interface WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta {
  version: string;
  requirements: string[];
  modelNames: string;
  sdkExtra: string;
}

export interface WebcastGiftMessage_AssetsModel {
  name: string;
  resourceUri: string;
  resourceModel: WebcastGiftMessage_AssetsModel_ResourceModel | undefined;
  describe: string;
  id: string;
  resourceType: number;
  md5: string;
  size: string;
  lokiExtraContent: WebcastGiftMessage_AssetsModel_LokiExtraContent | undefined;
  downloadType: number;
  resourceByteVC1Model: WebcastGiftMessage_AssetsModel_ResourceModel | undefined;
  bytevc1Md5: string;
  videoResourceList: WebcastGiftMessage_AssetsModel_VideoResource[];
  faceRecognitionArchiveMeta: WebcastGiftMessage_AssetsModel_FaceRecognitionMeta | undefined;
  lynxUrlSettingsKey: string;
  downgradeResourceType: number;
  assetExtra: WebcastGiftMessage_AssetsModel_AssetExtra | undefined;
  stickerAssetVariant: number;
  immediateDownload: boolean;
  stickerAssetVariantReason: number;
}

export interface WebcastGiftMessage_AssetsModel_AssetExtra {
  effectStarlingKey: string;
}

export interface WebcastGiftMessage_AssetsModel_ResourceModel {
  urlList: string[];
  uri: string;
}

export interface WebcastGiftMessage_AssetsModel_LokiExtraContent {
  giftType: string;
  giftDuration: string;
  needScreenShot: boolean;
  ismultiFrame: boolean;
  viewOverlay: string;
  befViewRenderSize: WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize | undefined;
  befViewRenderFPS: number;
  befViewFitMode: number;
  modelNames: string;
  requirements: string[];
}

export interface WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize {
  with: number;
  height: number;
}

export interface WebcastGiftMessage_AssetsModel_VideoResource {
  videoTypeName: string;
  videoUrl: WebcastGiftMessage_AssetsModel_ResourceModel | undefined;
  videoMd5: string;
}

export interface WebcastGiftMessage_AssetsModel_FaceRecognitionMeta {
  version: string;
  requirements: string[];
  modelNames: string;
  sdkExtra: string;
}

export interface WebcastGiftMessage_LynxGiftExtra {
  id: string;
  code: string;
  type: string;
  params: string[];
  extra: string;
}

export interface WebcastGiftMessage_FlyingMicResources {
  pathImage: Image | undefined;
  micImage: Image | undefined;
  transitionConfigs: WebcastGiftMessage_FlyingMicResources_TransitionConfig[];
}

export interface WebcastGiftMessage_FlyingMicResources_TransitionConfig {
  configId: string;
  resourceImage: Image | undefined;
}

export interface WebcastGiftMessage_SponsorshipInfo {
  giftId: string;
  sponsorId: string;
  lightGiftUp: boolean;
  unlightedGiftIcon: string;
  giftGalleryDetailPageSchemeUrl: string;
  giftGalleryClickSponsor: boolean;
  becomeAllSponsored: boolean;
}

/** Battle start */
export interface WebcastLinkMicBattle {
  common: CommonMessageData | undefined;
  battleId: string;
  battleSetting: BattleSetting | undefined;
  action: BattleAction;
  battleResult: { [key: string]: WebcastLinkMicBattle_BattleResult };
  mBattleDisplayConfig: WebcastLinkMicBattle_BattleDisplayConfig | undefined;
  inviteeGiftPermissionType: GiftPermissionType;
  armies: { [key: string]: BattleUserArmies };
  anchorInfo: { [key: string]: WebcastLinkMicBattle_BattleUserInfo };
  bubbleText: string;
  supportedActions: WebcastLinkMicBattle_SupportedActionsWrapper[];
  battleCombos: { [key: string]: WebcastLinkMicBattle_BattleComboInfo };
  teamUsers: WebcastLinkMicBattle_TeamUsersInfo[];
  inviteeGiftPermissionTypes: WebcastLinkMicBattle_BattleInviteeGiftPermission[];
  actionByUserId: string;
  teamBattleResult: WebcastLinkMicBattle_BattleTeamResult[];
  teamArmies: BattleTeamUserArmies[];
  abtestSettings: WebcastLinkMicBattle_BattleABTestSetting[];
  teamMatchCampaign: WebcastLinkMicBattle_TeamMatchCampaign | undefined;
  fuzzyDisplayConfigV2: HighScoreControlCfg | undefined;
}

export interface WebcastLinkMicBattle_BattleResultEntry {
  key: string;
  value: WebcastLinkMicBattle_BattleResult | undefined;
}

export interface WebcastLinkMicBattle_ArmiesEntry {
  key: string;
  value: BattleUserArmies | undefined;
}

export interface WebcastLinkMicBattle_AnchorInfoEntry {
  key: string;
  value: WebcastLinkMicBattle_BattleUserInfo | undefined;
}

export interface WebcastLinkMicBattle_BattleCombosEntry {
  key: string;
  value: WebcastLinkMicBattle_BattleComboInfo | undefined;
}

export interface WebcastLinkMicBattle_TeamMatchCampaign {
  bestTeammateRelation: WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation[];
  startSfxTeamId: string[];
  hasTeamMatchMvpSfx: boolean;
}

export interface WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation {
  userId: string;
  bestTeammateId: string;
}

export interface WebcastLinkMicBattle_BattleTeamResult {
  teamId: string;
  teamUsers: BattleTeamUser[];
  result: number;
  totalScore: string;
}

export interface WebcastLinkMicBattle_BattleInviteeGiftPermission {
  userId: string;
  giftPermissionType: number;
}

export interface WebcastLinkMicBattle_SupportedActionsWrapper {
  actionType: string;
}

export interface WebcastLinkMicBattle_TeamUsersInfo {
  teamId: string;
  userIds: string[];
}

export interface WebcastLinkMicBattle_BattleComboInfo {
  userId: string;
  comboStatus: string;
  comboCount: string;
  comboIconUrl: string;
  comboType: number;
  comboRuleGuideSchema: string;
}

export interface WebcastLinkMicBattle_BattleResult {
  userId: string;
  result: Result;
  score: string;
}

export interface WebcastLinkMicBattle_BattleDisplayConfig {
  threshold: number;
  text: string;
  diffThreshold: number;
  diffText: string;
  exemptStrategy: WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy | undefined;
}

export interface WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy {
  exemptBothHost: boolean;
  exemptAudienceTop: number;
}

export interface WebcastLinkMicBattle_BattleUserInfo {
  user: WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo | undefined;
  tags: WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag[];
}

export interface WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo {
  userId: string;
  nickName: string;
  avatarThumb: Image | undefined;
  displayId: string;
}

export interface WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag {
  bgImage: Image | undefined;
  iconImage: Image | undefined;
  content: string;
}

export interface WebcastLinkMicBattle_BattleABTestSetting {
  uid: string;
  abTestList: WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList | undefined;
}

export interface WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList {
  abTestList: WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest[];
}

export interface WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest {
  abTestType: BattleABTestType;
  group: number;
}

/** Battle status */
export interface WebcastLinkMicArmies {
  common: CommonMessageData | undefined;
  battleId: string;
  battleItems: { [key: string]: BattleUserArmies };
  channelId: string;
  giftSentTime: string;
  scoreUpdateTime: string;
  battleStatus: TriggerReason;
  fromUserId: string;
  giftId: string;
  giftCount: number;
  gifIconImage: Image | undefined;
  totalDiamondCount: number;
  repeatCount: number;
  teamArmies: BattleTeamUserArmies[];
  triggerCriticalStrike: boolean;
  hasTeamMatchMvpSfx: boolean;
  logId: string;
  battleSettings: BattleSetting | undefined;
  fuzzyDisplayConfigV2: HighScoreControlCfg | undefined;
}

export interface WebcastLinkMicArmies_BattleItemsEntry {
  key: string;
  value: BattleUserArmies | undefined;
}

export interface WebcastLinkMicArmiesItems {
  hostUserId: string;
  battleGroups: WebcastLinkMicArmiesGroup[];
}

export interface WebcastLinkMicArmiesGroup {
  users: User[];
  points: number;
}

/** Follow & share event */
export interface WebcastSocialMessage {
  common: CommonMessageData | undefined;
  user: User | undefined;
  shareType: string;
  action: string;
  shareTarget: string;
  followCount: number;
  shareDisplayStyle: string;
  shareCount: number;
  publicAreaMessageCommon: PublicAreaMessageCommon | undefined;
  signature: string;
  signatureVersion: string;
  showDurationMs: string;
}

/** Like event (is only sent from time to time, not with every like) */
export interface WebcastLikeMessage {
  common: CommonMessageData | undefined;
  likeCount: number;
  totalLikeCount: number;
  color: number;
  user: User | undefined;
  icon: string;
  icons: Image[];
  specifiedDisplayText: SpecifiedDisplayText[];
  effectCnt: string;
  likeEffect: LikeEffect[];
  publicAreaMessageCommon: PublicAreaMessageCommon | undefined;
  roomMessageHeatLevel: string;
}

export interface SpecifiedDisplayText {
  uid: string;
  displayText: Text | undefined;
}

export interface LikeEffect {
  version: string;
  effectCnt: string;
  effectIntervalMs: string;
  level: string;
}

/** New question event */
export interface WebcastQuestionNewMessage {
  common: CommonMessageData | undefined;
  details: WebcastQuestionNewMessage_Question | undefined;
}

export interface WebcastQuestionNewMessage_Question {
  questionId: string;
  questionText: string;
  answerStatus: number;
  createTime: string;
  user: User | undefined;
  createFrom: number;
  answerFrom: number;
}

/** Contains UI information */
export interface WebcastMessageEventDetails {
  displayType: string;
  label: string;
}

/** Source: Co-opted https://github.com/zerodytrash/TikTok-Livestream-Chat-Connector/issues/19#issuecomment-1074150342 */
export interface WebcastLiveIntroMessage {
  common: CommonMessageData | undefined;
  roomId: string;
  auditStatus: AuditStatus;
  description: string;
  host: User | undefined;
  introMode: number;
  badges: BadgeStruct[];
  language: string;
}

export interface SystemMessage {
  description: string;
}

export interface RankItem {
  colour: string;
  id: string;
}

export interface WebcastHourlyRankMessage {
  data: WebcastHourlyRankMessage_RankContainer | undefined;
  common: CommonMessageData | undefined;
  data2: number;
}

export interface WebcastHourlyRankMessage_RankContainer {
  data1: number;
  rankingData: WebcastHourlyRankMessage_RankContainer_RankingData | undefined;
  data2: number;
  rankings: Ranking | undefined;
  rankingData2: WebcastHourlyRankMessage_RankContainer_RankingData2 | undefined;
  data3: number;
  data4: number;
}

export interface WebcastHourlyRankMessage_RankContainer_RankingData {
  data1: number;
  rankdata: Ranking | undefined;
  data2: string;
}

export interface WebcastHourlyRankMessage_RankContainer_RankingData2 {
  data1: number;
  data2: number;
  rankdata: Ranking | undefined;
  data3: string;
  data4: number;
  data5: number;
}

export interface EmoteDetails {
  emoteId: string;
  image: EmoteImage | undefined;
}

export interface EmoteImage {
  imageUrl: string;
}

export interface WebcastEnvelopeMessage {
  common: CommonMessageData | undefined;
  envelopeInfo: WebcastEnvelopeMessage_EnvelopeInfo | undefined;
  display: EnvelopeDisplay;
}

export interface WebcastEnvelopeMessage_EnvelopeInfo {
  envelopeId: string;
  businessType: EnvelopeBusinessType;
  envelopeIdc: string;
  sendUserName: string;
  diamondCount: number;
  peopleCount: number;
  unpackAt: number;
  sendUserId: string;
  sendUserAvatar: Image | undefined;
  createAt: string;
  roomId: string;
  followShowStatus: EnvelopeFollowShowStatus;
  skinId: number;
}

export interface TreasureBoxData {
  coins: number;
  canOpen: number;
  timestamp: string;
}

/** New Subscriber message */
export interface WebcastSubNotifyMessage {
  common: CommonMessageData | undefined;
  user: User | undefined;
  exhibitionType: ExhibitionType;
  subMonth: string;
  subscribeType: SubscribeType;
  oldSubscribeStatus: OldSubscribeStatus;
  subscribeMessageType?: MessageType | undefined;
  subscribingStatus: SubscribingStatus;
  isSend: boolean;
  isCustom: boolean;
  giftSource: GiftSource;
  messageDisplayStyle: MessageDisplayStyle;
  publicAreaMessageCommon: PublicAreaMessageCommon | undefined;
  packageId: string;
  eventTracking: WebcastSubNotifyMessage_EventTracking | undefined;
}

export interface WebcastSubNotifyMessage_EventTracking {
  giftSubSenderId: string;
  giftSubReceiverId: string;
  anchorId: string;
  giftSubOrderCreateTime: string;
}

export interface FollowInfo {
  followingCount: number;
  followerCount: number;
  followStatus: number;
  pushStatus: number;
}

export interface ProfilePicture {
  urls: string[];
}

export interface UserBadgesAttributes {
  badgeSceneType: number;
  imageBadges: UserImageBadge[];
  badges: UserBadge[];
  privilegeLogExtra: PrivilegeLogExtra | undefined;
}

export interface UserBadge {
  type: string;
  name: string;
}

export interface UserImageBadge {
  displayType: number;
  image: UserImageBadgeImage | undefined;
}

export interface UserImageBadgeImage {
  url: string;
}

/** Websocket acknowledgment message */
export interface WebSocketAckMessage {
  id: string;
  type: string;
}

/** Message representing the room info */
export interface HeartbeatFrameRoomInfo {
  roomId: string;
}

/** Message representing metadata field 6 */
export interface HeartbeatFrameMetadataField6 {
  unknown1: number;
}

/** Message representing metadata field 7 */
export interface HeartbeatFrameMetadataField7 {
  unknown1: number;
}

/** Heartbeat keepalive message */
export interface HeartbeatFrame {
  metadataField6: HeartbeatFrameMetadataField6 | undefined;
  metadataField7: HeartbeatFrameMetadataField7 | undefined;
  roomInfo: HeartbeatFrameRoomInfo | undefined;
}

/**
 * TODO: In a future release, set client_enter=1 on both /im/fetch and WS url; this is what the web client does
 * Didn't do it because it requires an agent update & sign server update
 *         // Create a room enter container
 *        const container = ImEnterRoomMessagePushFrame.fromPartial({
 *            payloadType: "im_enter_room",
 *            payload: {
 *                roomId: roomId,
 *                unknown1: 12,
 *                role: "audience",
 *                cursor: cursor,
 *                unknown2: 0,
 *                unknown3: "0",
 *                unknown4: 0
 *            },
 *            metadata: {
 *                unknown1: 98
 *            }
 *        });
 */
export interface ImEnterRoomMessagePushFrame {
  metadata:
    | ImEnterRoomMessagePushFrame_Metadata
    | undefined;
  /** "im_enter_room" */
  payloadType: string;
  payload: ImEnterRoomMessagePushFrame_ImEnterRoomMessage | undefined;
}

export interface ImEnterRoomMessagePushFrame_Metadata {
  /** "98" */
  unknown1: number;
}

export interface ImEnterRoomMessagePushFrame_ImEnterRoomMessage {
  /** Room ID */
  roomId: string;
  /** "12" */
  unknown1: number;
  /** "audience" */
  role: string;
  /** Cursor */
  cursor: string;
  /** "0" */
  unknown2?:
    | number
    | undefined;
  /** "0" */
  unknown3: string;
  /** "0" */
  unknown4?: number | undefined;
}

export interface WebcastBarrageMessage {
  common: CommonMessageData | undefined;
  event: WebcastBarrageMessage_BarrageEvent | undefined;
  msgType?: WebcastBarrageMessage_BarrageType | undefined;
  icon: ImageModel | undefined;
  duration: string;
  backGround: ImageModel | undefined;
  rightIcon: ImageModel | undefined;
  displayConfig: number;
  galleryGiftId: string;
  useMarquee: boolean;
  showType?: WebcastBarrageMessage_ShowType | undefined;
  renderType?: WebcastBarrageMessage_RenderType | undefined;
  leftIconDisplayType?: WebcastBarrageMessage_IconDisplayType | undefined;
  ribbonAnimation: ImageModel | undefined;
  hybridUrl: string;
  schema: string;
  subType: string;
  privilegeLogExtra: PrivilegeLogExtra | undefined;
  content: Text | undefined;
  scene: Scene;
  control: WebcastBarrageMessage_DisplayControl | undefined;
  rightLabel: WebcastBarrageMessage_RightLabel | undefined;
  badge: BadgeStruct | undefined;
  animationData: WebcastBarrageMessage_AnimationData | undefined;
  commonBarrageContent: Text | undefined;
  userGradeParam: WebcastBarrageMessage_BarrageTypeUserGradeParam | undefined;
  fansLevelParam: WebcastBarrageMessage_BarrageTypeFansLevelParam | undefined;
  subscribeGiftParam: WebcastBarrageMessage_BarrageTypeSubscribeGiftParam | undefined;
  giftGalleryParams: WebcastBarrageMessage_BarrageTypeGiftGalleryParam | undefined;
}

export enum WebcastBarrageMessage_BarrageType {
  BARRAGE_TYPE_UNKNOWN = 0,
  BARRAGE_TYPE_E_COM_ORDERING = 1,
  BARRAGE_TYPE_E_COM_BUYING = 2,
  BARRAGE_TYPE_NORMAL = 3,
  BARRAGE_TYPE_SUBSCRIBE = 4,
  BARRAGE_TYPE_EVENT_VIEW = 5,
  BARRAGE_TYPE_EVENT_REGISTERED = 6,
  BARRAGE_TYPE_SUBSCRIBE_GIFT = 7,
  BARRAGE_TYPE_USER_UPGRADE = 8,
  BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION = 9,
  BARRAGE_TYPE_FANS_LEVEL_UPGRADE = 10,
  BARRAGE_TYPE_FANS_LEVEL_ENTRANCE = 11,
  BARRAGE_TYPE_GAME_PARTNERSHIP = 12,
  BARRAGE_TYPE_GIFT_GALLERY = 13,
  BARRAGE_TYPE_E_COM_BOUGHT = 14,
  BARRAGE_TYPE_COMMON_BARRAGE = 100,
  UNRECOGNIZED = -1,
}

export function webcastBarrageMessage_BarrageTypeFromJSON(object: any): WebcastBarrageMessage_BarrageType {
  switch (object) {
    case 0:
    case "BARRAGE_TYPE_UNKNOWN":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_UNKNOWN;
    case 1:
    case "BARRAGE_TYPE_E_COM_ORDERING":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_E_COM_ORDERING;
    case 2:
    case "BARRAGE_TYPE_E_COM_BUYING":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_E_COM_BUYING;
    case 3:
    case "BARRAGE_TYPE_NORMAL":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_NORMAL;
    case 4:
    case "BARRAGE_TYPE_SUBSCRIBE":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_SUBSCRIBE;
    case 5:
    case "BARRAGE_TYPE_EVENT_VIEW":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_EVENT_VIEW;
    case 6:
    case "BARRAGE_TYPE_EVENT_REGISTERED":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_EVENT_REGISTERED;
    case 7:
    case "BARRAGE_TYPE_SUBSCRIBE_GIFT":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_SUBSCRIBE_GIFT;
    case 8:
    case "BARRAGE_TYPE_USER_UPGRADE":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_USER_UPGRADE;
    case 9:
    case "BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION;
    case 10:
    case "BARRAGE_TYPE_FANS_LEVEL_UPGRADE":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_FANS_LEVEL_UPGRADE;
    case 11:
    case "BARRAGE_TYPE_FANS_LEVEL_ENTRANCE":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_FANS_LEVEL_ENTRANCE;
    case 12:
    case "BARRAGE_TYPE_GAME_PARTNERSHIP":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_GAME_PARTNERSHIP;
    case 13:
    case "BARRAGE_TYPE_GIFT_GALLERY":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_GIFT_GALLERY;
    case 14:
    case "BARRAGE_TYPE_E_COM_BOUGHT":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_E_COM_BOUGHT;
    case 100:
    case "BARRAGE_TYPE_COMMON_BARRAGE":
      return WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_COMMON_BARRAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastBarrageMessage_BarrageType.UNRECOGNIZED;
  }
}

export function webcastBarrageMessage_BarrageTypeToJSON(object: WebcastBarrageMessage_BarrageType): string {
  switch (object) {
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_UNKNOWN:
      return "BARRAGE_TYPE_UNKNOWN";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_E_COM_ORDERING:
      return "BARRAGE_TYPE_E_COM_ORDERING";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_E_COM_BUYING:
      return "BARRAGE_TYPE_E_COM_BUYING";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_NORMAL:
      return "BARRAGE_TYPE_NORMAL";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_SUBSCRIBE:
      return "BARRAGE_TYPE_SUBSCRIBE";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_EVENT_VIEW:
      return "BARRAGE_TYPE_EVENT_VIEW";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_EVENT_REGISTERED:
      return "BARRAGE_TYPE_EVENT_REGISTERED";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_SUBSCRIBE_GIFT:
      return "BARRAGE_TYPE_SUBSCRIBE_GIFT";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_USER_UPGRADE:
      return "BARRAGE_TYPE_USER_UPGRADE";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION:
      return "BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_FANS_LEVEL_UPGRADE:
      return "BARRAGE_TYPE_FANS_LEVEL_UPGRADE";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_FANS_LEVEL_ENTRANCE:
      return "BARRAGE_TYPE_FANS_LEVEL_ENTRANCE";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_GAME_PARTNERSHIP:
      return "BARRAGE_TYPE_GAME_PARTNERSHIP";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_GIFT_GALLERY:
      return "BARRAGE_TYPE_GIFT_GALLERY";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_E_COM_BOUGHT:
      return "BARRAGE_TYPE_E_COM_BOUGHT";
    case WebcastBarrageMessage_BarrageType.BARRAGE_TYPE_COMMON_BARRAGE:
      return "BARRAGE_TYPE_COMMON_BARRAGE";
    case WebcastBarrageMessage_BarrageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WebcastBarrageMessage_ShowType {
  SHOW_TYPE_NORMAL = 0,
  SHOW_TYPE_FADE_IN_OUT = 1,
  UNRECOGNIZED = -1,
}

export function webcastBarrageMessage_ShowTypeFromJSON(object: any): WebcastBarrageMessage_ShowType {
  switch (object) {
    case 0:
    case "SHOW_TYPE_NORMAL":
      return WebcastBarrageMessage_ShowType.SHOW_TYPE_NORMAL;
    case 1:
    case "SHOW_TYPE_FADE_IN_OUT":
      return WebcastBarrageMessage_ShowType.SHOW_TYPE_FADE_IN_OUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastBarrageMessage_ShowType.UNRECOGNIZED;
  }
}

export function webcastBarrageMessage_ShowTypeToJSON(object: WebcastBarrageMessage_ShowType): string {
  switch (object) {
    case WebcastBarrageMessage_ShowType.SHOW_TYPE_NORMAL:
      return "SHOW_TYPE_NORMAL";
    case WebcastBarrageMessage_ShowType.SHOW_TYPE_FADE_IN_OUT:
      return "SHOW_TYPE_FADE_IN_OUT";
    case WebcastBarrageMessage_ShowType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WebcastBarrageMessage_RenderType {
  RENDER_TYPE_NATIVE = 0,
  RENDER_TYPE_HYBRID = 1,
  RENDER_TYPE_ALPHA = 2,
  UNRECOGNIZED = -1,
}

export function webcastBarrageMessage_RenderTypeFromJSON(object: any): WebcastBarrageMessage_RenderType {
  switch (object) {
    case 0:
    case "RENDER_TYPE_NATIVE":
      return WebcastBarrageMessage_RenderType.RENDER_TYPE_NATIVE;
    case 1:
    case "RENDER_TYPE_HYBRID":
      return WebcastBarrageMessage_RenderType.RENDER_TYPE_HYBRID;
    case 2:
    case "RENDER_TYPE_ALPHA":
      return WebcastBarrageMessage_RenderType.RENDER_TYPE_ALPHA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastBarrageMessage_RenderType.UNRECOGNIZED;
  }
}

export function webcastBarrageMessage_RenderTypeToJSON(object: WebcastBarrageMessage_RenderType): string {
  switch (object) {
    case WebcastBarrageMessage_RenderType.RENDER_TYPE_NATIVE:
      return "RENDER_TYPE_NATIVE";
    case WebcastBarrageMessage_RenderType.RENDER_TYPE_HYBRID:
      return "RENDER_TYPE_HYBRID";
    case WebcastBarrageMessage_RenderType.RENDER_TYPE_ALPHA:
      return "RENDER_TYPE_ALPHA";
    case WebcastBarrageMessage_RenderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WebcastBarrageMessage_IconDisplayType {
  ICON_DISPLAY_TYPE_IMAGE = 0,
  ICON_DISPLAY_TYPE_BADGE = 1,
  UNRECOGNIZED = -1,
}

export function webcastBarrageMessage_IconDisplayTypeFromJSON(object: any): WebcastBarrageMessage_IconDisplayType {
  switch (object) {
    case 0:
    case "ICON_DISPLAY_TYPE_IMAGE":
      return WebcastBarrageMessage_IconDisplayType.ICON_DISPLAY_TYPE_IMAGE;
    case 1:
    case "ICON_DISPLAY_TYPE_BADGE":
      return WebcastBarrageMessage_IconDisplayType.ICON_DISPLAY_TYPE_BADGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastBarrageMessage_IconDisplayType.UNRECOGNIZED;
  }
}

export function webcastBarrageMessage_IconDisplayTypeToJSON(object: WebcastBarrageMessage_IconDisplayType): string {
  switch (object) {
    case WebcastBarrageMessage_IconDisplayType.ICON_DISPLAY_TYPE_IMAGE:
      return "ICON_DISPLAY_TYPE_IMAGE";
    case WebcastBarrageMessage_IconDisplayType.ICON_DISPLAY_TYPE_BADGE:
      return "ICON_DISPLAY_TYPE_BADGE";
    case WebcastBarrageMessage_IconDisplayType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebcastBarrageMessage_BarrageEvent {
  eventName: string;
  params: { [key: string]: string };
}

export interface WebcastBarrageMessage_BarrageEvent_ParamsEntry {
  key: string;
  value: string;
}

export interface WebcastBarrageMessage_BarrageTypeUserGradeParam {
  currentGrade: number;
  displayConfig: number;
  userId: string;
  user: User | undefined;
}

export interface WebcastBarrageMessage_BarrageTypeFansLevelParam {
  currentGrade: number;
  displayConfig: number;
  user: User | undefined;
}

export interface WebcastBarrageMessage_BarrageTypeSubscribeGiftParam {
  giftSubCount: string;
  showGiftSubCount: boolean;
}

export interface WebcastBarrageMessage_AnimationData {
  geckoChannelName: string;
  fileName: string;
  height: string;
  width: string;
  rightOffset: string;
}

export interface WebcastBarrageMessage_BarrageTypeGiftGalleryParam {
  fromUserId: string;
  toUserId: string;
}

export interface WebcastBarrageMessage_DisplayControl {
  priority: number;
  duration: string;
  targetGroupShowRst: { [key: number]: WebcastBarrageMessage_DisplayControl_ShowResult };
  horizontalTriggerType: HorizontalOnclickTriggerType;
}

export interface WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry {
  key: number;
  value: WebcastBarrageMessage_DisplayControl_ShowResult | undefined;
}

export interface WebcastBarrageMessage_DisplayControl_ShowResult {
  banned: boolean;
}

export interface WebcastBarrageMessage_RightLabel {
  backgroundColor: string;
  content: Text | undefined;
  height: string;
}

export interface WebcastPushFrame {
  seqId: string;
  id: string;
  service: string;
  method: string;
  headers: { [key: string]: string };
  payloadEncoding: string;
  type: string;
  binary: Uint8Array;
}

export interface WebcastPushFrame_HeadersEntry {
  key: string;
  value: string;
}

/** Response from TikTokServer. Container for Messages */
export interface ProtoMessageFetchResult {
  messages: BaseProtoMessage[];
  cursor: string;
  fetchInterval: string;
  now: string;
  internalExt: string;
  fetchType: number;
  wsParams: { [key: string]: string };
  heartBeatDuration: string;
  needsAck: boolean;
  wsUrl: string;
  isFirst: boolean;
  historyCommentCursor: string;
  historyNoMore: boolean;
}

export interface ProtoMessageFetchResult_WsParamsEntry {
  key: string;
  value: string;
}

export interface BaseProtoMessage {
  type: string;
  payload: Uint8Array;
  msgId: string;
  msgType: number;
  offset: string;
  isHistory: boolean;
}

export interface WebcastRoomMessage {
  common: CommonMessageData | undefined;
  content: string;
  supportLandscape: boolean;
  source: string;
  icon: Image | undefined;
  scene: Scene;
  isWelcome: boolean;
  publicAreaCommon: PublicAreaMessageCommon | undefined;
  showDurationMs: string;
  subScene: string;
}

/** Closed Captioning for Video */
export interface WebcastCaptionMessage {
  common: CommonMessageData | undefined;
  timestampMs: string;
  durationMs: string;
  content: WebcastCaptionMessage_CaptionContent[];
  sentenceId: string;
  sequenceId: string;
  definite: boolean;
}

export interface WebcastCaptionMessage_CaptionContent {
  lang: string;
  content: string;
}

/** System-Control Message from Room (e.g. Host ended Stream) */
export interface WebcastControlMessage {
  common: CommonMessageData | undefined;
  action: ControlAction;
  tips: string;
  extra: WebcastControlMessage_Extra | undefined;
  perceptionDialog: WebcastControlMessage_PerceptionDialogInfo | undefined;
  perceptionAudienceText: Text | undefined;
  punishInfo: PunishEventInfo | undefined;
  floatText: Text | undefined;
  floatStyle: number;
}

/**
 * @Extra
 * proto.webcast.im.ControlMessage
 */
export interface WebcastControlMessage_Extra {
  banInfoUrl: string;
  reasonNo: string;
  title: Text | undefined;
  violationReason: Text | undefined;
  content: Text | undefined;
  gotItButton: Text | undefined;
  banDetailButton: Text | undefined;
  source: string;
}

export interface WebcastControlMessage_PerceptionDialogInfo {
  iconType: PerceptionDialogIconType;
  title: Text | undefined;
  subTitle: Text | undefined;
  adviceActionText: Text | undefined;
  defaultActionText: Text | undefined;
  violationDetailUrl: string;
  scene: Scene;
  targetUserId: string;
  targetRoomId: string;
  countDownTime: string;
  showFeedback: boolean;
  feedbackOptions: WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption[];
  policyTip: string;
  appealPopup: number;
}

export interface WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption {
  id: string;
  contentKey: string;
}

export interface WebcastGoalUpdateMessage {
  common: CommonMessageData | undefined;
  indicator: LiveStreamGoalIndicator | undefined;
  goal: LiveStreamGoal | undefined;
  contributorId: string;
  contributorAvatar: Image | undefined;
  contributorDisplayId: string;
  contributeSubgoal: WebcastGoalUpdateMessage_LiveStreamSubGoal | undefined;
  contributeCount: string;
  contributeScore: string;
  giftRepeatCount: string;
  contributorIdStr: string;
  pin: boolean;
  unpin: boolean;
  pinInfo: WebcastGoalUpdateMessage_GoalPinInfo | undefined;
  updateSource: GoalMessageSource;
  goalExtra: string;
}

export interface WebcastGoalUpdateMessage_LiveStreamSubGoal {
  type: number;
  id: string;
  progress: string;
  target: string;
  gift: WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift | undefined;
  idStr: string;
  pinInfo: WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo | undefined;
  source: number;
  recommendedText: string;
  recommendedCommon: string;
}

export interface WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift {
  name: string;
  icon: Image | undefined;
  diamondCount: string;
  type: number;
}

export interface WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo {
  pinStartTime: string;
  pinEndTime: string;
  pinReadyTime: string;
}

export interface WebcastGoalUpdateMessage_GoalPinInfo {
  pin: boolean;
  unpin: boolean;
  pinEndTime: string;
  subGoalId: string;
  subGoalIdStr: string;
}

/** Message related to Chat-moderation? */
export interface WebcastImDeleteMessage {
  common: CommonMessageData | undefined;
  deleteMsgIdsList: string[];
  deleteUserIdsList: string[];
}

export interface WebcastInRoomBannerMessage {
  common: CommonMessageData | undefined;
  data: { [key: string]: string };
  position: number;
  actionType: number;
}

export interface WebcastInRoomBannerMessage_DataEntry {
  key: string;
  value: string;
}

export interface WebcastRankUpdateMessage {
  common: CommonMessageData | undefined;
  updatesList: WebcastRankUpdateMessage_RankUpdate[];
  /** @warning Enum not found, should be GroupType */
  groupType: string;
  priority: string;
  tabsList: WebcastRankUpdateMessage_RankTabInfo[];
  isAnimationLoopPlay: boolean;
  animationLoopForOff: boolean;
  unionAnimation: WebcastRankUpdateMessage_UnionAnimationInfo[];
  tabInfo: WebcastRankUpdateMessage_RankListTabInfo[];
}

export interface WebcastRankUpdateMessage_UnionAnimationInfo {
  unionType: UnionAnimationInfoType;
  rankTypeArray: ProfitRankType;
  supportedVersion: string;
}

export interface WebcastRankUpdateMessage_RankListTabInfo {
  tabs: WebcastRankUpdateMessage_RankTabInfo[];
  supportedVersion: string;
}

export interface WebcastRankUpdateMessage_RankTabInfo {
  rankType: ProfitRankType;
  title: string;
  titleText: Text | undefined;
  listLynxType: string;
}

/**
 * @RankUpdate
 * proto.webcast.im.RankUpdateMessage
 */
export interface WebcastRankUpdateMessage_RankUpdate {
  /** @warning Enum not found, should be RankType */
  rankType: string;
  ownerRank: string;
  defaultContent: Text | undefined;
  showEntranceAnimation: boolean;
  countdown: string;
  /** @warning Enum not found, should be RelatedTabRankType */
  relatedTabRankType: string;
  /** @warning Enum not found, should be RequestFirstShowType */
  requestFirstShowType: string;
  supportedVersion: string;
  owneronrank: boolean;
}

/** --- HandMade -- */
export interface WebcastPollMessage {
  common: CommonMessageData | undefined;
  messageType: MessageType;
  pollId: string;
  startContent: PollStartContent | undefined;
  endContent: PollEndContent | undefined;
  updateContent: PollUpdateVotesContent | undefined;
  pollKind: PollKind;
  pollBasicInfo: WebcastPollMessage_PollBasicInfo | undefined;
  templateContent: WebcastPollMessage_TemplateContent | undefined;
}

export interface WebcastPollMessage_TemplateContent {
  templateId: string;
  templateIdStr: string;
  status: PollTemplateStatus;
  pollKind: PollKind;
  appealStatus: PollAppealStatus;
  violationIdStr: string;
}

export interface WebcastPollMessage_PollBasicInfo {
  pollSponsor: string;
  giftId: string;
  title: string;
  isSuggestedQuestion: boolean;
  userCnt: string;
  gift: Gift | undefined;
  pollIdStr: string;
  suggestedQuestionKey: string;
  pollDuration: string;
  timeRemain: string;
  pollIndex: string;
  templateId: string;
}

export interface WebcastRankTextMessage {
  common: CommonMessageData | undefined;
  scene: RankTestMessageScene;
  ownerIdxBeforeUpdate: string;
  ownerIdxAfterUpdate: string;
  selfGetBadgeMsg: Text | undefined;
  otherGetBadgeMsg: Text | undefined;
  curUserId: string;
}

export interface WebcastLinkMicBattlePunishFinish {
  common: CommonMessageData | undefined;
  channelId: string;
  opUid: string;
  reason: Reason;
  battleId: string;
  battleSettings: BattleSetting | undefined;
}

export interface WebcastLinkmicBattleTaskMessage {
  common: CommonMessageData | undefined;
  battleTaskMessageType: BattleTaskMessageType;
  taskStart: WebcastLinkmicBattleTaskMessage_BattleTaskStart | undefined;
  taskUpdate: WebcastLinkmicBattleTaskMessage_BattleTaskUpdate | undefined;
  taskSettle: WebcastLinkmicBattleTaskMessage_BattleTaskSettle | undefined;
  rewardSettle: WebcastLinkmicBattleTaskMessage_BattleRewardSettle | undefined;
  battleId: string;
}

export interface WebcastLinkmicBattleTaskMessage_BattlePrompt {
  promptKey: string;
  promptElements: WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem[];
}

export interface WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem {
  promptFieldKey: string;
  promptFieldValue: string;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskStart {
  battleBonusConfig: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig | undefined;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig {
  previewStartTime: string;
  previewPeriodConfig: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod[];
  taskPeriodConfig: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig | undefined;
  rewardPeriodConfig: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig | undefined;
  taskGiftGuide: {
    [key: string]: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide;
  };
  previewStartTimestamp: string;
  previewClickActionSchemaUrl: string;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry {
  key: string;
  value: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide | undefined;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod {
  duration: string;
  promot: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
  icon: Image | undefined;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig {
  taskStartTime: string;
  duration: string;
  targetStartTimestamp: string;
  clickAction: number;
  clickToastPrompt: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
  promptType: number;
  taskStaticPrompt: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
  progressTarget: string;
  targetType: number;
  icon: Image | undefined;
  clickActionSchemaUrl: string;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig {
  rewardStartTime: string;
  duration: string;
  rewardMultiple: number;
  rewardStartTimestamp: string;
  rewardPraparePrompt: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
  rewardingPrompt: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
  clickPrompt: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide {
  guidePrompt: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
  promptType: number;
  disappearDuration: number;
  iconImage: Image | undefined;
  giftImage: Image | undefined;
  recommendGiftId: string;
  recommendGiftCount: number;
  guideContent: Text | undefined;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskUpdate {
  taskProgress: string;
  fromUserUid: string;
  promptKey: string;
  logId: string;
}

export interface WebcastLinkmicBattleTaskMessage_BattleTaskSettle {
  taskResult: WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result;
  rewardStartTime: string;
  rewardStartTimestamp: string;
}

export enum WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result {
  RESULT_SUCCEED = 0,
  RESULT_FAILED = 1,
  RESULT_BOTH_SUCCEED = 2,
  UNRECOGNIZED = -1,
}

export function webcastLinkmicBattleTaskMessage_BattleTaskSettle_ResultFromJSON(
  object: any,
): WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result {
  switch (object) {
    case 0:
    case "RESULT_SUCCEED":
      return WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.RESULT_SUCCEED;
    case 1:
    case "RESULT_FAILED":
      return WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.RESULT_FAILED;
    case 2:
    case "RESULT_BOTH_SUCCEED":
      return WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.RESULT_BOTH_SUCCEED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.UNRECOGNIZED;
  }
}

export function webcastLinkmicBattleTaskMessage_BattleTaskSettle_ResultToJSON(
  object: WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result,
): string {
  switch (object) {
    case WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.RESULT_SUCCEED:
      return "RESULT_SUCCEED";
    case WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.RESULT_FAILED:
      return "RESULT_FAILED";
    case WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.RESULT_BOTH_SUCCEED:
      return "RESULT_BOTH_SUCCEED";
    case WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebcastLinkmicBattleTaskMessage_BattleRewardSettle {
  rewardSettlePrompt: WebcastLinkmicBattleTaskMessage_BattlePrompt | undefined;
  status: RewardStatus;
}

export interface WebcastLinkMicFanTicketMethod {
  common: CommonMessageData | undefined;
  FanTicketRoomNotice: FanTicketRoomNoticeContent | undefined;
}

export interface WebcastLinkMicMethod {
  common: CommonMessageData | undefined;
  messageType: MessageType;
  accessKey: string;
  anchorLinkmicId: string;
  userId: string;
  fanTicket: string;
  totalLinkMicFanTicket: string;
  channelId: string;
  layout: string;
  vendor: string;
  dimension: string;
  theme: string;
  inviteUid: string;
  reply: number;
  duration: number;
  matchType: number;
  win: boolean;
  prompts: string;
  toUserId: string;
  tips: string;
  startTimeMs: string;
  confluenceType: number;
  fromRoomId: string;
  inviteType: number;
  subType: string;
  rtcExtInfo: string;
  appId: string;
  appSign: string;
  anchorLinkMicIdStr: string;
  rivalAnchorId: string;
  rivalLinkmicId: number;
  rivalLinkmicIdStr: string;
  shouldShowPopup: boolean;
  rtcJoinChannel: boolean;
  fanTicketType: number;
}

export interface WebcastUnauthorizedMemberMessage {
  common: CommonMessageData | undefined;
  action: number;
  nickNamePrefix: Text | undefined;
  nickName: string;
  enterText: Text | undefined;
  publicAreaCommon: PublicAreaMessageCommon | undefined;
}

export interface WebcastMsgDetectMessage {
  common: CommonMessageData | undefined;
  detectType: number;
  triggerCondition: WebcastMsgDetectMessage_TriggerCondition | undefined;
  timeInfo: WebcastMsgDetectMessage_TimeInfo | undefined;
  triggerBy: number;
  fromRegion: string;
}

export interface WebcastMsgDetectMessage_TimeInfo {
  clientStartMs: string;
  apiRecvTimeMs: string;
  apiSendToGoimMs: string;
}

export interface WebcastMsgDetectMessage_TriggerCondition {
  uplinkDetectHttp: boolean;
  uplinkDetectWebSocket: boolean;
  detectP2PMsg: boolean;
  detectRoomMsg: boolean;
  httpOptimize: boolean;
}

export interface WebcastOecLiveShoppingMessage {
  common: CommonMessageData | undefined;
  data1: number;
  shopData:
    | WebcastOecLiveShoppingMessage_LiveShoppingData
    | undefined;
  /** Uses index 1, 2 & 3 */
  shopTimings: TimeStampContainer | undefined;
  details: WebcastOecLiveShoppingMessage_LiveShoppingDetails | undefined;
}

export interface WebcastOecLiveShoppingMessage_LiveShoppingData {
  title: string;
  /** $55.99 */
  priceString: string;
  imageUrl: string;
  shopUrl: string;
  data1: string;
  /** "Shopify" */
  shopName: string;
  data2: string;
  shopUrl2: string;
  data3: string;
  data4: string;
}

export interface WebcastOecLiveShoppingMessage_LiveShoppingDetails {
  id1: string;
  data1: string;
  data2: number;
  timestamp: string;
  data: ValueLabel | undefined;
}

/** Host Pins comment to stream */
export interface WebcastRoomPinMessage {
  common: CommonMessageData | undefined;
  chatMessage?: WebcastChatMessage | undefined;
  socialMessage?: WebcastSocialMessage | undefined;
  giftMessage?: WebcastGiftMessage | undefined;
  memberMessage?: WebcastMemberMessage | undefined;
  likeMessage?: WebcastLikeMessage | undefined;
  method: string;
  pinTime: string;
  operator: User | undefined;
  action: number;
  displayDuration: string;
  pinId: string;
  ecStreamerKey: string;
}

export interface WebcastLinkMessage {
  common: CommonMessageData | undefined;
  MessageType: LinkMessageType;
  LinkerId: string;
  Scene: Scene;
  InviteContent: LinkerInviteContent | undefined;
  ReplyContent: LinkerReplyContent | undefined;
  CreateContent: LinkerCreateContent | undefined;
  CloseContent: LinkerCloseContent | undefined;
  EnterContent: LinkerEnterContent | undefined;
  LeaveContent: LinkerLeaveContent | undefined;
  CancelContent: LinkerCancelContent | undefined;
  KickOutContent: LinkerKickOutContent | undefined;
  LinkedListChangeContent: LinkerLinkedListChangeContent | undefined;
  UpdateUserContent: LinkerUpdateUserContent | undefined;
  WaitingListChangeContent: LinkerWaitingListChangeContent | undefined;
  MuteContent: LinkerMuteContent | undefined;
  RandomMatchContent: LinkerRandomMatchContent | undefined;
  UpdateUserSettingContent: LinkerUpdateUserSettingContent | undefined;
  MicIdxUpdateContent: LinkerMicIdxUpdateContent | undefined;
  ListChangeContent: LinkerListChangeContent | undefined;
  CohostListChangeContent: CohostListChangeContent | undefined;
  MediaChangeContent: LinkerMediaChangeContent | undefined;
  AcceptNoticeContent: LinkerAcceptNoticeContent | undefined;
  SysKickOutContent: LinkerSysKickOutContent | undefined;
  UserToastContent: LinkmicUserToastContent | undefined;
  extra: string;
  expireTimestamp: string;
  transferExtra: string;
}

/** @WebcastLinkLayerMessage */
export interface WebcastLinkLayerMessage {
  common: CommonMessageData | undefined;
  messageType: MessageType;
  channelId: string;
  scene: Scene;
  source: string;
  centerizedIdc: string;
  rtcRoomId: string;
  createChannelContent: CreateChannelContent | undefined;
  listChangeContent: ListChangeContent | undefined;
  inviteContent: InviteContent | undefined;
  applyContent: ApplyContent | undefined;
  permitApplyContent: PermitApplyContent | undefined;
  replyInviteContent: ReplyInviteContent | undefined;
  kickOutContent: KickOutContent | undefined;
  cancelApplyContent: CancelApplyContent | undefined;
  cancelInviteContent: CancelInviteContent | undefined;
  leaveContent: LeaveContent | undefined;
  finishContent: FinishChannelContent | undefined;
  joinDirectContent: JoinDirectContent | undefined;
  joinGroupContent: JoinGroupContent | undefined;
  permitGroupContent: PermitJoinGroupContent | undefined;
  cancelGroupContent: CancelJoinGroupContent | undefined;
  leaveGroupContent: LeaveJoinGroupContent | undefined;
  p2pGroupChangeContent: P2PGroupChangeContent | undefined;
  groupChangeContent: GroupChangeContent | undefined;
  businessContent: BusinessContent | undefined;
}

/** @RoomVerifyMessage */
export interface RoomVerifyMessage {
  common: CommonMessageData | undefined;
  action: number;
  content: string;
  noticeType: string;
  closeRoom: boolean;
}

export interface WebcastBarrageMessageOld {
  event: CommonMessageData | undefined;
  msgType: number;
  content: WebcastBarrageMessageOld_Text | undefined;
}

export interface WebcastBarrageMessageOld_Text {
  key: string;
  defaultPattern: string;
  pieces: WebcastBarrageMessageOld_TextPiece[];
}

export interface WebcastBarrageMessageOld_TextPiece {
  type: number;
  stringValue: string;
  userValue: WebcastBarrageMessageOld_TextPieceUser | undefined;
}

export interface WebcastBarrageMessageOld_TextPieceUser {
  user: User | undefined;
  withColon: boolean;
}

function createBaseCommonMessageData(): CommonMessageData {
  return {
    method: "",
    msgId: "0",
    roomId: "0",
    createTime: "0",
    monitor: 0,
    isShowMsg: false,
    describe: "",
    displayText: undefined,
    foldType: "0",
    anchorFoldType: "0",
    priorityScore: "0",
    logId: "",
    msgProcessFilterK: "",
    msgProcessFilterV: "",
    fromIdc: "",
    toIdc: "",
    filterMsgTagsList: [],
    sei: undefined,
    dependRootId: undefined,
    dependId: undefined,
    anchorPriorityScore: "0",
    roomMessageHeatLevel: "0",
    foldTypeForWeb: "0",
    anchorFoldTypeForWeb: "0",
    clientSendTime: "0",
    dispatchStrategy: 0,
  };
}

export const CommonMessageDataDecoder: MessageFns<CommonMessageData> = {
  encode(message: CommonMessageData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.msgId !== "0") {
      writer.uint32(16).int64(message.msgId);
    }
    if (message.roomId !== "0") {
      writer.uint32(24).int64(message.roomId);
    }
    if (message.createTime !== "0") {
      writer.uint32(32).int64(message.createTime);
    }
    if (message.monitor !== 0) {
      writer.uint32(40).int32(message.monitor);
    }
    if (message.isShowMsg !== false) {
      writer.uint32(48).bool(message.isShowMsg);
    }
    if (message.describe !== "") {
      writer.uint32(58).string(message.describe);
    }
    if (message.displayText !== undefined) {
      TextDecoder.encode(message.displayText, writer.uint32(66).fork()).join();
    }
    if (message.foldType !== "0") {
      writer.uint32(72).int64(message.foldType);
    }
    if (message.anchorFoldType !== "0") {
      writer.uint32(80).int64(message.anchorFoldType);
    }
    if (message.priorityScore !== "0") {
      writer.uint32(88).int64(message.priorityScore);
    }
    if (message.logId !== "") {
      writer.uint32(98).string(message.logId);
    }
    if (message.msgProcessFilterK !== "") {
      writer.uint32(106).string(message.msgProcessFilterK);
    }
    if (message.msgProcessFilterV !== "") {
      writer.uint32(114).string(message.msgProcessFilterV);
    }
    if (message.fromIdc !== "") {
      writer.uint32(122).string(message.fromIdc);
    }
    if (message.toIdc !== "") {
      writer.uint32(130).string(message.toIdc);
    }
    for (const v of message.filterMsgTagsList) {
      writer.uint32(138).string(v!);
    }
    if (message.sei !== undefined) {
      CommonMessageData_LiveMessageSEIDecoder.encode(message.sei, writer.uint32(146).fork()).join();
    }
    if (message.dependRootId !== undefined) {
      CommonMessageData_LiveMessageIDDecoder.encode(message.dependRootId, writer.uint32(154).fork()).join();
    }
    if (message.dependId !== undefined) {
      CommonMessageData_LiveMessageIDDecoder.encode(message.dependId, writer.uint32(162).fork()).join();
    }
    if (message.anchorPriorityScore !== "0") {
      writer.uint32(168).int64(message.anchorPriorityScore);
    }
    if (message.roomMessageHeatLevel !== "0") {
      writer.uint32(176).int64(message.roomMessageHeatLevel);
    }
    if (message.foldTypeForWeb !== "0") {
      writer.uint32(184).int64(message.foldTypeForWeb);
    }
    if (message.anchorFoldTypeForWeb !== "0") {
      writer.uint32(192).int64(message.anchorFoldTypeForWeb);
    }
    if (message.clientSendTime !== "0") {
      writer.uint32(200).int64(message.clientSendTime);
    }
    if (message.dispatchStrategy !== 0) {
      writer.uint32(208).int32(message.dispatchStrategy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonMessageData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonMessageData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.msgId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.createTime = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.monitor = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isShowMsg = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.displayText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.foldType = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.anchorFoldType = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.priorityScore = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.logId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.msgProcessFilterK = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.msgProcessFilterV = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.fromIdc = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.toIdc = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.filterMsgTagsList.push(reader.string());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.sei = CommonMessageData_LiveMessageSEIDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.dependRootId = CommonMessageData_LiveMessageIDDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.dependId = CommonMessageData_LiveMessageIDDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.anchorPriorityScore = reader.int64().toString();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.roomMessageHeatLevel = reader.int64().toString();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.foldTypeForWeb = reader.int64().toString();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.anchorFoldTypeForWeb = reader.int64().toString();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.clientSendTime = reader.int64().toString();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.dispatchStrategy = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonMessageData {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      msgId: isSet(object.msgId) ? globalThis.String(object.msgId) : "0",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "0",
      monitor: isSet(object.monitor) ? globalThis.Number(object.monitor) : 0,
      isShowMsg: isSet(object.isShowMsg) ? globalThis.Boolean(object.isShowMsg) : false,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      displayText: isSet(object.displayText) ? Text.fromJSON(object.displayText) : undefined,
      foldType: isSet(object.foldType) ? globalThis.String(object.foldType) : "0",
      anchorFoldType: isSet(object.anchorFoldType) ? globalThis.String(object.anchorFoldType) : "0",
      priorityScore: isSet(object.priorityScore) ? globalThis.String(object.priorityScore) : "0",
      logId: isSet(object.logId) ? globalThis.String(object.logId) : "",
      msgProcessFilterK: isSet(object.msgProcessFilterK) ? globalThis.String(object.msgProcessFilterK) : "",
      msgProcessFilterV: isSet(object.msgProcessFilterV) ? globalThis.String(object.msgProcessFilterV) : "",
      fromIdc: isSet(object.fromIdc) ? globalThis.String(object.fromIdc) : "",
      toIdc: isSet(object.toIdc) ? globalThis.String(object.toIdc) : "",
      filterMsgTagsList: globalThis.Array.isArray(object?.filterMsgTagsList)
        ? object.filterMsgTagsList.map((e: any) => globalThis.String(e))
        : [],
      sei: isSet(object.sei) ? CommonMessageData_LiveMessageSEI.fromJSON(object.sei) : undefined,
      dependRootId: isSet(object.dependRootId)
        ? CommonMessageData_LiveMessageID.fromJSON(object.dependRootId)
        : undefined,
      dependId: isSet(object.dependId) ? CommonMessageData_LiveMessageID.fromJSON(object.dependId) : undefined,
      anchorPriorityScore: isSet(object.anchorPriorityScore) ? globalThis.String(object.anchorPriorityScore) : "0",
      roomMessageHeatLevel: isSet(object.roomMessageHeatLevel) ? globalThis.String(object.roomMessageHeatLevel) : "0",
      foldTypeForWeb: isSet(object.foldTypeForWeb) ? globalThis.String(object.foldTypeForWeb) : "0",
      anchorFoldTypeForWeb: isSet(object.anchorFoldTypeForWeb) ? globalThis.String(object.anchorFoldTypeForWeb) : "0",
      clientSendTime: isSet(object.clientSendTime) ? globalThis.String(object.clientSendTime) : "0",
      dispatchStrategy: isSet(object.dispatchStrategy)
        ? commonMessageData_IMDispatchStrategyFromJSON(object.dispatchStrategy)
        : 0,
    };
  },

  toJSON(message: CommonMessageData): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.msgId !== "0") {
      obj.msgId = message.msgId;
    }
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.createTime !== "0") {
      obj.createTime = message.createTime;
    }
    if (message.monitor !== 0) {
      obj.monitor = Math.round(message.monitor);
    }
    if (message.isShowMsg !== false) {
      obj.isShowMsg = message.isShowMsg;
    }
    if (message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.displayText !== undefined) {
      obj.displayText = Text.toJSON(message.displayText);
    }
    if (message.foldType !== "0") {
      obj.foldType = message.foldType;
    }
    if (message.anchorFoldType !== "0") {
      obj.anchorFoldType = message.anchorFoldType;
    }
    if (message.priorityScore !== "0") {
      obj.priorityScore = message.priorityScore;
    }
    if (message.logId !== "") {
      obj.logId = message.logId;
    }
    if (message.msgProcessFilterK !== "") {
      obj.msgProcessFilterK = message.msgProcessFilterK;
    }
    if (message.msgProcessFilterV !== "") {
      obj.msgProcessFilterV = message.msgProcessFilterV;
    }
    if (message.fromIdc !== "") {
      obj.fromIdc = message.fromIdc;
    }
    if (message.toIdc !== "") {
      obj.toIdc = message.toIdc;
    }
    if (message.filterMsgTagsList?.length) {
      obj.filterMsgTagsList = message.filterMsgTagsList;
    }
    if (message.sei !== undefined) {
      obj.sei = CommonMessageData_LiveMessageSEI.toJSON(message.sei);
    }
    if (message.dependRootId !== undefined) {
      obj.dependRootId = CommonMessageData_LiveMessageID.toJSON(message.dependRootId);
    }
    if (message.dependId !== undefined) {
      obj.dependId = CommonMessageData_LiveMessageID.toJSON(message.dependId);
    }
    if (message.anchorPriorityScore !== "0") {
      obj.anchorPriorityScore = message.anchorPriorityScore;
    }
    if (message.roomMessageHeatLevel !== "0") {
      obj.roomMessageHeatLevel = message.roomMessageHeatLevel;
    }
    if (message.foldTypeForWeb !== "0") {
      obj.foldTypeForWeb = message.foldTypeForWeb;
    }
    if (message.anchorFoldTypeForWeb !== "0") {
      obj.anchorFoldTypeForWeb = message.anchorFoldTypeForWeb;
    }
    if (message.clientSendTime !== "0") {
      obj.clientSendTime = message.clientSendTime;
    }
    if (message.dispatchStrategy !== 0) {
      obj.dispatchStrategy = commonMessageData_IMDispatchStrategyToJSON(message.dispatchStrategy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonMessageData>, I>>(base?: I): CommonMessageData {
    return CommonMessageData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonMessageData>, I>>(object: I): CommonMessageData {
    const message = createBaseCommonMessageData();
    message.method = object.method ?? "";
    message.msgId = object.msgId ?? "0";
    message.roomId = object.roomId ?? "0";
    message.createTime = object.createTime ?? "0";
    message.monitor = object.monitor ?? 0;
    message.isShowMsg = object.isShowMsg ?? false;
    message.describe = object.describe ?? "";
    message.displayText = (object.displayText !== undefined && object.displayText !== null)
      ? Text.fromPartial(object.displayText)
      : undefined;
    message.foldType = object.foldType ?? "0";
    message.anchorFoldType = object.anchorFoldType ?? "0";
    message.priorityScore = object.priorityScore ?? "0";
    message.logId = object.logId ?? "";
    message.msgProcessFilterK = object.msgProcessFilterK ?? "";
    message.msgProcessFilterV = object.msgProcessFilterV ?? "";
    message.fromIdc = object.fromIdc ?? "";
    message.toIdc = object.toIdc ?? "";
    message.filterMsgTagsList = object.filterMsgTagsList?.map((e) => e) || [];
    message.sei = (object.sei !== undefined && object.sei !== null)
      ? CommonMessageData_LiveMessageSEI.fromPartial(object.sei)
      : undefined;
    message.dependRootId = (object.dependRootId !== undefined && object.dependRootId !== null)
      ? CommonMessageData_LiveMessageID.fromPartial(object.dependRootId)
      : undefined;
    message.dependId = (object.dependId !== undefined && object.dependId !== null)
      ? CommonMessageData_LiveMessageID.fromPartial(object.dependId)
      : undefined;
    message.anchorPriorityScore = object.anchorPriorityScore ?? "0";
    message.roomMessageHeatLevel = object.roomMessageHeatLevel ?? "0";
    message.foldTypeForWeb = object.foldTypeForWeb ?? "0";
    message.anchorFoldTypeForWeb = object.anchorFoldTypeForWeb ?? "0";
    message.clientSendTime = object.clientSendTime ?? "0";
    message.dispatchStrategy = object.dispatchStrategy ?? 0;
    return message;
  },
};

function createBaseCommonMessageData_LiveMessageSEI(): CommonMessageData_LiveMessageSEI {
  return { uniqueId: undefined, timestamp: "0" };
}

export const CommonMessageData_LiveMessageSEIDecoder: MessageFns<CommonMessageData_LiveMessageSEI> = {
  encode(message: CommonMessageData_LiveMessageSEI, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uniqueId !== undefined) {
      CommonMessageData_LiveMessageIDDecoder.encode(message.uniqueId, writer.uint32(10).fork()).join();
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonMessageData_LiveMessageSEI {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonMessageData_LiveMessageSEI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uniqueId = CommonMessageData_LiveMessageIDDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonMessageData_LiveMessageSEI {
    return {
      uniqueId: isSet(object.uniqueId) ? CommonMessageData_LiveMessageID.fromJSON(object.uniqueId) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
    };
  },

  toJSON(message: CommonMessageData_LiveMessageSEI): unknown {
    const obj: any = {};
    if (message.uniqueId !== undefined) {
      obj.uniqueId = CommonMessageData_LiveMessageID.toJSON(message.uniqueId);
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonMessageData_LiveMessageSEI>, I>>(
    base?: I,
  ): CommonMessageData_LiveMessageSEI {
    return CommonMessageData_LiveMessageSEI.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonMessageData_LiveMessageSEI>, I>>(
    object: I,
  ): CommonMessageData_LiveMessageSEI {
    const message = createBaseCommonMessageData_LiveMessageSEI();
    message.uniqueId = (object.uniqueId !== undefined && object.uniqueId !== null)
      ? CommonMessageData_LiveMessageID.fromPartial(object.uniqueId)
      : undefined;
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseCommonMessageData_LiveMessageID(): CommonMessageData_LiveMessageID {
  return { primaryId: "", messageScene: "" };
}

export const CommonMessageData_LiveMessageIDDecoder: MessageFns<CommonMessageData_LiveMessageID> = {
  encode(message: CommonMessageData_LiveMessageID, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.primaryId !== "") {
      writer.uint32(10).string(message.primaryId);
    }
    if (message.messageScene !== "") {
      writer.uint32(18).string(message.messageScene);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonMessageData_LiveMessageID {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonMessageData_LiveMessageID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.primaryId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageScene = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonMessageData_LiveMessageID {
    return {
      primaryId: isSet(object.primaryId) ? globalThis.String(object.primaryId) : "",
      messageScene: isSet(object.messageScene) ? globalThis.String(object.messageScene) : "",
    };
  },

  toJSON(message: CommonMessageData_LiveMessageID): unknown {
    const obj: any = {};
    if (message.primaryId !== "") {
      obj.primaryId = message.primaryId;
    }
    if (message.messageScene !== "") {
      obj.messageScene = message.messageScene;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonMessageData_LiveMessageID>, I>>(base?: I): CommonMessageData_LiveMessageID {
    return CommonMessageData_LiveMessageID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonMessageData_LiveMessageID>, I>>(
    object: I,
  ): CommonMessageData_LiveMessageID {
    const message = createBaseCommonMessageData_LiveMessageID();
    message.primaryId = object.primaryId ?? "";
    message.messageScene = object.messageScene ?? "";
    return message;
  },
};

function createBaseText(): Text {
  return { displayType: "", defaultPattern: "", defaultFormat: undefined, piecesList: [] };
}

export const TextDecoder: MessageFns<Text> = {
  encode(message: Text, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayType !== "") {
      writer.uint32(10).string(message.displayType);
    }
    if (message.defaultPattern !== "") {
      writer.uint32(18).string(message.defaultPattern);
    }
    if (message.defaultFormat !== undefined) {
      Text_TextFormatDecoder.encode(message.defaultFormat, writer.uint32(26).fork()).join();
    }
    for (const v of message.piecesList) {
      Text_TextPieceDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultPattern = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.defaultFormat = Text_TextFormatDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.piecesList.push(Text_TextPieceDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text {
    return {
      displayType: isSet(object.displayType) ? globalThis.String(object.displayType) : "",
      defaultPattern: isSet(object.defaultPattern) ? globalThis.String(object.defaultPattern) : "",
      defaultFormat: isSet(object.defaultFormat) ? Text_TextFormat.fromJSON(object.defaultFormat) : undefined,
      piecesList: globalThis.Array.isArray(object?.piecesList)
        ? object.piecesList.map((e: any) => Text_TextPiece.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Text): unknown {
    const obj: any = {};
    if (message.displayType !== "") {
      obj.displayType = message.displayType;
    }
    if (message.defaultPattern !== "") {
      obj.defaultPattern = message.defaultPattern;
    }
    if (message.defaultFormat !== undefined) {
      obj.defaultFormat = Text_TextFormat.toJSON(message.defaultFormat);
    }
    if (message.piecesList?.length) {
      obj.piecesList = message.piecesList.map((e) => Text_TextPiece.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text>, I>>(base?: I): Text {
    return Text.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text>, I>>(object: I): Text {
    const message = createBaseText();
    message.displayType = object.displayType ?? "";
    message.defaultPattern = object.defaultPattern ?? "";
    message.defaultFormat = (object.defaultFormat !== undefined && object.defaultFormat !== null)
      ? Text_TextFormat.fromPartial(object.defaultFormat)
      : undefined;
    message.piecesList = object.piecesList?.map((e) => Text_TextPiece.fromPartial(e)) || [];
    return message;
  },
};

function createBaseText_TextPiece(): Text_TextPiece {
  return {
    type: 0,
    format: undefined,
    stringValue: "",
    userValue: undefined,
    giftValue: undefined,
    patternRefValue: undefined,
  };
}

export const Text_TextPieceDecoder: MessageFns<Text_TextPiece> = {
  encode(message: Text_TextPiece, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.format !== undefined) {
      Text_TextFormatDecoder.encode(message.format, writer.uint32(18).fork()).join();
    }
    if (message.stringValue !== "") {
      writer.uint32(90).string(message.stringValue);
    }
    if (message.userValue !== undefined) {
      Text_TextPieceUserDecoder.encode(message.userValue, writer.uint32(170).fork()).join();
    }
    if (message.giftValue !== undefined) {
      Text_TextPieceGiftDecoder.encode(message.giftValue, writer.uint32(178).fork()).join();
    }
    if (message.patternRefValue !== undefined) {
      Text_TextPiecePatternRefDecoder.encode(message.patternRefValue, writer.uint32(194).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text_TextPiece {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText_TextPiece();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.format = Text_TextFormatDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.userValue = Text_TextPieceUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.giftValue = Text_TextPieceGiftDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.patternRefValue = Text_TextPiecePatternRefDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text_TextPiece {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      format: isSet(object.format) ? Text_TextFormat.fromJSON(object.format) : undefined,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
      userValue: isSet(object.userValue) ? Text_TextPieceUser.fromJSON(object.userValue) : undefined,
      giftValue: isSet(object.giftValue) ? Text_TextPieceGift.fromJSON(object.giftValue) : undefined,
      patternRefValue: isSet(object.patternRefValue)
        ? Text_TextPiecePatternRef.fromJSON(object.patternRefValue)
        : undefined,
    };
  },

  toJSON(message: Text_TextPiece): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.format !== undefined) {
      obj.format = Text_TextFormat.toJSON(message.format);
    }
    if (message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    if (message.userValue !== undefined) {
      obj.userValue = Text_TextPieceUser.toJSON(message.userValue);
    }
    if (message.giftValue !== undefined) {
      obj.giftValue = Text_TextPieceGift.toJSON(message.giftValue);
    }
    if (message.patternRefValue !== undefined) {
      obj.patternRefValue = Text_TextPiecePatternRef.toJSON(message.patternRefValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text_TextPiece>, I>>(base?: I): Text_TextPiece {
    return Text_TextPiece.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text_TextPiece>, I>>(object: I): Text_TextPiece {
    const message = createBaseText_TextPiece();
    message.type = object.type ?? 0;
    message.format = (object.format !== undefined && object.format !== null)
      ? Text_TextFormat.fromPartial(object.format)
      : undefined;
    message.stringValue = object.stringValue ?? "";
    message.userValue = (object.userValue !== undefined && object.userValue !== null)
      ? Text_TextPieceUser.fromPartial(object.userValue)
      : undefined;
    message.giftValue = (object.giftValue !== undefined && object.giftValue !== null)
      ? Text_TextPieceGift.fromPartial(object.giftValue)
      : undefined;
    message.patternRefValue = (object.patternRefValue !== undefined && object.patternRefValue !== null)
      ? Text_TextPiecePatternRef.fromPartial(object.patternRefValue)
      : undefined;
    return message;
  },
};

function createBaseText_TextFormat(): Text_TextFormat {
  return {
    color: "",
    bold: false,
    italic: false,
    weight: 0,
    italicAngle: 0,
    fontSize: 0,
    useHeighLightColor: false,
    useRemoteClor: false,
  };
}

export const Text_TextFormatDecoder: MessageFns<Text_TextFormat> = {
  encode(message: Text_TextFormat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== "") {
      writer.uint32(10).string(message.color);
    }
    if (message.bold !== false) {
      writer.uint32(16).bool(message.bold);
    }
    if (message.italic !== false) {
      writer.uint32(24).bool(message.italic);
    }
    if (message.weight !== 0) {
      writer.uint32(32).int32(message.weight);
    }
    if (message.italicAngle !== 0) {
      writer.uint32(40).int32(message.italicAngle);
    }
    if (message.fontSize !== 0) {
      writer.uint32(48).int32(message.fontSize);
    }
    if (message.useHeighLightColor !== false) {
      writer.uint32(56).bool(message.useHeighLightColor);
    }
    if (message.useRemoteClor !== false) {
      writer.uint32(64).bool(message.useRemoteClor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text_TextFormat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText_TextFormat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.bold = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.italic = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.weight = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.italicAngle = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fontSize = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.useHeighLightColor = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.useRemoteClor = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text_TextFormat {
    return {
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      bold: isSet(object.bold) ? globalThis.Boolean(object.bold) : false,
      italic: isSet(object.italic) ? globalThis.Boolean(object.italic) : false,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
      italicAngle: isSet(object.italicAngle) ? globalThis.Number(object.italicAngle) : 0,
      fontSize: isSet(object.fontSize) ? globalThis.Number(object.fontSize) : 0,
      useHeighLightColor: isSet(object.useHeighLightColor) ? globalThis.Boolean(object.useHeighLightColor) : false,
      useRemoteClor: isSet(object.useRemoteClor) ? globalThis.Boolean(object.useRemoteClor) : false,
    };
  },

  toJSON(message: Text_TextFormat): unknown {
    const obj: any = {};
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.bold !== false) {
      obj.bold = message.bold;
    }
    if (message.italic !== false) {
      obj.italic = message.italic;
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.italicAngle !== 0) {
      obj.italicAngle = Math.round(message.italicAngle);
    }
    if (message.fontSize !== 0) {
      obj.fontSize = Math.round(message.fontSize);
    }
    if (message.useHeighLightColor !== false) {
      obj.useHeighLightColor = message.useHeighLightColor;
    }
    if (message.useRemoteClor !== false) {
      obj.useRemoteClor = message.useRemoteClor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text_TextFormat>, I>>(base?: I): Text_TextFormat {
    return Text_TextFormat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text_TextFormat>, I>>(object: I): Text_TextFormat {
    const message = createBaseText_TextFormat();
    message.color = object.color ?? "";
    message.bold = object.bold ?? false;
    message.italic = object.italic ?? false;
    message.weight = object.weight ?? 0;
    message.italicAngle = object.italicAngle ?? 0;
    message.fontSize = object.fontSize ?? 0;
    message.useHeighLightColor = object.useHeighLightColor ?? false;
    message.useRemoteClor = object.useRemoteClor ?? false;
    return message;
  },
};

function createBaseText_TextPieceGift(): Text_TextPieceGift {
  return { giftId: 0, nameRef: undefined, showType: 0, colorId: "0" };
}

export const Text_TextPieceGiftDecoder: MessageFns<Text_TextPieceGift> = {
  encode(message: Text_TextPieceGift, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftId !== 0) {
      writer.uint32(8).int32(message.giftId);
    }
    if (message.nameRef !== undefined) {
      Text_PatternRefDecoder.encode(message.nameRef, writer.uint32(18).fork()).join();
    }
    if (message.showType !== 0) {
      writer.uint32(24).int32(message.showType);
    }
    if (message.colorId !== "0") {
      writer.uint32(32).int64(message.colorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text_TextPieceGift {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText_TextPieceGift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nameRef = Text_PatternRefDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.showType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.colorId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text_TextPieceGift {
    return {
      giftId: isSet(object.giftId) ? globalThis.Number(object.giftId) : 0,
      nameRef: isSet(object.nameRef) ? Text_PatternRef.fromJSON(object.nameRef) : undefined,
      showType: isSet(object.showType) ? text_ShowTypeFromJSON(object.showType) : 0,
      colorId: isSet(object.colorId) ? globalThis.String(object.colorId) : "0",
    };
  },

  toJSON(message: Text_TextPieceGift): unknown {
    const obj: any = {};
    if (message.giftId !== 0) {
      obj.giftId = Math.round(message.giftId);
    }
    if (message.nameRef !== undefined) {
      obj.nameRef = Text_PatternRef.toJSON(message.nameRef);
    }
    if (message.showType !== 0) {
      obj.showType = text_ShowTypeToJSON(message.showType);
    }
    if (message.colorId !== "0") {
      obj.colorId = message.colorId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text_TextPieceGift>, I>>(base?: I): Text_TextPieceGift {
    return Text_TextPieceGift.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text_TextPieceGift>, I>>(object: I): Text_TextPieceGift {
    const message = createBaseText_TextPieceGift();
    message.giftId = object.giftId ?? 0;
    message.nameRef = (object.nameRef !== undefined && object.nameRef !== null)
      ? Text_PatternRef.fromPartial(object.nameRef)
      : undefined;
    message.showType = object.showType ?? 0;
    message.colorId = object.colorId ?? "0";
    return message;
  },
};

function createBaseText_TextPiecePatternRef(): Text_TextPiecePatternRef {
  return { key: "", defaultPattern: "" };
}

export const Text_TextPiecePatternRefDecoder: MessageFns<Text_TextPiecePatternRef> = {
  encode(message: Text_TextPiecePatternRef, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.defaultPattern !== "") {
      writer.uint32(18).string(message.defaultPattern);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text_TextPiecePatternRef {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText_TextPiecePatternRef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultPattern = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text_TextPiecePatternRef {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      defaultPattern: isSet(object.defaultPattern) ? globalThis.String(object.defaultPattern) : "",
    };
  },

  toJSON(message: Text_TextPiecePatternRef): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.defaultPattern !== "") {
      obj.defaultPattern = message.defaultPattern;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text_TextPiecePatternRef>, I>>(base?: I): Text_TextPiecePatternRef {
    return Text_TextPiecePatternRef.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text_TextPiecePatternRef>, I>>(object: I): Text_TextPiecePatternRef {
    const message = createBaseText_TextPiecePatternRef();
    message.key = object.key ?? "";
    message.defaultPattern = object.defaultPattern ?? "";
    return message;
  },
};

function createBaseText_TextPieceUser(): Text_TextPieceUser {
  return { user: undefined, withColon: false };
}

export const Text_TextPieceUserDecoder: MessageFns<Text_TextPieceUser> = {
  encode(message: Text_TextPieceUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.withColon !== false) {
      writer.uint32(16).bool(message.withColon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text_TextPieceUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText_TextPieceUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.withColon = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text_TextPieceUser {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      withColon: isSet(object.withColon) ? globalThis.Boolean(object.withColon) : false,
    };
  },

  toJSON(message: Text_TextPieceUser): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.withColon !== false) {
      obj.withColon = message.withColon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text_TextPieceUser>, I>>(base?: I): Text_TextPieceUser {
    return Text_TextPieceUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text_TextPieceUser>, I>>(object: I): Text_TextPieceUser {
    const message = createBaseText_TextPieceUser();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.withColon = object.withColon ?? false;
    return message;
  },
};

function createBaseText_PatternRef(): Text_PatternRef {
  return { key: "", defaultPattern: "" };
}

export const Text_PatternRefDecoder: MessageFns<Text_PatternRef> = {
  encode(message: Text_PatternRef, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.defaultPattern !== "") {
      writer.uint32(18).string(message.defaultPattern);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text_PatternRef {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText_PatternRef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultPattern = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text_PatternRef {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      defaultPattern: isSet(object.defaultPattern) ? globalThis.String(object.defaultPattern) : "",
    };
  },

  toJSON(message: Text_PatternRef): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.defaultPattern !== "") {
      obj.defaultPattern = message.defaultPattern;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text_PatternRef>, I>>(base?: I): Text_PatternRef {
    return Text_PatternRef.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text_PatternRef>, I>>(object: I): Text_PatternRef {
    const message = createBaseText_PatternRef();
    message.key = object.key ?? "";
    message.defaultPattern = object.defaultPattern ?? "";
    return message;
  },
};

function createBaseImage(): Image {
  return {
    url: [],
    mUri: "",
    height: 0,
    width: 0,
    avgColor: "",
    imageType: 0,
    schema: "",
    content: undefined,
    isAnimated: false,
  };
}

export const ImageDecoder: MessageFns<Image> = {
  encode(message: Image, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.url) {
      writer.uint32(10).string(v!);
    }
    if (message.mUri !== "") {
      writer.uint32(18).string(message.mUri);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(32).int32(message.width);
    }
    if (message.avgColor !== "") {
      writer.uint32(42).string(message.avgColor);
    }
    if (message.imageType !== 0) {
      writer.uint32(48).int32(message.imageType);
    }
    if (message.schema !== "") {
      writer.uint32(58).string(message.schema);
    }
    if (message.content !== undefined) {
      Image_ContentDecoder.encode(message.content, writer.uint32(66).fork()).join();
    }
    if (message.isAnimated !== false) {
      writer.uint32(72).bool(message.isAnimated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Image {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avgColor = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.imageType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.content = Image_ContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isAnimated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Image {
    return {
      url: globalThis.Array.isArray(object?.url) ? object.url.map((e: any) => globalThis.String(e)) : [],
      mUri: isSet(object.mUri) ? globalThis.String(object.mUri) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      avgColor: isSet(object.avgColor) ? globalThis.String(object.avgColor) : "",
      imageType: isSet(object.imageType) ? globalThis.Number(object.imageType) : 0,
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      content: isSet(object.content) ? Image_Content.fromJSON(object.content) : undefined,
      isAnimated: isSet(object.isAnimated) ? globalThis.Boolean(object.isAnimated) : false,
    };
  },

  toJSON(message: Image): unknown {
    const obj: any = {};
    if (message.url?.length) {
      obj.url = message.url;
    }
    if (message.mUri !== "") {
      obj.mUri = message.mUri;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.avgColor !== "") {
      obj.avgColor = message.avgColor;
    }
    if (message.imageType !== 0) {
      obj.imageType = Math.round(message.imageType);
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.content !== undefined) {
      obj.content = Image_Content.toJSON(message.content);
    }
    if (message.isAnimated !== false) {
      obj.isAnimated = message.isAnimated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Image>, I>>(base?: I): Image {
    return Image.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Image>, I>>(object: I): Image {
    const message = createBaseImage();
    message.url = object.url?.map((e) => e) || [];
    message.mUri = object.mUri ?? "";
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    message.avgColor = object.avgColor ?? "";
    message.imageType = object.imageType ?? 0;
    message.schema = object.schema ?? "";
    message.content = (object.content !== undefined && object.content !== null)
      ? Image_Content.fromPartial(object.content)
      : undefined;
    message.isAnimated = object.isAnimated ?? false;
    return message;
  },
};

function createBaseImage_Content(): Image_Content {
  return { name: "", fontColor: "", level: "0" };
}

export const Image_ContentDecoder: MessageFns<Image_Content> = {
  encode(message: Image_Content, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.fontColor !== "") {
      writer.uint32(18).string(message.fontColor);
    }
    if (message.level !== "0") {
      writer.uint32(24).int64(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Image_Content {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImage_Content();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Image_Content {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      fontColor: isSet(object.fontColor) ? globalThis.String(object.fontColor) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
    };
  },

  toJSON(message: Image_Content): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.fontColor !== "") {
      obj.fontColor = message.fontColor;
    }
    if (message.level !== "0") {
      obj.level = message.level;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Image_Content>, I>>(base?: I): Image_Content {
    return Image_Content.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Image_Content>, I>>(object: I): Image_Content {
    const message = createBaseImage_Content();
    message.name = object.name ?? "";
    message.fontColor = object.fontColor ?? "";
    message.level = object.level ?? "0";
    return message;
  },
};

function createBaseBadgeStruct(): BadgeStruct {
  return {
    badgeDisplayType: 0,
    badgePriorityType: 0,
    badgeScene: 0,
    position: 0,
    displayStatus: 0,
    greyedByClient: "0",
    exhibitionType: 0,
    schemaUrl: "",
    display: false,
    logExtra: undefined,
    image: undefined,
    text: undefined,
    str: undefined,
    combine: undefined,
    isCustomized: false,
  };
}

export const BadgeStructDecoder: MessageFns<BadgeStruct> = {
  encode(message: BadgeStruct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.badgeDisplayType !== 0) {
      writer.uint32(8).int32(message.badgeDisplayType);
    }
    if (message.badgePriorityType !== 0) {
      writer.uint32(16).int32(message.badgePriorityType);
    }
    if (message.badgeScene !== 0) {
      writer.uint32(24).int32(message.badgeScene);
    }
    if (message.position !== 0) {
      writer.uint32(32).int32(message.position);
    }
    if (message.displayStatus !== 0) {
      writer.uint32(40).int32(message.displayStatus);
    }
    if (message.greyedByClient !== "0") {
      writer.uint32(48).int64(message.greyedByClient);
    }
    if (message.exhibitionType !== 0) {
      writer.uint32(56).int32(message.exhibitionType);
    }
    if (message.schemaUrl !== "") {
      writer.uint32(82).string(message.schemaUrl);
    }
    if (message.display !== false) {
      writer.uint32(88).bool(message.display);
    }
    if (message.logExtra !== undefined) {
      PrivilegeLogExtraDecoder.encode(message.logExtra, writer.uint32(98).fork()).join();
    }
    if (message.image !== undefined) {
      BadgeStruct_ImageBadgeDecoder.encode(message.image, writer.uint32(162).fork()).join();
    }
    if (message.text !== undefined) {
      BadgeStruct_TextBadgeDecoder.encode(message.text, writer.uint32(170).fork()).join();
    }
    if (message.str !== undefined) {
      BadgeStruct_StringBadgeDecoder.encode(message.str, writer.uint32(178).fork()).join();
    }
    if (message.combine !== undefined) {
      BadgeStruct_CombineBadgeDecoder.encode(message.combine, writer.uint32(186).fork()).join();
    }
    if (message.isCustomized !== false) {
      writer.uint32(192).bool(message.isCustomized);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.badgeDisplayType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.badgePriorityType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.badgeScene = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.position = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.displayStatus = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.greyedByClient = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.exhibitionType = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.schemaUrl = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.display = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.logExtra = PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.image = BadgeStruct_ImageBadgeDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.text = BadgeStruct_TextBadgeDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.str = BadgeStruct_StringBadgeDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.combine = BadgeStruct_CombineBadgeDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.isCustomized = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct {
    return {
      badgeDisplayType: isSet(object.badgeDisplayType)
        ? badgeStruct_BadgeDisplayTypeFromJSON(object.badgeDisplayType)
        : 0,
      badgePriorityType: isSet(object.badgePriorityType)
        ? badgeStruct_BadgePriorityTypeFromJSON(object.badgePriorityType)
        : 0,
      badgeScene: isSet(object.badgeScene) ? badgeStruct_BadgeSceneTypeFromJSON(object.badgeScene) : 0,
      position: isSet(object.position) ? badgeStruct_PositionFromJSON(object.position) : 0,
      displayStatus: isSet(object.displayStatus) ? badgeStruct_DisplayStatusFromJSON(object.displayStatus) : 0,
      greyedByClient: isSet(object.greyedByClient) ? globalThis.String(object.greyedByClient) : "0",
      exhibitionType: isSet(object.exhibitionType) ? badgeStruct_BadgeExhibitionTypeFromJSON(object.exhibitionType) : 0,
      schemaUrl: isSet(object.schemaUrl) ? globalThis.String(object.schemaUrl) : "",
      display: isSet(object.display) ? globalThis.Boolean(object.display) : false,
      logExtra: isSet(object.logExtra) ? PrivilegeLogExtra.fromJSON(object.logExtra) : undefined,
      image: isSet(object.image) ? BadgeStruct_ImageBadge.fromJSON(object.image) : undefined,
      text: isSet(object.text) ? BadgeStruct_TextBadge.fromJSON(object.text) : undefined,
      str: isSet(object.str) ? BadgeStruct_StringBadge.fromJSON(object.str) : undefined,
      combine: isSet(object.combine) ? BadgeStruct_CombineBadge.fromJSON(object.combine) : undefined,
      isCustomized: isSet(object.isCustomized) ? globalThis.Boolean(object.isCustomized) : false,
    };
  },

  toJSON(message: BadgeStruct): unknown {
    const obj: any = {};
    if (message.badgeDisplayType !== 0) {
      obj.badgeDisplayType = badgeStruct_BadgeDisplayTypeToJSON(message.badgeDisplayType);
    }
    if (message.badgePriorityType !== 0) {
      obj.badgePriorityType = badgeStruct_BadgePriorityTypeToJSON(message.badgePriorityType);
    }
    if (message.badgeScene !== 0) {
      obj.badgeScene = badgeStruct_BadgeSceneTypeToJSON(message.badgeScene);
    }
    if (message.position !== 0) {
      obj.position = badgeStruct_PositionToJSON(message.position);
    }
    if (message.displayStatus !== 0) {
      obj.displayStatus = badgeStruct_DisplayStatusToJSON(message.displayStatus);
    }
    if (message.greyedByClient !== "0") {
      obj.greyedByClient = message.greyedByClient;
    }
    if (message.exhibitionType !== 0) {
      obj.exhibitionType = badgeStruct_BadgeExhibitionTypeToJSON(message.exhibitionType);
    }
    if (message.schemaUrl !== "") {
      obj.schemaUrl = message.schemaUrl;
    }
    if (message.display !== false) {
      obj.display = message.display;
    }
    if (message.logExtra !== undefined) {
      obj.logExtra = PrivilegeLogExtra.toJSON(message.logExtra);
    }
    if (message.image !== undefined) {
      obj.image = BadgeStruct_ImageBadge.toJSON(message.image);
    }
    if (message.text !== undefined) {
      obj.text = BadgeStruct_TextBadge.toJSON(message.text);
    }
    if (message.str !== undefined) {
      obj.str = BadgeStruct_StringBadge.toJSON(message.str);
    }
    if (message.combine !== undefined) {
      obj.combine = BadgeStruct_CombineBadge.toJSON(message.combine);
    }
    if (message.isCustomized !== false) {
      obj.isCustomized = message.isCustomized;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct>, I>>(base?: I): BadgeStruct {
    return BadgeStruct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct>, I>>(object: I): BadgeStruct {
    const message = createBaseBadgeStruct();
    message.badgeDisplayType = object.badgeDisplayType ?? 0;
    message.badgePriorityType = object.badgePriorityType ?? 0;
    message.badgeScene = object.badgeScene ?? 0;
    message.position = object.position ?? 0;
    message.displayStatus = object.displayStatus ?? 0;
    message.greyedByClient = object.greyedByClient ?? "0";
    message.exhibitionType = object.exhibitionType ?? 0;
    message.schemaUrl = object.schemaUrl ?? "";
    message.display = object.display ?? false;
    message.logExtra = (object.logExtra !== undefined && object.logExtra !== null)
      ? PrivilegeLogExtra.fromPartial(object.logExtra)
      : undefined;
    message.image = (object.image !== undefined && object.image !== null)
      ? BadgeStruct_ImageBadge.fromPartial(object.image)
      : undefined;
    message.text = (object.text !== undefined && object.text !== null)
      ? BadgeStruct_TextBadge.fromPartial(object.text)
      : undefined;
    message.str = (object.str !== undefined && object.str !== null)
      ? BadgeStruct_StringBadge.fromPartial(object.str)
      : undefined;
    message.combine = (object.combine !== undefined && object.combine !== null)
      ? BadgeStruct_CombineBadge.fromPartial(object.combine)
      : undefined;
    message.isCustomized = object.isCustomized ?? false;
    return message;
  },
};

function createBaseBadgeStruct_CombineBadge(): BadgeStruct_CombineBadge {
  return {
    badgeDisplayType: 0,
    icon: undefined,
    text: undefined,
    str: "",
    padding: undefined,
    fontStyle: undefined,
    profileCardPanel: undefined,
    background: undefined,
    backgroundDarkMode: undefined,
    iconAutoMirrored: false,
    bgAutoMirrored: false,
    publicScreenShowStyle: 0,
    personalCardShowStyle: 0,
    rankListOnlineAudienceShowStyle: 0,
    multiGuestShowStyle: 0,
    arrowConfig: undefined,
    paddingNewFont: undefined,
  };
}

export const BadgeStruct_CombineBadgeDecoder: MessageFns<BadgeStruct_CombineBadge> = {
  encode(message: BadgeStruct_CombineBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.badgeDisplayType !== 0) {
      writer.uint32(8).int32(message.badgeDisplayType);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
    }
    if (message.text !== undefined) {
      BadgeStruct_TextBadgeDecoder.encode(message.text, writer.uint32(26).fork()).join();
    }
    if (message.str !== "") {
      writer.uint32(34).string(message.str);
    }
    if (message.padding !== undefined) {
      BadgeStruct_PaddingInfoDecoder.encode(message.padding, writer.uint32(42).fork()).join();
    }
    if (message.fontStyle !== undefined) {
      FontStyleDecoder.encode(message.fontStyle, writer.uint32(50).fork()).join();
    }
    if (message.profileCardPanel !== undefined) {
      BadgeStruct_ProfileCardPanelDecoder.encode(message.profileCardPanel, writer.uint32(58).fork()).join();
    }
    if (message.background !== undefined) {
      BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.background, writer.uint32(90).fork()).join();
    }
    if (message.backgroundDarkMode !== undefined) {
      BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.backgroundDarkMode, writer.uint32(98).fork()).join();
    }
    if (message.iconAutoMirrored !== false) {
      writer.uint32(104).bool(message.iconAutoMirrored);
    }
    if (message.bgAutoMirrored !== false) {
      writer.uint32(112).bool(message.bgAutoMirrored);
    }
    if (message.publicScreenShowStyle !== 0) {
      writer.uint32(120).int32(message.publicScreenShowStyle);
    }
    if (message.personalCardShowStyle !== 0) {
      writer.uint32(128).int32(message.personalCardShowStyle);
    }
    if (message.rankListOnlineAudienceShowStyle !== 0) {
      writer.uint32(136).int32(message.rankListOnlineAudienceShowStyle);
    }
    if (message.multiGuestShowStyle !== 0) {
      writer.uint32(144).int32(message.multiGuestShowStyle);
    }
    if (message.arrowConfig !== undefined) {
      BadgeStruct_ArrowConfigDecoder.encode(message.arrowConfig, writer.uint32(154).fork()).join();
    }
    if (message.paddingNewFont !== undefined) {
      BadgeStruct_PaddingInfoDecoder.encode(message.paddingNewFont, writer.uint32(162).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_CombineBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_CombineBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.badgeDisplayType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.text = BadgeStruct_TextBadgeDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.str = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.padding = BadgeStruct_PaddingInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fontStyle = FontStyleDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.profileCardPanel = BadgeStruct_ProfileCardPanelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.background = BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.backgroundDarkMode = BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.iconAutoMirrored = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.bgAutoMirrored = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.publicScreenShowStyle = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.personalCardShowStyle = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.rankListOnlineAudienceShowStyle = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.multiGuestShowStyle = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.arrowConfig = BadgeStruct_ArrowConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.paddingNewFont = BadgeStruct_PaddingInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_CombineBadge {
    return {
      badgeDisplayType: isSet(object.badgeDisplayType) ? globalThis.Number(object.badgeDisplayType) : 0,
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      text: isSet(object.text) ? BadgeStruct_TextBadge.fromJSON(object.text) : undefined,
      str: isSet(object.str) ? globalThis.String(object.str) : "",
      padding: isSet(object.padding) ? BadgeStruct_PaddingInfo.fromJSON(object.padding) : undefined,
      fontStyle: isSet(object.fontStyle) ? FontStyle.fromJSON(object.fontStyle) : undefined,
      profileCardPanel: isSet(object.profileCardPanel)
        ? BadgeStruct_ProfileCardPanel.fromJSON(object.profileCardPanel)
        : undefined,
      background: isSet(object.background) ? BadgeStruct_CombineBadgeBackground.fromJSON(object.background) : undefined,
      backgroundDarkMode: isSet(object.backgroundDarkMode)
        ? BadgeStruct_CombineBadgeBackground.fromJSON(object.backgroundDarkMode)
        : undefined,
      iconAutoMirrored: isSet(object.iconAutoMirrored) ? globalThis.Boolean(object.iconAutoMirrored) : false,
      bgAutoMirrored: isSet(object.bgAutoMirrored) ? globalThis.Boolean(object.bgAutoMirrored) : false,
      publicScreenShowStyle: isSet(object.publicScreenShowStyle) ? globalThis.Number(object.publicScreenShowStyle) : 0,
      personalCardShowStyle: isSet(object.personalCardShowStyle) ? globalThis.Number(object.personalCardShowStyle) : 0,
      rankListOnlineAudienceShowStyle: isSet(object.rankListOnlineAudienceShowStyle)
        ? globalThis.Number(object.rankListOnlineAudienceShowStyle)
        : 0,
      multiGuestShowStyle: isSet(object.multiGuestShowStyle) ? globalThis.Number(object.multiGuestShowStyle) : 0,
      arrowConfig: isSet(object.arrowConfig) ? BadgeStruct_ArrowConfig.fromJSON(object.arrowConfig) : undefined,
      paddingNewFont: isSet(object.paddingNewFont)
        ? BadgeStruct_PaddingInfo.fromJSON(object.paddingNewFont)
        : undefined,
    };
  },

  toJSON(message: BadgeStruct_CombineBadge): unknown {
    const obj: any = {};
    if (message.badgeDisplayType !== 0) {
      obj.badgeDisplayType = Math.round(message.badgeDisplayType);
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.text !== undefined) {
      obj.text = BadgeStruct_TextBadge.toJSON(message.text);
    }
    if (message.str !== "") {
      obj.str = message.str;
    }
    if (message.padding !== undefined) {
      obj.padding = BadgeStruct_PaddingInfo.toJSON(message.padding);
    }
    if (message.fontStyle !== undefined) {
      obj.fontStyle = FontStyle.toJSON(message.fontStyle);
    }
    if (message.profileCardPanel !== undefined) {
      obj.profileCardPanel = BadgeStruct_ProfileCardPanel.toJSON(message.profileCardPanel);
    }
    if (message.background !== undefined) {
      obj.background = BadgeStruct_CombineBadgeBackground.toJSON(message.background);
    }
    if (message.backgroundDarkMode !== undefined) {
      obj.backgroundDarkMode = BadgeStruct_CombineBadgeBackground.toJSON(message.backgroundDarkMode);
    }
    if (message.iconAutoMirrored !== false) {
      obj.iconAutoMirrored = message.iconAutoMirrored;
    }
    if (message.bgAutoMirrored !== false) {
      obj.bgAutoMirrored = message.bgAutoMirrored;
    }
    if (message.publicScreenShowStyle !== 0) {
      obj.publicScreenShowStyle = Math.round(message.publicScreenShowStyle);
    }
    if (message.personalCardShowStyle !== 0) {
      obj.personalCardShowStyle = Math.round(message.personalCardShowStyle);
    }
    if (message.rankListOnlineAudienceShowStyle !== 0) {
      obj.rankListOnlineAudienceShowStyle = Math.round(message.rankListOnlineAudienceShowStyle);
    }
    if (message.multiGuestShowStyle !== 0) {
      obj.multiGuestShowStyle = Math.round(message.multiGuestShowStyle);
    }
    if (message.arrowConfig !== undefined) {
      obj.arrowConfig = BadgeStruct_ArrowConfig.toJSON(message.arrowConfig);
    }
    if (message.paddingNewFont !== undefined) {
      obj.paddingNewFont = BadgeStruct_PaddingInfo.toJSON(message.paddingNewFont);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_CombineBadge>, I>>(base?: I): BadgeStruct_CombineBadge {
    return BadgeStruct_CombineBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_CombineBadge>, I>>(object: I): BadgeStruct_CombineBadge {
    const message = createBaseBadgeStruct_CombineBadge();
    message.badgeDisplayType = object.badgeDisplayType ?? 0;
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.text = (object.text !== undefined && object.text !== null)
      ? BadgeStruct_TextBadge.fromPartial(object.text)
      : undefined;
    message.str = object.str ?? "";
    message.padding = (object.padding !== undefined && object.padding !== null)
      ? BadgeStruct_PaddingInfo.fromPartial(object.padding)
      : undefined;
    message.fontStyle = (object.fontStyle !== undefined && object.fontStyle !== null)
      ? FontStyle.fromPartial(object.fontStyle)
      : undefined;
    message.profileCardPanel = (object.profileCardPanel !== undefined && object.profileCardPanel !== null)
      ? BadgeStruct_ProfileCardPanel.fromPartial(object.profileCardPanel)
      : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? BadgeStruct_CombineBadgeBackground.fromPartial(object.background)
      : undefined;
    message.backgroundDarkMode = (object.backgroundDarkMode !== undefined && object.backgroundDarkMode !== null)
      ? BadgeStruct_CombineBadgeBackground.fromPartial(object.backgroundDarkMode)
      : undefined;
    message.iconAutoMirrored = object.iconAutoMirrored ?? false;
    message.bgAutoMirrored = object.bgAutoMirrored ?? false;
    message.publicScreenShowStyle = object.publicScreenShowStyle ?? 0;
    message.personalCardShowStyle = object.personalCardShowStyle ?? 0;
    message.rankListOnlineAudienceShowStyle = object.rankListOnlineAudienceShowStyle ?? 0;
    message.multiGuestShowStyle = object.multiGuestShowStyle ?? 0;
    message.arrowConfig = (object.arrowConfig !== undefined && object.arrowConfig !== null)
      ? BadgeStruct_ArrowConfig.fromPartial(object.arrowConfig)
      : undefined;
    message.paddingNewFont = (object.paddingNewFont !== undefined && object.paddingNewFont !== null)
      ? BadgeStruct_PaddingInfo.fromPartial(object.paddingNewFont)
      : undefined;
    return message;
  },
};

function createBaseBadgeStruct_ArrowConfig(): BadgeStruct_ArrowConfig {
  return { icon: undefined };
}

export const BadgeStruct_ArrowConfigDecoder: MessageFns<BadgeStruct_ArrowConfig> = {
  encode(message: BadgeStruct_ArrowConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_ArrowConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_ArrowConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_ArrowConfig {
    return { icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined };
  },

  toJSON(message: BadgeStruct_ArrowConfig): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_ArrowConfig>, I>>(base?: I): BadgeStruct_ArrowConfig {
    return BadgeStruct_ArrowConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_ArrowConfig>, I>>(object: I): BadgeStruct_ArrowConfig {
    const message = createBaseBadgeStruct_ArrowConfig();
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    return message;
  },
};

function createBaseBadgeStruct_ProfileContent(): BadgeStruct_ProfileContent {
  return { useContent: false, iconList: [], numberConfig: undefined };
}

export const BadgeStruct_ProfileContentDecoder: MessageFns<BadgeStruct_ProfileContent> = {
  encode(message: BadgeStruct_ProfileContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.useContent !== false) {
      writer.uint32(8).bool(message.useContent);
    }
    for (const v of message.iconList) {
      BadgeStruct_IconConfigDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.numberConfig !== undefined) {
      BadgeStruct_NumberConfigDecoder.encode(message.numberConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_ProfileContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_ProfileContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.useContent = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.iconList.push(BadgeStruct_IconConfigDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.numberConfig = BadgeStruct_NumberConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_ProfileContent {
    return {
      useContent: isSet(object.useContent) ? globalThis.Boolean(object.useContent) : false,
      iconList: globalThis.Array.isArray(object?.iconList)
        ? object.iconList.map((e: any) => BadgeStruct_IconConfig.fromJSON(e))
        : [],
      numberConfig: isSet(object.numberConfig) ? BadgeStruct_NumberConfig.fromJSON(object.numberConfig) : undefined,
    };
  },

  toJSON(message: BadgeStruct_ProfileContent): unknown {
    const obj: any = {};
    if (message.useContent !== false) {
      obj.useContent = message.useContent;
    }
    if (message.iconList?.length) {
      obj.iconList = message.iconList.map((e) => BadgeStruct_IconConfig.toJSON(e));
    }
    if (message.numberConfig !== undefined) {
      obj.numberConfig = BadgeStruct_NumberConfig.toJSON(message.numberConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_ProfileContent>, I>>(base?: I): BadgeStruct_ProfileContent {
    return BadgeStruct_ProfileContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_ProfileContent>, I>>(object: I): BadgeStruct_ProfileContent {
    const message = createBaseBadgeStruct_ProfileContent();
    message.useContent = object.useContent ?? false;
    message.iconList = object.iconList?.map((e) => BadgeStruct_IconConfig.fromPartial(e)) || [];
    message.numberConfig = (object.numberConfig !== undefined && object.numberConfig !== null)
      ? BadgeStruct_NumberConfig.fromPartial(object.numberConfig)
      : undefined;
    return message;
  },
};

function createBaseBadgeStruct_ProjectionConfig(): BadgeStruct_ProjectionConfig {
  return { useProjection: false, icon: undefined };
}

export const BadgeStruct_ProjectionConfigDecoder: MessageFns<BadgeStruct_ProjectionConfig> = {
  encode(message: BadgeStruct_ProjectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.useProjection !== false) {
      writer.uint32(8).bool(message.useProjection);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_ProjectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_ProjectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.useProjection = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_ProjectionConfig {
    return {
      useProjection: isSet(object.useProjection) ? globalThis.Boolean(object.useProjection) : false,
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
    };
  },

  toJSON(message: BadgeStruct_ProjectionConfig): unknown {
    const obj: any = {};
    if (message.useProjection !== false) {
      obj.useProjection = message.useProjection;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_ProjectionConfig>, I>>(base?: I): BadgeStruct_ProjectionConfig {
    return BadgeStruct_ProjectionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_ProjectionConfig>, I>>(object: I): BadgeStruct_ProjectionConfig {
    const message = createBaseBadgeStruct_ProjectionConfig();
    message.useProjection = object.useProjection ?? false;
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    return message;
  },
};

function createBaseBadgeStruct_NumberConfig(): BadgeStruct_NumberConfig {
  return { number: "0", fontStyle: undefined, background: undefined };
}

export const BadgeStruct_NumberConfigDecoder: MessageFns<BadgeStruct_NumberConfig> = {
  encode(message: BadgeStruct_NumberConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== "0") {
      writer.uint32(8).int64(message.number);
    }
    if (message.fontStyle !== undefined) {
      FontStyleDecoder.encode(message.fontStyle, writer.uint32(18).fork()).join();
    }
    if (message.background !== undefined) {
      BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.background, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_NumberConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_NumberConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.number = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fontStyle = FontStyleDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.background = BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_NumberConfig {
    return {
      number: isSet(object.number) ? globalThis.String(object.number) : "0",
      fontStyle: isSet(object.fontStyle) ? FontStyle.fromJSON(object.fontStyle) : undefined,
      background: isSet(object.background) ? BadgeStruct_CombineBadgeBackground.fromJSON(object.background) : undefined,
    };
  },

  toJSON(message: BadgeStruct_NumberConfig): unknown {
    const obj: any = {};
    if (message.number !== "0") {
      obj.number = message.number;
    }
    if (message.fontStyle !== undefined) {
      obj.fontStyle = FontStyle.toJSON(message.fontStyle);
    }
    if (message.background !== undefined) {
      obj.background = BadgeStruct_CombineBadgeBackground.toJSON(message.background);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_NumberConfig>, I>>(base?: I): BadgeStruct_NumberConfig {
    return BadgeStruct_NumberConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_NumberConfig>, I>>(object: I): BadgeStruct_NumberConfig {
    const message = createBaseBadgeStruct_NumberConfig();
    message.number = object.number ?? "0";
    message.fontStyle = (object.fontStyle !== undefined && object.fontStyle !== null)
      ? FontStyle.fromPartial(object.fontStyle)
      : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? BadgeStruct_CombineBadgeBackground.fromPartial(object.background)
      : undefined;
    return message;
  },
};

function createBaseBadgeStruct_ProfileCardPanel(): BadgeStruct_ProfileCardPanel {
  return { useNewProfileCardStyle: false, projectionConfig: undefined, profileContent: undefined };
}

export const BadgeStruct_ProfileCardPanelDecoder: MessageFns<BadgeStruct_ProfileCardPanel> = {
  encode(message: BadgeStruct_ProfileCardPanel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.useNewProfileCardStyle !== false) {
      writer.uint32(8).bool(message.useNewProfileCardStyle);
    }
    if (message.projectionConfig !== undefined) {
      BadgeStruct_ProjectionConfigDecoder.encode(message.projectionConfig, writer.uint32(26).fork()).join();
    }
    if (message.profileContent !== undefined) {
      BadgeStruct_ProfileContentDecoder.encode(message.profileContent, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_ProfileCardPanel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_ProfileCardPanel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.useNewProfileCardStyle = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectionConfig = BadgeStruct_ProjectionConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.profileContent = BadgeStruct_ProfileContentDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_ProfileCardPanel {
    return {
      useNewProfileCardStyle: isSet(object.useNewProfileCardStyle)
        ? globalThis.Boolean(object.useNewProfileCardStyle)
        : false,
      projectionConfig: isSet(object.projectionConfig)
        ? BadgeStruct_ProjectionConfig.fromJSON(object.projectionConfig)
        : undefined,
      profileContent: isSet(object.profileContent)
        ? BadgeStruct_ProfileContent.fromJSON(object.profileContent)
        : undefined,
    };
  },

  toJSON(message: BadgeStruct_ProfileCardPanel): unknown {
    const obj: any = {};
    if (message.useNewProfileCardStyle !== false) {
      obj.useNewProfileCardStyle = message.useNewProfileCardStyle;
    }
    if (message.projectionConfig !== undefined) {
      obj.projectionConfig = BadgeStruct_ProjectionConfig.toJSON(message.projectionConfig);
    }
    if (message.profileContent !== undefined) {
      obj.profileContent = BadgeStruct_ProfileContent.toJSON(message.profileContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_ProfileCardPanel>, I>>(base?: I): BadgeStruct_ProfileCardPanel {
    return BadgeStruct_ProfileCardPanel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_ProfileCardPanel>, I>>(object: I): BadgeStruct_ProfileCardPanel {
    const message = createBaseBadgeStruct_ProfileCardPanel();
    message.useNewProfileCardStyle = object.useNewProfileCardStyle ?? false;
    message.projectionConfig = (object.projectionConfig !== undefined && object.projectionConfig !== null)
      ? BadgeStruct_ProjectionConfig.fromPartial(object.projectionConfig)
      : undefined;
    message.profileContent = (object.profileContent !== undefined && object.profileContent !== null)
      ? BadgeStruct_ProfileContent.fromPartial(object.profileContent)
      : undefined;
    return message;
  },
};

function createBaseBadgeStruct_CombineBadgeBackground(): BadgeStruct_CombineBadgeBackground {
  return { image: undefined, backgroundColorCode: "", borderColorCode: "" };
}

export const BadgeStruct_CombineBadgeBackgroundDecoder: MessageFns<BadgeStruct_CombineBadgeBackground> = {
  encode(message: BadgeStruct_CombineBadgeBackground, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.image !== undefined) {
      ImageDecoder.encode(message.image, writer.uint32(10).fork()).join();
    }
    if (message.backgroundColorCode !== "") {
      writer.uint32(18).string(message.backgroundColorCode);
    }
    if (message.borderColorCode !== "") {
      writer.uint32(26).string(message.borderColorCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_CombineBadgeBackground {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_CombineBadgeBackground();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.image = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.backgroundColorCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.borderColorCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_CombineBadgeBackground {
    return {
      image: isSet(object.image) ? Image.fromJSON(object.image) : undefined,
      backgroundColorCode: isSet(object.backgroundColorCode) ? globalThis.String(object.backgroundColorCode) : "",
      borderColorCode: isSet(object.borderColorCode) ? globalThis.String(object.borderColorCode) : "",
    };
  },

  toJSON(message: BadgeStruct_CombineBadgeBackground): unknown {
    const obj: any = {};
    if (message.image !== undefined) {
      obj.image = Image.toJSON(message.image);
    }
    if (message.backgroundColorCode !== "") {
      obj.backgroundColorCode = message.backgroundColorCode;
    }
    if (message.borderColorCode !== "") {
      obj.borderColorCode = message.borderColorCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_CombineBadgeBackground>, I>>(
    base?: I,
  ): BadgeStruct_CombineBadgeBackground {
    return BadgeStruct_CombineBadgeBackground.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_CombineBadgeBackground>, I>>(
    object: I,
  ): BadgeStruct_CombineBadgeBackground {
    const message = createBaseBadgeStruct_CombineBadgeBackground();
    message.image = (object.image !== undefined && object.image !== null) ? Image.fromPartial(object.image) : undefined;
    message.backgroundColorCode = object.backgroundColorCode ?? "";
    message.borderColorCode = object.borderColorCode ?? "";
    return message;
  },
};

function createBaseBadgeStruct_ImageBadge(): BadgeStruct_ImageBadge {
  return { badgeDisplayType: 0, image: undefined };
}

export const BadgeStruct_ImageBadgeDecoder: MessageFns<BadgeStruct_ImageBadge> = {
  encode(message: BadgeStruct_ImageBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.badgeDisplayType !== 0) {
      writer.uint32(8).int32(message.badgeDisplayType);
    }
    if (message.image !== undefined) {
      ImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_ImageBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_ImageBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.badgeDisplayType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.image = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_ImageBadge {
    return {
      badgeDisplayType: isSet(object.badgeDisplayType)
        ? badgeStruct_BadgeDisplayTypeFromJSON(object.badgeDisplayType)
        : 0,
      image: isSet(object.image) ? Image.fromJSON(object.image) : undefined,
    };
  },

  toJSON(message: BadgeStruct_ImageBadge): unknown {
    const obj: any = {};
    if (message.badgeDisplayType !== 0) {
      obj.badgeDisplayType = badgeStruct_BadgeDisplayTypeToJSON(message.badgeDisplayType);
    }
    if (message.image !== undefined) {
      obj.image = Image.toJSON(message.image);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_ImageBadge>, I>>(base?: I): BadgeStruct_ImageBadge {
    return BadgeStruct_ImageBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_ImageBadge>, I>>(object: I): BadgeStruct_ImageBadge {
    const message = createBaseBadgeStruct_ImageBadge();
    message.badgeDisplayType = object.badgeDisplayType ?? 0;
    message.image = (object.image !== undefined && object.image !== null) ? Image.fromPartial(object.image) : undefined;
    return message;
  },
};

function createBaseBadgeStruct_TextBadge(): BadgeStruct_TextBadge {
  return { badgeDisplayType: 0, key: "", defaultPattern: "", pieces: [] };
}

export const BadgeStruct_TextBadgeDecoder: MessageFns<BadgeStruct_TextBadge> = {
  encode(message: BadgeStruct_TextBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.badgeDisplayType !== 0) {
      writer.uint32(8).int32(message.badgeDisplayType);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.defaultPattern !== "") {
      writer.uint32(26).string(message.defaultPattern);
    }
    for (const v of message.pieces) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_TextBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_TextBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.badgeDisplayType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.defaultPattern = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pieces.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_TextBadge {
    return {
      badgeDisplayType: isSet(object.badgeDisplayType)
        ? badgeStruct_BadgeDisplayTypeFromJSON(object.badgeDisplayType)
        : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      defaultPattern: isSet(object.defaultPattern) ? globalThis.String(object.defaultPattern) : "",
      pieces: globalThis.Array.isArray(object?.pieces) ? object.pieces.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: BadgeStruct_TextBadge): unknown {
    const obj: any = {};
    if (message.badgeDisplayType !== 0) {
      obj.badgeDisplayType = badgeStruct_BadgeDisplayTypeToJSON(message.badgeDisplayType);
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.defaultPattern !== "") {
      obj.defaultPattern = message.defaultPattern;
    }
    if (message.pieces?.length) {
      obj.pieces = message.pieces;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_TextBadge>, I>>(base?: I): BadgeStruct_TextBadge {
    return BadgeStruct_TextBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_TextBadge>, I>>(object: I): BadgeStruct_TextBadge {
    const message = createBaseBadgeStruct_TextBadge();
    message.badgeDisplayType = object.badgeDisplayType ?? 0;
    message.key = object.key ?? "";
    message.defaultPattern = object.defaultPattern ?? "";
    message.pieces = object.pieces?.map((e) => e) || [];
    return message;
  },
};

function createBaseBadgeStruct_IconConfig(): BadgeStruct_IconConfig {
  return { icon: undefined, background: undefined };
}

export const BadgeStruct_IconConfigDecoder: MessageFns<BadgeStruct_IconConfig> = {
  encode(message: BadgeStruct_IconConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
    }
    if (message.background !== undefined) {
      BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.background, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_IconConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_IconConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.background = BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_IconConfig {
    return {
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      background: isSet(object.background) ? BadgeStruct_CombineBadgeBackground.fromJSON(object.background) : undefined,
    };
  },

  toJSON(message: BadgeStruct_IconConfig): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.background !== undefined) {
      obj.background = BadgeStruct_CombineBadgeBackground.toJSON(message.background);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_IconConfig>, I>>(base?: I): BadgeStruct_IconConfig {
    return BadgeStruct_IconConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_IconConfig>, I>>(object: I): BadgeStruct_IconConfig {
    const message = createBaseBadgeStruct_IconConfig();
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? BadgeStruct_CombineBadgeBackground.fromPartial(object.background)
      : undefined;
    return message;
  },
};

function createBaseBadgeStruct_StringBadge(): BadgeStruct_StringBadge {
  return { badgeDisplayType: 0, str: "" };
}

export const BadgeStruct_StringBadgeDecoder: MessageFns<BadgeStruct_StringBadge> = {
  encode(message: BadgeStruct_StringBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.badgeDisplayType !== 0) {
      writer.uint32(8).int32(message.badgeDisplayType);
    }
    if (message.str !== "") {
      writer.uint32(18).string(message.str);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_StringBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_StringBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.badgeDisplayType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.str = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_StringBadge {
    return {
      badgeDisplayType: isSet(object.badgeDisplayType)
        ? badgeStruct_BadgeDisplayTypeFromJSON(object.badgeDisplayType)
        : 0,
      str: isSet(object.str) ? globalThis.String(object.str) : "",
    };
  },

  toJSON(message: BadgeStruct_StringBadge): unknown {
    const obj: any = {};
    if (message.badgeDisplayType !== 0) {
      obj.badgeDisplayType = badgeStruct_BadgeDisplayTypeToJSON(message.badgeDisplayType);
    }
    if (message.str !== "") {
      obj.str = message.str;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_StringBadge>, I>>(base?: I): BadgeStruct_StringBadge {
    return BadgeStruct_StringBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_StringBadge>, I>>(object: I): BadgeStruct_StringBadge {
    const message = createBaseBadgeStruct_StringBadge();
    message.badgeDisplayType = object.badgeDisplayType ?? 0;
    message.str = object.str ?? "";
    return message;
  },
};

function createBaseBadgeStruct_PaddingInfo(): BadgeStruct_PaddingInfo {
  return {
    useSpecific: false,
    middlePadding: 0,
    badgeWidth: 0,
    leftPadding: 0,
    rightPadding: 0,
    iconTopPadding: 0,
    iconBottomPadding: 0,
    horizontalPaddingRule: 0,
    verticalPaddingRule: 0,
  };
}

export const BadgeStruct_PaddingInfoDecoder: MessageFns<BadgeStruct_PaddingInfo> = {
  encode(message: BadgeStruct_PaddingInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.useSpecific !== false) {
      writer.uint32(8).bool(message.useSpecific);
    }
    if (message.middlePadding !== 0) {
      writer.uint32(16).int32(message.middlePadding);
    }
    if (message.badgeWidth !== 0) {
      writer.uint32(24).int32(message.badgeWidth);
    }
    if (message.leftPadding !== 0) {
      writer.uint32(32).int32(message.leftPadding);
    }
    if (message.rightPadding !== 0) {
      writer.uint32(40).int32(message.rightPadding);
    }
    if (message.iconTopPadding !== 0) {
      writer.uint32(48).int32(message.iconTopPadding);
    }
    if (message.iconBottomPadding !== 0) {
      writer.uint32(56).int32(message.iconBottomPadding);
    }
    if (message.horizontalPaddingRule !== 0) {
      writer.uint32(64).int32(message.horizontalPaddingRule);
    }
    if (message.verticalPaddingRule !== 0) {
      writer.uint32(72).int32(message.verticalPaddingRule);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeStruct_PaddingInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeStruct_PaddingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.useSpecific = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.middlePadding = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.badgeWidth = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.leftPadding = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rightPadding = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.iconTopPadding = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.iconBottomPadding = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.horizontalPaddingRule = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.verticalPaddingRule = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeStruct_PaddingInfo {
    return {
      useSpecific: isSet(object.useSpecific) ? globalThis.Boolean(object.useSpecific) : false,
      middlePadding: isSet(object.middlePadding) ? globalThis.Number(object.middlePadding) : 0,
      badgeWidth: isSet(object.badgeWidth) ? globalThis.Number(object.badgeWidth) : 0,
      leftPadding: isSet(object.leftPadding) ? globalThis.Number(object.leftPadding) : 0,
      rightPadding: isSet(object.rightPadding) ? globalThis.Number(object.rightPadding) : 0,
      iconTopPadding: isSet(object.iconTopPadding) ? globalThis.Number(object.iconTopPadding) : 0,
      iconBottomPadding: isSet(object.iconBottomPadding) ? globalThis.Number(object.iconBottomPadding) : 0,
      horizontalPaddingRule: isSet(object.horizontalPaddingRule)
        ? badgeStruct_HorizontalPaddingRuleFromJSON(object.horizontalPaddingRule)
        : 0,
      verticalPaddingRule: isSet(object.verticalPaddingRule)
        ? badgeStruct_VerticalPaddingRuleFromJSON(object.verticalPaddingRule)
        : 0,
    };
  },

  toJSON(message: BadgeStruct_PaddingInfo): unknown {
    const obj: any = {};
    if (message.useSpecific !== false) {
      obj.useSpecific = message.useSpecific;
    }
    if (message.middlePadding !== 0) {
      obj.middlePadding = Math.round(message.middlePadding);
    }
    if (message.badgeWidth !== 0) {
      obj.badgeWidth = Math.round(message.badgeWidth);
    }
    if (message.leftPadding !== 0) {
      obj.leftPadding = Math.round(message.leftPadding);
    }
    if (message.rightPadding !== 0) {
      obj.rightPadding = Math.round(message.rightPadding);
    }
    if (message.iconTopPadding !== 0) {
      obj.iconTopPadding = Math.round(message.iconTopPadding);
    }
    if (message.iconBottomPadding !== 0) {
      obj.iconBottomPadding = Math.round(message.iconBottomPadding);
    }
    if (message.horizontalPaddingRule !== 0) {
      obj.horizontalPaddingRule = badgeStruct_HorizontalPaddingRuleToJSON(message.horizontalPaddingRule);
    }
    if (message.verticalPaddingRule !== 0) {
      obj.verticalPaddingRule = badgeStruct_VerticalPaddingRuleToJSON(message.verticalPaddingRule);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadgeStruct_PaddingInfo>, I>>(base?: I): BadgeStruct_PaddingInfo {
    return BadgeStruct_PaddingInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadgeStruct_PaddingInfo>, I>>(object: I): BadgeStruct_PaddingInfo {
    const message = createBaseBadgeStruct_PaddingInfo();
    message.useSpecific = object.useSpecific ?? false;
    message.middlePadding = object.middlePadding ?? 0;
    message.badgeWidth = object.badgeWidth ?? 0;
    message.leftPadding = object.leftPadding ?? 0;
    message.rightPadding = object.rightPadding ?? 0;
    message.iconTopPadding = object.iconTopPadding ?? 0;
    message.iconBottomPadding = object.iconBottomPadding ?? 0;
    message.horizontalPaddingRule = object.horizontalPaddingRule ?? 0;
    message.verticalPaddingRule = object.verticalPaddingRule ?? 0;
    return message;
  },
};

function createBaseGift(): Gift {
  return {
    giftImage: undefined,
    describe: "",
    duration: 0,
    id: "0",
    forLinkMic: false,
    combo: false,
    giftType: 0,
    diamondCount: 0,
    isDisplayedOnPanel: false,
    primaryEffectId: "0",
    giftLabelIcon: undefined,
    giftName: "",
    icon: undefined,
    goldEffect: "",
    previewImage: undefined,
    giftPanelBanner: undefined,
    isBroadcastGift: false,
    isEffectBefview: false,
    isRandomGift: false,
    isBoxGift: false,
    canPutInGiftBox: false,
    giftBoxInfo: undefined,
  };
}

export const GiftDecoder: MessageFns<Gift> = {
  encode(message: Gift, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftImage !== undefined) {
      ImageDecoder.encode(message.giftImage, writer.uint32(10).fork()).join();
    }
    if (message.describe !== "") {
      writer.uint32(18).string(message.describe);
    }
    if (message.duration !== 0) {
      writer.uint32(32).int32(message.duration);
    }
    if (message.id !== "0") {
      writer.uint32(40).int64(message.id);
    }
    if (message.forLinkMic !== false) {
      writer.uint32(56).bool(message.forLinkMic);
    }
    if (message.combo !== false) {
      writer.uint32(80).bool(message.combo);
    }
    if (message.giftType !== 0) {
      writer.uint32(88).int32(message.giftType);
    }
    if (message.diamondCount !== 0) {
      writer.uint32(96).int32(message.diamondCount);
    }
    if (message.isDisplayedOnPanel !== false) {
      writer.uint32(104).bool(message.isDisplayedOnPanel);
    }
    if (message.primaryEffectId !== "0") {
      writer.uint32(112).int64(message.primaryEffectId);
    }
    if (message.giftLabelIcon !== undefined) {
      ImageDecoder.encode(message.giftLabelIcon, writer.uint32(122).fork()).join();
    }
    if (message.giftName !== "") {
      writer.uint32(130).string(message.giftName);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(170).fork()).join();
    }
    if (message.goldEffect !== "") {
      writer.uint32(194).string(message.goldEffect);
    }
    if (message.previewImage !== undefined) {
      ImageDecoder.encode(message.previewImage, writer.uint32(378).fork()).join();
    }
    if (message.giftPanelBanner !== undefined) {
      Gift_GiftPanelBannerDecoder.encode(message.giftPanelBanner, writer.uint32(386).fork()).join();
    }
    if (message.isBroadcastGift !== false) {
      writer.uint32(392).bool(message.isBroadcastGift);
    }
    if (message.isEffectBefview !== false) {
      writer.uint32(400).bool(message.isEffectBefview);
    }
    if (message.isRandomGift !== false) {
      writer.uint32(408).bool(message.isRandomGift);
    }
    if (message.isBoxGift !== false) {
      writer.uint32(416).bool(message.isBoxGift);
    }
    if (message.canPutInGiftBox !== false) {
      writer.uint32(424).bool(message.canPutInGiftBox);
    }
    if (message.giftBoxInfo !== undefined) {
      Gift_GiftBoxInfoDecoder.encode(message.giftBoxInfo, writer.uint32(434).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.giftImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.forLinkMic = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.combo = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.giftType = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.diamondCount = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isDisplayedOnPanel = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.primaryEffectId = reader.int64().toString();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.giftLabelIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.giftName = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.goldEffect = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.previewImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.giftPanelBanner = Gift_GiftPanelBannerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.isBroadcastGift = reader.bool();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.isEffectBefview = reader.bool();
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.isRandomGift = reader.bool();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.isBoxGift = reader.bool();
          continue;
        }
        case 53: {
          if (tag !== 424) {
            break;
          }

          message.canPutInGiftBox = reader.bool();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.giftBoxInfo = Gift_GiftBoxInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift {
    return {
      giftImage: isSet(object.giftImage) ? Image.fromJSON(object.giftImage) : undefined,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      forLinkMic: isSet(object.forLinkMic) ? globalThis.Boolean(object.forLinkMic) : false,
      combo: isSet(object.combo) ? globalThis.Boolean(object.combo) : false,
      giftType: isSet(object.giftType) ? globalThis.Number(object.giftType) : 0,
      diamondCount: isSet(object.diamondCount) ? globalThis.Number(object.diamondCount) : 0,
      isDisplayedOnPanel: isSet(object.isDisplayedOnPanel) ? globalThis.Boolean(object.isDisplayedOnPanel) : false,
      primaryEffectId: isSet(object.primaryEffectId) ? globalThis.String(object.primaryEffectId) : "0",
      giftLabelIcon: isSet(object.giftLabelIcon) ? Image.fromJSON(object.giftLabelIcon) : undefined,
      giftName: isSet(object.giftName) ? globalThis.String(object.giftName) : "",
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      goldEffect: isSet(object.goldEffect) ? globalThis.String(object.goldEffect) : "",
      previewImage: isSet(object.previewImage) ? Image.fromJSON(object.previewImage) : undefined,
      giftPanelBanner: isSet(object.giftPanelBanner)
        ? Gift_GiftPanelBanner.fromJSON(object.giftPanelBanner)
        : undefined,
      isBroadcastGift: isSet(object.isBroadcastGift) ? globalThis.Boolean(object.isBroadcastGift) : false,
      isEffectBefview: isSet(object.isEffectBefview) ? globalThis.Boolean(object.isEffectBefview) : false,
      isRandomGift: isSet(object.isRandomGift) ? globalThis.Boolean(object.isRandomGift) : false,
      isBoxGift: isSet(object.isBoxGift) ? globalThis.Boolean(object.isBoxGift) : false,
      canPutInGiftBox: isSet(object.canPutInGiftBox) ? globalThis.Boolean(object.canPutInGiftBox) : false,
      giftBoxInfo: isSet(object.giftBoxInfo) ? Gift_GiftBoxInfo.fromJSON(object.giftBoxInfo) : undefined,
    };
  },

  toJSON(message: Gift): unknown {
    const obj: any = {};
    if (message.giftImage !== undefined) {
      obj.giftImage = Image.toJSON(message.giftImage);
    }
    if (message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.forLinkMic !== false) {
      obj.forLinkMic = message.forLinkMic;
    }
    if (message.combo !== false) {
      obj.combo = message.combo;
    }
    if (message.giftType !== 0) {
      obj.giftType = Math.round(message.giftType);
    }
    if (message.diamondCount !== 0) {
      obj.diamondCount = Math.round(message.diamondCount);
    }
    if (message.isDisplayedOnPanel !== false) {
      obj.isDisplayedOnPanel = message.isDisplayedOnPanel;
    }
    if (message.primaryEffectId !== "0") {
      obj.primaryEffectId = message.primaryEffectId;
    }
    if (message.giftLabelIcon !== undefined) {
      obj.giftLabelIcon = Image.toJSON(message.giftLabelIcon);
    }
    if (message.giftName !== "") {
      obj.giftName = message.giftName;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.goldEffect !== "") {
      obj.goldEffect = message.goldEffect;
    }
    if (message.previewImage !== undefined) {
      obj.previewImage = Image.toJSON(message.previewImage);
    }
    if (message.giftPanelBanner !== undefined) {
      obj.giftPanelBanner = Gift_GiftPanelBanner.toJSON(message.giftPanelBanner);
    }
    if (message.isBroadcastGift !== false) {
      obj.isBroadcastGift = message.isBroadcastGift;
    }
    if (message.isEffectBefview !== false) {
      obj.isEffectBefview = message.isEffectBefview;
    }
    if (message.isRandomGift !== false) {
      obj.isRandomGift = message.isRandomGift;
    }
    if (message.isBoxGift !== false) {
      obj.isBoxGift = message.isBoxGift;
    }
    if (message.canPutInGiftBox !== false) {
      obj.canPutInGiftBox = message.canPutInGiftBox;
    }
    if (message.giftBoxInfo !== undefined) {
      obj.giftBoxInfo = Gift_GiftBoxInfo.toJSON(message.giftBoxInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift>, I>>(base?: I): Gift {
    return Gift.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift>, I>>(object: I): Gift {
    const message = createBaseGift();
    message.giftImage = (object.giftImage !== undefined && object.giftImage !== null)
      ? Image.fromPartial(object.giftImage)
      : undefined;
    message.describe = object.describe ?? "";
    message.duration = object.duration ?? 0;
    message.id = object.id ?? "0";
    message.forLinkMic = object.forLinkMic ?? false;
    message.combo = object.combo ?? false;
    message.giftType = object.giftType ?? 0;
    message.diamondCount = object.diamondCount ?? 0;
    message.isDisplayedOnPanel = object.isDisplayedOnPanel ?? false;
    message.primaryEffectId = object.primaryEffectId ?? "0";
    message.giftLabelIcon = (object.giftLabelIcon !== undefined && object.giftLabelIcon !== null)
      ? Image.fromPartial(object.giftLabelIcon)
      : undefined;
    message.giftName = object.giftName ?? "";
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.goldEffect = object.goldEffect ?? "";
    message.previewImage = (object.previewImage !== undefined && object.previewImage !== null)
      ? Image.fromPartial(object.previewImage)
      : undefined;
    message.giftPanelBanner = (object.giftPanelBanner !== undefined && object.giftPanelBanner !== null)
      ? Gift_GiftPanelBanner.fromPartial(object.giftPanelBanner)
      : undefined;
    message.isBroadcastGift = object.isBroadcastGift ?? false;
    message.isEffectBefview = object.isEffectBefview ?? false;
    message.isRandomGift = object.isRandomGift ?? false;
    message.isBoxGift = object.isBoxGift ?? false;
    message.canPutInGiftBox = object.canPutInGiftBox ?? false;
    message.giftBoxInfo = (object.giftBoxInfo !== undefined && object.giftBoxInfo !== null)
      ? Gift_GiftBoxInfo.fromPartial(object.giftBoxInfo)
      : undefined;
    return message;
  },
};

function createBaseGift_GiftPanelBanner(): Gift_GiftPanelBanner {
  return {
    displayText: undefined,
    leftIcon: undefined,
    schemaUrl: "",
    bgColors: [],
    bannerLynxUrl: "",
    bannerPriority: 0,
    bannerLynxExtra: "",
    bgImage: undefined,
  };
}

export const Gift_GiftPanelBannerDecoder: MessageFns<Gift_GiftPanelBanner> = {
  encode(message: Gift_GiftPanelBanner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayText !== undefined) {
      TextDecoder.encode(message.displayText, writer.uint32(10).fork()).join();
    }
    if (message.leftIcon !== undefined) {
      ImageDecoder.encode(message.leftIcon, writer.uint32(18).fork()).join();
    }
    if (message.schemaUrl !== "") {
      writer.uint32(26).string(message.schemaUrl);
    }
    for (const v of message.bgColors) {
      writer.uint32(42).string(v!);
    }
    if (message.bannerLynxUrl !== "") {
      writer.uint32(50).string(message.bannerLynxUrl);
    }
    if (message.bannerPriority !== 0) {
      writer.uint32(56).int32(message.bannerPriority);
    }
    if (message.bannerLynxExtra !== "") {
      writer.uint32(66).string(message.bannerLynxExtra);
    }
    if (message.bgImage !== undefined) {
      ImageDecoder.encode(message.bgImage, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_GiftPanelBanner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_GiftPanelBanner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.leftIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.schemaUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bgColors.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.bannerLynxUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bannerPriority = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.bannerLynxExtra = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.bgImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_GiftPanelBanner {
    return {
      displayText: isSet(object.displayText) ? Text.fromJSON(object.displayText) : undefined,
      leftIcon: isSet(object.leftIcon) ? Image.fromJSON(object.leftIcon) : undefined,
      schemaUrl: isSet(object.schemaUrl) ? globalThis.String(object.schemaUrl) : "",
      bgColors: globalThis.Array.isArray(object?.bgColors) ? object.bgColors.map((e: any) => globalThis.String(e)) : [],
      bannerLynxUrl: isSet(object.bannerLynxUrl) ? globalThis.String(object.bannerLynxUrl) : "",
      bannerPriority: isSet(object.bannerPriority) ? globalThis.Number(object.bannerPriority) : 0,
      bannerLynxExtra: isSet(object.bannerLynxExtra) ? globalThis.String(object.bannerLynxExtra) : "",
      bgImage: isSet(object.bgImage) ? Image.fromJSON(object.bgImage) : undefined,
    };
  },

  toJSON(message: Gift_GiftPanelBanner): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = Text.toJSON(message.displayText);
    }
    if (message.leftIcon !== undefined) {
      obj.leftIcon = Image.toJSON(message.leftIcon);
    }
    if (message.schemaUrl !== "") {
      obj.schemaUrl = message.schemaUrl;
    }
    if (message.bgColors?.length) {
      obj.bgColors = message.bgColors;
    }
    if (message.bannerLynxUrl !== "") {
      obj.bannerLynxUrl = message.bannerLynxUrl;
    }
    if (message.bannerPriority !== 0) {
      obj.bannerPriority = Math.round(message.bannerPriority);
    }
    if (message.bannerLynxExtra !== "") {
      obj.bannerLynxExtra = message.bannerLynxExtra;
    }
    if (message.bgImage !== undefined) {
      obj.bgImage = Image.toJSON(message.bgImage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_GiftPanelBanner>, I>>(base?: I): Gift_GiftPanelBanner {
    return Gift_GiftPanelBanner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_GiftPanelBanner>, I>>(object: I): Gift_GiftPanelBanner {
    const message = createBaseGift_GiftPanelBanner();
    message.displayText = (object.displayText !== undefined && object.displayText !== null)
      ? Text.fromPartial(object.displayText)
      : undefined;
    message.leftIcon = (object.leftIcon !== undefined && object.leftIcon !== null)
      ? Image.fromPartial(object.leftIcon)
      : undefined;
    message.schemaUrl = object.schemaUrl ?? "";
    message.bgColors = object.bgColors?.map((e) => e) || [];
    message.bannerLynxUrl = object.bannerLynxUrl ?? "";
    message.bannerPriority = object.bannerPriority ?? 0;
    message.bannerLynxExtra = object.bannerLynxExtra ?? "";
    message.bgImage = (object.bgImage !== undefined && object.bgImage !== null)
      ? Image.fromPartial(object.bgImage)
      : undefined;
    return message;
  },
};

function createBaseGift_BatchGiftInfo(): Gift_BatchGiftInfo {
  return { canBatchSend: false, availableCounts: [] };
}

export const Gift_BatchGiftInfoDecoder: MessageFns<Gift_BatchGiftInfo> = {
  encode(message: Gift_BatchGiftInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.canBatchSend !== false) {
      writer.uint32(8).bool(message.canBatchSend);
    }
    writer.uint32(18).fork();
    for (const v of message.availableCounts) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_BatchGiftInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_BatchGiftInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.canBatchSend = reader.bool();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.availableCounts.push(reader.int64().toString());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.availableCounts.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_BatchGiftInfo {
    return {
      canBatchSend: isSet(object.canBatchSend) ? globalThis.Boolean(object.canBatchSend) : false,
      availableCounts: globalThis.Array.isArray(object?.availableCounts)
        ? object.availableCounts.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Gift_BatchGiftInfo): unknown {
    const obj: any = {};
    if (message.canBatchSend !== false) {
      obj.canBatchSend = message.canBatchSend;
    }
    if (message.availableCounts?.length) {
      obj.availableCounts = message.availableCounts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_BatchGiftInfo>, I>>(base?: I): Gift_BatchGiftInfo {
    return Gift_BatchGiftInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_BatchGiftInfo>, I>>(object: I): Gift_BatchGiftInfo {
    const message = createBaseGift_BatchGiftInfo();
    message.canBatchSend = object.canBatchSend ?? false;
    message.availableCounts = object.availableCounts?.map((e) => e) || [];
    return message;
  },
};

function createBaseGift_CrossScreenEffectInfo(): Gift_CrossScreenEffectInfo {
  return { singleActionEffectIds: {}, actionEffectIds: {}, reactionEffectIds: {} };
}

export const Gift_CrossScreenEffectInfoDecoder: MessageFns<Gift_CrossScreenEffectInfo> = {
  encode(message: Gift_CrossScreenEffectInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.singleActionEffectIds).forEach(([key, value]) => {
      Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntryDecoder.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    Object.entries(message.actionEffectIds).forEach(([key, value]) => {
      Gift_CrossScreenEffectInfo_ActionEffectIdsEntryDecoder.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    Object.entries(message.reactionEffectIds).forEach(([key, value]) => {
      Gift_CrossScreenEffectInfo_ReactionEffectIdsEntryDecoder.encode({ key: key as any, value }, writer.uint32(26).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_CrossScreenEffectInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_CrossScreenEffectInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntryDecoder.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.singleActionEffectIds[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = Gift_CrossScreenEffectInfo_ActionEffectIdsEntryDecoder.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.actionEffectIds[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = Gift_CrossScreenEffectInfo_ReactionEffectIdsEntryDecoder.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.reactionEffectIds[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_CrossScreenEffectInfo {
    return {
      singleActionEffectIds: isObject(object.singleActionEffectIds)
        ? Object.entries(object.singleActionEffectIds).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      actionEffectIds: isObject(object.actionEffectIds)
        ? Object.entries(object.actionEffectIds).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      reactionEffectIds: isObject(object.reactionEffectIds)
        ? Object.entries(object.reactionEffectIds).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Gift_CrossScreenEffectInfo): unknown {
    const obj: any = {};
    if (message.singleActionEffectIds) {
      const entries = Object.entries(message.singleActionEffectIds);
      if (entries.length > 0) {
        obj.singleActionEffectIds = {};
        entries.forEach(([k, v]) => {
          obj.singleActionEffectIds[k] = Math.round(v);
        });
      }
    }
    if (message.actionEffectIds) {
      const entries = Object.entries(message.actionEffectIds);
      if (entries.length > 0) {
        obj.actionEffectIds = {};
        entries.forEach(([k, v]) => {
          obj.actionEffectIds[k] = Math.round(v);
        });
      }
    }
    if (message.reactionEffectIds) {
      const entries = Object.entries(message.reactionEffectIds);
      if (entries.length > 0) {
        obj.reactionEffectIds = {};
        entries.forEach(([k, v]) => {
          obj.reactionEffectIds[k] = Math.round(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo>, I>>(base?: I): Gift_CrossScreenEffectInfo {
    return Gift_CrossScreenEffectInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo>, I>>(object: I): Gift_CrossScreenEffectInfo {
    const message = createBaseGift_CrossScreenEffectInfo();
    message.singleActionEffectIds = Object.entries(object.singleActionEffectIds ?? {}).reduce<
      { [key: string]: number }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.actionEffectIds = Object.entries(object.actionEffectIds ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.reactionEffectIds = Object.entries(object.reactionEffectIds ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGift_CrossScreenEffectInfo_SingleActionEffectIdsEntry(): Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry {
  return { key: "0", value: 0 };
}

export const Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntryDecoder: MessageFns<Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry> = {
  encode(
    message: Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_CrossScreenEffectInfo_SingleActionEffectIdsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry>, I>>(
    base?: I,
  ): Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry {
    return Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry>, I>>(
    object: I,
  ): Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry {
    const message = createBaseGift_CrossScreenEffectInfo_SingleActionEffectIdsEntry();
    message.key = object.key ?? "0";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseGift_CrossScreenEffectInfo_ActionEffectIdsEntry(): Gift_CrossScreenEffectInfo_ActionEffectIdsEntry {
  return { key: "0", value: 0 };
}

export const Gift_CrossScreenEffectInfo_ActionEffectIdsEntryDecoder: MessageFns<Gift_CrossScreenEffectInfo_ActionEffectIdsEntry> = {
  encode(
    message: Gift_CrossScreenEffectInfo_ActionEffectIdsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_CrossScreenEffectInfo_ActionEffectIdsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_CrossScreenEffectInfo_ActionEffectIdsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_CrossScreenEffectInfo_ActionEffectIdsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Gift_CrossScreenEffectInfo_ActionEffectIdsEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo_ActionEffectIdsEntry>, I>>(
    base?: I,
  ): Gift_CrossScreenEffectInfo_ActionEffectIdsEntry {
    return Gift_CrossScreenEffectInfo_ActionEffectIdsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo_ActionEffectIdsEntry>, I>>(
    object: I,
  ): Gift_CrossScreenEffectInfo_ActionEffectIdsEntry {
    const message = createBaseGift_CrossScreenEffectInfo_ActionEffectIdsEntry();
    message.key = object.key ?? "0";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseGift_CrossScreenEffectInfo_ReactionEffectIdsEntry(): Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry {
  return { key: "0", value: 0 };
}

export const Gift_CrossScreenEffectInfo_ReactionEffectIdsEntryDecoder: MessageFns<Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry> = {
  encode(
    message: Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_CrossScreenEffectInfo_ReactionEffectIdsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry>, I>>(
    base?: I,
  ): Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry {
    return Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry>, I>>(
    object: I,
  ): Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry {
    const message = createBaseGift_CrossScreenEffectInfo_ReactionEffectIdsEntry();
    message.key = object.key ?? "0";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseGift_GiftSponsorInfo(): Gift_GiftSponsorInfo {
  return { sponsorId: "0", sponsorCount: "0", currentCount: "0", leftCountToSponsor: "0", canSponsor: false };
}

export const Gift_GiftSponsorInfoDecoder: MessageFns<Gift_GiftSponsorInfo> = {
  encode(message: Gift_GiftSponsorInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sponsorId !== "0") {
      writer.uint32(8).int64(message.sponsorId);
    }
    if (message.sponsorCount !== "0") {
      writer.uint32(16).int64(message.sponsorCount);
    }
    if (message.currentCount !== "0") {
      writer.uint32(24).int64(message.currentCount);
    }
    if (message.leftCountToSponsor !== "0") {
      writer.uint32(32).int64(message.leftCountToSponsor);
    }
    if (message.canSponsor !== false) {
      writer.uint32(40).bool(message.canSponsor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_GiftSponsorInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_GiftSponsorInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sponsorId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sponsorCount = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentCount = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.leftCountToSponsor = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.canSponsor = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_GiftSponsorInfo {
    return {
      sponsorId: isSet(object.sponsorId) ? globalThis.String(object.sponsorId) : "0",
      sponsorCount: isSet(object.sponsorCount) ? globalThis.String(object.sponsorCount) : "0",
      currentCount: isSet(object.currentCount) ? globalThis.String(object.currentCount) : "0",
      leftCountToSponsor: isSet(object.leftCountToSponsor) ? globalThis.String(object.leftCountToSponsor) : "0",
      canSponsor: isSet(object.canSponsor) ? globalThis.Boolean(object.canSponsor) : false,
    };
  },

  toJSON(message: Gift_GiftSponsorInfo): unknown {
    const obj: any = {};
    if (message.sponsorId !== "0") {
      obj.sponsorId = message.sponsorId;
    }
    if (message.sponsorCount !== "0") {
      obj.sponsorCount = message.sponsorCount;
    }
    if (message.currentCount !== "0") {
      obj.currentCount = message.currentCount;
    }
    if (message.leftCountToSponsor !== "0") {
      obj.leftCountToSponsor = message.leftCountToSponsor;
    }
    if (message.canSponsor !== false) {
      obj.canSponsor = message.canSponsor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_GiftSponsorInfo>, I>>(base?: I): Gift_GiftSponsorInfo {
    return Gift_GiftSponsorInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_GiftSponsorInfo>, I>>(object: I): Gift_GiftSponsorInfo {
    const message = createBaseGift_GiftSponsorInfo();
    message.sponsorId = object.sponsorId ?? "0";
    message.sponsorCount = object.sponsorCount ?? "0";
    message.currentCount = object.currentCount ?? "0";
    message.leftCountToSponsor = object.leftCountToSponsor ?? "0";
    message.canSponsor = object.canSponsor ?? false;
    return message;
  },
};

function createBaseGift_UGGiftStructInfo(): Gift_UGGiftStructInfo {
  return { isUgGift: false, ugPointsCost: "0" };
}

export const Gift_UGGiftStructInfoDecoder: MessageFns<Gift_UGGiftStructInfo> = {
  encode(message: Gift_UGGiftStructInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isUgGift !== false) {
      writer.uint32(8).bool(message.isUgGift);
    }
    if (message.ugPointsCost !== "0") {
      writer.uint32(16).int64(message.ugPointsCost);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_UGGiftStructInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_UGGiftStructInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isUgGift = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ugPointsCost = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_UGGiftStructInfo {
    return {
      isUgGift: isSet(object.isUgGift) ? globalThis.Boolean(object.isUgGift) : false,
      ugPointsCost: isSet(object.ugPointsCost) ? globalThis.String(object.ugPointsCost) : "0",
    };
  },

  toJSON(message: Gift_UGGiftStructInfo): unknown {
    const obj: any = {};
    if (message.isUgGift !== false) {
      obj.isUgGift = message.isUgGift;
    }
    if (message.ugPointsCost !== "0") {
      obj.ugPointsCost = message.ugPointsCost;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_UGGiftStructInfo>, I>>(base?: I): Gift_UGGiftStructInfo {
    return Gift_UGGiftStructInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_UGGiftStructInfo>, I>>(object: I): Gift_UGGiftStructInfo {
    const message = createBaseGift_UGGiftStructInfo();
    message.isUgGift = object.isUgGift ?? false;
    message.ugPointsCost = object.ugPointsCost ?? "0";
    return message;
  },
};

function createBaseGift_GiftSkin(): Gift_GiftSkin {
  return { giftSkinId: "0", giftSkinName: "", staticImage: undefined, animatedImage: undefined };
}

export const Gift_GiftSkinDecoder: MessageFns<Gift_GiftSkin> = {
  encode(message: Gift_GiftSkin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftSkinId !== "0") {
      writer.uint32(8).int64(message.giftSkinId);
    }
    if (message.giftSkinName !== "") {
      writer.uint32(18).string(message.giftSkinName);
    }
    if (message.staticImage !== undefined) {
      ImageDecoder.encode(message.staticImage, writer.uint32(26).fork()).join();
    }
    if (message.animatedImage !== undefined) {
      ImageDecoder.encode(message.animatedImage, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_GiftSkin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_GiftSkin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftSkinId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.giftSkinName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.staticImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.animatedImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_GiftSkin {
    return {
      giftSkinId: isSet(object.giftSkinId) ? globalThis.String(object.giftSkinId) : "0",
      giftSkinName: isSet(object.giftSkinName) ? globalThis.String(object.giftSkinName) : "",
      staticImage: isSet(object.staticImage) ? Image.fromJSON(object.staticImage) : undefined,
      animatedImage: isSet(object.animatedImage) ? Image.fromJSON(object.animatedImage) : undefined,
    };
  },

  toJSON(message: Gift_GiftSkin): unknown {
    const obj: any = {};
    if (message.giftSkinId !== "0") {
      obj.giftSkinId = message.giftSkinId;
    }
    if (message.giftSkinName !== "") {
      obj.giftSkinName = message.giftSkinName;
    }
    if (message.staticImage !== undefined) {
      obj.staticImage = Image.toJSON(message.staticImage);
    }
    if (message.animatedImage !== undefined) {
      obj.animatedImage = Image.toJSON(message.animatedImage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_GiftSkin>, I>>(base?: I): Gift_GiftSkin {
    return Gift_GiftSkin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_GiftSkin>, I>>(object: I): Gift_GiftSkin {
    const message = createBaseGift_GiftSkin();
    message.giftSkinId = object.giftSkinId ?? "0";
    message.giftSkinName = object.giftSkinName ?? "";
    message.staticImage = (object.staticImage !== undefined && object.staticImage !== null)
      ? Image.fromPartial(object.staticImage)
      : undefined;
    message.animatedImage = (object.animatedImage !== undefined && object.animatedImage !== null)
      ? Image.fromPartial(object.animatedImage)
      : undefined;
    return message;
  },
};

function createBaseGift_GiftText(): Gift_GiftText {
  return { giftTextId: "0", giftTextName: "" };
}

export const Gift_GiftTextDecoder: MessageFns<Gift_GiftText> = {
  encode(message: Gift_GiftText, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftTextId !== "0") {
      writer.uint32(8).int64(message.giftTextId);
    }
    if (message.giftTextName !== "") {
      writer.uint32(18).string(message.giftTextName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_GiftText {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_GiftText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftTextId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.giftTextName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_GiftText {
    return {
      giftTextId: isSet(object.giftTextId) ? globalThis.String(object.giftTextId) : "0",
      giftTextName: isSet(object.giftTextName) ? globalThis.String(object.giftTextName) : "",
    };
  },

  toJSON(message: Gift_GiftText): unknown {
    const obj: any = {};
    if (message.giftTextId !== "0") {
      obj.giftTextId = message.giftTextId;
    }
    if (message.giftTextName !== "") {
      obj.giftTextName = message.giftTextName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_GiftText>, I>>(base?: I): Gift_GiftText {
    return Gift_GiftText.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_GiftText>, I>>(object: I): Gift_GiftText {
    const message = createBaseGift_GiftText();
    message.giftTextId = object.giftTextId ?? "0";
    message.giftTextName = object.giftTextName ?? "";
    return message;
  },
};

function createBaseGift_GiftSkinToGiftTextsInfo(): Gift_GiftSkinToGiftTextsInfo {
  return { giftSkinId: "0", giftTextIds: [] };
}

export const Gift_GiftSkinToGiftTextsInfoDecoder: MessageFns<Gift_GiftSkinToGiftTextsInfo> = {
  encode(message: Gift_GiftSkinToGiftTextsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftSkinId !== "0") {
      writer.uint32(8).int64(message.giftSkinId);
    }
    writer.uint32(18).fork();
    for (const v of message.giftTextIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_GiftSkinToGiftTextsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_GiftSkinToGiftTextsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftSkinId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.giftTextIds.push(reader.int64().toString());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.giftTextIds.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_GiftSkinToGiftTextsInfo {
    return {
      giftSkinId: isSet(object.giftSkinId) ? globalThis.String(object.giftSkinId) : "0",
      giftTextIds: globalThis.Array.isArray(object?.giftTextIds)
        ? object.giftTextIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Gift_GiftSkinToGiftTextsInfo): unknown {
    const obj: any = {};
    if (message.giftSkinId !== "0") {
      obj.giftSkinId = message.giftSkinId;
    }
    if (message.giftTextIds?.length) {
      obj.giftTextIds = message.giftTextIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_GiftSkinToGiftTextsInfo>, I>>(base?: I): Gift_GiftSkinToGiftTextsInfo {
    return Gift_GiftSkinToGiftTextsInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_GiftSkinToGiftTextsInfo>, I>>(object: I): Gift_GiftSkinToGiftTextsInfo {
    const message = createBaseGift_GiftSkinToGiftTextsInfo();
    message.giftSkinId = object.giftSkinId ?? "0";
    message.giftTextIds = object.giftTextIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGift_GiftBoxInfo(): Gift_GiftBoxInfo {
  return { capacity: "0", isPrimaryBox: false, schemeUrl: "" };
}

export const Gift_GiftBoxInfoDecoder: MessageFns<Gift_GiftBoxInfo> = {
  encode(message: Gift_GiftBoxInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.capacity !== "0") {
      writer.uint32(8).int64(message.capacity);
    }
    if (message.isPrimaryBox !== false) {
      writer.uint32(16).bool(message.isPrimaryBox);
    }
    if (message.schemeUrl !== "") {
      writer.uint32(26).string(message.schemeUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gift_GiftBoxInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGift_GiftBoxInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.capacity = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isPrimaryBox = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.schemeUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gift_GiftBoxInfo {
    return {
      capacity: isSet(object.capacity) ? globalThis.String(object.capacity) : "0",
      isPrimaryBox: isSet(object.isPrimaryBox) ? globalThis.Boolean(object.isPrimaryBox) : false,
      schemeUrl: isSet(object.schemeUrl) ? globalThis.String(object.schemeUrl) : "",
    };
  },

  toJSON(message: Gift_GiftBoxInfo): unknown {
    const obj: any = {};
    if (message.capacity !== "0") {
      obj.capacity = message.capacity;
    }
    if (message.isPrimaryBox !== false) {
      obj.isPrimaryBox = message.isPrimaryBox;
    }
    if (message.schemeUrl !== "") {
      obj.schemeUrl = message.schemeUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gift_GiftBoxInfo>, I>>(base?: I): Gift_GiftBoxInfo {
    return Gift_GiftBoxInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gift_GiftBoxInfo>, I>>(object: I): Gift_GiftBoxInfo {
    const message = createBaseGift_GiftBoxInfo();
    message.capacity = object.capacity ?? "0";
    message.isPrimaryBox = object.isPrimaryBox ?? false;
    message.schemeUrl = object.schemeUrl ?? "";
    return message;
  },
};

function createBaseUser(): User {
  return {
    userId: "0",
    nickname: "",
    bioDescription: "",
    profilePicture: undefined,
    profilePictureMedium: undefined,
    profilePictureLarge: undefined,
    verified: false,
    status: 0,
    createTime: "0",
    modifyTime: "0",
    secret: 0,
    shareQrcodeUri: "",
    badgeImageList: [],
    followInfo: undefined,
    userHonor: undefined,
    fansClub: undefined,
    border: undefined,
    specialId: "",
    avatarBorder: undefined,
    medal: undefined,
    userBadges: [],
    newUserBadges: [],
    topVipNo: 0,
    userAttr: undefined,
    ownRoom: undefined,
    payScore: "0",
    fanTicketCount: "0",
    anchorInfo: undefined,
    linkMicStats: 0,
    uniqueId: "",
    enableShowCommerceSale: false,
    withFusionShopEntry: false,
    payScores: "0",
    anchorLevel: undefined,
    verifiedContent: "",
    authorInfo: undefined,
    topFans: [],
    secUid: "",
    userRole: 0,
    rewardInfo: undefined,
    personalCard: undefined,
    authenticationInfo: undefined,
    mediaBadgeImageList: [],
    commerceWebcastConfigIds: [],
    borders: [],
    comboBadgeInfo: undefined,
    subscribeInfo: undefined,
    badges: [],
    mintTypeLabel: [],
    fansClubInfo: undefined,
    allowFindByContacts: false,
    allowOthersDownloadVideo: false,
    allowOthersDownloadWhenSharingVideo: false,
    allowShareShowProfile: false,
    allowShowInGossip: false,
    allowShowMyAction: false,
    allowStrangeComment: false,
    allowUnfollowerComment: false,
    allowUseLinkmic: false,
    avatarJpg: undefined,
    backgroundImgUrl: "",
    blockStatus: 0,
    commentRestrict: 0,
    constellation: "",
    disableIchat: 0,
    enableIchatImg: "0",
    exp: 0,
    foldStrangerChat: false,
    followStatus: "0",
    ichatRestrictType: 0,
    idStr: "",
    isFollower: false,
    isFollowing: false,
    needProfileGuide: false,
    pushCommentStatus: false,
    pushDigg: false,
    pushFollow: false,
    pushFriendAction: false,
    pushIchat: false,
    pushStatus: false,
    pushVideoPost: false,
    pushVideoRecommend: false,
    verifiedReason: "",
    enableCarManagementPermission: false,
    upcomingEventList: [],
    scmLabel: "",
    ecommerceEntrance: undefined,
    isBlock: false,
    isSubscribe: false,
    isAnchorMarked: false,
  };
}

export const UserDecoder: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.bioDescription !== "") {
      writer.uint32(42).string(message.bioDescription);
    }
    if (message.profilePicture !== undefined) {
      ImageDecoder.encode(message.profilePicture, writer.uint32(74).fork()).join();
    }
    if (message.profilePictureMedium !== undefined) {
      ImageDecoder.encode(message.profilePictureMedium, writer.uint32(82).fork()).join();
    }
    if (message.profilePictureLarge !== undefined) {
      ImageDecoder.encode(message.profilePictureLarge, writer.uint32(90).fork()).join();
    }
    if (message.verified !== false) {
      writer.uint32(96).bool(message.verified);
    }
    if (message.status !== 0) {
      writer.uint32(120).int32(message.status);
    }
    if (message.createTime !== "0") {
      writer.uint32(128).int64(message.createTime);
    }
    if (message.modifyTime !== "0") {
      writer.uint32(136).int64(message.modifyTime);
    }
    if (message.secret !== 0) {
      writer.uint32(144).int32(message.secret);
    }
    if (message.shareQrcodeUri !== "") {
      writer.uint32(154).string(message.shareQrcodeUri);
    }
    for (const v of message.badgeImageList) {
      ImageDecoder.encode(v!, writer.uint32(170).fork()).join();
    }
    if (message.followInfo !== undefined) {
      User_FollowInfoDecoder.encode(message.followInfo, writer.uint32(178).fork()).join();
    }
    if (message.userHonor !== undefined) {
      UserHonorDecoder.encode(message.userHonor, writer.uint32(186).fork()).join();
    }
    if (message.fansClub !== undefined) {
      FansClubMemberDecoder.encode(message.fansClub, writer.uint32(194).fork()).join();
    }
    if (message.border !== undefined) {
      BorderInfoDecoder.encode(message.border, writer.uint32(202).fork()).join();
    }
    if (message.specialId !== "") {
      writer.uint32(210).string(message.specialId);
    }
    if (message.avatarBorder !== undefined) {
      ImageDecoder.encode(message.avatarBorder, writer.uint32(218).fork()).join();
    }
    if (message.medal !== undefined) {
      ImageDecoder.encode(message.medal, writer.uint32(226).fork()).join();
    }
    for (const v of message.userBadges) {
      ImageDecoder.encode(v!, writer.uint32(234).fork()).join();
    }
    for (const v of message.newUserBadges) {
      ImageDecoder.encode(v!, writer.uint32(242).fork()).join();
    }
    if (message.topVipNo !== 0) {
      writer.uint32(248).int32(message.topVipNo);
    }
    if (message.userAttr !== undefined) {
      User_UserAttrDecoder.encode(message.userAttr, writer.uint32(258).fork()).join();
    }
    if (message.ownRoom !== undefined) {
      User_OwnRoomDecoder.encode(message.ownRoom, writer.uint32(266).fork()).join();
    }
    if (message.payScore !== "0") {
      writer.uint32(272).int64(message.payScore);
    }
    if (message.fanTicketCount !== "0") {
      writer.uint32(280).int64(message.fanTicketCount);
    }
    if (message.anchorInfo !== undefined) {
      User_AnchorLevelDecoder.encode(message.anchorInfo, writer.uint32(290).fork()).join();
    }
    if (message.linkMicStats !== 0) {
      writer.uint32(296).int32(message.linkMicStats);
    }
    if (message.uniqueId !== "") {
      writer.uint32(306).string(message.uniqueId);
    }
    if (message.enableShowCommerceSale !== false) {
      writer.uint32(312).bool(message.enableShowCommerceSale);
    }
    if (message.withFusionShopEntry !== false) {
      writer.uint32(320).bool(message.withFusionShopEntry);
    }
    if (message.payScores !== "0") {
      writer.uint32(328).int64(message.payScores);
    }
    if (message.anchorLevel !== undefined) {
      User_AnchorLevelDecoder.encode(message.anchorLevel, writer.uint32(338).fork()).join();
    }
    if (message.verifiedContent !== "") {
      writer.uint32(346).string(message.verifiedContent);
    }
    if (message.authorInfo !== undefined) {
      AuthorDecoder.encode(message.authorInfo, writer.uint32(354).fork()).join();
    }
    for (const v of message.topFans) {
      UserDecoder.encode(v!, writer.uint32(362).fork()).join();
    }
    if (message.secUid !== "") {
      writer.uint32(370).string(message.secUid);
    }
    if (message.userRole !== 0) {
      writer.uint32(376).int32(message.userRole);
    }
    if (message.rewardInfo !== undefined) {
      User_ActivityInfoDecoder.encode(message.rewardInfo, writer.uint32(394).fork()).join();
    }
    if (message.personalCard !== undefined) {
      ImageDecoder.encode(message.personalCard, writer.uint32(418).fork()).join();
    }
    if (message.authenticationInfo !== undefined) {
      User_AuthenticationInfoDecoder.encode(message.authenticationInfo, writer.uint32(426).fork()).join();
    }
    for (const v of message.mediaBadgeImageList) {
      ImageDecoder.encode(v!, writer.uint32(458).fork()).join();
    }
    writer.uint32(482).fork();
    for (const v of message.commerceWebcastConfigIds) {
      writer.int64(v);
    }
    writer.join();
    for (const v of message.borders) {
      BorderInfoDecoder.encode(v!, writer.uint32(490).fork()).join();
    }
    if (message.comboBadgeInfo !== undefined) {
      User_ComboBadgeInfoDecoder.encode(message.comboBadgeInfo, writer.uint32(498).fork()).join();
    }
    if (message.subscribeInfo !== undefined) {
      User_SubscribeInfoDecoder.encode(message.subscribeInfo, writer.uint32(506).fork()).join();
    }
    for (const v of message.badges) {
      BadgeStructDecoder.encode(v!, writer.uint32(514).fork()).join();
    }
    writer.uint32(522).fork();
    for (const v of message.mintTypeLabel) {
      writer.int64(v);
    }
    writer.join();
    if (message.fansClubInfo !== undefined) {
      User_FansClubInfoDecoder.encode(message.fansClubInfo, writer.uint32(530).fork()).join();
    }
    if (message.allowFindByContacts !== false) {
      writer.uint32(8016).bool(message.allowFindByContacts);
    }
    if (message.allowOthersDownloadVideo !== false) {
      writer.uint32(8024).bool(message.allowOthersDownloadVideo);
    }
    if (message.allowOthersDownloadWhenSharingVideo !== false) {
      writer.uint32(8032).bool(message.allowOthersDownloadWhenSharingVideo);
    }
    if (message.allowShareShowProfile !== false) {
      writer.uint32(8040).bool(message.allowShareShowProfile);
    }
    if (message.allowShowInGossip !== false) {
      writer.uint32(8048).bool(message.allowShowInGossip);
    }
    if (message.allowShowMyAction !== false) {
      writer.uint32(8056).bool(message.allowShowMyAction);
    }
    if (message.allowStrangeComment !== false) {
      writer.uint32(8064).bool(message.allowStrangeComment);
    }
    if (message.allowUnfollowerComment !== false) {
      writer.uint32(8072).bool(message.allowUnfollowerComment);
    }
    if (message.allowUseLinkmic !== false) {
      writer.uint32(8080).bool(message.allowUseLinkmic);
    }
    if (message.avatarJpg !== undefined) {
      ImageDecoder.encode(message.avatarJpg, writer.uint32(8098).fork()).join();
    }
    if (message.backgroundImgUrl !== "") {
      writer.uint32(8106).string(message.backgroundImgUrl);
    }
    if (message.blockStatus !== 0) {
      writer.uint32(8128).int32(message.blockStatus);
    }
    if (message.commentRestrict !== 0) {
      writer.uint32(8136).int32(message.commentRestrict);
    }
    if (message.constellation !== "") {
      writer.uint32(8146).string(message.constellation);
    }
    if (message.disableIchat !== 0) {
      writer.uint32(8152).int32(message.disableIchat);
    }
    if (message.enableIchatImg !== "0") {
      writer.uint32(8160).int64(message.enableIchatImg);
    }
    if (message.exp !== 0) {
      writer.uint32(8168).int32(message.exp);
    }
    if (message.foldStrangerChat !== false) {
      writer.uint32(8184).bool(message.foldStrangerChat);
    }
    if (message.followStatus !== "0") {
      writer.uint32(8192).int64(message.followStatus);
    }
    if (message.ichatRestrictType !== 0) {
      writer.uint32(8216).int32(message.ichatRestrictType);
    }
    if (message.idStr !== "") {
      writer.uint32(8226).string(message.idStr);
    }
    if (message.isFollower !== false) {
      writer.uint32(8232).bool(message.isFollower);
    }
    if (message.isFollowing !== false) {
      writer.uint32(8240).bool(message.isFollowing);
    }
    if (message.needProfileGuide !== false) {
      writer.uint32(8248).bool(message.needProfileGuide);
    }
    if (message.pushCommentStatus !== false) {
      writer.uint32(8264).bool(message.pushCommentStatus);
    }
    if (message.pushDigg !== false) {
      writer.uint32(8272).bool(message.pushDigg);
    }
    if (message.pushFollow !== false) {
      writer.uint32(8280).bool(message.pushFollow);
    }
    if (message.pushFriendAction !== false) {
      writer.uint32(8288).bool(message.pushFriendAction);
    }
    if (message.pushIchat !== false) {
      writer.uint32(8296).bool(message.pushIchat);
    }
    if (message.pushStatus !== false) {
      writer.uint32(8304).bool(message.pushStatus);
    }
    if (message.pushVideoPost !== false) {
      writer.uint32(8312).bool(message.pushVideoPost);
    }
    if (message.pushVideoRecommend !== false) {
      writer.uint32(8320).bool(message.pushVideoRecommend);
    }
    if (message.verifiedReason !== "") {
      writer.uint32(8346).string(message.verifiedReason);
    }
    if (message.enableCarManagementPermission !== false) {
      writer.uint32(8352).bool(message.enableCarManagementPermission);
    }
    for (const v of message.upcomingEventList) {
      User_LiveEventInfoDecoder.encode(v!, writer.uint32(8362).fork()).join();
    }
    if (message.scmLabel !== "") {
      writer.uint32(8370).string(message.scmLabel);
    }
    if (message.ecommerceEntrance !== undefined) {
      User_EcommerceEntranceDecoder.encode(message.ecommerceEntrance, writer.uint32(8378).fork()).join();
    }
    if (message.isBlock !== false) {
      writer.uint32(8384).bool(message.isBlock);
    }
    if (message.isSubscribe !== false) {
      writer.uint32(8720).bool(message.isSubscribe);
    }
    if (message.isAnchorMarked !== false) {
      writer.uint32(8728).bool(message.isAnchorMarked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bioDescription = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.profilePicture = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.profilePictureMedium = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.profilePictureLarge = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.createTime = reader.int64().toString();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.modifyTime = reader.int64().toString();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.secret = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.shareQrcodeUri = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.badgeImageList.push(ImageDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.followInfo = User_FollowInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.userHonor = UserHonorDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.fansClub = FansClubMemberDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.border = BorderInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.specialId = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.avatarBorder = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.medal = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.userBadges.push(ImageDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.newUserBadges.push(ImageDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.topVipNo = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.userAttr = User_UserAttrDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.ownRoom = User_OwnRoomDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.payScore = reader.int64().toString();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.fanTicketCount = reader.int64().toString();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.anchorInfo = User_AnchorLevelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.linkMicStats = reader.int32() as any;
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.enableShowCommerceSale = reader.bool();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.withFusionShopEntry = reader.bool();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.payScores = reader.int64().toString();
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.anchorLevel = User_AnchorLevelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.verifiedContent = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.authorInfo = AuthorDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.topFans.push(UserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.secUid = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.userRole = reader.int32();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.rewardInfo = User_ActivityInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.personalCard = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.authenticationInfo = User_AuthenticationInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 57: {
          if (tag !== 458) {
            break;
          }

          message.mediaBadgeImageList.push(ImageDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 60: {
          if (tag === 480) {
            message.commerceWebcastConfigIds.push(reader.int64().toString());

            continue;
          }

          if (tag === 482) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.commerceWebcastConfigIds.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.borders.push(BorderInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.comboBadgeInfo = User_ComboBadgeInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 63: {
          if (tag !== 506) {
            break;
          }

          message.subscribeInfo = User_SubscribeInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 64: {
          if (tag !== 514) {
            break;
          }

          message.badges.push(BadgeStructDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 65: {
          if (tag === 520) {
            message.mintTypeLabel.push(reader.int64().toString());

            continue;
          }

          if (tag === 522) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mintTypeLabel.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 66: {
          if (tag !== 530) {
            break;
          }

          message.fansClubInfo = User_FansClubInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 1002: {
          if (tag !== 8016) {
            break;
          }

          message.allowFindByContacts = reader.bool();
          continue;
        }
        case 1003: {
          if (tag !== 8024) {
            break;
          }

          message.allowOthersDownloadVideo = reader.bool();
          continue;
        }
        case 1004: {
          if (tag !== 8032) {
            break;
          }

          message.allowOthersDownloadWhenSharingVideo = reader.bool();
          continue;
        }
        case 1005: {
          if (tag !== 8040) {
            break;
          }

          message.allowShareShowProfile = reader.bool();
          continue;
        }
        case 1006: {
          if (tag !== 8048) {
            break;
          }

          message.allowShowInGossip = reader.bool();
          continue;
        }
        case 1007: {
          if (tag !== 8056) {
            break;
          }

          message.allowShowMyAction = reader.bool();
          continue;
        }
        case 1008: {
          if (tag !== 8064) {
            break;
          }

          message.allowStrangeComment = reader.bool();
          continue;
        }
        case 1009: {
          if (tag !== 8072) {
            break;
          }

          message.allowUnfollowerComment = reader.bool();
          continue;
        }
        case 1010: {
          if (tag !== 8080) {
            break;
          }

          message.allowUseLinkmic = reader.bool();
          continue;
        }
        case 1012: {
          if (tag !== 8098) {
            break;
          }

          message.avatarJpg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 1013: {
          if (tag !== 8106) {
            break;
          }

          message.backgroundImgUrl = reader.string();
          continue;
        }
        case 1016: {
          if (tag !== 8128) {
            break;
          }

          message.blockStatus = reader.int32();
          continue;
        }
        case 1017: {
          if (tag !== 8136) {
            break;
          }

          message.commentRestrict = reader.int32();
          continue;
        }
        case 1018: {
          if (tag !== 8146) {
            break;
          }

          message.constellation = reader.string();
          continue;
        }
        case 1019: {
          if (tag !== 8152) {
            break;
          }

          message.disableIchat = reader.int32();
          continue;
        }
        case 1020: {
          if (tag !== 8160) {
            break;
          }

          message.enableIchatImg = reader.int64().toString();
          continue;
        }
        case 1021: {
          if (tag !== 8168) {
            break;
          }

          message.exp = reader.int32();
          continue;
        }
        case 1023: {
          if (tag !== 8184) {
            break;
          }

          message.foldStrangerChat = reader.bool();
          continue;
        }
        case 1024: {
          if (tag !== 8192) {
            break;
          }

          message.followStatus = reader.int64().toString();
          continue;
        }
        case 1027: {
          if (tag !== 8216) {
            break;
          }

          message.ichatRestrictType = reader.int32();
          continue;
        }
        case 1028: {
          if (tag !== 8226) {
            break;
          }

          message.idStr = reader.string();
          continue;
        }
        case 1029: {
          if (tag !== 8232) {
            break;
          }

          message.isFollower = reader.bool();
          continue;
        }
        case 1030: {
          if (tag !== 8240) {
            break;
          }

          message.isFollowing = reader.bool();
          continue;
        }
        case 1031: {
          if (tag !== 8248) {
            break;
          }

          message.needProfileGuide = reader.bool();
          continue;
        }
        case 1033: {
          if (tag !== 8264) {
            break;
          }

          message.pushCommentStatus = reader.bool();
          continue;
        }
        case 1034: {
          if (tag !== 8272) {
            break;
          }

          message.pushDigg = reader.bool();
          continue;
        }
        case 1035: {
          if (tag !== 8280) {
            break;
          }

          message.pushFollow = reader.bool();
          continue;
        }
        case 1036: {
          if (tag !== 8288) {
            break;
          }

          message.pushFriendAction = reader.bool();
          continue;
        }
        case 1037: {
          if (tag !== 8296) {
            break;
          }

          message.pushIchat = reader.bool();
          continue;
        }
        case 1038: {
          if (tag !== 8304) {
            break;
          }

          message.pushStatus = reader.bool();
          continue;
        }
        case 1039: {
          if (tag !== 8312) {
            break;
          }

          message.pushVideoPost = reader.bool();
          continue;
        }
        case 1040: {
          if (tag !== 8320) {
            break;
          }

          message.pushVideoRecommend = reader.bool();
          continue;
        }
        case 1043: {
          if (tag !== 8346) {
            break;
          }

          message.verifiedReason = reader.string();
          continue;
        }
        case 1044: {
          if (tag !== 8352) {
            break;
          }

          message.enableCarManagementPermission = reader.bool();
          continue;
        }
        case 1045: {
          if (tag !== 8362) {
            break;
          }

          message.upcomingEventList.push(User_LiveEventInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 1046: {
          if (tag !== 8370) {
            break;
          }

          message.scmLabel = reader.string();
          continue;
        }
        case 1047: {
          if (tag !== 8378) {
            break;
          }

          message.ecommerceEntrance = User_EcommerceEntranceDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 1048: {
          if (tag !== 8384) {
            break;
          }

          message.isBlock = reader.bool();
          continue;
        }
        case 1090: {
          if (tag !== 8720) {
            break;
          }

          message.isSubscribe = reader.bool();
          continue;
        }
        case 1091: {
          if (tag !== 8728) {
            break;
          }

          message.isAnchorMarked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      bioDescription: isSet(object.bioDescription) ? globalThis.String(object.bioDescription) : "",
      profilePicture: isSet(object.profilePicture) ? Image.fromJSON(object.profilePicture) : undefined,
      profilePictureMedium: isSet(object.profilePictureMedium)
        ? Image.fromJSON(object.profilePictureMedium)
        : undefined,
      profilePictureLarge: isSet(object.profilePictureLarge) ? Image.fromJSON(object.profilePictureLarge) : undefined,
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "0",
      modifyTime: isSet(object.modifyTime) ? globalThis.String(object.modifyTime) : "0",
      secret: isSet(object.secret) ? globalThis.Number(object.secret) : 0,
      shareQrcodeUri: isSet(object.shareQrcodeUri) ? globalThis.String(object.shareQrcodeUri) : "",
      badgeImageList: globalThis.Array.isArray(object?.badgeImageList)
        ? object.badgeImageList.map((e: any) => Image.fromJSON(e))
        : [],
      followInfo: isSet(object.followInfo) ? User_FollowInfo.fromJSON(object.followInfo) : undefined,
      userHonor: isSet(object.userHonor) ? UserHonor.fromJSON(object.userHonor) : undefined,
      fansClub: isSet(object.fansClub) ? FansClubMember.fromJSON(object.fansClub) : undefined,
      border: isSet(object.border) ? BorderInfo.fromJSON(object.border) : undefined,
      specialId: isSet(object.specialId) ? globalThis.String(object.specialId) : "",
      avatarBorder: isSet(object.avatarBorder) ? Image.fromJSON(object.avatarBorder) : undefined,
      medal: isSet(object.medal) ? Image.fromJSON(object.medal) : undefined,
      userBadges: globalThis.Array.isArray(object?.userBadges)
        ? object.userBadges.map((e: any) => Image.fromJSON(e))
        : [],
      newUserBadges: globalThis.Array.isArray(object?.newUserBadges)
        ? object.newUserBadges.map((e: any) => Image.fromJSON(e))
        : [],
      topVipNo: isSet(object.topVipNo) ? globalThis.Number(object.topVipNo) : 0,
      userAttr: isSet(object.userAttr) ? User_UserAttr.fromJSON(object.userAttr) : undefined,
      ownRoom: isSet(object.ownRoom) ? User_OwnRoom.fromJSON(object.ownRoom) : undefined,
      payScore: isSet(object.payScore) ? globalThis.String(object.payScore) : "0",
      fanTicketCount: isSet(object.fanTicketCount) ? globalThis.String(object.fanTicketCount) : "0",
      anchorInfo: isSet(object.anchorInfo) ? User_AnchorLevel.fromJSON(object.anchorInfo) : undefined,
      linkMicStats: isSet(object.linkMicStats) ? linkmicStatusFromJSON(object.linkMicStats) : 0,
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      enableShowCommerceSale: isSet(object.enableShowCommerceSale)
        ? globalThis.Boolean(object.enableShowCommerceSale)
        : false,
      withFusionShopEntry: isSet(object.withFusionShopEntry) ? globalThis.Boolean(object.withFusionShopEntry) : false,
      payScores: isSet(object.payScores) ? globalThis.String(object.payScores) : "0",
      anchorLevel: isSet(object.anchorLevel) ? User_AnchorLevel.fromJSON(object.anchorLevel) : undefined,
      verifiedContent: isSet(object.verifiedContent) ? globalThis.String(object.verifiedContent) : "",
      authorInfo: isSet(object.authorInfo) ? Author.fromJSON(object.authorInfo) : undefined,
      topFans: globalThis.Array.isArray(object?.topFans) ? object.topFans.map((e: any) => User.fromJSON(e)) : [],
      secUid: isSet(object.secUid) ? globalThis.String(object.secUid) : "",
      userRole: isSet(object.userRole) ? globalThis.Number(object.userRole) : 0,
      rewardInfo: isSet(object.rewardInfo) ? User_ActivityInfo.fromJSON(object.rewardInfo) : undefined,
      personalCard: isSet(object.personalCard) ? Image.fromJSON(object.personalCard) : undefined,
      authenticationInfo: isSet(object.authenticationInfo)
        ? User_AuthenticationInfo.fromJSON(object.authenticationInfo)
        : undefined,
      mediaBadgeImageList: globalThis.Array.isArray(object?.mediaBadgeImageList)
        ? object.mediaBadgeImageList.map((e: any) => Image.fromJSON(e))
        : [],
      commerceWebcastConfigIds: globalThis.Array.isArray(object?.commerceWebcastConfigIds)
        ? object.commerceWebcastConfigIds.map((e: any) => globalThis.String(e))
        : [],
      borders: globalThis.Array.isArray(object?.borders) ? object.borders.map((e: any) => BorderInfo.fromJSON(e)) : [],
      comboBadgeInfo: isSet(object.comboBadgeInfo) ? User_ComboBadgeInfo.fromJSON(object.comboBadgeInfo) : undefined,
      subscribeInfo: isSet(object.subscribeInfo) ? User_SubscribeInfo.fromJSON(object.subscribeInfo) : undefined,
      badges: globalThis.Array.isArray(object?.badges) ? object.badges.map((e: any) => BadgeStruct.fromJSON(e)) : [],
      mintTypeLabel: globalThis.Array.isArray(object?.mintTypeLabel)
        ? object.mintTypeLabel.map((e: any) => globalThis.String(e))
        : [],
      fansClubInfo: isSet(object.fansClubInfo) ? User_FansClubInfo.fromJSON(object.fansClubInfo) : undefined,
      allowFindByContacts: isSet(object.allowFindByContacts) ? globalThis.Boolean(object.allowFindByContacts) : false,
      allowOthersDownloadVideo: isSet(object.allowOthersDownloadVideo)
        ? globalThis.Boolean(object.allowOthersDownloadVideo)
        : false,
      allowOthersDownloadWhenSharingVideo: isSet(object.allowOthersDownloadWhenSharingVideo)
        ? globalThis.Boolean(object.allowOthersDownloadWhenSharingVideo)
        : false,
      allowShareShowProfile: isSet(object.allowShareShowProfile)
        ? globalThis.Boolean(object.allowShareShowProfile)
        : false,
      allowShowInGossip: isSet(object.allowShowInGossip) ? globalThis.Boolean(object.allowShowInGossip) : false,
      allowShowMyAction: isSet(object.allowShowMyAction) ? globalThis.Boolean(object.allowShowMyAction) : false,
      allowStrangeComment: isSet(object.allowStrangeComment) ? globalThis.Boolean(object.allowStrangeComment) : false,
      allowUnfollowerComment: isSet(object.allowUnfollowerComment)
        ? globalThis.Boolean(object.allowUnfollowerComment)
        : false,
      allowUseLinkmic: isSet(object.allowUseLinkmic) ? globalThis.Boolean(object.allowUseLinkmic) : false,
      avatarJpg: isSet(object.avatarJpg) ? Image.fromJSON(object.avatarJpg) : undefined,
      backgroundImgUrl: isSet(object.backgroundImgUrl) ? globalThis.String(object.backgroundImgUrl) : "",
      blockStatus: isSet(object.blockStatus) ? globalThis.Number(object.blockStatus) : 0,
      commentRestrict: isSet(object.commentRestrict) ? globalThis.Number(object.commentRestrict) : 0,
      constellation: isSet(object.constellation) ? globalThis.String(object.constellation) : "",
      disableIchat: isSet(object.disableIchat) ? globalThis.Number(object.disableIchat) : 0,
      enableIchatImg: isSet(object.enableIchatImg) ? globalThis.String(object.enableIchatImg) : "0",
      exp: isSet(object.exp) ? globalThis.Number(object.exp) : 0,
      foldStrangerChat: isSet(object.foldStrangerChat) ? globalThis.Boolean(object.foldStrangerChat) : false,
      followStatus: isSet(object.followStatus) ? globalThis.String(object.followStatus) : "0",
      ichatRestrictType: isSet(object.ichatRestrictType) ? globalThis.Number(object.ichatRestrictType) : 0,
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      isFollower: isSet(object.isFollower) ? globalThis.Boolean(object.isFollower) : false,
      isFollowing: isSet(object.isFollowing) ? globalThis.Boolean(object.isFollowing) : false,
      needProfileGuide: isSet(object.needProfileGuide) ? globalThis.Boolean(object.needProfileGuide) : false,
      pushCommentStatus: isSet(object.pushCommentStatus) ? globalThis.Boolean(object.pushCommentStatus) : false,
      pushDigg: isSet(object.pushDigg) ? globalThis.Boolean(object.pushDigg) : false,
      pushFollow: isSet(object.pushFollow) ? globalThis.Boolean(object.pushFollow) : false,
      pushFriendAction: isSet(object.pushFriendAction) ? globalThis.Boolean(object.pushFriendAction) : false,
      pushIchat: isSet(object.pushIchat) ? globalThis.Boolean(object.pushIchat) : false,
      pushStatus: isSet(object.pushStatus) ? globalThis.Boolean(object.pushStatus) : false,
      pushVideoPost: isSet(object.pushVideoPost) ? globalThis.Boolean(object.pushVideoPost) : false,
      pushVideoRecommend: isSet(object.pushVideoRecommend) ? globalThis.Boolean(object.pushVideoRecommend) : false,
      verifiedReason: isSet(object.verifiedReason) ? globalThis.String(object.verifiedReason) : "",
      enableCarManagementPermission: isSet(object.enableCarManagementPermission)
        ? globalThis.Boolean(object.enableCarManagementPermission)
        : false,
      upcomingEventList: globalThis.Array.isArray(object?.upcomingEventList)
        ? object.upcomingEventList.map((e: any) => User_LiveEventInfo.fromJSON(e))
        : [],
      scmLabel: isSet(object.scmLabel) ? globalThis.String(object.scmLabel) : "",
      ecommerceEntrance: isSet(object.ecommerceEntrance)
        ? User_EcommerceEntrance.fromJSON(object.ecommerceEntrance)
        : undefined,
      isBlock: isSet(object.isBlock) ? globalThis.Boolean(object.isBlock) : false,
      isSubscribe: isSet(object.isSubscribe) ? globalThis.Boolean(object.isSubscribe) : false,
      isAnchorMarked: isSet(object.isAnchorMarked) ? globalThis.Boolean(object.isAnchorMarked) : false,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.bioDescription !== "") {
      obj.bioDescription = message.bioDescription;
    }
    if (message.profilePicture !== undefined) {
      obj.profilePicture = Image.toJSON(message.profilePicture);
    }
    if (message.profilePictureMedium !== undefined) {
      obj.profilePictureMedium = Image.toJSON(message.profilePictureMedium);
    }
    if (message.profilePictureLarge !== undefined) {
      obj.profilePictureLarge = Image.toJSON(message.profilePictureLarge);
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.createTime !== "0") {
      obj.createTime = message.createTime;
    }
    if (message.modifyTime !== "0") {
      obj.modifyTime = message.modifyTime;
    }
    if (message.secret !== 0) {
      obj.secret = Math.round(message.secret);
    }
    if (message.shareQrcodeUri !== "") {
      obj.shareQrcodeUri = message.shareQrcodeUri;
    }
    if (message.badgeImageList?.length) {
      obj.badgeImageList = message.badgeImageList.map((e) => Image.toJSON(e));
    }
    if (message.followInfo !== undefined) {
      obj.followInfo = User_FollowInfo.toJSON(message.followInfo);
    }
    if (message.userHonor !== undefined) {
      obj.userHonor = UserHonor.toJSON(message.userHonor);
    }
    if (message.fansClub !== undefined) {
      obj.fansClub = FansClubMember.toJSON(message.fansClub);
    }
    if (message.border !== undefined) {
      obj.border = BorderInfo.toJSON(message.border);
    }
    if (message.specialId !== "") {
      obj.specialId = message.specialId;
    }
    if (message.avatarBorder !== undefined) {
      obj.avatarBorder = Image.toJSON(message.avatarBorder);
    }
    if (message.medal !== undefined) {
      obj.medal = Image.toJSON(message.medal);
    }
    if (message.userBadges?.length) {
      obj.userBadges = message.userBadges.map((e) => Image.toJSON(e));
    }
    if (message.newUserBadges?.length) {
      obj.newUserBadges = message.newUserBadges.map((e) => Image.toJSON(e));
    }
    if (message.topVipNo !== 0) {
      obj.topVipNo = Math.round(message.topVipNo);
    }
    if (message.userAttr !== undefined) {
      obj.userAttr = User_UserAttr.toJSON(message.userAttr);
    }
    if (message.ownRoom !== undefined) {
      obj.ownRoom = User_OwnRoom.toJSON(message.ownRoom);
    }
    if (message.payScore !== "0") {
      obj.payScore = message.payScore;
    }
    if (message.fanTicketCount !== "0") {
      obj.fanTicketCount = message.fanTicketCount;
    }
    if (message.anchorInfo !== undefined) {
      obj.anchorInfo = User_AnchorLevel.toJSON(message.anchorInfo);
    }
    if (message.linkMicStats !== 0) {
      obj.linkMicStats = linkmicStatusToJSON(message.linkMicStats);
    }
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.enableShowCommerceSale !== false) {
      obj.enableShowCommerceSale = message.enableShowCommerceSale;
    }
    if (message.withFusionShopEntry !== false) {
      obj.withFusionShopEntry = message.withFusionShopEntry;
    }
    if (message.payScores !== "0") {
      obj.payScores = message.payScores;
    }
    if (message.anchorLevel !== undefined) {
      obj.anchorLevel = User_AnchorLevel.toJSON(message.anchorLevel);
    }
    if (message.verifiedContent !== "") {
      obj.verifiedContent = message.verifiedContent;
    }
    if (message.authorInfo !== undefined) {
      obj.authorInfo = Author.toJSON(message.authorInfo);
    }
    if (message.topFans?.length) {
      obj.topFans = message.topFans.map((e) => User.toJSON(e));
    }
    if (message.secUid !== "") {
      obj.secUid = message.secUid;
    }
    if (message.userRole !== 0) {
      obj.userRole = Math.round(message.userRole);
    }
    if (message.rewardInfo !== undefined) {
      obj.rewardInfo = User_ActivityInfo.toJSON(message.rewardInfo);
    }
    if (message.personalCard !== undefined) {
      obj.personalCard = Image.toJSON(message.personalCard);
    }
    if (message.authenticationInfo !== undefined) {
      obj.authenticationInfo = User_AuthenticationInfo.toJSON(message.authenticationInfo);
    }
    if (message.mediaBadgeImageList?.length) {
      obj.mediaBadgeImageList = message.mediaBadgeImageList.map((e) => Image.toJSON(e));
    }
    if (message.commerceWebcastConfigIds?.length) {
      obj.commerceWebcastConfigIds = message.commerceWebcastConfigIds;
    }
    if (message.borders?.length) {
      obj.borders = message.borders.map((e) => BorderInfo.toJSON(e));
    }
    if (message.comboBadgeInfo !== undefined) {
      obj.comboBadgeInfo = User_ComboBadgeInfo.toJSON(message.comboBadgeInfo);
    }
    if (message.subscribeInfo !== undefined) {
      obj.subscribeInfo = User_SubscribeInfo.toJSON(message.subscribeInfo);
    }
    if (message.badges?.length) {
      obj.badges = message.badges.map((e) => BadgeStruct.toJSON(e));
    }
    if (message.mintTypeLabel?.length) {
      obj.mintTypeLabel = message.mintTypeLabel;
    }
    if (message.fansClubInfo !== undefined) {
      obj.fansClubInfo = User_FansClubInfo.toJSON(message.fansClubInfo);
    }
    if (message.allowFindByContacts !== false) {
      obj.allowFindByContacts = message.allowFindByContacts;
    }
    if (message.allowOthersDownloadVideo !== false) {
      obj.allowOthersDownloadVideo = message.allowOthersDownloadVideo;
    }
    if (message.allowOthersDownloadWhenSharingVideo !== false) {
      obj.allowOthersDownloadWhenSharingVideo = message.allowOthersDownloadWhenSharingVideo;
    }
    if (message.allowShareShowProfile !== false) {
      obj.allowShareShowProfile = message.allowShareShowProfile;
    }
    if (message.allowShowInGossip !== false) {
      obj.allowShowInGossip = message.allowShowInGossip;
    }
    if (message.allowShowMyAction !== false) {
      obj.allowShowMyAction = message.allowShowMyAction;
    }
    if (message.allowStrangeComment !== false) {
      obj.allowStrangeComment = message.allowStrangeComment;
    }
    if (message.allowUnfollowerComment !== false) {
      obj.allowUnfollowerComment = message.allowUnfollowerComment;
    }
    if (message.allowUseLinkmic !== false) {
      obj.allowUseLinkmic = message.allowUseLinkmic;
    }
    if (message.avatarJpg !== undefined) {
      obj.avatarJpg = Image.toJSON(message.avatarJpg);
    }
    if (message.backgroundImgUrl !== "") {
      obj.backgroundImgUrl = message.backgroundImgUrl;
    }
    if (message.blockStatus !== 0) {
      obj.blockStatus = Math.round(message.blockStatus);
    }
    if (message.commentRestrict !== 0) {
      obj.commentRestrict = Math.round(message.commentRestrict);
    }
    if (message.constellation !== "") {
      obj.constellation = message.constellation;
    }
    if (message.disableIchat !== 0) {
      obj.disableIchat = Math.round(message.disableIchat);
    }
    if (message.enableIchatImg !== "0") {
      obj.enableIchatImg = message.enableIchatImg;
    }
    if (message.exp !== 0) {
      obj.exp = Math.round(message.exp);
    }
    if (message.foldStrangerChat !== false) {
      obj.foldStrangerChat = message.foldStrangerChat;
    }
    if (message.followStatus !== "0") {
      obj.followStatus = message.followStatus;
    }
    if (message.ichatRestrictType !== 0) {
      obj.ichatRestrictType = Math.round(message.ichatRestrictType);
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.isFollower !== false) {
      obj.isFollower = message.isFollower;
    }
    if (message.isFollowing !== false) {
      obj.isFollowing = message.isFollowing;
    }
    if (message.needProfileGuide !== false) {
      obj.needProfileGuide = message.needProfileGuide;
    }
    if (message.pushCommentStatus !== false) {
      obj.pushCommentStatus = message.pushCommentStatus;
    }
    if (message.pushDigg !== false) {
      obj.pushDigg = message.pushDigg;
    }
    if (message.pushFollow !== false) {
      obj.pushFollow = message.pushFollow;
    }
    if (message.pushFriendAction !== false) {
      obj.pushFriendAction = message.pushFriendAction;
    }
    if (message.pushIchat !== false) {
      obj.pushIchat = message.pushIchat;
    }
    if (message.pushStatus !== false) {
      obj.pushStatus = message.pushStatus;
    }
    if (message.pushVideoPost !== false) {
      obj.pushVideoPost = message.pushVideoPost;
    }
    if (message.pushVideoRecommend !== false) {
      obj.pushVideoRecommend = message.pushVideoRecommend;
    }
    if (message.verifiedReason !== "") {
      obj.verifiedReason = message.verifiedReason;
    }
    if (message.enableCarManagementPermission !== false) {
      obj.enableCarManagementPermission = message.enableCarManagementPermission;
    }
    if (message.upcomingEventList?.length) {
      obj.upcomingEventList = message.upcomingEventList.map((e) => User_LiveEventInfo.toJSON(e));
    }
    if (message.scmLabel !== "") {
      obj.scmLabel = message.scmLabel;
    }
    if (message.ecommerceEntrance !== undefined) {
      obj.ecommerceEntrance = User_EcommerceEntrance.toJSON(message.ecommerceEntrance);
    }
    if (message.isBlock !== false) {
      obj.isBlock = message.isBlock;
    }
    if (message.isSubscribe !== false) {
      obj.isSubscribe = message.isSubscribe;
    }
    if (message.isAnchorMarked !== false) {
      obj.isAnchorMarked = message.isAnchorMarked;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.userId = object.userId ?? "0";
    message.nickname = object.nickname ?? "";
    message.bioDescription = object.bioDescription ?? "";
    message.profilePicture = (object.profilePicture !== undefined && object.profilePicture !== null)
      ? Image.fromPartial(object.profilePicture)
      : undefined;
    message.profilePictureMedium = (object.profilePictureMedium !== undefined && object.profilePictureMedium !== null)
      ? Image.fromPartial(object.profilePictureMedium)
      : undefined;
    message.profilePictureLarge = (object.profilePictureLarge !== undefined && object.profilePictureLarge !== null)
      ? Image.fromPartial(object.profilePictureLarge)
      : undefined;
    message.verified = object.verified ?? false;
    message.status = object.status ?? 0;
    message.createTime = object.createTime ?? "0";
    message.modifyTime = object.modifyTime ?? "0";
    message.secret = object.secret ?? 0;
    message.shareQrcodeUri = object.shareQrcodeUri ?? "";
    message.badgeImageList = object.badgeImageList?.map((e) => Image.fromPartial(e)) || [];
    message.followInfo = (object.followInfo !== undefined && object.followInfo !== null)
      ? User_FollowInfo.fromPartial(object.followInfo)
      : undefined;
    message.userHonor = (object.userHonor !== undefined && object.userHonor !== null)
      ? UserHonor.fromPartial(object.userHonor)
      : undefined;
    message.fansClub = (object.fansClub !== undefined && object.fansClub !== null)
      ? FansClubMember.fromPartial(object.fansClub)
      : undefined;
    message.border = (object.border !== undefined && object.border !== null)
      ? BorderInfo.fromPartial(object.border)
      : undefined;
    message.specialId = object.specialId ?? "";
    message.avatarBorder = (object.avatarBorder !== undefined && object.avatarBorder !== null)
      ? Image.fromPartial(object.avatarBorder)
      : undefined;
    message.medal = (object.medal !== undefined && object.medal !== null) ? Image.fromPartial(object.medal) : undefined;
    message.userBadges = object.userBadges?.map((e) => Image.fromPartial(e)) || [];
    message.newUserBadges = object.newUserBadges?.map((e) => Image.fromPartial(e)) || [];
    message.topVipNo = object.topVipNo ?? 0;
    message.userAttr = (object.userAttr !== undefined && object.userAttr !== null)
      ? User_UserAttr.fromPartial(object.userAttr)
      : undefined;
    message.ownRoom = (object.ownRoom !== undefined && object.ownRoom !== null)
      ? User_OwnRoom.fromPartial(object.ownRoom)
      : undefined;
    message.payScore = object.payScore ?? "0";
    message.fanTicketCount = object.fanTicketCount ?? "0";
    message.anchorInfo = (object.anchorInfo !== undefined && object.anchorInfo !== null)
      ? User_AnchorLevel.fromPartial(object.anchorInfo)
      : undefined;
    message.linkMicStats = object.linkMicStats ?? 0;
    message.uniqueId = object.uniqueId ?? "";
    message.enableShowCommerceSale = object.enableShowCommerceSale ?? false;
    message.withFusionShopEntry = object.withFusionShopEntry ?? false;
    message.payScores = object.payScores ?? "0";
    message.anchorLevel = (object.anchorLevel !== undefined && object.anchorLevel !== null)
      ? User_AnchorLevel.fromPartial(object.anchorLevel)
      : undefined;
    message.verifiedContent = object.verifiedContent ?? "";
    message.authorInfo = (object.authorInfo !== undefined && object.authorInfo !== null)
      ? Author.fromPartial(object.authorInfo)
      : undefined;
    message.topFans = object.topFans?.map((e) => User.fromPartial(e)) || [];
    message.secUid = object.secUid ?? "";
    message.userRole = object.userRole ?? 0;
    message.rewardInfo = (object.rewardInfo !== undefined && object.rewardInfo !== null)
      ? User_ActivityInfo.fromPartial(object.rewardInfo)
      : undefined;
    message.personalCard = (object.personalCard !== undefined && object.personalCard !== null)
      ? Image.fromPartial(object.personalCard)
      : undefined;
    message.authenticationInfo = (object.authenticationInfo !== undefined && object.authenticationInfo !== null)
      ? User_AuthenticationInfo.fromPartial(object.authenticationInfo)
      : undefined;
    message.mediaBadgeImageList = object.mediaBadgeImageList?.map((e) => Image.fromPartial(e)) || [];
    message.commerceWebcastConfigIds = object.commerceWebcastConfigIds?.map((e) => e) || [];
    message.borders = object.borders?.map((e) => BorderInfo.fromPartial(e)) || [];
    message.comboBadgeInfo = (object.comboBadgeInfo !== undefined && object.comboBadgeInfo !== null)
      ? User_ComboBadgeInfo.fromPartial(object.comboBadgeInfo)
      : undefined;
    message.subscribeInfo = (object.subscribeInfo !== undefined && object.subscribeInfo !== null)
      ? User_SubscribeInfo.fromPartial(object.subscribeInfo)
      : undefined;
    message.badges = object.badges?.map((e) => BadgeStruct.fromPartial(e)) || [];
    message.mintTypeLabel = object.mintTypeLabel?.map((e) => e) || [];
    message.fansClubInfo = (object.fansClubInfo !== undefined && object.fansClubInfo !== null)
      ? User_FansClubInfo.fromPartial(object.fansClubInfo)
      : undefined;
    message.allowFindByContacts = object.allowFindByContacts ?? false;
    message.allowOthersDownloadVideo = object.allowOthersDownloadVideo ?? false;
    message.allowOthersDownloadWhenSharingVideo = object.allowOthersDownloadWhenSharingVideo ?? false;
    message.allowShareShowProfile = object.allowShareShowProfile ?? false;
    message.allowShowInGossip = object.allowShowInGossip ?? false;
    message.allowShowMyAction = object.allowShowMyAction ?? false;
    message.allowStrangeComment = object.allowStrangeComment ?? false;
    message.allowUnfollowerComment = object.allowUnfollowerComment ?? false;
    message.allowUseLinkmic = object.allowUseLinkmic ?? false;
    message.avatarJpg = (object.avatarJpg !== undefined && object.avatarJpg !== null)
      ? Image.fromPartial(object.avatarJpg)
      : undefined;
    message.backgroundImgUrl = object.backgroundImgUrl ?? "";
    message.blockStatus = object.blockStatus ?? 0;
    message.commentRestrict = object.commentRestrict ?? 0;
    message.constellation = object.constellation ?? "";
    message.disableIchat = object.disableIchat ?? 0;
    message.enableIchatImg = object.enableIchatImg ?? "0";
    message.exp = object.exp ?? 0;
    message.foldStrangerChat = object.foldStrangerChat ?? false;
    message.followStatus = object.followStatus ?? "0";
    message.ichatRestrictType = object.ichatRestrictType ?? 0;
    message.idStr = object.idStr ?? "";
    message.isFollower = object.isFollower ?? false;
    message.isFollowing = object.isFollowing ?? false;
    message.needProfileGuide = object.needProfileGuide ?? false;
    message.pushCommentStatus = object.pushCommentStatus ?? false;
    message.pushDigg = object.pushDigg ?? false;
    message.pushFollow = object.pushFollow ?? false;
    message.pushFriendAction = object.pushFriendAction ?? false;
    message.pushIchat = object.pushIchat ?? false;
    message.pushStatus = object.pushStatus ?? false;
    message.pushVideoPost = object.pushVideoPost ?? false;
    message.pushVideoRecommend = object.pushVideoRecommend ?? false;
    message.verifiedReason = object.verifiedReason ?? "";
    message.enableCarManagementPermission = object.enableCarManagementPermission ?? false;
    message.upcomingEventList = object.upcomingEventList?.map((e) => User_LiveEventInfo.fromPartial(e)) || [];
    message.scmLabel = object.scmLabel ?? "";
    message.ecommerceEntrance = (object.ecommerceEntrance !== undefined && object.ecommerceEntrance !== null)
      ? User_EcommerceEntrance.fromPartial(object.ecommerceEntrance)
      : undefined;
    message.isBlock = object.isBlock ?? false;
    message.isSubscribe = object.isSubscribe ?? false;
    message.isAnchorMarked = object.isAnchorMarked ?? false;
    return message;
  },
};

function createBaseUser_LiveEventInfo(): User_LiveEventInfo {
  return {
    eventId: "0",
    startTime: "0",
    duration: "0",
    title: "",
    description: "",
    hasSubscribed: false,
    isPaidEvent: false,
    ticketAmount: "0",
    payMethod: "0",
  };
}

export const User_LiveEventInfoDecoder: MessageFns<User_LiveEventInfo> = {
  encode(message: User_LiveEventInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "0") {
      writer.uint32(8).int64(message.eventId);
    }
    if (message.startTime !== "0") {
      writer.uint32(16).int64(message.startTime);
    }
    if (message.duration !== "0") {
      writer.uint32(24).int64(message.duration);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.hasSubscribed !== false) {
      writer.uint32(48).bool(message.hasSubscribed);
    }
    if (message.isPaidEvent !== false) {
      writer.uint32(56).bool(message.isPaidEvent);
    }
    if (message.ticketAmount !== "0") {
      writer.uint32(64).int64(message.ticketAmount);
    }
    if (message.payMethod !== "0") {
      writer.uint32(72).int64(message.payMethod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_LiveEventInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_LiveEventInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startTime = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hasSubscribed = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isPaidEvent = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.ticketAmount = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.payMethod = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_LiveEventInfo {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "0",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "0",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      hasSubscribed: isSet(object.hasSubscribed) ? globalThis.Boolean(object.hasSubscribed) : false,
      isPaidEvent: isSet(object.isPaidEvent) ? globalThis.Boolean(object.isPaidEvent) : false,
      ticketAmount: isSet(object.ticketAmount) ? globalThis.String(object.ticketAmount) : "0",
      payMethod: isSet(object.payMethod) ? globalThis.String(object.payMethod) : "0",
    };
  },

  toJSON(message: User_LiveEventInfo): unknown {
    const obj: any = {};
    if (message.eventId !== "0") {
      obj.eventId = message.eventId;
    }
    if (message.startTime !== "0") {
      obj.startTime = message.startTime;
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.hasSubscribed !== false) {
      obj.hasSubscribed = message.hasSubscribed;
    }
    if (message.isPaidEvent !== false) {
      obj.isPaidEvent = message.isPaidEvent;
    }
    if (message.ticketAmount !== "0") {
      obj.ticketAmount = message.ticketAmount;
    }
    if (message.payMethod !== "0") {
      obj.payMethod = message.payMethod;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_LiveEventInfo>, I>>(base?: I): User_LiveEventInfo {
    return User_LiveEventInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_LiveEventInfo>, I>>(object: I): User_LiveEventInfo {
    const message = createBaseUser_LiveEventInfo();
    message.eventId = object.eventId ?? "0";
    message.startTime = object.startTime ?? "0";
    message.duration = object.duration ?? "0";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.hasSubscribed = object.hasSubscribed ?? false;
    message.isPaidEvent = object.isPaidEvent ?? false;
    message.ticketAmount = object.ticketAmount ?? "0";
    message.payMethod = object.payMethod ?? "0";
    return message;
  },
};

function createBaseUser_LiveEventInfo_WalletPackage(): User_LiveEventInfo_WalletPackage {
  return { iapId: "", usdPriceShow: "" };
}

export const User_LiveEventInfo_WalletPackageDecoder: MessageFns<User_LiveEventInfo_WalletPackage> = {
  encode(message: User_LiveEventInfo_WalletPackage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iapId !== "") {
      writer.uint32(10).string(message.iapId);
    }
    if (message.usdPriceShow !== "") {
      writer.uint32(18).string(message.usdPriceShow);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_LiveEventInfo_WalletPackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_LiveEventInfo_WalletPackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.iapId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.usdPriceShow = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_LiveEventInfo_WalletPackage {
    return {
      iapId: isSet(object.iapId) ? globalThis.String(object.iapId) : "",
      usdPriceShow: isSet(object.usdPriceShow) ? globalThis.String(object.usdPriceShow) : "",
    };
  },

  toJSON(message: User_LiveEventInfo_WalletPackage): unknown {
    const obj: any = {};
    if (message.iapId !== "") {
      obj.iapId = message.iapId;
    }
    if (message.usdPriceShow !== "") {
      obj.usdPriceShow = message.usdPriceShow;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_LiveEventInfo_WalletPackage>, I>>(
    base?: I,
  ): User_LiveEventInfo_WalletPackage {
    return User_LiveEventInfo_WalletPackage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_LiveEventInfo_WalletPackage>, I>>(
    object: I,
  ): User_LiveEventInfo_WalletPackage {
    const message = createBaseUser_LiveEventInfo_WalletPackage();
    message.iapId = object.iapId ?? "";
    message.usdPriceShow = object.usdPriceShow ?? "";
    return message;
  },
};

function createBaseUser_ActivityInfo(): User_ActivityInfo {
  return { badge: undefined, storytag: undefined };
}

export const User_ActivityInfoDecoder: MessageFns<User_ActivityInfo> = {
  encode(message: User_ActivityInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.badge !== undefined) {
      ImageDecoder.encode(message.badge, writer.uint32(10).fork()).join();
    }
    if (message.storytag !== undefined) {
      ImageDecoder.encode(message.storytag, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_ActivityInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_ActivityInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.badge = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.storytag = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_ActivityInfo {
    return {
      badge: isSet(object.badge) ? Image.fromJSON(object.badge) : undefined,
      storytag: isSet(object.storytag) ? Image.fromJSON(object.storytag) : undefined,
    };
  },

  toJSON(message: User_ActivityInfo): unknown {
    const obj: any = {};
    if (message.badge !== undefined) {
      obj.badge = Image.toJSON(message.badge);
    }
    if (message.storytag !== undefined) {
      obj.storytag = Image.toJSON(message.storytag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_ActivityInfo>, I>>(base?: I): User_ActivityInfo {
    return User_ActivityInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_ActivityInfo>, I>>(object: I): User_ActivityInfo {
    const message = createBaseUser_ActivityInfo();
    message.badge = (object.badge !== undefined && object.badge !== null) ? Image.fromPartial(object.badge) : undefined;
    message.storytag = (object.storytag !== undefined && object.storytag !== null)
      ? Image.fromPartial(object.storytag)
      : undefined;
    return message;
  },
};

function createBaseUser_AnchorLevel(): User_AnchorLevel {
  return {
    level: "0",
    experience: "0",
    lowestExperienceThisLevel: "0",
    highestExperienceThisLevel: "0",
    taskStartExperience: "0",
    taskStartTime: "0",
    taskDecreaseExperience: "0",
    taskTargetExperience: "0",
    taskEndTime: "0",
    profileDialogBg: undefined,
    profileDialogBgBack: undefined,
    stageLevel: undefined,
    smallIcon: undefined,
  };
}

export const User_AnchorLevelDecoder: MessageFns<User_AnchorLevel> = {
  encode(message: User_AnchorLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== "0") {
      writer.uint32(8).int64(message.level);
    }
    if (message.experience !== "0") {
      writer.uint32(16).int64(message.experience);
    }
    if (message.lowestExperienceThisLevel !== "0") {
      writer.uint32(24).int64(message.lowestExperienceThisLevel);
    }
    if (message.highestExperienceThisLevel !== "0") {
      writer.uint32(32).int64(message.highestExperienceThisLevel);
    }
    if (message.taskStartExperience !== "0") {
      writer.uint32(40).int64(message.taskStartExperience);
    }
    if (message.taskStartTime !== "0") {
      writer.uint32(48).int64(message.taskStartTime);
    }
    if (message.taskDecreaseExperience !== "0") {
      writer.uint32(56).int64(message.taskDecreaseExperience);
    }
    if (message.taskTargetExperience !== "0") {
      writer.uint32(64).int64(message.taskTargetExperience);
    }
    if (message.taskEndTime !== "0") {
      writer.uint32(72).int64(message.taskEndTime);
    }
    if (message.profileDialogBg !== undefined) {
      ImageDecoder.encode(message.profileDialogBg, writer.uint32(82).fork()).join();
    }
    if (message.profileDialogBgBack !== undefined) {
      ImageDecoder.encode(message.profileDialogBgBack, writer.uint32(90).fork()).join();
    }
    if (message.stageLevel !== undefined) {
      ImageDecoder.encode(message.stageLevel, writer.uint32(98).fork()).join();
    }
    if (message.smallIcon !== undefined) {
      ImageDecoder.encode(message.smallIcon, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_AnchorLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_AnchorLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.experience = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lowestExperienceThisLevel = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.highestExperienceThisLevel = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.taskStartExperience = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.taskStartTime = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.taskDecreaseExperience = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.taskTargetExperience = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.taskEndTime = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.profileDialogBg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.profileDialogBgBack = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.stageLevel = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.smallIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_AnchorLevel {
    return {
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
      experience: isSet(object.experience) ? globalThis.String(object.experience) : "0",
      lowestExperienceThisLevel: isSet(object.lowestExperienceThisLevel)
        ? globalThis.String(object.lowestExperienceThisLevel)
        : "0",
      highestExperienceThisLevel: isSet(object.highestExperienceThisLevel)
        ? globalThis.String(object.highestExperienceThisLevel)
        : "0",
      taskStartExperience: isSet(object.taskStartExperience) ? globalThis.String(object.taskStartExperience) : "0",
      taskStartTime: isSet(object.taskStartTime) ? globalThis.String(object.taskStartTime) : "0",
      taskDecreaseExperience: isSet(object.taskDecreaseExperience)
        ? globalThis.String(object.taskDecreaseExperience)
        : "0",
      taskTargetExperience: isSet(object.taskTargetExperience) ? globalThis.String(object.taskTargetExperience) : "0",
      taskEndTime: isSet(object.taskEndTime) ? globalThis.String(object.taskEndTime) : "0",
      profileDialogBg: isSet(object.profileDialogBg) ? Image.fromJSON(object.profileDialogBg) : undefined,
      profileDialogBgBack: isSet(object.profileDialogBgBack) ? Image.fromJSON(object.profileDialogBgBack) : undefined,
      stageLevel: isSet(object.stageLevel) ? Image.fromJSON(object.stageLevel) : undefined,
      smallIcon: isSet(object.smallIcon) ? Image.fromJSON(object.smallIcon) : undefined,
    };
  },

  toJSON(message: User_AnchorLevel): unknown {
    const obj: any = {};
    if (message.level !== "0") {
      obj.level = message.level;
    }
    if (message.experience !== "0") {
      obj.experience = message.experience;
    }
    if (message.lowestExperienceThisLevel !== "0") {
      obj.lowestExperienceThisLevel = message.lowestExperienceThisLevel;
    }
    if (message.highestExperienceThisLevel !== "0") {
      obj.highestExperienceThisLevel = message.highestExperienceThisLevel;
    }
    if (message.taskStartExperience !== "0") {
      obj.taskStartExperience = message.taskStartExperience;
    }
    if (message.taskStartTime !== "0") {
      obj.taskStartTime = message.taskStartTime;
    }
    if (message.taskDecreaseExperience !== "0") {
      obj.taskDecreaseExperience = message.taskDecreaseExperience;
    }
    if (message.taskTargetExperience !== "0") {
      obj.taskTargetExperience = message.taskTargetExperience;
    }
    if (message.taskEndTime !== "0") {
      obj.taskEndTime = message.taskEndTime;
    }
    if (message.profileDialogBg !== undefined) {
      obj.profileDialogBg = Image.toJSON(message.profileDialogBg);
    }
    if (message.profileDialogBgBack !== undefined) {
      obj.profileDialogBgBack = Image.toJSON(message.profileDialogBgBack);
    }
    if (message.stageLevel !== undefined) {
      obj.stageLevel = Image.toJSON(message.stageLevel);
    }
    if (message.smallIcon !== undefined) {
      obj.smallIcon = Image.toJSON(message.smallIcon);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_AnchorLevel>, I>>(base?: I): User_AnchorLevel {
    return User_AnchorLevel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_AnchorLevel>, I>>(object: I): User_AnchorLevel {
    const message = createBaseUser_AnchorLevel();
    message.level = object.level ?? "0";
    message.experience = object.experience ?? "0";
    message.lowestExperienceThisLevel = object.lowestExperienceThisLevel ?? "0";
    message.highestExperienceThisLevel = object.highestExperienceThisLevel ?? "0";
    message.taskStartExperience = object.taskStartExperience ?? "0";
    message.taskStartTime = object.taskStartTime ?? "0";
    message.taskDecreaseExperience = object.taskDecreaseExperience ?? "0";
    message.taskTargetExperience = object.taskTargetExperience ?? "0";
    message.taskEndTime = object.taskEndTime ?? "0";
    message.profileDialogBg = (object.profileDialogBg !== undefined && object.profileDialogBg !== null)
      ? Image.fromPartial(object.profileDialogBg)
      : undefined;
    message.profileDialogBgBack = (object.profileDialogBgBack !== undefined && object.profileDialogBgBack !== null)
      ? Image.fromPartial(object.profileDialogBgBack)
      : undefined;
    message.stageLevel = (object.stageLevel !== undefined && object.stageLevel !== null)
      ? Image.fromPartial(object.stageLevel)
      : undefined;
    message.smallIcon = (object.smallIcon !== undefined && object.smallIcon !== null)
      ? Image.fromPartial(object.smallIcon)
      : undefined;
    return message;
  },
};

function createBaseUser_AuthenticationInfo(): User_AuthenticationInfo {
  return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: undefined };
}

export const User_AuthenticationInfoDecoder: MessageFns<User_AuthenticationInfo> = {
  encode(message: User_AuthenticationInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customVerify !== "") {
      writer.uint32(10).string(message.customVerify);
    }
    if (message.enterpriseVerifyReason !== "") {
      writer.uint32(18).string(message.enterpriseVerifyReason);
    }
    if (message.authenticationBadge !== undefined) {
      ImageDecoder.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_AuthenticationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_AuthenticationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customVerify = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enterpriseVerifyReason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authenticationBadge = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_AuthenticationInfo {
    return {
      customVerify: isSet(object.customVerify) ? globalThis.String(object.customVerify) : "",
      enterpriseVerifyReason: isSet(object.enterpriseVerifyReason)
        ? globalThis.String(object.enterpriseVerifyReason)
        : "",
      authenticationBadge: isSet(object.authenticationBadge) ? Image.fromJSON(object.authenticationBadge) : undefined,
    };
  },

  toJSON(message: User_AuthenticationInfo): unknown {
    const obj: any = {};
    if (message.customVerify !== "") {
      obj.customVerify = message.customVerify;
    }
    if (message.enterpriseVerifyReason !== "") {
      obj.enterpriseVerifyReason = message.enterpriseVerifyReason;
    }
    if (message.authenticationBadge !== undefined) {
      obj.authenticationBadge = Image.toJSON(message.authenticationBadge);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_AuthenticationInfo>, I>>(base?: I): User_AuthenticationInfo {
    return User_AuthenticationInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_AuthenticationInfo>, I>>(object: I): User_AuthenticationInfo {
    const message = createBaseUser_AuthenticationInfo();
    message.customVerify = object.customVerify ?? "";
    message.enterpriseVerifyReason = object.enterpriseVerifyReason ?? "";
    message.authenticationBadge = (object.authenticationBadge !== undefined && object.authenticationBadge !== null)
      ? Image.fromPartial(object.authenticationBadge)
      : undefined;
    return message;
  },
};

function createBaseUser_AuthorStats(): User_AuthorStats {
  return {
    videoTotalCount: "0",
    videoTotalPlayCount: "0",
    videoTotalShareCount: "0",
    videoTotalSeriesCount: "0",
    varietyShowPlayCount: "0",
    videoTotalFavoriteCount: "0",
  };
}

export const User_AuthorStatsDecoder: MessageFns<User_AuthorStats> = {
  encode(message: User_AuthorStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoTotalCount !== "0") {
      writer.uint32(8).int64(message.videoTotalCount);
    }
    if (message.videoTotalPlayCount !== "0") {
      writer.uint32(16).int64(message.videoTotalPlayCount);
    }
    if (message.videoTotalShareCount !== "0") {
      writer.uint32(24).int64(message.videoTotalShareCount);
    }
    if (message.videoTotalSeriesCount !== "0") {
      writer.uint32(32).int64(message.videoTotalSeriesCount);
    }
    if (message.varietyShowPlayCount !== "0") {
      writer.uint32(40).int64(message.varietyShowPlayCount);
    }
    if (message.videoTotalFavoriteCount !== "0") {
      writer.uint32(48).int64(message.videoTotalFavoriteCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_AuthorStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_AuthorStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.videoTotalCount = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.videoTotalPlayCount = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.videoTotalShareCount = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.videoTotalSeriesCount = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.varietyShowPlayCount = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.videoTotalFavoriteCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_AuthorStats {
    return {
      videoTotalCount: isSet(object.videoTotalCount) ? globalThis.String(object.videoTotalCount) : "0",
      videoTotalPlayCount: isSet(object.videoTotalPlayCount) ? globalThis.String(object.videoTotalPlayCount) : "0",
      videoTotalShareCount: isSet(object.videoTotalShareCount) ? globalThis.String(object.videoTotalShareCount) : "0",
      videoTotalSeriesCount: isSet(object.videoTotalSeriesCount)
        ? globalThis.String(object.videoTotalSeriesCount)
        : "0",
      varietyShowPlayCount: isSet(object.varietyShowPlayCount) ? globalThis.String(object.varietyShowPlayCount) : "0",
      videoTotalFavoriteCount: isSet(object.videoTotalFavoriteCount)
        ? globalThis.String(object.videoTotalFavoriteCount)
        : "0",
    };
  },

  toJSON(message: User_AuthorStats): unknown {
    const obj: any = {};
    if (message.videoTotalCount !== "0") {
      obj.videoTotalCount = message.videoTotalCount;
    }
    if (message.videoTotalPlayCount !== "0") {
      obj.videoTotalPlayCount = message.videoTotalPlayCount;
    }
    if (message.videoTotalShareCount !== "0") {
      obj.videoTotalShareCount = message.videoTotalShareCount;
    }
    if (message.videoTotalSeriesCount !== "0") {
      obj.videoTotalSeriesCount = message.videoTotalSeriesCount;
    }
    if (message.varietyShowPlayCount !== "0") {
      obj.varietyShowPlayCount = message.varietyShowPlayCount;
    }
    if (message.videoTotalFavoriteCount !== "0") {
      obj.videoTotalFavoriteCount = message.videoTotalFavoriteCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_AuthorStats>, I>>(base?: I): User_AuthorStats {
    return User_AuthorStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_AuthorStats>, I>>(object: I): User_AuthorStats {
    const message = createBaseUser_AuthorStats();
    message.videoTotalCount = object.videoTotalCount ?? "0";
    message.videoTotalPlayCount = object.videoTotalPlayCount ?? "0";
    message.videoTotalShareCount = object.videoTotalShareCount ?? "0";
    message.videoTotalSeriesCount = object.videoTotalSeriesCount ?? "0";
    message.varietyShowPlayCount = object.varietyShowPlayCount ?? "0";
    message.videoTotalFavoriteCount = object.videoTotalFavoriteCount ?? "0";
    return message;
  },
};

function createBaseUser_Border(): User_Border {
  return {
    icon: undefined,
    level: "0",
    source: "",
    profileDecorationRibbon: undefined,
    avatarBackgroundColor: "",
    avatarBackgroundBorderColor: "",
  };
}

export const User_BorderDecoder: MessageFns<User_Border> = {
  encode(message: User_Border, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
    }
    if (message.level !== "0") {
      writer.uint32(16).int64(message.level);
    }
    if (message.source !== "") {
      writer.uint32(26).string(message.source);
    }
    if (message.profileDecorationRibbon !== undefined) {
      ImageDecoder.encode(message.profileDecorationRibbon, writer.uint32(34).fork()).join();
    }
    if (message.avatarBackgroundColor !== "") {
      writer.uint32(58).string(message.avatarBackgroundColor);
    }
    if (message.avatarBackgroundBorderColor !== "") {
      writer.uint32(66).string(message.avatarBackgroundBorderColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_Border {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_Border();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.profileDecorationRibbon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.avatarBackgroundColor = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.avatarBackgroundBorderColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_Border {
    return {
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      profileDecorationRibbon: isSet(object.profileDecorationRibbon)
        ? Image.fromJSON(object.profileDecorationRibbon)
        : undefined,
      avatarBackgroundColor: isSet(object.avatarBackgroundColor) ? globalThis.String(object.avatarBackgroundColor) : "",
      avatarBackgroundBorderColor: isSet(object.avatarBackgroundBorderColor)
        ? globalThis.String(object.avatarBackgroundBorderColor)
        : "",
    };
  },

  toJSON(message: User_Border): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.level !== "0") {
      obj.level = message.level;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.profileDecorationRibbon !== undefined) {
      obj.profileDecorationRibbon = Image.toJSON(message.profileDecorationRibbon);
    }
    if (message.avatarBackgroundColor !== "") {
      obj.avatarBackgroundColor = message.avatarBackgroundColor;
    }
    if (message.avatarBackgroundBorderColor !== "") {
      obj.avatarBackgroundBorderColor = message.avatarBackgroundBorderColor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_Border>, I>>(base?: I): User_Border {
    return User_Border.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_Border>, I>>(object: I): User_Border {
    const message = createBaseUser_Border();
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.level = object.level ?? "0";
    message.source = object.source ?? "";
    message.profileDecorationRibbon =
      (object.profileDecorationRibbon !== undefined && object.profileDecorationRibbon !== null)
        ? Image.fromPartial(object.profileDecorationRibbon)
        : undefined;
    message.avatarBackgroundColor = object.avatarBackgroundColor ?? "";
    message.avatarBackgroundBorderColor = object.avatarBackgroundBorderColor ?? "";
    return message;
  },
};

function createBaseUser_ComboBadgeInfo(): User_ComboBadgeInfo {
  return { icon: undefined, comboCount: "0" };
}

export const User_ComboBadgeInfoDecoder: MessageFns<User_ComboBadgeInfo> = {
  encode(message: User_ComboBadgeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
    }
    if (message.comboCount !== "0") {
      writer.uint32(16).int64(message.comboCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_ComboBadgeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_ComboBadgeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.comboCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_ComboBadgeInfo {
    return {
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      comboCount: isSet(object.comboCount) ? globalThis.String(object.comboCount) : "0",
    };
  },

  toJSON(message: User_ComboBadgeInfo): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.comboCount !== "0") {
      obj.comboCount = message.comboCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_ComboBadgeInfo>, I>>(base?: I): User_ComboBadgeInfo {
    return User_ComboBadgeInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_ComboBadgeInfo>, I>>(object: I): User_ComboBadgeInfo {
    const message = createBaseUser_ComboBadgeInfo();
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.comboCount = object.comboCount ?? "0";
    return message;
  },
};

function createBaseUser_EcommerceEntrance(): User_EcommerceEntrance {
  return { entranceType: 0, creatorType: 0, schema: "", shopEntranceInfo: undefined, showcaseEntranceInfo: undefined };
}

export const User_EcommerceEntranceDecoder: MessageFns<User_EcommerceEntrance> = {
  encode(message: User_EcommerceEntrance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entranceType !== 0) {
      writer.uint32(8).int32(message.entranceType);
    }
    if (message.creatorType !== 0) {
      writer.uint32(16).int32(message.creatorType);
    }
    if (message.schema !== "") {
      writer.uint32(26).string(message.schema);
    }
    if (message.shopEntranceInfo !== undefined) {
      User_EcommerceEntrance_ShopEntranceInfoDecoder.encode(message.shopEntranceInfo, writer.uint32(34).fork()).join();
    }
    if (message.showcaseEntranceInfo !== undefined) {
      User_EcommerceEntrance_ShowcaseEntranceInfoDecoder.encode(message.showcaseEntranceInfo, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_EcommerceEntrance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_EcommerceEntrance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.entranceType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creatorType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shopEntranceInfo = User_EcommerceEntrance_ShopEntranceInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.showcaseEntranceInfo = User_EcommerceEntrance_ShowcaseEntranceInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_EcommerceEntrance {
    return {
      entranceType: isSet(object.entranceType) ? user_EcommerceEntrance_EntranceTypeFromJSON(object.entranceType) : 0,
      creatorType: isSet(object.creatorType) ? user_EcommerceEntrance_CreatorTypeFromJSON(object.creatorType) : 0,
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      shopEntranceInfo: isSet(object.shopEntranceInfo)
        ? User_EcommerceEntrance_ShopEntranceInfo.fromJSON(object.shopEntranceInfo)
        : undefined,
      showcaseEntranceInfo: isSet(object.showcaseEntranceInfo)
        ? User_EcommerceEntrance_ShowcaseEntranceInfo.fromJSON(object.showcaseEntranceInfo)
        : undefined,
    };
  },

  toJSON(message: User_EcommerceEntrance): unknown {
    const obj: any = {};
    if (message.entranceType !== 0) {
      obj.entranceType = user_EcommerceEntrance_EntranceTypeToJSON(message.entranceType);
    }
    if (message.creatorType !== 0) {
      obj.creatorType = user_EcommerceEntrance_CreatorTypeToJSON(message.creatorType);
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.shopEntranceInfo !== undefined) {
      obj.shopEntranceInfo = User_EcommerceEntrance_ShopEntranceInfo.toJSON(message.shopEntranceInfo);
    }
    if (message.showcaseEntranceInfo !== undefined) {
      obj.showcaseEntranceInfo = User_EcommerceEntrance_ShowcaseEntranceInfo.toJSON(message.showcaseEntranceInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_EcommerceEntrance>, I>>(base?: I): User_EcommerceEntrance {
    return User_EcommerceEntrance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_EcommerceEntrance>, I>>(object: I): User_EcommerceEntrance {
    const message = createBaseUser_EcommerceEntrance();
    message.entranceType = object.entranceType ?? 0;
    message.creatorType = object.creatorType ?? 0;
    message.schema = object.schema ?? "";
    message.shopEntranceInfo = (object.shopEntranceInfo !== undefined && object.shopEntranceInfo !== null)
      ? User_EcommerceEntrance_ShopEntranceInfo.fromPartial(object.shopEntranceInfo)
      : undefined;
    message.showcaseEntranceInfo = (object.showcaseEntranceInfo !== undefined && object.showcaseEntranceInfo !== null)
      ? User_EcommerceEntrance_ShowcaseEntranceInfo.fromPartial(object.showcaseEntranceInfo)
      : undefined;
    return message;
  },
};

function createBaseUser_EcommerceEntrance_ShopEntranceInfo(): User_EcommerceEntrance_ShopEntranceInfo {
  return {
    shopId: "",
    shopName: "",
    shopRating: "",
    storeLabel: undefined,
    formatSoldCount: "",
    soldCount: "0",
    expRatePercentile: 0,
    expRateTopDisplay: "",
    rateDisplayStyle: 0,
    showRateNotApplicable: false,
  };
}

export const User_EcommerceEntrance_ShopEntranceInfoDecoder: MessageFns<User_EcommerceEntrance_ShopEntranceInfo> = {
  encode(message: User_EcommerceEntrance_ShopEntranceInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shopId !== "") {
      writer.uint32(10).string(message.shopId);
    }
    if (message.shopName !== "") {
      writer.uint32(18).string(message.shopName);
    }
    if (message.shopRating !== "") {
      writer.uint32(26).string(message.shopRating);
    }
    if (message.storeLabel !== undefined) {
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabelDecoder.encode(message.storeLabel, writer.uint32(34).fork()).join();
    }
    if (message.formatSoldCount !== "") {
      writer.uint32(42).string(message.formatSoldCount);
    }
    if (message.soldCount !== "0") {
      writer.uint32(48).int64(message.soldCount);
    }
    if (message.expRatePercentile !== 0) {
      writer.uint32(56).int32(message.expRatePercentile);
    }
    if (message.expRateTopDisplay !== "") {
      writer.uint32(66).string(message.expRateTopDisplay);
    }
    if (message.rateDisplayStyle !== 0) {
      writer.uint32(72).int32(message.rateDisplayStyle);
    }
    if (message.showRateNotApplicable !== false) {
      writer.uint32(80).bool(message.showRateNotApplicable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_EcommerceEntrance_ShopEntranceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shopId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shopName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shopRating = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storeLabel = User_EcommerceEntrance_ShopEntranceInfo_StoreLabelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.formatSoldCount = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.soldCount = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.expRatePercentile = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.expRateTopDisplay = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.rateDisplayStyle = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.showRateNotApplicable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_EcommerceEntrance_ShopEntranceInfo {
    return {
      shopId: isSet(object.shopId) ? globalThis.String(object.shopId) : "",
      shopName: isSet(object.shopName) ? globalThis.String(object.shopName) : "",
      shopRating: isSet(object.shopRating) ? globalThis.String(object.shopRating) : "",
      storeLabel: isSet(object.storeLabel)
        ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel.fromJSON(object.storeLabel)
        : undefined,
      formatSoldCount: isSet(object.formatSoldCount) ? globalThis.String(object.formatSoldCount) : "",
      soldCount: isSet(object.soldCount) ? globalThis.String(object.soldCount) : "0",
      expRatePercentile: isSet(object.expRatePercentile) ? globalThis.Number(object.expRatePercentile) : 0,
      expRateTopDisplay: isSet(object.expRateTopDisplay) ? globalThis.String(object.expRateTopDisplay) : "",
      rateDisplayStyle: isSet(object.rateDisplayStyle) ? globalThis.Number(object.rateDisplayStyle) : 0,
      showRateNotApplicable: isSet(object.showRateNotApplicable)
        ? globalThis.Boolean(object.showRateNotApplicable)
        : false,
    };
  },

  toJSON(message: User_EcommerceEntrance_ShopEntranceInfo): unknown {
    const obj: any = {};
    if (message.shopId !== "") {
      obj.shopId = message.shopId;
    }
    if (message.shopName !== "") {
      obj.shopName = message.shopName;
    }
    if (message.shopRating !== "") {
      obj.shopRating = message.shopRating;
    }
    if (message.storeLabel !== undefined) {
      obj.storeLabel = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel.toJSON(message.storeLabel);
    }
    if (message.formatSoldCount !== "") {
      obj.formatSoldCount = message.formatSoldCount;
    }
    if (message.soldCount !== "0") {
      obj.soldCount = message.soldCount;
    }
    if (message.expRatePercentile !== 0) {
      obj.expRatePercentile = Math.round(message.expRatePercentile);
    }
    if (message.expRateTopDisplay !== "") {
      obj.expRateTopDisplay = message.expRateTopDisplay;
    }
    if (message.rateDisplayStyle !== 0) {
      obj.rateDisplayStyle = Math.round(message.rateDisplayStyle);
    }
    if (message.showRateNotApplicable !== false) {
      obj.showRateNotApplicable = message.showRateNotApplicable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_EcommerceEntrance_ShopEntranceInfo>, I>>(
    base?: I,
  ): User_EcommerceEntrance_ShopEntranceInfo {
    return User_EcommerceEntrance_ShopEntranceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_EcommerceEntrance_ShopEntranceInfo>, I>>(
    object: I,
  ): User_EcommerceEntrance_ShopEntranceInfo {
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo();
    message.shopId = object.shopId ?? "";
    message.shopName = object.shopName ?? "";
    message.shopRating = object.shopRating ?? "";
    message.storeLabel = (object.storeLabel !== undefined && object.storeLabel !== null)
      ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel.fromPartial(object.storeLabel)
      : undefined;
    message.formatSoldCount = object.formatSoldCount ?? "";
    message.soldCount = object.soldCount ?? "0";
    message.expRatePercentile = object.expRatePercentile ?? 0;
    message.expRateTopDisplay = object.expRateTopDisplay ?? "";
    message.rateDisplayStyle = object.rateDisplayStyle ?? 0;
    message.showRateNotApplicable = object.showRateNotApplicable ?? false;
    return message;
  },
};

function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel(): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
  return { officialLabel: undefined, isBytemall: false };
}

export const User_EcommerceEntrance_ShopEntranceInfo_StoreLabelDecoder: MessageFns<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel> = {
  encode(
    message: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.officialLabel !== undefined) {
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabelDecoder.encode(
        message.officialLabel,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.isBytemall !== false) {
      writer.uint32(16).bool(message.isBytemall);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.officialLabel = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabelDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isBytemall = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
    return {
      officialLabel: isSet(object.officialLabel)
        ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel.fromJSON(object.officialLabel)
        : undefined,
      isBytemall: isSet(object.isBytemall) ? globalThis.Boolean(object.isBytemall) : false,
    };
  },

  toJSON(message: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel): unknown {
    const obj: any = {};
    if (message.officialLabel !== undefined) {
      obj.officialLabel = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel.toJSON(
        message.officialLabel,
      );
    }
    if (message.isBytemall !== false) {
      obj.isBytemall = message.isBytemall;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel>, I>>(
    base?: I,
  ): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
    return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel>, I>>(
    object: I,
  ): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel();
    message.officialLabel = (object.officialLabel !== undefined && object.officialLabel !== null)
      ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel.fromPartial(object.officialLabel)
      : undefined;
    message.isBytemall = object.isBytemall ?? false;
    return message;
  },
};

function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel(): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
  return { labelImageLight: undefined, labelImageDark: undefined, labelType: "0", labelTypeStr: "" };
}

export const User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabelDecoder: MessageFns<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel> = {
  encode(
    message: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.labelImageLight !== undefined) {
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.encode(
        message.labelImageLight,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.labelImageDark !== undefined) {
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.encode(
        message.labelImageDark,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.labelType !== "0") {
      writer.uint32(24).int64(message.labelType);
    }
    if (message.labelTypeStr !== "") {
      writer.uint32(34).string(message.labelTypeStr);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.labelImageLight = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.labelImageDark = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.labelType = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.labelTypeStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
    return {
      labelImageLight: isSet(object.labelImageLight)
        ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.fromJSON(
          object.labelImageLight,
        )
        : undefined,
      labelImageDark: isSet(object.labelImageDark)
        ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.fromJSON(
          object.labelImageDark,
        )
        : undefined,
      labelType: isSet(object.labelType) ? globalThis.String(object.labelType) : "0",
      labelTypeStr: isSet(object.labelTypeStr) ? globalThis.String(object.labelTypeStr) : "",
    };
  },

  toJSON(message: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel): unknown {
    const obj: any = {};
    if (message.labelImageLight !== undefined) {
      obj.labelImageLight = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.toJSON(
        message.labelImageLight,
      );
    }
    if (message.labelImageDark !== undefined) {
      obj.labelImageDark = User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.toJSON(
        message.labelImageDark,
      );
    }
    if (message.labelType !== "0") {
      obj.labelType = message.labelType;
    }
    if (message.labelTypeStr !== "") {
      obj.labelTypeStr = message.labelTypeStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel>, I>>(
    base?: I,
  ): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
    return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel>, I>>(
    object: I,
  ): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel();
    message.labelImageLight = (object.labelImageLight !== undefined && object.labelImageLight !== null)
      ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.fromPartial(
        object.labelImageLight,
      )
      : undefined;
    message.labelImageDark = (object.labelImageDark !== undefined && object.labelImageDark !== null)
      ? User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.fromPartial(
        object.labelImageDark,
      )
      : undefined;
    message.labelType = object.labelType ?? "0";
    message.labelTypeStr = object.labelTypeStr ?? "";
    return message;
  },
};

function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage(): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
  return { height: 0, width: 0, minetype: "", thumbUri: "", thumbUriList: [], uri: "", urlList: [], color: "" };
}

export const User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder: MessageFns<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage> = {
  encode(
    message: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).int32(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(16).int32(message.width);
    }
    if (message.minetype !== "") {
      writer.uint32(26).string(message.minetype);
    }
    if (message.thumbUri !== "") {
      writer.uint32(34).string(message.thumbUri);
    }
    for (const v of message.thumbUriList) {
      writer.uint32(42).string(v!);
    }
    if (message.uri !== "") {
      writer.uint32(50).string(message.uri);
    }
    for (const v of message.urlList) {
      writer.uint32(58).string(v!);
    }
    if (message.color !== "") {
      writer.uint32(66).string(message.color);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.minetype = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.thumbUri = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.thumbUriList.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.urlList.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.color = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      minetype: isSet(object.minetype) ? globalThis.String(object.minetype) : "",
      thumbUri: isSet(object.thumbUri) ? globalThis.String(object.thumbUri) : "",
      thumbUriList: globalThis.Array.isArray(object?.thumbUriList)
        ? object.thumbUriList.map((e: any) => globalThis.String(e))
        : [],
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      urlList: globalThis.Array.isArray(object?.urlList) ? object.urlList.map((e: any) => globalThis.String(e)) : [],
      color: isSet(object.color) ? globalThis.String(object.color) : "",
    };
  },

  toJSON(message: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.minetype !== "") {
      obj.minetype = message.minetype;
    }
    if (message.thumbUri !== "") {
      obj.thumbUri = message.thumbUri;
    }
    if (message.thumbUriList?.length) {
      obj.thumbUriList = message.thumbUriList;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.urlList?.length) {
      obj.urlList = message.urlList;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage>,
      I
    >,
  >(base?: I): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
    return User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage>,
      I
    >,
  >(object: I): User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
    const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage();
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    message.minetype = object.minetype ?? "";
    message.thumbUri = object.thumbUri ?? "";
    message.thumbUriList = object.thumbUriList?.map((e) => e) || [];
    message.uri = object.uri ?? "";
    message.urlList = object.urlList?.map((e) => e) || [];
    message.color = object.color ?? "";
    return message;
  },
};

function createBaseUser_EcommerceEntrance_ShowcaseEntranceInfo(): User_EcommerceEntrance_ShowcaseEntranceInfo {
  return { formatSoldCount: "", soldCount: "0" };
}

export const User_EcommerceEntrance_ShowcaseEntranceInfoDecoder: MessageFns<User_EcommerceEntrance_ShowcaseEntranceInfo> = {
  encode(
    message: User_EcommerceEntrance_ShowcaseEntranceInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.formatSoldCount !== "") {
      writer.uint32(10).string(message.formatSoldCount);
    }
    if (message.soldCount !== "0") {
      writer.uint32(16).int64(message.soldCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_EcommerceEntrance_ShowcaseEntranceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_EcommerceEntrance_ShowcaseEntranceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.formatSoldCount = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.soldCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_EcommerceEntrance_ShowcaseEntranceInfo {
    return {
      formatSoldCount: isSet(object.formatSoldCount) ? globalThis.String(object.formatSoldCount) : "",
      soldCount: isSet(object.soldCount) ? globalThis.String(object.soldCount) : "0",
    };
  },

  toJSON(message: User_EcommerceEntrance_ShowcaseEntranceInfo): unknown {
    const obj: any = {};
    if (message.formatSoldCount !== "") {
      obj.formatSoldCount = message.formatSoldCount;
    }
    if (message.soldCount !== "0") {
      obj.soldCount = message.soldCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_EcommerceEntrance_ShowcaseEntranceInfo>, I>>(
    base?: I,
  ): User_EcommerceEntrance_ShowcaseEntranceInfo {
    return User_EcommerceEntrance_ShowcaseEntranceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_EcommerceEntrance_ShowcaseEntranceInfo>, I>>(
    object: I,
  ): User_EcommerceEntrance_ShowcaseEntranceInfo {
    const message = createBaseUser_EcommerceEntrance_ShowcaseEntranceInfo();
    message.formatSoldCount = object.formatSoldCount ?? "";
    message.soldCount = object.soldCount ?? "0";
    return message;
  },
};

function createBaseUser_FansClub(): User_FansClub {
  return { data: undefined };
}

export const User_FansClubDecoder: MessageFns<User_FansClub> = {
  encode(message: User_FansClub, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      User_FansClub_FansClubDataDecoder.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_FansClub {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_FansClub();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = User_FansClub_FansClubDataDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_FansClub {
    return { data: isSet(object.data) ? User_FansClub_FansClubData.fromJSON(object.data) : undefined };
  },

  toJSON(message: User_FansClub): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = User_FansClub_FansClubData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_FansClub>, I>>(base?: I): User_FansClub {
    return User_FansClub.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_FansClub>, I>>(object: I): User_FansClub {
    const message = createBaseUser_FansClub();
    message.data = (object.data !== undefined && object.data !== null)
      ? User_FansClub_FansClubData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUser_FansClub_FansClubData(): User_FansClub_FansClubData {
  return { clubName: "", level: 0, userFansClubStatus: 0, availableGiftIdsList: [], anchorId: "0" };
}

export const User_FansClub_FansClubDataDecoder: MessageFns<User_FansClub_FansClubData> = {
  encode(message: User_FansClub_FansClubData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clubName !== "") {
      writer.uint32(10).string(message.clubName);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    if (message.userFansClubStatus !== 0) {
      writer.uint32(24).int32(message.userFansClubStatus);
    }
    writer.uint32(42).fork();
    for (const v of message.availableGiftIdsList) {
      writer.int64(v);
    }
    writer.join();
    if (message.anchorId !== "0") {
      writer.uint32(48).int64(message.anchorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_FansClub_FansClubData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_FansClub_FansClubData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clubName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userFansClubStatus = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.availableGiftIdsList.push(reader.int64().toString());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.availableGiftIdsList.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.anchorId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_FansClub_FansClubData {
    return {
      clubName: isSet(object.clubName) ? globalThis.String(object.clubName) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      userFansClubStatus: isSet(object.userFansClubStatus)
        ? user_FansClub_FansClubData_UserFansClubStatusFromJSON(object.userFansClubStatus)
        : 0,
      availableGiftIdsList: globalThis.Array.isArray(object?.availableGiftIdsList)
        ? object.availableGiftIdsList.map((e: any) => globalThis.String(e))
        : [],
      anchorId: isSet(object.anchorId) ? globalThis.String(object.anchorId) : "0",
    };
  },

  toJSON(message: User_FansClub_FansClubData): unknown {
    const obj: any = {};
    if (message.clubName !== "") {
      obj.clubName = message.clubName;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.userFansClubStatus !== 0) {
      obj.userFansClubStatus = user_FansClub_FansClubData_UserFansClubStatusToJSON(message.userFansClubStatus);
    }
    if (message.availableGiftIdsList?.length) {
      obj.availableGiftIdsList = message.availableGiftIdsList;
    }
    if (message.anchorId !== "0") {
      obj.anchorId = message.anchorId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_FansClub_FansClubData>, I>>(base?: I): User_FansClub_FansClubData {
    return User_FansClub_FansClubData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_FansClub_FansClubData>, I>>(object: I): User_FansClub_FansClubData {
    const message = createBaseUser_FansClub_FansClubData();
    message.clubName = object.clubName ?? "";
    message.level = object.level ?? 0;
    message.userFansClubStatus = object.userFansClubStatus ?? 0;
    message.availableGiftIdsList = object.availableGiftIdsList?.map((e) => e) || [];
    message.anchorId = object.anchorId ?? "0";
    return message;
  },
};

function createBaseUser_FansClubInfo(): User_FansClubInfo {
  return { isSleeping: false, fansLevel: "0", fansScore: "0", badge: undefined, fansCount: "0", fansClubName: "" };
}

export const User_FansClubInfoDecoder: MessageFns<User_FansClubInfo> = {
  encode(message: User_FansClubInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isSleeping !== false) {
      writer.uint32(8).bool(message.isSleeping);
    }
    if (message.fansLevel !== "0") {
      writer.uint32(16).int64(message.fansLevel);
    }
    if (message.fansScore !== "0") {
      writer.uint32(24).int64(message.fansScore);
    }
    if (message.badge !== undefined) {
      ImageDecoder.encode(message.badge, writer.uint32(34).fork()).join();
    }
    if (message.fansCount !== "0") {
      writer.uint32(40).int64(message.fansCount);
    }
    if (message.fansClubName !== "") {
      writer.uint32(50).string(message.fansClubName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_FansClubInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_FansClubInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isSleeping = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fansLevel = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fansScore = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.badge = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fansCount = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fansClubName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_FansClubInfo {
    return {
      isSleeping: isSet(object.isSleeping) ? globalThis.Boolean(object.isSleeping) : false,
      fansLevel: isSet(object.fansLevel) ? globalThis.String(object.fansLevel) : "0",
      fansScore: isSet(object.fansScore) ? globalThis.String(object.fansScore) : "0",
      badge: isSet(object.badge) ? Image.fromJSON(object.badge) : undefined,
      fansCount: isSet(object.fansCount) ? globalThis.String(object.fansCount) : "0",
      fansClubName: isSet(object.fansClubName) ? globalThis.String(object.fansClubName) : "",
    };
  },

  toJSON(message: User_FansClubInfo): unknown {
    const obj: any = {};
    if (message.isSleeping !== false) {
      obj.isSleeping = message.isSleeping;
    }
    if (message.fansLevel !== "0") {
      obj.fansLevel = message.fansLevel;
    }
    if (message.fansScore !== "0") {
      obj.fansScore = message.fansScore;
    }
    if (message.badge !== undefined) {
      obj.badge = Image.toJSON(message.badge);
    }
    if (message.fansCount !== "0") {
      obj.fansCount = message.fansCount;
    }
    if (message.fansClubName !== "") {
      obj.fansClubName = message.fansClubName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_FansClubInfo>, I>>(base?: I): User_FansClubInfo {
    return User_FansClubInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_FansClubInfo>, I>>(object: I): User_FansClubInfo {
    const message = createBaseUser_FansClubInfo();
    message.isSleeping = object.isSleeping ?? false;
    message.fansLevel = object.fansLevel ?? "0";
    message.fansScore = object.fansScore ?? "0";
    message.badge = (object.badge !== undefined && object.badge !== null) ? Image.fromPartial(object.badge) : undefined;
    message.fansCount = object.fansCount ?? "0";
    message.fansClubName = object.fansClubName ?? "";
    return message;
  },
};

function createBaseUser_FollowInfo(): User_FollowInfo {
  return { followingCount: "0", followerCount: "0", followStatus: "0", pushStatus: "0" };
}

export const User_FollowInfoDecoder: MessageFns<User_FollowInfo> = {
  encode(message: User_FollowInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.followingCount !== "0") {
      writer.uint32(8).int64(message.followingCount);
    }
    if (message.followerCount !== "0") {
      writer.uint32(16).int64(message.followerCount);
    }
    if (message.followStatus !== "0") {
      writer.uint32(24).int64(message.followStatus);
    }
    if (message.pushStatus !== "0") {
      writer.uint32(32).int64(message.pushStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_FollowInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_FollowInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.followingCount = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.followerCount = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.followStatus = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pushStatus = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_FollowInfo {
    return {
      followingCount: isSet(object.followingCount) ? globalThis.String(object.followingCount) : "0",
      followerCount: isSet(object.followerCount) ? globalThis.String(object.followerCount) : "0",
      followStatus: isSet(object.followStatus) ? globalThis.String(object.followStatus) : "0",
      pushStatus: isSet(object.pushStatus) ? globalThis.String(object.pushStatus) : "0",
    };
  },

  toJSON(message: User_FollowInfo): unknown {
    const obj: any = {};
    if (message.followingCount !== "0") {
      obj.followingCount = message.followingCount;
    }
    if (message.followerCount !== "0") {
      obj.followerCount = message.followerCount;
    }
    if (message.followStatus !== "0") {
      obj.followStatus = message.followStatus;
    }
    if (message.pushStatus !== "0") {
      obj.pushStatus = message.pushStatus;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_FollowInfo>, I>>(base?: I): User_FollowInfo {
    return User_FollowInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_FollowInfo>, I>>(object: I): User_FollowInfo {
    const message = createBaseUser_FollowInfo();
    message.followingCount = object.followingCount ?? "0";
    message.followerCount = object.followerCount ?? "0";
    message.followStatus = object.followStatus ?? "0";
    message.pushStatus = object.pushStatus ?? "0";
    return message;
  },
};

function createBaseUser_OwnRoom(): User_OwnRoom {
  return { roomIdsList: [], roomIdsStrList: [] };
}

export const User_OwnRoomDecoder: MessageFns<User_OwnRoom> = {
  encode(message: User_OwnRoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.roomIdsList) {
      writer.int64(v);
    }
    writer.join();
    for (const v of message.roomIdsStrList) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_OwnRoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_OwnRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.roomIdsList.push(reader.int64().toString());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.roomIdsList.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roomIdsStrList.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_OwnRoom {
    return {
      roomIdsList: globalThis.Array.isArray(object?.roomIdsList)
        ? object.roomIdsList.map((e: any) => globalThis.String(e))
        : [],
      roomIdsStrList: globalThis.Array.isArray(object?.roomIdsStrList)
        ? object.roomIdsStrList.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: User_OwnRoom): unknown {
    const obj: any = {};
    if (message.roomIdsList?.length) {
      obj.roomIdsList = message.roomIdsList;
    }
    if (message.roomIdsStrList?.length) {
      obj.roomIdsStrList = message.roomIdsStrList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_OwnRoom>, I>>(base?: I): User_OwnRoom {
    return User_OwnRoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_OwnRoom>, I>>(object: I): User_OwnRoom {
    const message = createBaseUser_OwnRoom();
    message.roomIdsList = object.roomIdsList?.map((e) => e) || [];
    message.roomIdsStrList = object.roomIdsStrList?.map((e) => e) || [];
    return message;
  },
};

function createBaseUser_PayGrade(): User_PayGrade {
  return {
    diamondIcon: undefined,
    name: "",
    icon: undefined,
    nextName: "",
    level: "0",
    nextIcon: undefined,
    gradeDescribe: "",
    gradeIconList: [],
    screenChatType: "0",
    imIcon: undefined,
    imIconWithLevel: undefined,
    liveIcon: undefined,
    newImIconWithLevel: undefined,
    newLiveIcon: undefined,
    upgradeNeedConsume: "0",
    nextPrivileges: "",
    background: undefined,
    backgroundBack: undefined,
    score: "0",
    gradeBanner: "",
    profileDialogBg: undefined,
    profileDialogBgBack: undefined,
  };
}

export const User_PayGradeDecoder: MessageFns<User_PayGrade> = {
  encode(message: User_PayGrade, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.diamondIcon !== undefined) {
      ImageDecoder.encode(message.diamondIcon, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(34).fork()).join();
    }
    if (message.nextName !== "") {
      writer.uint32(42).string(message.nextName);
    }
    if (message.level !== "0") {
      writer.uint32(48).int64(message.level);
    }
    if (message.nextIcon !== undefined) {
      ImageDecoder.encode(message.nextIcon, writer.uint32(58).fork()).join();
    }
    if (message.gradeDescribe !== "") {
      writer.uint32(106).string(message.gradeDescribe);
    }
    for (const v of message.gradeIconList) {
      GradeIconDecoder.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.screenChatType !== "0") {
      writer.uint32(120).int64(message.screenChatType);
    }
    if (message.imIcon !== undefined) {
      ImageDecoder.encode(message.imIcon, writer.uint32(130).fork()).join();
    }
    if (message.imIconWithLevel !== undefined) {
      ImageDecoder.encode(message.imIconWithLevel, writer.uint32(138).fork()).join();
    }
    if (message.liveIcon !== undefined) {
      ImageDecoder.encode(message.liveIcon, writer.uint32(146).fork()).join();
    }
    if (message.newImIconWithLevel !== undefined) {
      ImageDecoder.encode(message.newImIconWithLevel, writer.uint32(154).fork()).join();
    }
    if (message.newLiveIcon !== undefined) {
      ImageDecoder.encode(message.newLiveIcon, writer.uint32(162).fork()).join();
    }
    if (message.upgradeNeedConsume !== "0") {
      writer.uint32(168).int64(message.upgradeNeedConsume);
    }
    if (message.nextPrivileges !== "") {
      writer.uint32(178).string(message.nextPrivileges);
    }
    if (message.background !== undefined) {
      ImageDecoder.encode(message.background, writer.uint32(186).fork()).join();
    }
    if (message.backgroundBack !== undefined) {
      ImageDecoder.encode(message.backgroundBack, writer.uint32(194).fork()).join();
    }
    if (message.score !== "0") {
      writer.uint32(200).int64(message.score);
    }
    if (message.gradeBanner !== "") {
      writer.uint32(8010).string(message.gradeBanner);
    }
    if (message.profileDialogBg !== undefined) {
      ImageDecoder.encode(message.profileDialogBg, writer.uint32(8018).fork()).join();
    }
    if (message.profileDialogBgBack !== undefined) {
      ImageDecoder.encode(message.profileDialogBgBack, writer.uint32(8026).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_PayGrade {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_PayGrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diamondIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nextName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nextIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.gradeDescribe = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.gradeIconList.push(GradeIconDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.screenChatType = reader.int64().toString();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.imIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.imIconWithLevel = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.liveIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.newImIconWithLevel = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.newLiveIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.upgradeNeedConsume = reader.int64().toString();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.nextPrivileges = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.background = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.backgroundBack = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.score = reader.int64().toString();
          continue;
        }
        case 1001: {
          if (tag !== 8010) {
            break;
          }

          message.gradeBanner = reader.string();
          continue;
        }
        case 1002: {
          if (tag !== 8018) {
            break;
          }

          message.profileDialogBg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 1003: {
          if (tag !== 8026) {
            break;
          }

          message.profileDialogBgBack = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_PayGrade {
    return {
      diamondIcon: isSet(object.diamondIcon) ? Image.fromJSON(object.diamondIcon) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      nextName: isSet(object.nextName) ? globalThis.String(object.nextName) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
      nextIcon: isSet(object.nextIcon) ? Image.fromJSON(object.nextIcon) : undefined,
      gradeDescribe: isSet(object.gradeDescribe) ? globalThis.String(object.gradeDescribe) : "",
      gradeIconList: globalThis.Array.isArray(object?.gradeIconList)
        ? object.gradeIconList.map((e: any) => GradeIcon.fromJSON(e))
        : [],
      screenChatType: isSet(object.screenChatType) ? globalThis.String(object.screenChatType) : "0",
      imIcon: isSet(object.imIcon) ? Image.fromJSON(object.imIcon) : undefined,
      imIconWithLevel: isSet(object.imIconWithLevel) ? Image.fromJSON(object.imIconWithLevel) : undefined,
      liveIcon: isSet(object.liveIcon) ? Image.fromJSON(object.liveIcon) : undefined,
      newImIconWithLevel: isSet(object.newImIconWithLevel) ? Image.fromJSON(object.newImIconWithLevel) : undefined,
      newLiveIcon: isSet(object.newLiveIcon) ? Image.fromJSON(object.newLiveIcon) : undefined,
      upgradeNeedConsume: isSet(object.upgradeNeedConsume) ? globalThis.String(object.upgradeNeedConsume) : "0",
      nextPrivileges: isSet(object.nextPrivileges) ? globalThis.String(object.nextPrivileges) : "",
      background: isSet(object.background) ? Image.fromJSON(object.background) : undefined,
      backgroundBack: isSet(object.backgroundBack) ? Image.fromJSON(object.backgroundBack) : undefined,
      score: isSet(object.score) ? globalThis.String(object.score) : "0",
      gradeBanner: isSet(object.gradeBanner) ? globalThis.String(object.gradeBanner) : "",
      profileDialogBg: isSet(object.profileDialogBg) ? Image.fromJSON(object.profileDialogBg) : undefined,
      profileDialogBgBack: isSet(object.profileDialogBgBack) ? Image.fromJSON(object.profileDialogBgBack) : undefined,
    };
  },

  toJSON(message: User_PayGrade): unknown {
    const obj: any = {};
    if (message.diamondIcon !== undefined) {
      obj.diamondIcon = Image.toJSON(message.diamondIcon);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.nextName !== "") {
      obj.nextName = message.nextName;
    }
    if (message.level !== "0") {
      obj.level = message.level;
    }
    if (message.nextIcon !== undefined) {
      obj.nextIcon = Image.toJSON(message.nextIcon);
    }
    if (message.gradeDescribe !== "") {
      obj.gradeDescribe = message.gradeDescribe;
    }
    if (message.gradeIconList?.length) {
      obj.gradeIconList = message.gradeIconList.map((e) => GradeIcon.toJSON(e));
    }
    if (message.screenChatType !== "0") {
      obj.screenChatType = message.screenChatType;
    }
    if (message.imIcon !== undefined) {
      obj.imIcon = Image.toJSON(message.imIcon);
    }
    if (message.imIconWithLevel !== undefined) {
      obj.imIconWithLevel = Image.toJSON(message.imIconWithLevel);
    }
    if (message.liveIcon !== undefined) {
      obj.liveIcon = Image.toJSON(message.liveIcon);
    }
    if (message.newImIconWithLevel !== undefined) {
      obj.newImIconWithLevel = Image.toJSON(message.newImIconWithLevel);
    }
    if (message.newLiveIcon !== undefined) {
      obj.newLiveIcon = Image.toJSON(message.newLiveIcon);
    }
    if (message.upgradeNeedConsume !== "0") {
      obj.upgradeNeedConsume = message.upgradeNeedConsume;
    }
    if (message.nextPrivileges !== "") {
      obj.nextPrivileges = message.nextPrivileges;
    }
    if (message.background !== undefined) {
      obj.background = Image.toJSON(message.background);
    }
    if (message.backgroundBack !== undefined) {
      obj.backgroundBack = Image.toJSON(message.backgroundBack);
    }
    if (message.score !== "0") {
      obj.score = message.score;
    }
    if (message.gradeBanner !== "") {
      obj.gradeBanner = message.gradeBanner;
    }
    if (message.profileDialogBg !== undefined) {
      obj.profileDialogBg = Image.toJSON(message.profileDialogBg);
    }
    if (message.profileDialogBgBack !== undefined) {
      obj.profileDialogBgBack = Image.toJSON(message.profileDialogBgBack);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_PayGrade>, I>>(base?: I): User_PayGrade {
    return User_PayGrade.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_PayGrade>, I>>(object: I): User_PayGrade {
    const message = createBaseUser_PayGrade();
    message.diamondIcon = (object.diamondIcon !== undefined && object.diamondIcon !== null)
      ? Image.fromPartial(object.diamondIcon)
      : undefined;
    message.name = object.name ?? "";
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.nextName = object.nextName ?? "";
    message.level = object.level ?? "0";
    message.nextIcon = (object.nextIcon !== undefined && object.nextIcon !== null)
      ? Image.fromPartial(object.nextIcon)
      : undefined;
    message.gradeDescribe = object.gradeDescribe ?? "";
    message.gradeIconList = object.gradeIconList?.map((e) => GradeIcon.fromPartial(e)) || [];
    message.screenChatType = object.screenChatType ?? "0";
    message.imIcon = (object.imIcon !== undefined && object.imIcon !== null)
      ? Image.fromPartial(object.imIcon)
      : undefined;
    message.imIconWithLevel = (object.imIconWithLevel !== undefined && object.imIconWithLevel !== null)
      ? Image.fromPartial(object.imIconWithLevel)
      : undefined;
    message.liveIcon = (object.liveIcon !== undefined && object.liveIcon !== null)
      ? Image.fromPartial(object.liveIcon)
      : undefined;
    message.newImIconWithLevel = (object.newImIconWithLevel !== undefined && object.newImIconWithLevel !== null)
      ? Image.fromPartial(object.newImIconWithLevel)
      : undefined;
    message.newLiveIcon = (object.newLiveIcon !== undefined && object.newLiveIcon !== null)
      ? Image.fromPartial(object.newLiveIcon)
      : undefined;
    message.upgradeNeedConsume = object.upgradeNeedConsume ?? "0";
    message.nextPrivileges = object.nextPrivileges ?? "";
    message.background = (object.background !== undefined && object.background !== null)
      ? Image.fromPartial(object.background)
      : undefined;
    message.backgroundBack = (object.backgroundBack !== undefined && object.backgroundBack !== null)
      ? Image.fromPartial(object.backgroundBack)
      : undefined;
    message.score = object.score ?? "0";
    message.gradeBanner = object.gradeBanner ?? "";
    message.profileDialogBg = (object.profileDialogBg !== undefined && object.profileDialogBg !== null)
      ? Image.fromPartial(object.profileDialogBg)
      : undefined;
    message.profileDialogBgBack = (object.profileDialogBgBack !== undefined && object.profileDialogBgBack !== null)
      ? Image.fromPartial(object.profileDialogBgBack)
      : undefined;
    return message;
  },
};

function createBaseUser_SubscribeBadge(): User_SubscribeBadge {
  return { originImg: undefined, previewImg: undefined };
}

export const User_SubscribeBadgeDecoder: MessageFns<User_SubscribeBadge> = {
  encode(message: User_SubscribeBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originImg !== undefined) {
      ImageDecoder.encode(message.originImg, writer.uint32(26).fork()).join();
    }
    if (message.previewImg !== undefined) {
      ImageDecoder.encode(message.previewImg, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_SubscribeBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_SubscribeBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.originImg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.previewImg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_SubscribeBadge {
    return {
      originImg: isSet(object.originImg) ? Image.fromJSON(object.originImg) : undefined,
      previewImg: isSet(object.previewImg) ? Image.fromJSON(object.previewImg) : undefined,
    };
  },

  toJSON(message: User_SubscribeBadge): unknown {
    const obj: any = {};
    if (message.originImg !== undefined) {
      obj.originImg = Image.toJSON(message.originImg);
    }
    if (message.previewImg !== undefined) {
      obj.previewImg = Image.toJSON(message.previewImg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_SubscribeBadge>, I>>(base?: I): User_SubscribeBadge {
    return User_SubscribeBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_SubscribeBadge>, I>>(object: I): User_SubscribeBadge {
    const message = createBaseUser_SubscribeBadge();
    message.originImg = (object.originImg !== undefined && object.originImg !== null)
      ? Image.fromPartial(object.originImg)
      : undefined;
    message.previewImg = (object.previewImg !== undefined && object.previewImg !== null)
      ? Image.fromPartial(object.previewImg)
      : undefined;
    return message;
  },
};

function createBaseUser_SubscribeInfo(): User_SubscribeInfo {
  return {
    qualification: false,
    isSubscribe: false,
    badge: undefined,
    enableSubscription: false,
    subscriberCount: "0",
    isInGracePeriod: false,
    isSubscribedToAnchor: false,
    userGiftSubAuth: false,
    anchorGiftSubAuth: false,
  };
}

export const User_SubscribeInfoDecoder: MessageFns<User_SubscribeInfo> = {
  encode(message: User_SubscribeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.qualification !== false) {
      writer.uint32(8).bool(message.qualification);
    }
    if (message.isSubscribe !== false) {
      writer.uint32(16).bool(message.isSubscribe);
    }
    if (message.badge !== undefined) {
      User_SubscribeBadgeDecoder.encode(message.badge, writer.uint32(26).fork()).join();
    }
    if (message.enableSubscription !== false) {
      writer.uint32(32).bool(message.enableSubscription);
    }
    if (message.subscriberCount !== "0") {
      writer.uint32(40).int64(message.subscriberCount);
    }
    if (message.isInGracePeriod !== false) {
      writer.uint32(48).bool(message.isInGracePeriod);
    }
    if (message.isSubscribedToAnchor !== false) {
      writer.uint32(56).bool(message.isSubscribedToAnchor);
    }
    if (message.userGiftSubAuth !== false) {
      writer.uint32(72).bool(message.userGiftSubAuth);
    }
    if (message.anchorGiftSubAuth !== false) {
      writer.uint32(80).bool(message.anchorGiftSubAuth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_SubscribeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_SubscribeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.qualification = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isSubscribe = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.badge = User_SubscribeBadgeDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableSubscription = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.subscriberCount = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isInGracePeriod = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isSubscribedToAnchor = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.userGiftSubAuth = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.anchorGiftSubAuth = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_SubscribeInfo {
    return {
      qualification: isSet(object.qualification) ? globalThis.Boolean(object.qualification) : false,
      isSubscribe: isSet(object.isSubscribe) ? globalThis.Boolean(object.isSubscribe) : false,
      badge: isSet(object.badge) ? User_SubscribeBadge.fromJSON(object.badge) : undefined,
      enableSubscription: isSet(object.enableSubscription) ? globalThis.Boolean(object.enableSubscription) : false,
      subscriberCount: isSet(object.subscriberCount) ? globalThis.String(object.subscriberCount) : "0",
      isInGracePeriod: isSet(object.isInGracePeriod) ? globalThis.Boolean(object.isInGracePeriod) : false,
      isSubscribedToAnchor: isSet(object.isSubscribedToAnchor)
        ? globalThis.Boolean(object.isSubscribedToAnchor)
        : false,
      userGiftSubAuth: isSet(object.userGiftSubAuth) ? globalThis.Boolean(object.userGiftSubAuth) : false,
      anchorGiftSubAuth: isSet(object.anchorGiftSubAuth) ? globalThis.Boolean(object.anchorGiftSubAuth) : false,
    };
  },

  toJSON(message: User_SubscribeInfo): unknown {
    const obj: any = {};
    if (message.qualification !== false) {
      obj.qualification = message.qualification;
    }
    if (message.isSubscribe !== false) {
      obj.isSubscribe = message.isSubscribe;
    }
    if (message.badge !== undefined) {
      obj.badge = User_SubscribeBadge.toJSON(message.badge);
    }
    if (message.enableSubscription !== false) {
      obj.enableSubscription = message.enableSubscription;
    }
    if (message.subscriberCount !== "0") {
      obj.subscriberCount = message.subscriberCount;
    }
    if (message.isInGracePeriod !== false) {
      obj.isInGracePeriod = message.isInGracePeriod;
    }
    if (message.isSubscribedToAnchor !== false) {
      obj.isSubscribedToAnchor = message.isSubscribedToAnchor;
    }
    if (message.userGiftSubAuth !== false) {
      obj.userGiftSubAuth = message.userGiftSubAuth;
    }
    if (message.anchorGiftSubAuth !== false) {
      obj.anchorGiftSubAuth = message.anchorGiftSubAuth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_SubscribeInfo>, I>>(base?: I): User_SubscribeInfo {
    return User_SubscribeInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_SubscribeInfo>, I>>(object: I): User_SubscribeInfo {
    const message = createBaseUser_SubscribeInfo();
    message.qualification = object.qualification ?? false;
    message.isSubscribe = object.isSubscribe ?? false;
    message.badge = (object.badge !== undefined && object.badge !== null)
      ? User_SubscribeBadge.fromPartial(object.badge)
      : undefined;
    message.enableSubscription = object.enableSubscription ?? false;
    message.subscriberCount = object.subscriberCount ?? "0";
    message.isInGracePeriod = object.isInGracePeriod ?? false;
    message.isSubscribedToAnchor = object.isSubscribedToAnchor ?? false;
    message.userGiftSubAuth = object.userGiftSubAuth ?? false;
    message.anchorGiftSubAuth = object.anchorGiftSubAuth ?? false;
    return message;
  },
};

function createBaseUser_UserAttr(): User_UserAttr {
  return { isMuted: false, isAdmin: false, isSuperAdmin: false, muteDuration: "0" };
}

export const User_UserAttrDecoder: MessageFns<User_UserAttr> = {
  encode(message: User_UserAttr, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isMuted !== false) {
      writer.uint32(8).bool(message.isMuted);
    }
    if (message.isAdmin !== false) {
      writer.uint32(16).bool(message.isAdmin);
    }
    if (message.isSuperAdmin !== false) {
      writer.uint32(24).bool(message.isSuperAdmin);
    }
    if (message.muteDuration !== "0") {
      writer.uint32(32).int64(message.muteDuration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_UserAttr {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_UserAttr();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isMuted = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isAdmin = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isSuperAdmin = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.muteDuration = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_UserAttr {
    return {
      isMuted: isSet(object.isMuted) ? globalThis.Boolean(object.isMuted) : false,
      isAdmin: isSet(object.isAdmin) ? globalThis.Boolean(object.isAdmin) : false,
      isSuperAdmin: isSet(object.isSuperAdmin) ? globalThis.Boolean(object.isSuperAdmin) : false,
      muteDuration: isSet(object.muteDuration) ? globalThis.String(object.muteDuration) : "0",
    };
  },

  toJSON(message: User_UserAttr): unknown {
    const obj: any = {};
    if (message.isMuted !== false) {
      obj.isMuted = message.isMuted;
    }
    if (message.isAdmin !== false) {
      obj.isAdmin = message.isAdmin;
    }
    if (message.isSuperAdmin !== false) {
      obj.isSuperAdmin = message.isSuperAdmin;
    }
    if (message.muteDuration !== "0") {
      obj.muteDuration = message.muteDuration;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_UserAttr>, I>>(base?: I): User_UserAttr {
    return User_UserAttr.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_UserAttr>, I>>(object: I): User_UserAttr {
    const message = createBaseUser_UserAttr();
    message.isMuted = object.isMuted ?? false;
    message.isAdmin = object.isAdmin ?? false;
    message.isSuperAdmin = object.isSuperAdmin ?? false;
    message.muteDuration = object.muteDuration ?? "0";
    return message;
  },
};

function createBaseUser_UserStats(): User_UserStats {
  return {
    id: "0",
    idStr: "",
    followingCount: "0",
    followerCount: "0",
    recordCount: "0",
    totalDuration: "0",
    dailyFanTicketCount: "0",
    dailyIncome: "0",
    itemCount: "0",
    favoriteItemCount: "0",
    diamondConsumedCount: "0",
    tuwenItemCount: "0",
  };
}

export const User_UserStatsDecoder: MessageFns<User_UserStats> = {
  encode(message: User_UserStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.idStr !== "") {
      writer.uint32(18).string(message.idStr);
    }
    if (message.followingCount !== "0") {
      writer.uint32(24).int64(message.followingCount);
    }
    if (message.followerCount !== "0") {
      writer.uint32(32).int64(message.followerCount);
    }
    if (message.recordCount !== "0") {
      writer.uint32(40).int64(message.recordCount);
    }
    if (message.totalDuration !== "0") {
      writer.uint32(48).int64(message.totalDuration);
    }
    if (message.dailyFanTicketCount !== "0") {
      writer.uint32(56).int64(message.dailyFanTicketCount);
    }
    if (message.dailyIncome !== "0") {
      writer.uint32(64).int64(message.dailyIncome);
    }
    if (message.itemCount !== "0") {
      writer.uint32(72).int64(message.itemCount);
    }
    if (message.favoriteItemCount !== "0") {
      writer.uint32(80).int64(message.favoriteItemCount);
    }
    if (message.diamondConsumedCount !== "0") {
      writer.uint32(96).int64(message.diamondConsumedCount);
    }
    if (message.tuwenItemCount !== "0") {
      writer.uint32(104).int64(message.tuwenItemCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_UserStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_UserStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.idStr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.followingCount = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.followerCount = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.recordCount = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.totalDuration = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.dailyFanTicketCount = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.dailyIncome = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.itemCount = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.favoriteItemCount = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.diamondConsumedCount = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.tuwenItemCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_UserStats {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      followingCount: isSet(object.followingCount) ? globalThis.String(object.followingCount) : "0",
      followerCount: isSet(object.followerCount) ? globalThis.String(object.followerCount) : "0",
      recordCount: isSet(object.recordCount) ? globalThis.String(object.recordCount) : "0",
      totalDuration: isSet(object.totalDuration) ? globalThis.String(object.totalDuration) : "0",
      dailyFanTicketCount: isSet(object.dailyFanTicketCount) ? globalThis.String(object.dailyFanTicketCount) : "0",
      dailyIncome: isSet(object.dailyIncome) ? globalThis.String(object.dailyIncome) : "0",
      itemCount: isSet(object.itemCount) ? globalThis.String(object.itemCount) : "0",
      favoriteItemCount: isSet(object.favoriteItemCount) ? globalThis.String(object.favoriteItemCount) : "0",
      diamondConsumedCount: isSet(object.diamondConsumedCount) ? globalThis.String(object.diamondConsumedCount) : "0",
      tuwenItemCount: isSet(object.tuwenItemCount) ? globalThis.String(object.tuwenItemCount) : "0",
    };
  },

  toJSON(message: User_UserStats): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.followingCount !== "0") {
      obj.followingCount = message.followingCount;
    }
    if (message.followerCount !== "0") {
      obj.followerCount = message.followerCount;
    }
    if (message.recordCount !== "0") {
      obj.recordCount = message.recordCount;
    }
    if (message.totalDuration !== "0") {
      obj.totalDuration = message.totalDuration;
    }
    if (message.dailyFanTicketCount !== "0") {
      obj.dailyFanTicketCount = message.dailyFanTicketCount;
    }
    if (message.dailyIncome !== "0") {
      obj.dailyIncome = message.dailyIncome;
    }
    if (message.itemCount !== "0") {
      obj.itemCount = message.itemCount;
    }
    if (message.favoriteItemCount !== "0") {
      obj.favoriteItemCount = message.favoriteItemCount;
    }
    if (message.diamondConsumedCount !== "0") {
      obj.diamondConsumedCount = message.diamondConsumedCount;
    }
    if (message.tuwenItemCount !== "0") {
      obj.tuwenItemCount = message.tuwenItemCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_UserStats>, I>>(base?: I): User_UserStats {
    return User_UserStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_UserStats>, I>>(object: I): User_UserStats {
    const message = createBaseUser_UserStats();
    message.id = object.id ?? "0";
    message.idStr = object.idStr ?? "";
    message.followingCount = object.followingCount ?? "0";
    message.followerCount = object.followerCount ?? "0";
    message.recordCount = object.recordCount ?? "0";
    message.totalDuration = object.totalDuration ?? "0";
    message.dailyFanTicketCount = object.dailyFanTicketCount ?? "0";
    message.dailyIncome = object.dailyIncome ?? "0";
    message.itemCount = object.itemCount ?? "0";
    message.favoriteItemCount = object.favoriteItemCount ?? "0";
    message.diamondConsumedCount = object.diamondConsumedCount ?? "0";
    message.tuwenItemCount = object.tuwenItemCount ?? "0";
    return message;
  },
};

function createBaseEmote(): Emote {
  return {
    emoteId: "",
    image: undefined,
    auditStatus: 0,
    uuid: "",
    emoteType: 0,
    contentSource: 0,
    emotePrivateType: 0,
    packageId: "",
    auditInfo: undefined,
    rewardCondition: 0,
    emoteUploadInfo: undefined,
    createTime: "0",
    emoteScene: 0,
  };
}

export const EmoteDecoder: MessageFns<Emote> = {
  encode(message: Emote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emoteId !== "") {
      writer.uint32(10).string(message.emoteId);
    }
    if (message.image !== undefined) {
      ImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
    }
    if (message.auditStatus !== 0) {
      writer.uint32(24).int32(message.auditStatus);
    }
    if (message.uuid !== "") {
      writer.uint32(34).string(message.uuid);
    }
    if (message.emoteType !== 0) {
      writer.uint32(40).int32(message.emoteType);
    }
    if (message.contentSource !== 0) {
      writer.uint32(48).int32(message.contentSource);
    }
    if (message.emotePrivateType !== 0) {
      writer.uint32(56).int32(message.emotePrivateType);
    }
    if (message.packageId !== "") {
      writer.uint32(66).string(message.packageId);
    }
    if (message.auditInfo !== undefined) {
      Emote_AuditInfoDecoder.encode(message.auditInfo, writer.uint32(74).fork()).join();
    }
    if (message.rewardCondition !== 0) {
      writer.uint32(80).int32(message.rewardCondition);
    }
    if (message.emoteUploadInfo !== undefined) {
      Emote_EmoteUploadInfoDecoder.encode(message.emoteUploadInfo, writer.uint32(90).fork()).join();
    }
    if (message.createTime !== "0") {
      writer.uint32(96).int64(message.createTime);
    }
    if (message.emoteScene !== 0) {
      writer.uint32(104).int32(message.emoteScene);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Emote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emoteId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.image = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.auditStatus = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.emoteType = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.contentSource = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.emotePrivateType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.packageId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.auditInfo = Emote_AuditInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.rewardCondition = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.emoteUploadInfo = Emote_EmoteUploadInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.createTime = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.emoteScene = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Emote {
    return {
      emoteId: isSet(object.emoteId) ? globalThis.String(object.emoteId) : "",
      image: isSet(object.image) ? Image.fromJSON(object.image) : undefined,
      auditStatus: isSet(object.auditStatus) ? auditStatusFromJSON(object.auditStatus) : 0,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      emoteType: isSet(object.emoteType) ? emoteTypeFromJSON(object.emoteType) : 0,
      contentSource: isSet(object.contentSource) ? contentSourceFromJSON(object.contentSource) : 0,
      emotePrivateType: isSet(object.emotePrivateType) ? emotePrivateTypeFromJSON(object.emotePrivateType) : 0,
      packageId: isSet(object.packageId) ? globalThis.String(object.packageId) : "",
      auditInfo: isSet(object.auditInfo) ? Emote_AuditInfo.fromJSON(object.auditInfo) : undefined,
      rewardCondition: isSet(object.rewardCondition) ? rewardConditionFromJSON(object.rewardCondition) : 0,
      emoteUploadInfo: isSet(object.emoteUploadInfo)
        ? Emote_EmoteUploadInfo.fromJSON(object.emoteUploadInfo)
        : undefined,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "0",
      emoteScene: isSet(object.emoteScene) ? emoteSceneFromJSON(object.emoteScene) : 0,
    };
  },

  toJSON(message: Emote): unknown {
    const obj: any = {};
    if (message.emoteId !== "") {
      obj.emoteId = message.emoteId;
    }
    if (message.image !== undefined) {
      obj.image = Image.toJSON(message.image);
    }
    if (message.auditStatus !== 0) {
      obj.auditStatus = auditStatusToJSON(message.auditStatus);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.emoteType !== 0) {
      obj.emoteType = emoteTypeToJSON(message.emoteType);
    }
    if (message.contentSource !== 0) {
      obj.contentSource = contentSourceToJSON(message.contentSource);
    }
    if (message.emotePrivateType !== 0) {
      obj.emotePrivateType = emotePrivateTypeToJSON(message.emotePrivateType);
    }
    if (message.packageId !== "") {
      obj.packageId = message.packageId;
    }
    if (message.auditInfo !== undefined) {
      obj.auditInfo = Emote_AuditInfo.toJSON(message.auditInfo);
    }
    if (message.rewardCondition !== 0) {
      obj.rewardCondition = rewardConditionToJSON(message.rewardCondition);
    }
    if (message.emoteUploadInfo !== undefined) {
      obj.emoteUploadInfo = Emote_EmoteUploadInfo.toJSON(message.emoteUploadInfo);
    }
    if (message.createTime !== "0") {
      obj.createTime = message.createTime;
    }
    if (message.emoteScene !== 0) {
      obj.emoteScene = emoteSceneToJSON(message.emoteScene);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Emote>, I>>(base?: I): Emote {
    return Emote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Emote>, I>>(object: I): Emote {
    const message = createBaseEmote();
    message.emoteId = object.emoteId ?? "";
    message.image = (object.image !== undefined && object.image !== null) ? Image.fromPartial(object.image) : undefined;
    message.auditStatus = object.auditStatus ?? 0;
    message.uuid = object.uuid ?? "";
    message.emoteType = object.emoteType ?? 0;
    message.contentSource = object.contentSource ?? 0;
    message.emotePrivateType = object.emotePrivateType ?? 0;
    message.packageId = object.packageId ?? "";
    message.auditInfo = (object.auditInfo !== undefined && object.auditInfo !== null)
      ? Emote_AuditInfo.fromPartial(object.auditInfo)
      : undefined;
    message.rewardCondition = object.rewardCondition ?? 0;
    message.emoteUploadInfo = (object.emoteUploadInfo !== undefined && object.emoteUploadInfo !== null)
      ? Emote_EmoteUploadInfo.fromPartial(object.emoteUploadInfo)
      : undefined;
    message.createTime = object.createTime ?? "0";
    message.emoteScene = object.emoteScene ?? 0;
    return message;
  },
};

function createBaseEmote_AuditInfo(): Emote_AuditInfo {
  return { violationId: "0", taskType: 0 };
}

export const Emote_AuditInfoDecoder: MessageFns<Emote_AuditInfo> = {
  encode(message: Emote_AuditInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.violationId !== "0") {
      writer.uint32(8).int64(message.violationId);
    }
    if (message.taskType !== 0) {
      writer.uint32(16).int32(message.taskType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Emote_AuditInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmote_AuditInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.violationId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.taskType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Emote_AuditInfo {
    return {
      violationId: isSet(object.violationId) ? globalThis.String(object.violationId) : "0",
      taskType: isSet(object.taskType) ? emote_AuditInfo_AuditTaskTypeFromJSON(object.taskType) : 0,
    };
  },

  toJSON(message: Emote_AuditInfo): unknown {
    const obj: any = {};
    if (message.violationId !== "0") {
      obj.violationId = message.violationId;
    }
    if (message.taskType !== 0) {
      obj.taskType = emote_AuditInfo_AuditTaskTypeToJSON(message.taskType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Emote_AuditInfo>, I>>(base?: I): Emote_AuditInfo {
    return Emote_AuditInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Emote_AuditInfo>, I>>(object: I): Emote_AuditInfo {
    const message = createBaseEmote_AuditInfo();
    message.violationId = object.violationId ?? "0";
    message.taskType = object.taskType ?? 0;
    return message;
  },
};

function createBaseEmote_EmoteUploadInfo(): Emote_EmoteUploadInfo {
  return { userId: "0", emoteUploadSource: 0, userInfo: undefined, userIdStr: "" };
}

export const Emote_EmoteUploadInfoDecoder: MessageFns<Emote_EmoteUploadInfo> = {
  encode(message: Emote_EmoteUploadInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.emoteUploadSource !== 0) {
      writer.uint32(16).int32(message.emoteUploadSource);
    }
    if (message.userInfo !== undefined) {
      UserDecoder.encode(message.userInfo, writer.uint32(26).fork()).join();
    }
    if (message.userIdStr !== "") {
      writer.uint32(34).string(message.userIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Emote_EmoteUploadInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmote_EmoteUploadInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.emoteUploadSource = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Emote_EmoteUploadInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      emoteUploadSource: isSet(object.emoteUploadSource) ? userEmoteUploadSourceFromJSON(object.emoteUploadSource) : 0,
      userInfo: isSet(object.userInfo) ? User.fromJSON(object.userInfo) : undefined,
      userIdStr: isSet(object.userIdStr) ? globalThis.String(object.userIdStr) : "",
    };
  },

  toJSON(message: Emote_EmoteUploadInfo): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.emoteUploadSource !== 0) {
      obj.emoteUploadSource = userEmoteUploadSourceToJSON(message.emoteUploadSource);
    }
    if (message.userInfo !== undefined) {
      obj.userInfo = User.toJSON(message.userInfo);
    }
    if (message.userIdStr !== "") {
      obj.userIdStr = message.userIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Emote_EmoteUploadInfo>, I>>(base?: I): Emote_EmoteUploadInfo {
    return Emote_EmoteUploadInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Emote_EmoteUploadInfo>, I>>(object: I): Emote_EmoteUploadInfo {
    const message = createBaseEmote_EmoteUploadInfo();
    message.userId = object.userId ?? "0";
    message.emoteUploadSource = object.emoteUploadSource ?? 0;
    message.userInfo = (object.userInfo !== undefined && object.userInfo !== null)
      ? User.fromPartial(object.userInfo)
      : undefined;
    message.userIdStr = object.userIdStr ?? "";
    return message;
  },
};

function createBasePunishEventInfo(): PunishEventInfo {
  return {
    punishType: "",
    punishReason: "",
    punishId: "",
    violationUid: "0",
    punishTypeId: 0,
    duration: "0",
    punishPerceptionCode: "",
    violationUidStr: "",
    showReason: "",
  };
}

export const PunishEventInfoDecoder: MessageFns<PunishEventInfo> = {
  encode(message: PunishEventInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.punishType !== "") {
      writer.uint32(10).string(message.punishType);
    }
    if (message.punishReason !== "") {
      writer.uint32(18).string(message.punishReason);
    }
    if (message.punishId !== "") {
      writer.uint32(26).string(message.punishId);
    }
    if (message.violationUid !== "0") {
      writer.uint32(32).int64(message.violationUid);
    }
    if (message.punishTypeId !== 0) {
      writer.uint32(40).int32(message.punishTypeId);
    }
    if (message.duration !== "0") {
      writer.uint32(48).int64(message.duration);
    }
    if (message.punishPerceptionCode !== "") {
      writer.uint32(58).string(message.punishPerceptionCode);
    }
    if (message.violationUidStr !== "") {
      writer.uint32(74).string(message.violationUidStr);
    }
    if (message.showReason !== "") {
      writer.uint32(82).string(message.showReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PunishEventInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePunishEventInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.punishType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.punishReason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.punishId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.violationUid = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.punishTypeId = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.punishPerceptionCode = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.violationUidStr = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.showReason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PunishEventInfo {
    return {
      punishType: isSet(object.punishType) ? globalThis.String(object.punishType) : "",
      punishReason: isSet(object.punishReason) ? globalThis.String(object.punishReason) : "",
      punishId: isSet(object.punishId) ? globalThis.String(object.punishId) : "",
      violationUid: isSet(object.violationUid) ? globalThis.String(object.violationUid) : "0",
      punishTypeId: isSet(object.punishTypeId) ? punishTypeIdFromJSON(object.punishTypeId) : 0,
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      punishPerceptionCode: isSet(object.punishPerceptionCode) ? globalThis.String(object.punishPerceptionCode) : "",
      violationUidStr: isSet(object.violationUidStr) ? globalThis.String(object.violationUidStr) : "",
      showReason: isSet(object.showReason) ? globalThis.String(object.showReason) : "",
    };
  },

  toJSON(message: PunishEventInfo): unknown {
    const obj: any = {};
    if (message.punishType !== "") {
      obj.punishType = message.punishType;
    }
    if (message.punishReason !== "") {
      obj.punishReason = message.punishReason;
    }
    if (message.punishId !== "") {
      obj.punishId = message.punishId;
    }
    if (message.violationUid !== "0") {
      obj.violationUid = message.violationUid;
    }
    if (message.punishTypeId !== 0) {
      obj.punishTypeId = punishTypeIdToJSON(message.punishTypeId);
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.punishPerceptionCode !== "") {
      obj.punishPerceptionCode = message.punishPerceptionCode;
    }
    if (message.violationUidStr !== "") {
      obj.violationUidStr = message.violationUidStr;
    }
    if (message.showReason !== "") {
      obj.showReason = message.showReason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PunishEventInfo>, I>>(base?: I): PunishEventInfo {
    return PunishEventInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PunishEventInfo>, I>>(object: I): PunishEventInfo {
    const message = createBasePunishEventInfo();
    message.punishType = object.punishType ?? "";
    message.punishReason = object.punishReason ?? "";
    message.punishId = object.punishId ?? "";
    message.violationUid = object.violationUid ?? "0";
    message.punishTypeId = object.punishTypeId ?? 0;
    message.duration = object.duration ?? "0";
    message.punishPerceptionCode = object.punishPerceptionCode ?? "";
    message.violationUidStr = object.violationUidStr ?? "";
    message.showReason = object.showReason ?? "";
    return message;
  },
};

function createBaseMsgFilter(): MsgFilter {
  return { isGifter: false, isSubscribedToAnchor: false };
}

export const MsgFilterDecoder: MessageFns<MsgFilter> = {
  encode(message: MsgFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isGifter !== false) {
      writer.uint32(8).bool(message.isGifter);
    }
    if (message.isSubscribedToAnchor !== false) {
      writer.uint32(16).bool(message.isSubscribedToAnchor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isGifter = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isSubscribedToAnchor = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgFilter {
    return {
      isGifter: isSet(object.isGifter) ? globalThis.Boolean(object.isGifter) : false,
      isSubscribedToAnchor: isSet(object.isSubscribedToAnchor)
        ? globalThis.Boolean(object.isSubscribedToAnchor)
        : false,
    };
  },

  toJSON(message: MsgFilter): unknown {
    const obj: any = {};
    if (message.isGifter !== false) {
      obj.isGifter = message.isGifter;
    }
    if (message.isSubscribedToAnchor !== false) {
      obj.isSubscribedToAnchor = message.isSubscribedToAnchor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFilter>, I>>(base?: I): MsgFilter {
    return MsgFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFilter>, I>>(object: I): MsgFilter {
    const message = createBaseMsgFilter();
    message.isGifter = object.isGifter ?? false;
    message.isSubscribedToAnchor = object.isSubscribedToAnchor ?? false;
    return message;
  },
};

function createBaseUserIdentity(): UserIdentity {
  return {
    isGiftGiverOfAnchor: false,
    isSubscriberOfAnchor: false,
    isMutualFollowingWithAnchor: false,
    isFollowerOfAnchor: false,
    isModeratorOfAnchor: false,
    isAnchor: false,
  };
}

export const UserIdentityDecoder: MessageFns<UserIdentity> = {
  encode(message: UserIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isGiftGiverOfAnchor !== false) {
      writer.uint32(8).bool(message.isGiftGiverOfAnchor);
    }
    if (message.isSubscriberOfAnchor !== false) {
      writer.uint32(16).bool(message.isSubscriberOfAnchor);
    }
    if (message.isMutualFollowingWithAnchor !== false) {
      writer.uint32(24).bool(message.isMutualFollowingWithAnchor);
    }
    if (message.isFollowerOfAnchor !== false) {
      writer.uint32(32).bool(message.isFollowerOfAnchor);
    }
    if (message.isModeratorOfAnchor !== false) {
      writer.uint32(40).bool(message.isModeratorOfAnchor);
    }
    if (message.isAnchor !== false) {
      writer.uint32(48).bool(message.isAnchor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isGiftGiverOfAnchor = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isSubscriberOfAnchor = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isMutualFollowingWithAnchor = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isFollowerOfAnchor = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isModeratorOfAnchor = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isAnchor = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserIdentity {
    return {
      isGiftGiverOfAnchor: isSet(object.isGiftGiverOfAnchor) ? globalThis.Boolean(object.isGiftGiverOfAnchor) : false,
      isSubscriberOfAnchor: isSet(object.isSubscriberOfAnchor)
        ? globalThis.Boolean(object.isSubscriberOfAnchor)
        : false,
      isMutualFollowingWithAnchor: isSet(object.isMutualFollowingWithAnchor)
        ? globalThis.Boolean(object.isMutualFollowingWithAnchor)
        : false,
      isFollowerOfAnchor: isSet(object.isFollowerOfAnchor) ? globalThis.Boolean(object.isFollowerOfAnchor) : false,
      isModeratorOfAnchor: isSet(object.isModeratorOfAnchor) ? globalThis.Boolean(object.isModeratorOfAnchor) : false,
      isAnchor: isSet(object.isAnchor) ? globalThis.Boolean(object.isAnchor) : false,
    };
  },

  toJSON(message: UserIdentity): unknown {
    const obj: any = {};
    if (message.isGiftGiverOfAnchor !== false) {
      obj.isGiftGiverOfAnchor = message.isGiftGiverOfAnchor;
    }
    if (message.isSubscriberOfAnchor !== false) {
      obj.isSubscriberOfAnchor = message.isSubscriberOfAnchor;
    }
    if (message.isMutualFollowingWithAnchor !== false) {
      obj.isMutualFollowingWithAnchor = message.isMutualFollowingWithAnchor;
    }
    if (message.isFollowerOfAnchor !== false) {
      obj.isFollowerOfAnchor = message.isFollowerOfAnchor;
    }
    if (message.isModeratorOfAnchor !== false) {
      obj.isModeratorOfAnchor = message.isModeratorOfAnchor;
    }
    if (message.isAnchor !== false) {
      obj.isAnchor = message.isAnchor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserIdentity>, I>>(base?: I): UserIdentity {
    return UserIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserIdentity>, I>>(object: I): UserIdentity {
    const message = createBaseUserIdentity();
    message.isGiftGiverOfAnchor = object.isGiftGiverOfAnchor ?? false;
    message.isSubscriberOfAnchor = object.isSubscriberOfAnchor ?? false;
    message.isMutualFollowingWithAnchor = object.isMutualFollowingWithAnchor ?? false;
    message.isFollowerOfAnchor = object.isFollowerOfAnchor ?? false;
    message.isModeratorOfAnchor = object.isModeratorOfAnchor ?? false;
    message.isAnchor = object.isAnchor ?? false;
    return message;
  },
};

function createBaseLiveStreamGoal(): LiveStreamGoal {
  return {
    id: "0",
    type: 0,
    status: 0,
    subGoals: [],
    description: "",
    auditStatus: 0,
    cycleType: 0,
    startTime: "0",
    expireTime: "0",
    realFinishTime: "0",
    contributors: [],
    contributorsLength: 0,
    idStr: "",
    auditDescription: "",
    stats: undefined,
    goalExtraInfo: "",
    mode: 0,
    auditInfo: undefined,
    challengeType: "",
    isUneditable: false,
  };
}

export const LiveStreamGoalDecoder: MessageFns<LiveStreamGoal> = {
  encode(message: LiveStreamGoal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    for (const v of message.subGoals) {
      LiveStreamGoal_LiveStreamSubGoalDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.auditStatus !== 0) {
      writer.uint32(48).int32(message.auditStatus);
    }
    if (message.cycleType !== 0) {
      writer.uint32(56).int32(message.cycleType);
    }
    if (message.startTime !== "0") {
      writer.uint32(64).int64(message.startTime);
    }
    if (message.expireTime !== "0") {
      writer.uint32(72).int64(message.expireTime);
    }
    if (message.realFinishTime !== "0") {
      writer.uint32(80).int64(message.realFinishTime);
    }
    for (const v of message.contributors) {
      LiveStreamGoal_LiveStreamGoalContributorDecoder.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.contributorsLength !== 0) {
      writer.uint32(96).int32(message.contributorsLength);
    }
    if (message.idStr !== "") {
      writer.uint32(106).string(message.idStr);
    }
    if (message.auditDescription !== "") {
      writer.uint32(114).string(message.auditDescription);
    }
    if (message.stats !== undefined) {
      LiveStreamGoal_GoalStatsDecoder.encode(message.stats, writer.uint32(122).fork()).join();
    }
    if (message.goalExtraInfo !== "") {
      writer.uint32(130).string(message.goalExtraInfo);
    }
    if (message.mode !== 0) {
      writer.uint32(136).int32(message.mode);
    }
    if (message.auditInfo !== undefined) {
      LiveStreamGoal_AuditInfoDecoder.encode(message.auditInfo, writer.uint32(146).fork()).join();
    }
    if (message.challengeType !== "") {
      writer.uint32(162).string(message.challengeType);
    }
    if (message.isUneditable !== false) {
      writer.uint32(168).bool(message.isUneditable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subGoals.push(LiveStreamGoal_LiveStreamSubGoalDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.auditStatus = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.cycleType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.startTime = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.expireTime = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.realFinishTime = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.contributors.push(LiveStreamGoal_LiveStreamGoalContributorDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.contributorsLength = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.idStr = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.auditDescription = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.stats = LiveStreamGoal_GoalStatsDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.goalExtraInfo = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.mode = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.auditInfo = LiveStreamGoal_AuditInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.challengeType = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.isUneditable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      subGoals: globalThis.Array.isArray(object?.subGoals)
        ? object.subGoals.map((e: any) => LiveStreamGoal_LiveStreamSubGoal.fromJSON(e))
        : [],
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      auditStatus: isSet(object.auditStatus) ? auditStatusFromJSON(object.auditStatus) : 0,
      cycleType: isSet(object.cycleType) ? globalThis.Number(object.cycleType) : 0,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "0",
      expireTime: isSet(object.expireTime) ? globalThis.String(object.expireTime) : "0",
      realFinishTime: isSet(object.realFinishTime) ? globalThis.String(object.realFinishTime) : "0",
      contributors: globalThis.Array.isArray(object?.contributors)
        ? object.contributors.map((e: any) => LiveStreamGoal_LiveStreamGoalContributor.fromJSON(e))
        : [],
      contributorsLength: isSet(object.contributorsLength) ? globalThis.Number(object.contributorsLength) : 0,
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      auditDescription: isSet(object.auditDescription) ? globalThis.String(object.auditDescription) : "",
      stats: isSet(object.stats) ? LiveStreamGoal_GoalStats.fromJSON(object.stats) : undefined,
      goalExtraInfo: isSet(object.goalExtraInfo) ? globalThis.String(object.goalExtraInfo) : "",
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      auditInfo: isSet(object.auditInfo) ? LiveStreamGoal_AuditInfo.fromJSON(object.auditInfo) : undefined,
      challengeType: isSet(object.challengeType) ? globalThis.String(object.challengeType) : "",
      isUneditable: isSet(object.isUneditable) ? globalThis.Boolean(object.isUneditable) : false,
    };
  },

  toJSON(message: LiveStreamGoal): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.subGoals?.length) {
      obj.subGoals = message.subGoals.map((e) => LiveStreamGoal_LiveStreamSubGoal.toJSON(e));
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.auditStatus !== 0) {
      obj.auditStatus = auditStatusToJSON(message.auditStatus);
    }
    if (message.cycleType !== 0) {
      obj.cycleType = Math.round(message.cycleType);
    }
    if (message.startTime !== "0") {
      obj.startTime = message.startTime;
    }
    if (message.expireTime !== "0") {
      obj.expireTime = message.expireTime;
    }
    if (message.realFinishTime !== "0") {
      obj.realFinishTime = message.realFinishTime;
    }
    if (message.contributors?.length) {
      obj.contributors = message.contributors.map((e) => LiveStreamGoal_LiveStreamGoalContributor.toJSON(e));
    }
    if (message.contributorsLength !== 0) {
      obj.contributorsLength = Math.round(message.contributorsLength);
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.auditDescription !== "") {
      obj.auditDescription = message.auditDescription;
    }
    if (message.stats !== undefined) {
      obj.stats = LiveStreamGoal_GoalStats.toJSON(message.stats);
    }
    if (message.goalExtraInfo !== "") {
      obj.goalExtraInfo = message.goalExtraInfo;
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.auditInfo !== undefined) {
      obj.auditInfo = LiveStreamGoal_AuditInfo.toJSON(message.auditInfo);
    }
    if (message.challengeType !== "") {
      obj.challengeType = message.challengeType;
    }
    if (message.isUneditable !== false) {
      obj.isUneditable = message.isUneditable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal>, I>>(base?: I): LiveStreamGoal {
    return LiveStreamGoal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal>, I>>(object: I): LiveStreamGoal {
    const message = createBaseLiveStreamGoal();
    message.id = object.id ?? "0";
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    message.subGoals = object.subGoals?.map((e) => LiveStreamGoal_LiveStreamSubGoal.fromPartial(e)) || [];
    message.description = object.description ?? "";
    message.auditStatus = object.auditStatus ?? 0;
    message.cycleType = object.cycleType ?? 0;
    message.startTime = object.startTime ?? "0";
    message.expireTime = object.expireTime ?? "0";
    message.realFinishTime = object.realFinishTime ?? "0";
    message.contributors = object.contributors?.map((e) => LiveStreamGoal_LiveStreamGoalContributor.fromPartial(e)) ||
      [];
    message.contributorsLength = object.contributorsLength ?? 0;
    message.idStr = object.idStr ?? "";
    message.auditDescription = object.auditDescription ?? "";
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? LiveStreamGoal_GoalStats.fromPartial(object.stats)
      : undefined;
    message.goalExtraInfo = object.goalExtraInfo ?? "";
    message.mode = object.mode ?? 0;
    message.auditInfo = (object.auditInfo !== undefined && object.auditInfo !== null)
      ? LiveStreamGoal_AuditInfo.fromPartial(object.auditInfo)
      : undefined;
    message.challengeType = object.challengeType ?? "";
    message.isUneditable = object.isUneditable ?? false;
    return message;
  },
};

function createBaseLiveStreamGoal_AuditInfo(): LiveStreamGoal_AuditInfo {
  return { violationId: "0", taskType: 0 };
}

export const LiveStreamGoal_AuditInfoDecoder: MessageFns<LiveStreamGoal_AuditInfo> = {
  encode(message: LiveStreamGoal_AuditInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.violationId !== "0") {
      writer.uint32(8).int64(message.violationId);
    }
    if (message.taskType !== 0) {
      writer.uint32(16).int32(message.taskType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal_AuditInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_AuditInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.violationId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.taskType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_AuditInfo {
    return {
      violationId: isSet(object.violationId) ? globalThis.String(object.violationId) : "0",
      taskType: isSet(object.taskType) ? globalThis.Number(object.taskType) : 0,
    };
  },

  toJSON(message: LiveStreamGoal_AuditInfo): unknown {
    const obj: any = {};
    if (message.violationId !== "0") {
      obj.violationId = message.violationId;
    }
    if (message.taskType !== 0) {
      obj.taskType = Math.round(message.taskType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_AuditInfo>, I>>(base?: I): LiveStreamGoal_AuditInfo {
    return LiveStreamGoal_AuditInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_AuditInfo>, I>>(object: I): LiveStreamGoal_AuditInfo {
    const message = createBaseLiveStreamGoal_AuditInfo();
    message.violationId = object.violationId ?? "0";
    message.taskType = object.taskType ?? 0;
    return message;
  },
};

function createBaseLiveStreamGoal_LiveStreamSubGoal(): LiveStreamGoal_LiveStreamSubGoal {
  return {
    type: 0,
    id: "0",
    progress: "0",
    target: "0",
    gift: undefined,
    idStr: "",
    pinInfo: undefined,
    source: 0,
    recommendedText: "",
    recommendedHeader: "",
  };
}

export const LiveStreamGoal_LiveStreamSubGoalDecoder: MessageFns<LiveStreamGoal_LiveStreamSubGoal> = {
  encode(message: LiveStreamGoal_LiveStreamSubGoal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.id !== "0") {
      writer.uint32(16).int64(message.id);
    }
    if (message.progress !== "0") {
      writer.uint32(24).int64(message.progress);
    }
    if (message.target !== "0") {
      writer.uint32(32).int64(message.target);
    }
    if (message.gift !== undefined) {
      LiveStreamGoal_LiveStreamSubGoalGiftDecoder.encode(message.gift, writer.uint32(42).fork()).join();
    }
    if (message.idStr !== "") {
      writer.uint32(50).string(message.idStr);
    }
    if (message.pinInfo !== undefined) {
      LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfoDecoder.encode(message.pinInfo, writer.uint32(58).fork()).join();
    }
    if (message.source !== 0) {
      writer.uint32(64).int32(message.source);
    }
    if (message.recommendedText !== "") {
      writer.uint32(74).string(message.recommendedText);
    }
    if (message.recommendedHeader !== "") {
      writer.uint32(82).string(message.recommendedHeader);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal_LiveStreamSubGoal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_LiveStreamSubGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.progress = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.target = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gift = LiveStreamGoal_LiveStreamSubGoalGiftDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.idStr = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pinInfo = LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.source = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.recommendedText = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.recommendedHeader = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_LiveStreamSubGoal {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      progress: isSet(object.progress) ? globalThis.String(object.progress) : "0",
      target: isSet(object.target) ? globalThis.String(object.target) : "0",
      gift: isSet(object.gift) ? LiveStreamGoal_LiveStreamSubGoalGift.fromJSON(object.gift) : undefined,
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      pinInfo: isSet(object.pinInfo)
        ? LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo.fromJSON(object.pinInfo)
        : undefined,
      source: isSet(object.source) ? globalThis.Number(object.source) : 0,
      recommendedText: isSet(object.recommendedText) ? globalThis.String(object.recommendedText) : "",
      recommendedHeader: isSet(object.recommendedHeader) ? globalThis.String(object.recommendedHeader) : "",
    };
  },

  toJSON(message: LiveStreamGoal_LiveStreamSubGoal): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.progress !== "0") {
      obj.progress = message.progress;
    }
    if (message.target !== "0") {
      obj.target = message.target;
    }
    if (message.gift !== undefined) {
      obj.gift = LiveStreamGoal_LiveStreamSubGoalGift.toJSON(message.gift);
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.pinInfo !== undefined) {
      obj.pinInfo = LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo.toJSON(message.pinInfo);
    }
    if (message.source !== 0) {
      obj.source = Math.round(message.source);
    }
    if (message.recommendedText !== "") {
      obj.recommendedText = message.recommendedText;
    }
    if (message.recommendedHeader !== "") {
      obj.recommendedHeader = message.recommendedHeader;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamSubGoal>, I>>(
    base?: I,
  ): LiveStreamGoal_LiveStreamSubGoal {
    return LiveStreamGoal_LiveStreamSubGoal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamSubGoal>, I>>(
    object: I,
  ): LiveStreamGoal_LiveStreamSubGoal {
    const message = createBaseLiveStreamGoal_LiveStreamSubGoal();
    message.type = object.type ?? 0;
    message.id = object.id ?? "0";
    message.progress = object.progress ?? "0";
    message.target = object.target ?? "0";
    message.gift = (object.gift !== undefined && object.gift !== null)
      ? LiveStreamGoal_LiveStreamSubGoalGift.fromPartial(object.gift)
      : undefined;
    message.idStr = object.idStr ?? "";
    message.pinInfo = (object.pinInfo !== undefined && object.pinInfo !== null)
      ? LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo.fromPartial(object.pinInfo)
      : undefined;
    message.source = object.source ?? 0;
    message.recommendedText = object.recommendedText ?? "";
    message.recommendedHeader = object.recommendedHeader ?? "";
    return message;
  },
};

function createBaseLiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo(): LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo {
  return { pinStartTime: "0", pinEndTime: "0", pinReadyTime: "0" };
}

export const LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfoDecoder: MessageFns<LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo> = {
  encode(
    message: LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.pinStartTime !== "0") {
      writer.uint32(8).int64(message.pinStartTime);
    }
    if (message.pinEndTime !== "0") {
      writer.uint32(16).int64(message.pinEndTime);
    }
    if (message.pinReadyTime !== "0") {
      writer.uint32(24).int64(message.pinReadyTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pinStartTime = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pinEndTime = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pinReadyTime = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo {
    return {
      pinStartTime: isSet(object.pinStartTime) ? globalThis.String(object.pinStartTime) : "0",
      pinEndTime: isSet(object.pinEndTime) ? globalThis.String(object.pinEndTime) : "0",
      pinReadyTime: isSet(object.pinReadyTime) ? globalThis.String(object.pinReadyTime) : "0",
    };
  },

  toJSON(message: LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo): unknown {
    const obj: any = {};
    if (message.pinStartTime !== "0") {
      obj.pinStartTime = message.pinStartTime;
    }
    if (message.pinEndTime !== "0") {
      obj.pinEndTime = message.pinEndTime;
    }
    if (message.pinReadyTime !== "0") {
      obj.pinReadyTime = message.pinReadyTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo>, I>>(
    base?: I,
  ): LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo {
    return LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo>, I>>(
    object: I,
  ): LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo {
    const message = createBaseLiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo();
    message.pinStartTime = object.pinStartTime ?? "0";
    message.pinEndTime = object.pinEndTime ?? "0";
    message.pinReadyTime = object.pinReadyTime ?? "0";
    return message;
  },
};

function createBaseLiveStreamGoal_LiveStreamSubGoalGift(): LiveStreamGoal_LiveStreamSubGoalGift {
  return { name: "", icon: undefined, diamondCount: "0", type: 0 };
}

export const LiveStreamGoal_LiveStreamSubGoalGiftDecoder: MessageFns<LiveStreamGoal_LiveStreamSubGoalGift> = {
  encode(message: LiveStreamGoal_LiveStreamSubGoalGift, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
    }
    if (message.diamondCount !== "0") {
      writer.uint32(24).int64(message.diamondCount);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal_LiveStreamSubGoalGift {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_LiveStreamSubGoalGift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.diamondCount = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_LiveStreamSubGoalGift {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      diamondCount: isSet(object.diamondCount) ? globalThis.String(object.diamondCount) : "0",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
    };
  },

  toJSON(message: LiveStreamGoal_LiveStreamSubGoalGift): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.diamondCount !== "0") {
      obj.diamondCount = message.diamondCount;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamSubGoalGift>, I>>(
    base?: I,
  ): LiveStreamGoal_LiveStreamSubGoalGift {
    return LiveStreamGoal_LiveStreamSubGoalGift.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamSubGoalGift>, I>>(
    object: I,
  ): LiveStreamGoal_LiveStreamSubGoalGift {
    const message = createBaseLiveStreamGoal_LiveStreamSubGoalGift();
    message.name = object.name ?? "";
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.diamondCount = object.diamondCount ?? "0";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseLiveStreamGoal_LiveStreamGoalContributor(): LiveStreamGoal_LiveStreamGoalContributor {
  return {
    userId: "0",
    avatar: undefined,
    displayId: "",
    score: "0",
    userIdStr: "",
    inRoom: false,
    isFriend: false,
    followByOwner: false,
    isFistContribute: false,
    subGoalContributions: [],
  };
}

export const LiveStreamGoal_LiveStreamGoalContributorDecoder: MessageFns<LiveStreamGoal_LiveStreamGoalContributor> = {
  encode(message: LiveStreamGoal_LiveStreamGoalContributor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.avatar !== undefined) {
      ImageDecoder.encode(message.avatar, writer.uint32(18).fork()).join();
    }
    if (message.displayId !== "") {
      writer.uint32(26).string(message.displayId);
    }
    if (message.score !== "0") {
      writer.uint32(32).int64(message.score);
    }
    if (message.userIdStr !== "") {
      writer.uint32(42).string(message.userIdStr);
    }
    if (message.inRoom !== false) {
      writer.uint32(48).bool(message.inRoom);
    }
    if (message.isFriend !== false) {
      writer.uint32(56).bool(message.isFriend);
    }
    if (message.followByOwner !== false) {
      writer.uint32(72).bool(message.followByOwner);
    }
    if (message.isFistContribute !== false) {
      writer.uint32(80).bool(message.isFistContribute);
    }
    for (const v of message.subGoalContributions) {
      LiveStreamGoal_LiveStreamGoalContributor_SubGoalContributionDecoder.encode(v!, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal_LiveStreamGoalContributor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_LiveStreamGoalContributor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.avatar = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.score = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userIdStr = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.inRoom = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isFriend = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.followByOwner = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isFistContribute = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.subGoalContributions.push(
            LiveStreamGoal_LiveStreamGoalContributor_SubGoalContributionDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_LiveStreamGoalContributor {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      avatar: isSet(object.avatar) ? Image.fromJSON(object.avatar) : undefined,
      displayId: isSet(object.displayId) ? globalThis.String(object.displayId) : "",
      score: isSet(object.score) ? globalThis.String(object.score) : "0",
      userIdStr: isSet(object.userIdStr) ? globalThis.String(object.userIdStr) : "",
      inRoom: isSet(object.inRoom) ? globalThis.Boolean(object.inRoom) : false,
      isFriend: isSet(object.isFriend) ? globalThis.Boolean(object.isFriend) : false,
      followByOwner: isSet(object.followByOwner) ? globalThis.Boolean(object.followByOwner) : false,
      isFistContribute: isSet(object.isFistContribute) ? globalThis.Boolean(object.isFistContribute) : false,
      subGoalContributions: globalThis.Array.isArray(object?.subGoalContributions)
        ? object.subGoalContributions.map((e: any) =>
          LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: LiveStreamGoal_LiveStreamGoalContributor): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.avatar !== undefined) {
      obj.avatar = Image.toJSON(message.avatar);
    }
    if (message.displayId !== "") {
      obj.displayId = message.displayId;
    }
    if (message.score !== "0") {
      obj.score = message.score;
    }
    if (message.userIdStr !== "") {
      obj.userIdStr = message.userIdStr;
    }
    if (message.inRoom !== false) {
      obj.inRoom = message.inRoom;
    }
    if (message.isFriend !== false) {
      obj.isFriend = message.isFriend;
    }
    if (message.followByOwner !== false) {
      obj.followByOwner = message.followByOwner;
    }
    if (message.isFistContribute !== false) {
      obj.isFistContribute = message.isFistContribute;
    }
    if (message.subGoalContributions?.length) {
      obj.subGoalContributions = message.subGoalContributions.map((e) =>
        LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamGoalContributor>, I>>(
    base?: I,
  ): LiveStreamGoal_LiveStreamGoalContributor {
    return LiveStreamGoal_LiveStreamGoalContributor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamGoalContributor>, I>>(
    object: I,
  ): LiveStreamGoal_LiveStreamGoalContributor {
    const message = createBaseLiveStreamGoal_LiveStreamGoalContributor();
    message.userId = object.userId ?? "0";
    message.avatar = (object.avatar !== undefined && object.avatar !== null)
      ? Image.fromPartial(object.avatar)
      : undefined;
    message.displayId = object.displayId ?? "";
    message.score = object.score ?? "0";
    message.userIdStr = object.userIdStr ?? "";
    message.inRoom = object.inRoom ?? false;
    message.isFriend = object.isFriend ?? false;
    message.followByOwner = object.followByOwner ?? false;
    message.isFistContribute = object.isFistContribute ?? false;
    message.subGoalContributions =
      object.subGoalContributions?.map((e) =>
        LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseLiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution(): LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution {
  return { id: "", contributionCount: "0" };
}

export const LiveStreamGoal_LiveStreamGoalContributor_SubGoalContributionDecoder: MessageFns<LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution> = {
  encode(
    message: LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.contributionCount !== "0") {
      writer.uint32(16).int64(message.contributionCount);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contributionCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      contributionCount: isSet(object.contributionCount) ? globalThis.String(object.contributionCount) : "0",
    };
  },

  toJSON(message: LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.contributionCount !== "0") {
      obj.contributionCount = message.contributionCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution>, I>>(
    base?: I,
  ): LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution {
    return LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution>, I>>(
    object: I,
  ): LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution {
    const message = createBaseLiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution();
    message.id = object.id ?? "";
    message.contributionCount = object.contributionCount ?? "0";
    return message;
  },
};

function createBaseLiveStreamGoal_GoalStats(): LiveStreamGoal_GoalStats {
  return { totalCoins: "0", totalContributor: "0", comparison: undefined, totalNewFans: "0" };
}

export const LiveStreamGoal_GoalStatsDecoder: MessageFns<LiveStreamGoal_GoalStats> = {
  encode(message: LiveStreamGoal_GoalStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalCoins !== "0") {
      writer.uint32(8).int64(message.totalCoins);
    }
    if (message.totalContributor !== "0") {
      writer.uint32(16).int64(message.totalContributor);
    }
    if (message.comparison !== undefined) {
      LiveStreamGoal_GoalStats_GoalComparisonDecoder.encode(message.comparison, writer.uint32(26).fork()).join();
    }
    if (message.totalNewFans !== "0") {
      writer.uint32(32).int64(message.totalNewFans);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal_GoalStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_GoalStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalCoins = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalContributor = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.comparison = LiveStreamGoal_GoalStats_GoalComparisonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalNewFans = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_GoalStats {
    return {
      totalCoins: isSet(object.totalCoins) ? globalThis.String(object.totalCoins) : "0",
      totalContributor: isSet(object.totalContributor) ? globalThis.String(object.totalContributor) : "0",
      comparison: isSet(object.comparison)
        ? LiveStreamGoal_GoalStats_GoalComparison.fromJSON(object.comparison)
        : undefined,
      totalNewFans: isSet(object.totalNewFans) ? globalThis.String(object.totalNewFans) : "0",
    };
  },

  toJSON(message: LiveStreamGoal_GoalStats): unknown {
    const obj: any = {};
    if (message.totalCoins !== "0") {
      obj.totalCoins = message.totalCoins;
    }
    if (message.totalContributor !== "0") {
      obj.totalContributor = message.totalContributor;
    }
    if (message.comparison !== undefined) {
      obj.comparison = LiveStreamGoal_GoalStats_GoalComparison.toJSON(message.comparison);
    }
    if (message.totalNewFans !== "0") {
      obj.totalNewFans = message.totalNewFans;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_GoalStats>, I>>(base?: I): LiveStreamGoal_GoalStats {
    return LiveStreamGoal_GoalStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_GoalStats>, I>>(object: I): LiveStreamGoal_GoalStats {
    const message = createBaseLiveStreamGoal_GoalStats();
    message.totalCoins = object.totalCoins ?? "0";
    message.totalContributor = object.totalContributor ?? "0";
    message.comparison = (object.comparison !== undefined && object.comparison !== null)
      ? LiveStreamGoal_GoalStats_GoalComparison.fromPartial(object.comparison)
      : undefined;
    message.totalNewFans = object.totalNewFans ?? "0";
    return message;
  },
};

function createBaseLiveStreamGoal_GoalStats_GoalComparison(): LiveStreamGoal_GoalStats_GoalComparison {
  return { coinsIncr: "0", contributorIncr: "0" };
}

export const LiveStreamGoal_GoalStats_GoalComparisonDecoder: MessageFns<LiveStreamGoal_GoalStats_GoalComparison> = {
  encode(message: LiveStreamGoal_GoalStats_GoalComparison, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.coinsIncr !== "0") {
      writer.uint32(8).int64(message.coinsIncr);
    }
    if (message.contributorIncr !== "0") {
      writer.uint32(16).int64(message.contributorIncr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoal_GoalStats_GoalComparison {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoal_GoalStats_GoalComparison();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.coinsIncr = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contributorIncr = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoal_GoalStats_GoalComparison {
    return {
      coinsIncr: isSet(object.coinsIncr) ? globalThis.String(object.coinsIncr) : "0",
      contributorIncr: isSet(object.contributorIncr) ? globalThis.String(object.contributorIncr) : "0",
    };
  },

  toJSON(message: LiveStreamGoal_GoalStats_GoalComparison): unknown {
    const obj: any = {};
    if (message.coinsIncr !== "0") {
      obj.coinsIncr = message.coinsIncr;
    }
    if (message.contributorIncr !== "0") {
      obj.contributorIncr = message.contributorIncr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoal_GoalStats_GoalComparison>, I>>(
    base?: I,
  ): LiveStreamGoal_GoalStats_GoalComparison {
    return LiveStreamGoal_GoalStats_GoalComparison.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoal_GoalStats_GoalComparison>, I>>(
    object: I,
  ): LiveStreamGoal_GoalStats_GoalComparison {
    const message = createBaseLiveStreamGoal_GoalStats_GoalComparison();
    message.coinsIncr = object.coinsIncr ?? "0";
    message.contributorIncr = object.contributorIncr ?? "0";
    return message;
  },
};

function createBaseLiveStreamGoalIndicator(): LiveStreamGoalIndicator {
  return { key: "", op: 0 };
}

export const LiveStreamGoalIndicatorDecoder: MessageFns<LiveStreamGoalIndicator> = {
  encode(message: LiveStreamGoalIndicator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.op !== 0) {
      writer.uint32(16).int32(message.op);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveStreamGoalIndicator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveStreamGoalIndicator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.op = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveStreamGoalIndicator {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      op: isSet(object.op) ? globalThis.Number(object.op) : 0,
    };
  },

  toJSON(message: LiveStreamGoalIndicator): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.op !== 0) {
      obj.op = Math.round(message.op);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveStreamGoalIndicator>, I>>(base?: I): LiveStreamGoalIndicator {
    return LiveStreamGoalIndicator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveStreamGoalIndicator>, I>>(object: I): LiveStreamGoalIndicator {
    const message = createBaseLiveStreamGoalIndicator();
    message.key = object.key ?? "";
    message.op = object.op ?? 0;
    return message;
  },
};

function createBaseRanking(): Ranking {
  return { type: "", label: "", color: undefined, details: [] };
}

export const RankingDecoder: MessageFns<Ranking> = {
  encode(message: Ranking, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.color !== undefined) {
      TikTokColorDecoder.encode(message.color, writer.uint32(26).fork()).join();
    }
    for (const v of message.details) {
      ValueLabelDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ranking {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRanking();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = TikTokColorDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.details.push(ValueLabelDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ranking {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      color: isSet(object.color) ? TikTokColor.fromJSON(object.color) : undefined,
      details: globalThis.Array.isArray(object?.details) ? object.details.map((e: any) => ValueLabel.fromJSON(e)) : [],
    };
  },

  toJSON(message: Ranking): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.color !== undefined) {
      obj.color = TikTokColor.toJSON(message.color);
    }
    if (message.details?.length) {
      obj.details = message.details.map((e) => ValueLabel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ranking>, I>>(base?: I): Ranking {
    return Ranking.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ranking>, I>>(object: I): Ranking {
    const message = createBaseRanking();
    message.type = object.type ?? "";
    message.label = object.label ?? "";
    message.color = (object.color !== undefined && object.color !== null)
      ? TikTokColor.fromPartial(object.color)
      : undefined;
    message.details = object.details?.map((e) => ValueLabel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTikTokColor(): TikTokColor {
  return { color: "", id: "0", data1: 0 };
}

export const TikTokColorDecoder: MessageFns<TikTokColor> = {
  encode(message: TikTokColor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== "") {
      writer.uint32(10).string(message.color);
    }
    if (message.id !== "0") {
      writer.uint32(32).uint64(message.id);
    }
    if (message.data1 !== 0) {
      writer.uint32(48).uint32(message.data1);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TikTokColor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTikTokColor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.id = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.data1 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TikTokColor {
    return {
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      data1: isSet(object.data1) ? globalThis.Number(object.data1) : 0,
    };
  },

  toJSON(message: TikTokColor): unknown {
    const obj: any = {};
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.data1 !== 0) {
      obj.data1 = Math.round(message.data1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TikTokColor>, I>>(base?: I): TikTokColor {
    return TikTokColor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TikTokColor>, I>>(object: I): TikTokColor {
    const message = createBaseTikTokColor();
    message.color = object.color ?? "";
    message.id = object.id ?? "0";
    message.data1 = object.data1 ?? 0;
    return message;
  },
};

function createBaseValueLabel(): ValueLabel {
  return { data: 0, label: "", label2: "", label3: "" };
}

export const ValueLabelDecoder: MessageFns<ValueLabel> = {
  encode(message: ValueLabel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== 0) {
      writer.uint32(8).uint32(message.data);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.label2 !== "") {
      writer.uint32(26).string(message.label2);
    }
    if (message.label3 !== "") {
      writer.uint32(90).string(message.label3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValueLabel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValueLabel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.data = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.label2 = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.label3 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValueLabel {
    return {
      data: isSet(object.data) ? globalThis.Number(object.data) : 0,
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      label2: isSet(object.label2) ? globalThis.String(object.label2) : "",
      label3: isSet(object.label3) ? globalThis.String(object.label3) : "",
    };
  },

  toJSON(message: ValueLabel): unknown {
    const obj: any = {};
    if (message.data !== 0) {
      obj.data = Math.round(message.data);
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.label2 !== "") {
      obj.label2 = message.label2;
    }
    if (message.label3 !== "") {
      obj.label3 = message.label3;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValueLabel>, I>>(base?: I): ValueLabel {
    return ValueLabel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValueLabel>, I>>(object: I): ValueLabel {
    const message = createBaseValueLabel();
    message.data = object.data ?? 0;
    message.label = object.label ?? "";
    message.label2 = object.label2 ?? "";
    message.label3 = object.label3 ?? "";
    return message;
  },
};

function createBaseTimeStampContainer(): TimeStampContainer {
  return { timestamp1: "0", timestamp2: "0", timestamp3: "0" };
}

export const TimeStampContainerDecoder: MessageFns<TimeStampContainer> = {
  encode(message: TimeStampContainer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp1 !== "0") {
      writer.uint32(8).uint64(message.timestamp1);
    }
    if (message.timestamp2 !== "0") {
      writer.uint32(16).uint64(message.timestamp2);
    }
    if (message.timestamp3 !== "0") {
      writer.uint32(24).uint64(message.timestamp3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeStampContainer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeStampContainer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp1 = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp2 = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp3 = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeStampContainer {
    return {
      timestamp1: isSet(object.timestamp1) ? globalThis.String(object.timestamp1) : "0",
      timestamp2: isSet(object.timestamp2) ? globalThis.String(object.timestamp2) : "0",
      timestamp3: isSet(object.timestamp3) ? globalThis.String(object.timestamp3) : "0",
    };
  },

  toJSON(message: TimeStampContainer): unknown {
    const obj: any = {};
    if (message.timestamp1 !== "0") {
      obj.timestamp1 = message.timestamp1;
    }
    if (message.timestamp2 !== "0") {
      obj.timestamp2 = message.timestamp2;
    }
    if (message.timestamp3 !== "0") {
      obj.timestamp3 = message.timestamp3;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimeStampContainer>, I>>(base?: I): TimeStampContainer {
    return TimeStampContainer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimeStampContainer>, I>>(object: I): TimeStampContainer {
    const message = createBaseTimeStampContainer();
    message.timestamp1 = object.timestamp1 ?? "0";
    message.timestamp2 = object.timestamp2 ?? "0";
    message.timestamp3 = object.timestamp3 ?? "0";
    return message;
  },
};

function createBasePollStartContent(): PollStartContent {
  return { StartTime: "0", EndTime: "0", OptionList: [], Title: "", Operator: undefined };
}

export const PollStartContentDecoder: MessageFns<PollStartContent> = {
  encode(message: PollStartContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.StartTime !== "0") {
      writer.uint32(8).int64(message.StartTime);
    }
    if (message.EndTime !== "0") {
      writer.uint32(16).int64(message.EndTime);
    }
    for (const v of message.OptionList) {
      PollOptionInfoDecoder.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.Title !== "") {
      writer.uint32(34).string(message.Title);
    }
    if (message.Operator !== undefined) {
      UserDecoder.encode(message.Operator, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollStartContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollStartContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.StartTime = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.EndTime = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.OptionList.push(PollOptionInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.Title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.Operator = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollStartContent {
    return {
      StartTime: isSet(object.StartTime) ? globalThis.String(object.StartTime) : "0",
      EndTime: isSet(object.EndTime) ? globalThis.String(object.EndTime) : "0",
      OptionList: globalThis.Array.isArray(object?.OptionList)
        ? object.OptionList.map((e: any) => PollOptionInfo.fromJSON(e))
        : [],
      Title: isSet(object.Title) ? globalThis.String(object.Title) : "",
      Operator: isSet(object.Operator) ? User.fromJSON(object.Operator) : undefined,
    };
  },

  toJSON(message: PollStartContent): unknown {
    const obj: any = {};
    if (message.StartTime !== "0") {
      obj.StartTime = message.StartTime;
    }
    if (message.EndTime !== "0") {
      obj.EndTime = message.EndTime;
    }
    if (message.OptionList?.length) {
      obj.OptionList = message.OptionList.map((e) => PollOptionInfo.toJSON(e));
    }
    if (message.Title !== "") {
      obj.Title = message.Title;
    }
    if (message.Operator !== undefined) {
      obj.Operator = User.toJSON(message.Operator);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollStartContent>, I>>(base?: I): PollStartContent {
    return PollStartContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollStartContent>, I>>(object: I): PollStartContent {
    const message = createBasePollStartContent();
    message.StartTime = object.StartTime ?? "0";
    message.EndTime = object.EndTime ?? "0";
    message.OptionList = object.OptionList?.map((e) => PollOptionInfo.fromPartial(e)) || [];
    message.Title = object.Title ?? "";
    message.Operator = (object.Operator !== undefined && object.Operator !== null)
      ? User.fromPartial(object.Operator)
      : undefined;
    return message;
  },
};

function createBasePollEndContent(): PollEndContent {
  return { EndType: 0, OptionList: [], Operator: undefined };
}

export const PollEndContentDecoder: MessageFns<PollEndContent> = {
  encode(message: PollEndContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.EndType !== 0) {
      writer.uint32(8).int32(message.EndType);
    }
    for (const v of message.OptionList) {
      PollOptionInfoDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.Operator !== undefined) {
      UserDecoder.encode(message.Operator, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollEndContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollEndContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.EndType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.OptionList.push(PollOptionInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.Operator = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollEndContent {
    return {
      EndType: isSet(object.EndType) ? pollEndTypeFromJSON(object.EndType) : 0,
      OptionList: globalThis.Array.isArray(object?.OptionList)
        ? object.OptionList.map((e: any) => PollOptionInfo.fromJSON(e))
        : [],
      Operator: isSet(object.Operator) ? User.fromJSON(object.Operator) : undefined,
    };
  },

  toJSON(message: PollEndContent): unknown {
    const obj: any = {};
    if (message.EndType !== 0) {
      obj.EndType = pollEndTypeToJSON(message.EndType);
    }
    if (message.OptionList?.length) {
      obj.OptionList = message.OptionList.map((e) => PollOptionInfo.toJSON(e));
    }
    if (message.Operator !== undefined) {
      obj.Operator = User.toJSON(message.Operator);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollEndContent>, I>>(base?: I): PollEndContent {
    return PollEndContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollEndContent>, I>>(object: I): PollEndContent {
    const message = createBasePollEndContent();
    message.EndType = object.EndType ?? 0;
    message.OptionList = object.OptionList?.map((e) => PollOptionInfo.fromPartial(e)) || [];
    message.Operator = (object.Operator !== undefined && object.Operator !== null)
      ? User.fromPartial(object.Operator)
      : undefined;
    return message;
  },
};

function createBasePollOptionInfo(): PollOptionInfo {
  return { Votes: 0, DisplayContent: "", OptionIdx: 0, VoteUserList: [] };
}

export const PollOptionInfoDecoder: MessageFns<PollOptionInfo> = {
  encode(message: PollOptionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Votes !== 0) {
      writer.uint32(8).int32(message.Votes);
    }
    if (message.DisplayContent !== "") {
      writer.uint32(18).string(message.DisplayContent);
    }
    if (message.OptionIdx !== 0) {
      writer.uint32(24).int32(message.OptionIdx);
    }
    for (const v of message.VoteUserList) {
      VoteUserDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollOptionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollOptionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Votes = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.DisplayContent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.OptionIdx = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.VoteUserList.push(VoteUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollOptionInfo {
    return {
      Votes: isSet(object.Votes) ? globalThis.Number(object.Votes) : 0,
      DisplayContent: isSet(object.DisplayContent) ? globalThis.String(object.DisplayContent) : "",
      OptionIdx: isSet(object.OptionIdx) ? globalThis.Number(object.OptionIdx) : 0,
      VoteUserList: globalThis.Array.isArray(object?.VoteUserList)
        ? object.VoteUserList.map((e: any) => VoteUser.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PollOptionInfo): unknown {
    const obj: any = {};
    if (message.Votes !== 0) {
      obj.Votes = Math.round(message.Votes);
    }
    if (message.DisplayContent !== "") {
      obj.DisplayContent = message.DisplayContent;
    }
    if (message.OptionIdx !== 0) {
      obj.OptionIdx = Math.round(message.OptionIdx);
    }
    if (message.VoteUserList?.length) {
      obj.VoteUserList = message.VoteUserList.map((e) => VoteUser.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollOptionInfo>, I>>(base?: I): PollOptionInfo {
    return PollOptionInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollOptionInfo>, I>>(object: I): PollOptionInfo {
    const message = createBasePollOptionInfo();
    message.Votes = object.Votes ?? 0;
    message.DisplayContent = object.DisplayContent ?? "";
    message.OptionIdx = object.OptionIdx ?? 0;
    message.VoteUserList = object.VoteUserList?.map((e) => VoteUser.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVoteUser(): VoteUser {
  return { UserId: "0", NickName: "", AvatarThumb: undefined };
}

export const VoteUserDecoder: MessageFns<VoteUser> = {
  encode(message: VoteUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.UserId !== "0") {
      writer.uint32(8).int64(message.UserId);
    }
    if (message.NickName !== "") {
      writer.uint32(18).string(message.NickName);
    }
    if (message.AvatarThumb !== undefined) {
      ImageDecoder.encode(message.AvatarThumb, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VoteUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.UserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.NickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.AvatarThumb = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteUser {
    return {
      UserId: isSet(object.UserId) ? globalThis.String(object.UserId) : "0",
      NickName: isSet(object.NickName) ? globalThis.String(object.NickName) : "",
      AvatarThumb: isSet(object.AvatarThumb) ? Image.fromJSON(object.AvatarThumb) : undefined,
    };
  },

  toJSON(message: VoteUser): unknown {
    const obj: any = {};
    if (message.UserId !== "0") {
      obj.UserId = message.UserId;
    }
    if (message.NickName !== "") {
      obj.NickName = message.NickName;
    }
    if (message.AvatarThumb !== undefined) {
      obj.AvatarThumb = Image.toJSON(message.AvatarThumb);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoteUser>, I>>(base?: I): VoteUser {
    return VoteUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoteUser>, I>>(object: I): VoteUser {
    const message = createBaseVoteUser();
    message.UserId = object.UserId ?? "0";
    message.NickName = object.NickName ?? "";
    message.AvatarThumb = (object.AvatarThumb !== undefined && object.AvatarThumb !== null)
      ? Image.fromPartial(object.AvatarThumb)
      : undefined;
    return message;
  },
};

function createBasePollUpdateVotesContent(): PollUpdateVotesContent {
  return { OptionList: [] };
}

export const PollUpdateVotesContentDecoder: MessageFns<PollUpdateVotesContent> = {
  encode(message: PollUpdateVotesContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.OptionList) {
      PollOptionInfoDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollUpdateVotesContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollUpdateVotesContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.OptionList.push(PollOptionInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollUpdateVotesContent {
    return {
      OptionList: globalThis.Array.isArray(object?.OptionList)
        ? object.OptionList.map((e: any) => PollOptionInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PollUpdateVotesContent): unknown {
    const obj: any = {};
    if (message.OptionList?.length) {
      obj.OptionList = message.OptionList.map((e) => PollOptionInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollUpdateVotesContent>, I>>(base?: I): PollUpdateVotesContent {
    return PollUpdateVotesContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollUpdateVotesContent>, I>>(object: I): PollUpdateVotesContent {
    const message = createBasePollUpdateVotesContent();
    message.OptionList = object.OptionList?.map((e) => PollOptionInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserFanTicket(): UserFanTicket {
  return { UserId: "0", FanTicket: "0", MatchTotalScore: "0", MatchRank: 0 };
}

export const UserFanTicketDecoder: MessageFns<UserFanTicket> = {
  encode(message: UserFanTicket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.UserId !== "0") {
      writer.uint32(8).int64(message.UserId);
    }
    if (message.FanTicket !== "0") {
      writer.uint32(16).int64(message.FanTicket);
    }
    if (message.MatchTotalScore !== "0") {
      writer.uint32(24).int64(message.MatchTotalScore);
    }
    if (message.MatchRank !== 0) {
      writer.uint32(32).int32(message.MatchRank);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserFanTicket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserFanTicket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.UserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.FanTicket = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.MatchTotalScore = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.MatchRank = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserFanTicket {
    return {
      UserId: isSet(object.UserId) ? globalThis.String(object.UserId) : "0",
      FanTicket: isSet(object.FanTicket) ? globalThis.String(object.FanTicket) : "0",
      MatchTotalScore: isSet(object.MatchTotalScore) ? globalThis.String(object.MatchTotalScore) : "0",
      MatchRank: isSet(object.MatchRank) ? globalThis.Number(object.MatchRank) : 0,
    };
  },

  toJSON(message: UserFanTicket): unknown {
    const obj: any = {};
    if (message.UserId !== "0") {
      obj.UserId = message.UserId;
    }
    if (message.FanTicket !== "0") {
      obj.FanTicket = message.FanTicket;
    }
    if (message.MatchTotalScore !== "0") {
      obj.MatchTotalScore = message.MatchTotalScore;
    }
    if (message.MatchRank !== 0) {
      obj.MatchRank = Math.round(message.MatchRank);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserFanTicket>, I>>(base?: I): UserFanTicket {
    return UserFanTicket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserFanTicket>, I>>(object: I): UserFanTicket {
    const message = createBaseUserFanTicket();
    message.UserId = object.UserId ?? "0";
    message.FanTicket = object.FanTicket ?? "0";
    message.MatchTotalScore = object.MatchTotalScore ?? "0";
    message.MatchRank = object.MatchRank ?? 0;
    return message;
  },
};

function createBaseFanTicketRoomNoticeContent(): FanTicketRoomNoticeContent {
  return {
    UserFanTicketList: [],
    TotalLinkMicFanTicket: "0",
    MatchId: "0",
    EventTime: "0",
    FanTicketIconUrl: "",
    playId: "0",
    playScene: 0,
  };
}

export const FanTicketRoomNoticeContentDecoder: MessageFns<FanTicketRoomNoticeContent> = {
  encode(message: FanTicketRoomNoticeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.UserFanTicketList) {
      UserFanTicketDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.TotalLinkMicFanTicket !== "0") {
      writer.uint32(16).int64(message.TotalLinkMicFanTicket);
    }
    if (message.MatchId !== "0") {
      writer.uint32(24).int64(message.MatchId);
    }
    if (message.EventTime !== "0") {
      writer.uint32(32).int64(message.EventTime);
    }
    if (message.FanTicketIconUrl !== "") {
      writer.uint32(42).string(message.FanTicketIconUrl);
    }
    if (message.playId !== "0") {
      writer.uint32(48).int64(message.playId);
    }
    if (message.playScene !== 0) {
      writer.uint32(56).int32(message.playScene);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FanTicketRoomNoticeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFanTicketRoomNoticeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.UserFanTicketList.push(UserFanTicketDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.TotalLinkMicFanTicket = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.MatchId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.EventTime = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.FanTicketIconUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.playId = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.playScene = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FanTicketRoomNoticeContent {
    return {
      UserFanTicketList: globalThis.Array.isArray(object?.UserFanTicketList)
        ? object.UserFanTicketList.map((e: any) => UserFanTicket.fromJSON(e))
        : [],
      TotalLinkMicFanTicket: isSet(object.TotalLinkMicFanTicket)
        ? globalThis.String(object.TotalLinkMicFanTicket)
        : "0",
      MatchId: isSet(object.MatchId) ? globalThis.String(object.MatchId) : "0",
      EventTime: isSet(object.EventTime) ? globalThis.String(object.EventTime) : "0",
      FanTicketIconUrl: isSet(object.FanTicketIconUrl) ? globalThis.String(object.FanTicketIconUrl) : "",
      playId: isSet(object.playId) ? globalThis.String(object.playId) : "0",
      playScene: isSet(object.playScene) ? playSceneFromJSON(object.playScene) : 0,
    };
  },

  toJSON(message: FanTicketRoomNoticeContent): unknown {
    const obj: any = {};
    if (message.UserFanTicketList?.length) {
      obj.UserFanTicketList = message.UserFanTicketList.map((e) => UserFanTicket.toJSON(e));
    }
    if (message.TotalLinkMicFanTicket !== "0") {
      obj.TotalLinkMicFanTicket = message.TotalLinkMicFanTicket;
    }
    if (message.MatchId !== "0") {
      obj.MatchId = message.MatchId;
    }
    if (message.EventTime !== "0") {
      obj.EventTime = message.EventTime;
    }
    if (message.FanTicketIconUrl !== "") {
      obj.FanTicketIconUrl = message.FanTicketIconUrl;
    }
    if (message.playId !== "0") {
      obj.playId = message.playId;
    }
    if (message.playScene !== 0) {
      obj.playScene = playSceneToJSON(message.playScene);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FanTicketRoomNoticeContent>, I>>(base?: I): FanTicketRoomNoticeContent {
    return FanTicketRoomNoticeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FanTicketRoomNoticeContent>, I>>(object: I): FanTicketRoomNoticeContent {
    const message = createBaseFanTicketRoomNoticeContent();
    message.UserFanTicketList = object.UserFanTicketList?.map((e) => UserFanTicket.fromPartial(e)) || [];
    message.TotalLinkMicFanTicket = object.TotalLinkMicFanTicket ?? "0";
    message.MatchId = object.MatchId ?? "0";
    message.EventTime = object.EventTime ?? "0";
    message.FanTicketIconUrl = object.FanTicketIconUrl ?? "";
    message.playId = object.playId ?? "0";
    message.playScene = object.playScene ?? 0;
    return message;
  },
};

function createBaseLinkerAcceptNoticeContent(): LinkerAcceptNoticeContent {
  return { fromUserId: "0", fromRoomId: "0", toUserId: "0" };
}

export const LinkerAcceptNoticeContentDecoder: MessageFns<LinkerAcceptNoticeContent> = {
  encode(message: LinkerAcceptNoticeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromUserId !== "0") {
      writer.uint32(8).int64(message.fromUserId);
    }
    if (message.fromRoomId !== "0") {
      writer.uint32(16).int64(message.fromRoomId);
    }
    if (message.toUserId !== "0") {
      writer.uint32(24).int64(message.toUserId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerAcceptNoticeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerAcceptNoticeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromRoomId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerAcceptNoticeContent {
    return {
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      fromRoomId: isSet(object.fromRoomId) ? globalThis.String(object.fromRoomId) : "0",
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
    };
  },

  toJSON(message: LinkerAcceptNoticeContent): unknown {
    const obj: any = {};
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.fromRoomId !== "0") {
      obj.fromRoomId = message.fromRoomId;
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerAcceptNoticeContent>, I>>(base?: I): LinkerAcceptNoticeContent {
    return LinkerAcceptNoticeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerAcceptNoticeContent>, I>>(object: I): LinkerAcceptNoticeContent {
    const message = createBaseLinkerAcceptNoticeContent();
    message.fromUserId = object.fromUserId ?? "0";
    message.fromRoomId = object.fromRoomId ?? "0";
    message.toUserId = object.toUserId ?? "0";
    return message;
  },
};

function createBaseLinkerCancelContent(): LinkerCancelContent {
  return { fromUserId: "0", toUserId: "0", cancelType: "0", actionId: "0" };
}

export const LinkerCancelContentDecoder: MessageFns<LinkerCancelContent> = {
  encode(message: LinkerCancelContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromUserId !== "0") {
      writer.uint32(8).int64(message.fromUserId);
    }
    if (message.toUserId !== "0") {
      writer.uint32(16).int64(message.toUserId);
    }
    if (message.cancelType !== "0") {
      writer.uint32(24).int64(message.cancelType);
    }
    if (message.actionId !== "0") {
      writer.uint32(32).int64(message.actionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerCancelContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerCancelContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.cancelType = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.actionId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerCancelContent {
    return {
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
      cancelType: isSet(object.cancelType) ? globalThis.String(object.cancelType) : "0",
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "0",
    };
  },

  toJSON(message: LinkerCancelContent): unknown {
    const obj: any = {};
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    if (message.cancelType !== "0") {
      obj.cancelType = message.cancelType;
    }
    if (message.actionId !== "0") {
      obj.actionId = message.actionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerCancelContent>, I>>(base?: I): LinkerCancelContent {
    return LinkerCancelContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerCancelContent>, I>>(object: I): LinkerCancelContent {
    const message = createBaseLinkerCancelContent();
    message.fromUserId = object.fromUserId ?? "0";
    message.toUserId = object.toUserId ?? "0";
    message.cancelType = object.cancelType ?? "0";
    message.actionId = object.actionId ?? "0";
    return message;
  },
};

function createBaseListUser(): ListUser {
  return {
    user: undefined,
    linkmicId: "0",
    linkmicIdStr: "",
    linkStatus: 0,
    linkType: 0,
    userPosition: 0,
    silenceStatus: 0,
    modifyTime: "0",
    linkerId: "0",
    roleType: 0,
  };
}

export const ListUserDecoder: MessageFns<ListUser> = {
  encode(message: ListUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.linkmicId !== "0") {
      writer.uint32(16).int64(message.linkmicId);
    }
    if (message.linkmicIdStr !== "") {
      writer.uint32(26).string(message.linkmicIdStr);
    }
    if (message.linkStatus !== 0) {
      writer.uint32(32).int32(message.linkStatus);
    }
    if (message.linkType !== 0) {
      writer.uint32(40).int32(message.linkType);
    }
    if (message.userPosition !== 0) {
      writer.uint32(48).int32(message.userPosition);
    }
    if (message.silenceStatus !== 0) {
      writer.uint32(56).int32(message.silenceStatus);
    }
    if (message.modifyTime !== "0") {
      writer.uint32(64).int64(message.modifyTime);
    }
    if (message.linkerId !== "0") {
      writer.uint32(72).int64(message.linkerId);
    }
    if (message.roleType !== 0) {
      writer.uint32(80).int32(message.roleType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.linkmicId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.linkmicIdStr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.linkStatus = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.linkType = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.userPosition = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.silenceStatus = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.modifyTime = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.linkerId = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.roleType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUser {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      linkmicId: isSet(object.linkmicId) ? globalThis.String(object.linkmicId) : "0",
      linkmicIdStr: isSet(object.linkmicIdStr) ? globalThis.String(object.linkmicIdStr) : "",
      linkStatus: isSet(object.linkStatus) ? linkmicRoleTypeFromJSON(object.linkStatus) : 0,
      linkType: isSet(object.linkType) ? linkTypeFromJSON(object.linkType) : 0,
      userPosition: isSet(object.userPosition) ? globalThis.Number(object.userPosition) : 0,
      silenceStatus: isSet(object.silenceStatus) ? linkSilenceStatusFromJSON(object.silenceStatus) : 0,
      modifyTime: isSet(object.modifyTime) ? globalThis.String(object.modifyTime) : "0",
      linkerId: isSet(object.linkerId) ? globalThis.String(object.linkerId) : "0",
      roleType: isSet(object.roleType) ? linkRoleTypeFromJSON(object.roleType) : 0,
    };
  },

  toJSON(message: ListUser): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.linkmicId !== "0") {
      obj.linkmicId = message.linkmicId;
    }
    if (message.linkmicIdStr !== "") {
      obj.linkmicIdStr = message.linkmicIdStr;
    }
    if (message.linkStatus !== 0) {
      obj.linkStatus = linkmicRoleTypeToJSON(message.linkStatus);
    }
    if (message.linkType !== 0) {
      obj.linkType = linkTypeToJSON(message.linkType);
    }
    if (message.userPosition !== 0) {
      obj.userPosition = Math.round(message.userPosition);
    }
    if (message.silenceStatus !== 0) {
      obj.silenceStatus = linkSilenceStatusToJSON(message.silenceStatus);
    }
    if (message.modifyTime !== "0") {
      obj.modifyTime = message.modifyTime;
    }
    if (message.linkerId !== "0") {
      obj.linkerId = message.linkerId;
    }
    if (message.roleType !== 0) {
      obj.roleType = linkRoleTypeToJSON(message.roleType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUser>, I>>(base?: I): ListUser {
    return ListUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUser>, I>>(object: I): ListUser {
    const message = createBaseListUser();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.linkmicId = object.linkmicId ?? "0";
    message.linkmicIdStr = object.linkmicIdStr ?? "";
    message.linkStatus = object.linkStatus ?? 0;
    message.linkType = object.linkType ?? 0;
    message.userPosition = object.userPosition ?? 0;
    message.silenceStatus = object.silenceStatus ?? 0;
    message.modifyTime = object.modifyTime ?? "0";
    message.linkerId = object.linkerId ?? "0";
    message.roleType = object.roleType ?? 0;
    return message;
  },
};

function createBaseLinkerCloseContent(): LinkerCloseContent {
  return {};
}

export const LinkerCloseContentDecoder: MessageFns<LinkerCloseContent> = {
  encode(_: LinkerCloseContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerCloseContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerCloseContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LinkerCloseContent {
    return {};
  },

  toJSON(_: LinkerCloseContent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerCloseContent>, I>>(base?: I): LinkerCloseContent {
    return LinkerCloseContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerCloseContent>, I>>(_: I): LinkerCloseContent {
    const message = createBaseLinkerCloseContent();
    return message;
  },
};

function createBaseLinkerCreateContent(): LinkerCreateContent {
  return { ownerId: "0", ownerRoomId: "0", linkType: "0" };
}

export const LinkerCreateContentDecoder: MessageFns<LinkerCreateContent> = {
  encode(message: LinkerCreateContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerId !== "0") {
      writer.uint32(8).int64(message.ownerId);
    }
    if (message.ownerRoomId !== "0") {
      writer.uint32(16).int64(message.ownerRoomId);
    }
    if (message.linkType !== "0") {
      writer.uint32(24).int64(message.linkType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerCreateContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerCreateContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ownerId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ownerRoomId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.linkType = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerCreateContent {
    return {
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "0",
      ownerRoomId: isSet(object.ownerRoomId) ? globalThis.String(object.ownerRoomId) : "0",
      linkType: isSet(object.linkType) ? globalThis.String(object.linkType) : "0",
    };
  },

  toJSON(message: LinkerCreateContent): unknown {
    const obj: any = {};
    if (message.ownerId !== "0") {
      obj.ownerId = message.ownerId;
    }
    if (message.ownerRoomId !== "0") {
      obj.ownerRoomId = message.ownerRoomId;
    }
    if (message.linkType !== "0") {
      obj.linkType = message.linkType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerCreateContent>, I>>(base?: I): LinkerCreateContent {
    return LinkerCreateContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerCreateContent>, I>>(object: I): LinkerCreateContent {
    const message = createBaseLinkerCreateContent();
    message.ownerId = object.ownerId ?? "0";
    message.ownerRoomId = object.ownerRoomId ?? "0";
    message.linkType = object.linkType ?? "0";
    return message;
  },
};

function createBaseLinkerEnterContent(): LinkerEnterContent {
  return { linkedUsersList: [], anchorMultiLiveEnum: 0, anchorSettingInfo: undefined };
}

export const LinkerEnterContentDecoder: MessageFns<LinkerEnterContent> = {
  encode(message: LinkerEnterContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.linkedUsersList) {
      ListUserDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.anchorMultiLiveEnum !== 0) {
      writer.uint32(16).int32(message.anchorMultiLiveEnum);
    }
    if (message.anchorSettingInfo !== undefined) {
      MultiLiveAnchorPanelSettingsDecoder.encode(message.anchorSettingInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerEnterContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerEnterContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.linkedUsersList.push(ListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.anchorMultiLiveEnum = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.anchorSettingInfo = MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerEnterContent {
    return {
      linkedUsersList: globalThis.Array.isArray(object?.linkedUsersList)
        ? object.linkedUsersList.map((e: any) => ListUser.fromJSON(e))
        : [],
      anchorMultiLiveEnum: isSet(object.anchorMultiLiveEnum)
        ? linkmicMultiLiveEnumFromJSON(object.anchorMultiLiveEnum)
        : 0,
      anchorSettingInfo: isSet(object.anchorSettingInfo)
        ? MultiLiveAnchorPanelSettings.fromJSON(object.anchorSettingInfo)
        : undefined,
    };
  },

  toJSON(message: LinkerEnterContent): unknown {
    const obj: any = {};
    if (message.linkedUsersList?.length) {
      obj.linkedUsersList = message.linkedUsersList.map((e) => ListUser.toJSON(e));
    }
    if (message.anchorMultiLiveEnum !== 0) {
      obj.anchorMultiLiveEnum = linkmicMultiLiveEnumToJSON(message.anchorMultiLiveEnum);
    }
    if (message.anchorSettingInfo !== undefined) {
      obj.anchorSettingInfo = MultiLiveAnchorPanelSettings.toJSON(message.anchorSettingInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerEnterContent>, I>>(base?: I): LinkerEnterContent {
    return LinkerEnterContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerEnterContent>, I>>(object: I): LinkerEnterContent {
    const message = createBaseLinkerEnterContent();
    message.linkedUsersList = object.linkedUsersList?.map((e) => ListUser.fromPartial(e)) || [];
    message.anchorMultiLiveEnum = object.anchorMultiLiveEnum ?? 0;
    message.anchorSettingInfo = (object.anchorSettingInfo !== undefined && object.anchorSettingInfo !== null)
      ? MultiLiveAnchorPanelSettings.fromPartial(object.anchorSettingInfo)
      : undefined;
    return message;
  },
};

function createBaseLinkerInviteContent(): LinkerInviteContent {
  return {
    fromUserId: "0",
    fromRoomId: "0",
    toRtcExtInfo: "",
    rtcJoinChannel: false,
    vendor: "0",
    secFromUserId: "",
    toLinkmicIdStr: "",
    fromUser: undefined,
    requiredMicIdx: "0",
    rtcExtInfoMap: {},
    multiLiveLayoutEnable: 0,
    multiLiveSetting: undefined,
    fromLinkmicIdStr: "",
    fromTopHostInfo: undefined,
    actionId: "0",
    linkedUsers: [],
    dialogInfo: undefined,
    punishEventInfo: undefined,
    fromRoomAgeRestricted: 0,
    abTestSetting: [],
    linkerInviteMsgExtra: undefined,
  };
}

export const LinkerInviteContentDecoder: MessageFns<LinkerInviteContent> = {
  encode(message: LinkerInviteContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromUserId !== "0") {
      writer.uint32(8).int64(message.fromUserId);
    }
    if (message.fromRoomId !== "0") {
      writer.uint32(16).int64(message.fromRoomId);
    }
    if (message.toRtcExtInfo !== "") {
      writer.uint32(26).string(message.toRtcExtInfo);
    }
    if (message.rtcJoinChannel !== false) {
      writer.uint32(32).bool(message.rtcJoinChannel);
    }
    if (message.vendor !== "0") {
      writer.uint32(40).int64(message.vendor);
    }
    if (message.secFromUserId !== "") {
      writer.uint32(50).string(message.secFromUserId);
    }
    if (message.toLinkmicIdStr !== "") {
      writer.uint32(58).string(message.toLinkmicIdStr);
    }
    if (message.fromUser !== undefined) {
      UserDecoder.encode(message.fromUser, writer.uint32(66).fork()).join();
    }
    if (message.requiredMicIdx !== "0") {
      writer.uint32(72).int64(message.requiredMicIdx);
    }
    Object.entries(message.rtcExtInfoMap).forEach(([key, value]) => {
      LinkerInviteContent_RtcExtInfoMapEntryDecoder.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.multiLiveLayoutEnable !== 0) {
      writer.uint32(88).int32(message.multiLiveLayoutEnable);
    }
    if (message.multiLiveSetting !== undefined) {
      MultiLiveAnchorPanelSettingsDecoder.encode(message.multiLiveSetting, writer.uint32(98).fork()).join();
    }
    if (message.fromLinkmicIdStr !== "") {
      writer.uint32(106).string(message.fromLinkmicIdStr);
    }
    if (message.fromTopHostInfo !== undefined) {
      LinkerInviteContent_InviteTopHostInfoDecoder.encode(message.fromTopHostInfo, writer.uint32(130).fork()).join();
    }
    if (message.actionId !== "0") {
      writer.uint32(136).int64(message.actionId);
    }
    for (const v of message.linkedUsers) {
      LinkerInviteContent_LinkmicUserInfoDecoder.encode(v!, writer.uint32(146).fork()).join();
    }
    if (message.dialogInfo !== undefined) {
      LinkerInviteContent_PerceptionDialogInfoDecoder.encode(message.dialogInfo, writer.uint32(154).fork()).join();
    }
    if (message.punishEventInfo !== undefined) {
      PunishEventInfoDecoder.encode(message.punishEventInfo, writer.uint32(162).fork()).join();
    }
    if (message.fromRoomAgeRestricted !== 0) {
      writer.uint32(168).int32(message.fromRoomAgeRestricted);
    }
    for (const v of message.abTestSetting) {
      LinkerInviteContent_CohostABTestSettingDecoder.encode(v!, writer.uint32(186).fork()).join();
    }
    if (message.linkerInviteMsgExtra !== undefined) {
      LinkerInviteContent_LinkerInviteMessageExtraDecoder.encode(message.linkerInviteMsgExtra, writer.uint32(810).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromRoomId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.toRtcExtInfo = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rtcJoinChannel = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.vendor = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.secFromUserId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.toLinkmicIdStr = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fromUser = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.requiredMicIdx = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = LinkerInviteContent_RtcExtInfoMapEntryDecoder.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.rtcExtInfoMap[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.multiLiveLayoutEnable = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.multiLiveSetting = MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.fromLinkmicIdStr = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.fromTopHostInfo = LinkerInviteContent_InviteTopHostInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.actionId = reader.int64().toString();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.linkedUsers.push(LinkerInviteContent_LinkmicUserInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.dialogInfo = LinkerInviteContent_PerceptionDialogInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.punishEventInfo = PunishEventInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.fromRoomAgeRestricted = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.abTestSetting.push(LinkerInviteContent_CohostABTestSettingDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.linkerInviteMsgExtra = LinkerInviteContent_LinkerInviteMessageExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent {
    return {
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      fromRoomId: isSet(object.fromRoomId) ? globalThis.String(object.fromRoomId) : "0",
      toRtcExtInfo: isSet(object.toRtcExtInfo) ? globalThis.String(object.toRtcExtInfo) : "",
      rtcJoinChannel: isSet(object.rtcJoinChannel) ? globalThis.Boolean(object.rtcJoinChannel) : false,
      vendor: isSet(object.vendor) ? globalThis.String(object.vendor) : "0",
      secFromUserId: isSet(object.secFromUserId) ? globalThis.String(object.secFromUserId) : "",
      toLinkmicIdStr: isSet(object.toLinkmicIdStr) ? globalThis.String(object.toLinkmicIdStr) : "",
      fromUser: isSet(object.fromUser) ? User.fromJSON(object.fromUser) : undefined,
      requiredMicIdx: isSet(object.requiredMicIdx) ? globalThis.String(object.requiredMicIdx) : "0",
      rtcExtInfoMap: isObject(object.rtcExtInfoMap)
        ? Object.entries(object.rtcExtInfoMap).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      multiLiveLayoutEnable: isSet(object.multiLiveLayoutEnable)
        ? linkmicMultiLiveEnumFromJSON(object.multiLiveLayoutEnable)
        : 0,
      multiLiveSetting: isSet(object.multiLiveSetting)
        ? MultiLiveAnchorPanelSettings.fromJSON(object.multiLiveSetting)
        : undefined,
      fromLinkmicIdStr: isSet(object.fromLinkmicIdStr) ? globalThis.String(object.fromLinkmicIdStr) : "",
      fromTopHostInfo: isSet(object.fromTopHostInfo)
        ? LinkerInviteContent_InviteTopHostInfo.fromJSON(object.fromTopHostInfo)
        : undefined,
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "0",
      linkedUsers: globalThis.Array.isArray(object?.linkedUsers)
        ? object.linkedUsers.map((e: any) => LinkerInviteContent_LinkmicUserInfo.fromJSON(e))
        : [],
      dialogInfo: isSet(object.dialogInfo)
        ? LinkerInviteContent_PerceptionDialogInfo.fromJSON(object.dialogInfo)
        : undefined,
      punishEventInfo: isSet(object.punishEventInfo) ? PunishEventInfo.fromJSON(object.punishEventInfo) : undefined,
      fromRoomAgeRestricted: isSet(object.fromRoomAgeRestricted) ? globalThis.Number(object.fromRoomAgeRestricted) : 0,
      abTestSetting: globalThis.Array.isArray(object?.abTestSetting)
        ? object.abTestSetting.map((e: any) => LinkerInviteContent_CohostABTestSetting.fromJSON(e))
        : [],
      linkerInviteMsgExtra: isSet(object.linkerInviteMsgExtra)
        ? LinkerInviteContent_LinkerInviteMessageExtra.fromJSON(object.linkerInviteMsgExtra)
        : undefined,
    };
  },

  toJSON(message: LinkerInviteContent): unknown {
    const obj: any = {};
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.fromRoomId !== "0") {
      obj.fromRoomId = message.fromRoomId;
    }
    if (message.toRtcExtInfo !== "") {
      obj.toRtcExtInfo = message.toRtcExtInfo;
    }
    if (message.rtcJoinChannel !== false) {
      obj.rtcJoinChannel = message.rtcJoinChannel;
    }
    if (message.vendor !== "0") {
      obj.vendor = message.vendor;
    }
    if (message.secFromUserId !== "") {
      obj.secFromUserId = message.secFromUserId;
    }
    if (message.toLinkmicIdStr !== "") {
      obj.toLinkmicIdStr = message.toLinkmicIdStr;
    }
    if (message.fromUser !== undefined) {
      obj.fromUser = User.toJSON(message.fromUser);
    }
    if (message.requiredMicIdx !== "0") {
      obj.requiredMicIdx = message.requiredMicIdx;
    }
    if (message.rtcExtInfoMap) {
      const entries = Object.entries(message.rtcExtInfoMap);
      if (entries.length > 0) {
        obj.rtcExtInfoMap = {};
        entries.forEach(([k, v]) => {
          obj.rtcExtInfoMap[k] = v;
        });
      }
    }
    if (message.multiLiveLayoutEnable !== 0) {
      obj.multiLiveLayoutEnable = linkmicMultiLiveEnumToJSON(message.multiLiveLayoutEnable);
    }
    if (message.multiLiveSetting !== undefined) {
      obj.multiLiveSetting = MultiLiveAnchorPanelSettings.toJSON(message.multiLiveSetting);
    }
    if (message.fromLinkmicIdStr !== "") {
      obj.fromLinkmicIdStr = message.fromLinkmicIdStr;
    }
    if (message.fromTopHostInfo !== undefined) {
      obj.fromTopHostInfo = LinkerInviteContent_InviteTopHostInfo.toJSON(message.fromTopHostInfo);
    }
    if (message.actionId !== "0") {
      obj.actionId = message.actionId;
    }
    if (message.linkedUsers?.length) {
      obj.linkedUsers = message.linkedUsers.map((e) => LinkerInviteContent_LinkmicUserInfo.toJSON(e));
    }
    if (message.dialogInfo !== undefined) {
      obj.dialogInfo = LinkerInviteContent_PerceptionDialogInfo.toJSON(message.dialogInfo);
    }
    if (message.punishEventInfo !== undefined) {
      obj.punishEventInfo = PunishEventInfo.toJSON(message.punishEventInfo);
    }
    if (message.fromRoomAgeRestricted !== 0) {
      obj.fromRoomAgeRestricted = Math.round(message.fromRoomAgeRestricted);
    }
    if (message.abTestSetting?.length) {
      obj.abTestSetting = message.abTestSetting.map((e) => LinkerInviteContent_CohostABTestSetting.toJSON(e));
    }
    if (message.linkerInviteMsgExtra !== undefined) {
      obj.linkerInviteMsgExtra = LinkerInviteContent_LinkerInviteMessageExtra.toJSON(message.linkerInviteMsgExtra);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent>, I>>(base?: I): LinkerInviteContent {
    return LinkerInviteContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent>, I>>(object: I): LinkerInviteContent {
    const message = createBaseLinkerInviteContent();
    message.fromUserId = object.fromUserId ?? "0";
    message.fromRoomId = object.fromRoomId ?? "0";
    message.toRtcExtInfo = object.toRtcExtInfo ?? "";
    message.rtcJoinChannel = object.rtcJoinChannel ?? false;
    message.vendor = object.vendor ?? "0";
    message.secFromUserId = object.secFromUserId ?? "";
    message.toLinkmicIdStr = object.toLinkmicIdStr ?? "";
    message.fromUser = (object.fromUser !== undefined && object.fromUser !== null)
      ? User.fromPartial(object.fromUser)
      : undefined;
    message.requiredMicIdx = object.requiredMicIdx ?? "0";
    message.rtcExtInfoMap = Object.entries(object.rtcExtInfoMap ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.multiLiveLayoutEnable = object.multiLiveLayoutEnable ?? 0;
    message.multiLiveSetting = (object.multiLiveSetting !== undefined && object.multiLiveSetting !== null)
      ? MultiLiveAnchorPanelSettings.fromPartial(object.multiLiveSetting)
      : undefined;
    message.fromLinkmicIdStr = object.fromLinkmicIdStr ?? "";
    message.fromTopHostInfo = (object.fromTopHostInfo !== undefined && object.fromTopHostInfo !== null)
      ? LinkerInviteContent_InviteTopHostInfo.fromPartial(object.fromTopHostInfo)
      : undefined;
    message.actionId = object.actionId ?? "0";
    message.linkedUsers = object.linkedUsers?.map((e) => LinkerInviteContent_LinkmicUserInfo.fromPartial(e)) || [];
    message.dialogInfo = (object.dialogInfo !== undefined && object.dialogInfo !== null)
      ? LinkerInviteContent_PerceptionDialogInfo.fromPartial(object.dialogInfo)
      : undefined;
    message.punishEventInfo = (object.punishEventInfo !== undefined && object.punishEventInfo !== null)
      ? PunishEventInfo.fromPartial(object.punishEventInfo)
      : undefined;
    message.fromRoomAgeRestricted = object.fromRoomAgeRestricted ?? 0;
    message.abTestSetting = object.abTestSetting?.map((e) => LinkerInviteContent_CohostABTestSetting.fromPartial(e)) ||
      [];
    message.linkerInviteMsgExtra = (object.linkerInviteMsgExtra !== undefined && object.linkerInviteMsgExtra !== null)
      ? LinkerInviteContent_LinkerInviteMessageExtra.fromPartial(object.linkerInviteMsgExtra)
      : undefined;
    return message;
  },
};

function createBaseLinkerInviteContent_RtcExtInfoMapEntry(): LinkerInviteContent_RtcExtInfoMapEntry {
  return { key: "0", value: "" };
}

export const LinkerInviteContent_RtcExtInfoMapEntryDecoder: MessageFns<LinkerInviteContent_RtcExtInfoMapEntry> = {
  encode(message: LinkerInviteContent_RtcExtInfoMapEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent_RtcExtInfoMapEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_RtcExtInfoMapEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_RtcExtInfoMapEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LinkerInviteContent_RtcExtInfoMapEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_RtcExtInfoMapEntry>, I>>(
    base?: I,
  ): LinkerInviteContent_RtcExtInfoMapEntry {
    return LinkerInviteContent_RtcExtInfoMapEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_RtcExtInfoMapEntry>, I>>(
    object: I,
  ): LinkerInviteContent_RtcExtInfoMapEntry {
    const message = createBaseLinkerInviteContent_RtcExtInfoMapEntry();
    message.key = object.key ?? "0";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLinkerInviteContent_InviteTopHostInfo(): LinkerInviteContent_InviteTopHostInfo {
  return { rankType: "", topIndex: "0" };
}

export const LinkerInviteContent_InviteTopHostInfoDecoder: MessageFns<LinkerInviteContent_InviteTopHostInfo> = {
  encode(message: LinkerInviteContent_InviteTopHostInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rankType !== "") {
      writer.uint32(10).string(message.rankType);
    }
    if (message.topIndex !== "0") {
      writer.uint32(16).int64(message.topIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent_InviteTopHostInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_InviteTopHostInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rankType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topIndex = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_InviteTopHostInfo {
    return {
      rankType: isSet(object.rankType) ? globalThis.String(object.rankType) : "",
      topIndex: isSet(object.topIndex) ? globalThis.String(object.topIndex) : "0",
    };
  },

  toJSON(message: LinkerInviteContent_InviteTopHostInfo): unknown {
    const obj: any = {};
    if (message.rankType !== "") {
      obj.rankType = message.rankType;
    }
    if (message.topIndex !== "0") {
      obj.topIndex = message.topIndex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_InviteTopHostInfo>, I>>(
    base?: I,
  ): LinkerInviteContent_InviteTopHostInfo {
    return LinkerInviteContent_InviteTopHostInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_InviteTopHostInfo>, I>>(
    object: I,
  ): LinkerInviteContent_InviteTopHostInfo {
    const message = createBaseLinkerInviteContent_InviteTopHostInfo();
    message.rankType = object.rankType ?? "";
    message.topIndex = object.topIndex ?? "0";
    return message;
  },
};

function createBaseLinkerInviteContent_LinkmicUserInfo(): LinkerInviteContent_LinkmicUserInfo {
  return { userId: "0", linkmicIdStr: "", roomId: "0", linkedTime: "0" };
}

export const LinkerInviteContent_LinkmicUserInfoDecoder: MessageFns<LinkerInviteContent_LinkmicUserInfo> = {
  encode(message: LinkerInviteContent_LinkmicUserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.linkmicIdStr !== "") {
      writer.uint32(18).string(message.linkmicIdStr);
    }
    if (message.roomId !== "0") {
      writer.uint32(24).int64(message.roomId);
    }
    if (message.linkedTime !== "0") {
      writer.uint32(32).int64(message.linkedTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent_LinkmicUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_LinkmicUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.linkmicIdStr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.linkedTime = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_LinkmicUserInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      linkmicIdStr: isSet(object.linkmicIdStr) ? globalThis.String(object.linkmicIdStr) : "",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      linkedTime: isSet(object.linkedTime) ? globalThis.String(object.linkedTime) : "0",
    };
  },

  toJSON(message: LinkerInviteContent_LinkmicUserInfo): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.linkmicIdStr !== "") {
      obj.linkmicIdStr = message.linkmicIdStr;
    }
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.linkedTime !== "0") {
      obj.linkedTime = message.linkedTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_LinkmicUserInfo>, I>>(
    base?: I,
  ): LinkerInviteContent_LinkmicUserInfo {
    return LinkerInviteContent_LinkmicUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_LinkmicUserInfo>, I>>(
    object: I,
  ): LinkerInviteContent_LinkmicUserInfo {
    const message = createBaseLinkerInviteContent_LinkmicUserInfo();
    message.userId = object.userId ?? "0";
    message.linkmicIdStr = object.linkmicIdStr ?? "";
    message.roomId = object.roomId ?? "0";
    message.linkedTime = object.linkedTime ?? "0";
    return message;
  },
};

function createBaseLinkerInviteContent_PerceptionDialogInfo(): LinkerInviteContent_PerceptionDialogInfo {
  return {
    iconType: 0,
    title: undefined,
    subTitle: undefined,
    adviceActionText: undefined,
    defaultActionText: undefined,
    violationDetailUrl: "",
    scene: 0,
    targetUserId: "0",
    targetRoomId: "0",
    countDownTime: "0",
    showFeedback: false,
    feedbackOptions: [],
    policyTip: "0",
    appealPopup: 0,
  };
}

export const LinkerInviteContent_PerceptionDialogInfoDecoder: MessageFns<LinkerInviteContent_PerceptionDialogInfo> = {
  encode(message: LinkerInviteContent_PerceptionDialogInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iconType !== 0) {
      writer.uint32(8).int32(message.iconType);
    }
    if (message.title !== undefined) {
      TextDecoder.encode(message.title, writer.uint32(18).fork()).join();
    }
    if (message.subTitle !== undefined) {
      TextDecoder.encode(message.subTitle, writer.uint32(26).fork()).join();
    }
    if (message.adviceActionText !== undefined) {
      TextDecoder.encode(message.adviceActionText, writer.uint32(34).fork()).join();
    }
    if (message.defaultActionText !== undefined) {
      TextDecoder.encode(message.defaultActionText, writer.uint32(42).fork()).join();
    }
    if (message.violationDetailUrl !== "") {
      writer.uint32(50).string(message.violationDetailUrl);
    }
    if (message.scene !== 0) {
      writer.uint32(56).int32(message.scene);
    }
    if (message.targetUserId !== "0") {
      writer.uint32(64).int64(message.targetUserId);
    }
    if (message.targetRoomId !== "0") {
      writer.uint32(72).int64(message.targetRoomId);
    }
    if (message.countDownTime !== "0") {
      writer.uint32(80).int64(message.countDownTime);
    }
    if (message.showFeedback !== false) {
      writer.uint32(88).bool(message.showFeedback);
    }
    for (const v of message.feedbackOptions) {
      LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.policyTip !== "0") {
      writer.uint32(104).int64(message.policyTip);
    }
    if (message.appealPopup !== 0) {
      writer.uint32(112).int32(message.appealPopup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent_PerceptionDialogInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_PerceptionDialogInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.iconType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.subTitle = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.adviceActionText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.defaultActionText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.violationDetailUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.scene = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.targetUserId = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.targetRoomId = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.countDownTime = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.showFeedback = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.feedbackOptions.push(
            LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.policyTip = reader.int64().toString();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.appealPopup = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_PerceptionDialogInfo {
    return {
      iconType: isSet(object.iconType) ? perceptionDialogIconTypeFromJSON(object.iconType) : 0,
      title: isSet(object.title) ? Text.fromJSON(object.title) : undefined,
      subTitle: isSet(object.subTitle) ? Text.fromJSON(object.subTitle) : undefined,
      adviceActionText: isSet(object.adviceActionText) ? Text.fromJSON(object.adviceActionText) : undefined,
      defaultActionText: isSet(object.defaultActionText) ? Text.fromJSON(object.defaultActionText) : undefined,
      violationDetailUrl: isSet(object.violationDetailUrl) ? globalThis.String(object.violationDetailUrl) : "",
      scene: isSet(object.scene) ? sceneFromJSON(object.scene) : 0,
      targetUserId: isSet(object.targetUserId) ? globalThis.String(object.targetUserId) : "0",
      targetRoomId: isSet(object.targetRoomId) ? globalThis.String(object.targetRoomId) : "0",
      countDownTime: isSet(object.countDownTime) ? globalThis.String(object.countDownTime) : "0",
      showFeedback: isSet(object.showFeedback) ? globalThis.Boolean(object.showFeedback) : false,
      feedbackOptions: globalThis.Array.isArray(object?.feedbackOptions)
        ? object.feedbackOptions.map((e: any) =>
          LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption.fromJSON(e)
        )
        : [],
      policyTip: isSet(object.policyTip) ? globalThis.String(object.policyTip) : "0",
      appealPopup: isSet(object.appealPopup) ? globalThis.Number(object.appealPopup) : 0,
    };
  },

  toJSON(message: LinkerInviteContent_PerceptionDialogInfo): unknown {
    const obj: any = {};
    if (message.iconType !== 0) {
      obj.iconType = perceptionDialogIconTypeToJSON(message.iconType);
    }
    if (message.title !== undefined) {
      obj.title = Text.toJSON(message.title);
    }
    if (message.subTitle !== undefined) {
      obj.subTitle = Text.toJSON(message.subTitle);
    }
    if (message.adviceActionText !== undefined) {
      obj.adviceActionText = Text.toJSON(message.adviceActionText);
    }
    if (message.defaultActionText !== undefined) {
      obj.defaultActionText = Text.toJSON(message.defaultActionText);
    }
    if (message.violationDetailUrl !== "") {
      obj.violationDetailUrl = message.violationDetailUrl;
    }
    if (message.scene !== 0) {
      obj.scene = sceneToJSON(message.scene);
    }
    if (message.targetUserId !== "0") {
      obj.targetUserId = message.targetUserId;
    }
    if (message.targetRoomId !== "0") {
      obj.targetRoomId = message.targetRoomId;
    }
    if (message.countDownTime !== "0") {
      obj.countDownTime = message.countDownTime;
    }
    if (message.showFeedback !== false) {
      obj.showFeedback = message.showFeedback;
    }
    if (message.feedbackOptions?.length) {
      obj.feedbackOptions = message.feedbackOptions.map((e) =>
        LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption.toJSON(e)
      );
    }
    if (message.policyTip !== "0") {
      obj.policyTip = message.policyTip;
    }
    if (message.appealPopup !== 0) {
      obj.appealPopup = Math.round(message.appealPopup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_PerceptionDialogInfo>, I>>(
    base?: I,
  ): LinkerInviteContent_PerceptionDialogInfo {
    return LinkerInviteContent_PerceptionDialogInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_PerceptionDialogInfo>, I>>(
    object: I,
  ): LinkerInviteContent_PerceptionDialogInfo {
    const message = createBaseLinkerInviteContent_PerceptionDialogInfo();
    message.iconType = object.iconType ?? 0;
    message.title = (object.title !== undefined && object.title !== null) ? Text.fromPartial(object.title) : undefined;
    message.subTitle = (object.subTitle !== undefined && object.subTitle !== null)
      ? Text.fromPartial(object.subTitle)
      : undefined;
    message.adviceActionText = (object.adviceActionText !== undefined && object.adviceActionText !== null)
      ? Text.fromPartial(object.adviceActionText)
      : undefined;
    message.defaultActionText = (object.defaultActionText !== undefined && object.defaultActionText !== null)
      ? Text.fromPartial(object.defaultActionText)
      : undefined;
    message.violationDetailUrl = object.violationDetailUrl ?? "";
    message.scene = object.scene ?? 0;
    message.targetUserId = object.targetUserId ?? "0";
    message.targetRoomId = object.targetRoomId ?? "0";
    message.countDownTime = object.countDownTime ?? "0";
    message.showFeedback = object.showFeedback ?? false;
    message.feedbackOptions =
      object.feedbackOptions?.map((e) =>
        LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption.fromPartial(e)
      ) || [];
    message.policyTip = object.policyTip ?? "0";
    message.appealPopup = object.appealPopup ?? 0;
    return message;
  },
};

function createBaseLinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption(): LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption {
  return { id: "0", contentKey: "" };
}

export const LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder: MessageFns<LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption> = {
  encode(
    message: LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.contentKey !== "") {
      writer.uint32(18).string(message.contentKey);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      contentKey: isSet(object.contentKey) ? globalThis.String(object.contentKey) : "",
    };
  },

  toJSON(message: LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.contentKey !== "") {
      obj.contentKey = message.contentKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption>, I>>(
    base?: I,
  ): LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption {
    return LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption>, I>>(
    object: I,
  ): LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption {
    const message = createBaseLinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption();
    message.id = object.id ?? "0";
    message.contentKey = object.contentKey ?? "";
    return message;
  },
};

function createBaseLinkerInviteContent_CohostABTestSetting(): LinkerInviteContent_CohostABTestSetting {
  return { key: "0", value: undefined };
}

export const LinkerInviteContent_CohostABTestSettingDecoder: MessageFns<LinkerInviteContent_CohostABTestSetting> = {
  encode(message: LinkerInviteContent_CohostABTestSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      LinkerInviteContent_CohostABTestSetting_CohostABTestListDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent_CohostABTestSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_CohostABTestSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = LinkerInviteContent_CohostABTestSetting_CohostABTestListDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_CohostABTestSetting {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value)
        ? LinkerInviteContent_CohostABTestSetting_CohostABTestList.fromJSON(object.value)
        : undefined,
    };
  },

  toJSON(message: LinkerInviteContent_CohostABTestSetting): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = LinkerInviteContent_CohostABTestSetting_CohostABTestList.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_CohostABTestSetting>, I>>(
    base?: I,
  ): LinkerInviteContent_CohostABTestSetting {
    return LinkerInviteContent_CohostABTestSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_CohostABTestSetting>, I>>(
    object: I,
  ): LinkerInviteContent_CohostABTestSetting {
    const message = createBaseLinkerInviteContent_CohostABTestSetting();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? LinkerInviteContent_CohostABTestSetting_CohostABTestList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList(): LinkerInviteContent_CohostABTestSetting_CohostABTestList {
  return { abTestList: [] };
}

export const LinkerInviteContent_CohostABTestSetting_CohostABTestListDecoder: MessageFns<LinkerInviteContent_CohostABTestSetting_CohostABTestList> = {
  encode(
    message: LinkerInviteContent_CohostABTestSetting_CohostABTestList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.abTestList) {
      LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTestDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent_CohostABTestSetting_CohostABTestList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.abTestList.push(
            LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTestDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_CohostABTestSetting_CohostABTestList {
    return {
      abTestList: globalThis.Array.isArray(object?.abTestList)
        ? object.abTestList.map((e: any) =>
          LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: LinkerInviteContent_CohostABTestSetting_CohostABTestList): unknown {
    const obj: any = {};
    if (message.abTestList?.length) {
      obj.abTestList = message.abTestList.map((e) =>
        LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_CohostABTestSetting_CohostABTestList>, I>>(
    base?: I,
  ): LinkerInviteContent_CohostABTestSetting_CohostABTestList {
    return LinkerInviteContent_CohostABTestSetting_CohostABTestList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_CohostABTestSetting_CohostABTestList>, I>>(
    object: I,
  ): LinkerInviteContent_CohostABTestSetting_CohostABTestList {
    const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList();
    message.abTestList =
      object.abTestList?.map((e) =>
        LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest(): LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest {
  return { abTestType: 0, group: "0" };
}

export const LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTestDecoder: MessageFns<LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest> = {
  encode(
    message: LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.abTestType !== 0) {
      writer.uint32(8).int32(message.abTestType);
    }
    if (message.group !== "0") {
      writer.uint32(16).int64(message.group);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.abTestType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.group = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest {
    return {
      abTestType: isSet(object.abTestType) ? cohostABTestTypeFromJSON(object.abTestType) : 0,
      group: isSet(object.group) ? globalThis.String(object.group) : "0",
    };
  },

  toJSON(message: LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest): unknown {
    const obj: any = {};
    if (message.abTestType !== 0) {
      obj.abTestType = cohostABTestTypeToJSON(message.abTestType);
    }
    if (message.group !== "0") {
      obj.group = message.group;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest>, I>>(
    base?: I,
  ): LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest {
    return LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest>, I>>(
    object: I,
  ): LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest {
    const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest();
    message.abTestType = object.abTestType ?? 0;
    message.group = object.group ?? "0";
    return message;
  },
};

function createBaseLinkerInviteContent_LinkerInviteMessageExtra(): LinkerInviteContent_LinkerInviteMessageExtra {
  return {
    matchType: 0,
    inviteType: 0,
    subType: 0,
    theme: "",
    duration: 0,
    layout: 0,
    tips: "",
    inviterRivalExtra: undefined,
    otherRivalExtra: [],
    topicInfo: undefined,
    algoRequestId: "",
  };
}

export const LinkerInviteContent_LinkerInviteMessageExtraDecoder: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra> = {
  encode(
    message: LinkerInviteContent_LinkerInviteMessageExtra,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.matchType !== 0) {
      writer.uint32(8).int32(message.matchType);
    }
    if (message.inviteType !== 0) {
      writer.uint32(16).int32(message.inviteType);
    }
    if (message.subType !== 0) {
      writer.uint32(24).int32(message.subType);
    }
    if (message.theme !== "") {
      writer.uint32(34).string(message.theme);
    }
    if (message.duration !== 0) {
      writer.uint32(40).int32(message.duration);
    }
    if (message.layout !== 0) {
      writer.uint32(48).int32(message.layout);
    }
    if (message.tips !== "") {
      writer.uint32(58).string(message.tips);
    }
    if (message.inviterRivalExtra !== undefined) {
      LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.encode(
        message.inviterRivalExtra,
        writer.uint32(66).fork(),
      ).join();
    }
    for (const v of message.otherRivalExtra) {
      LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.topicInfo !== undefined) {
      CohostTopicDecoder.encode(message.topicInfo, writer.uint32(82).fork()).join();
    }
    if (message.algoRequestId !== "") {
      writer.uint32(90).string(message.algoRequestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerInviteContent_LinkerInviteMessageExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.matchType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.inviteType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.subType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.theme = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.layout = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tips = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.inviterRivalExtra = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.otherRivalExtra.push(
            LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.topicInfo = CohostTopicDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.algoRequestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_LinkerInviteMessageExtra {
    return {
      matchType: isSet(object.matchType) ? globalThis.Number(object.matchType) : 0,
      inviteType: isSet(object.inviteType) ? globalThis.Number(object.inviteType) : 0,
      subType: isSet(object.subType) ? globalThis.Number(object.subType) : 0,
      theme: isSet(object.theme) ? globalThis.String(object.theme) : "",
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      layout: isSet(object.layout) ? globalThis.Number(object.layout) : 0,
      tips: isSet(object.tips) ? globalThis.String(object.tips) : "",
      inviterRivalExtra: isSet(object.inviterRivalExtra)
        ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.fromJSON(object.inviterRivalExtra)
        : undefined,
      otherRivalExtra: globalThis.Array.isArray(object?.otherRivalExtra)
        ? object.otherRivalExtra.map((e: any) =>
          LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.fromJSON(e)
        )
        : [],
      topicInfo: isSet(object.topicInfo) ? CohostTopic.fromJSON(object.topicInfo) : undefined,
      algoRequestId: isSet(object.algoRequestId) ? globalThis.String(object.algoRequestId) : "",
    };
  },

  toJSON(message: LinkerInviteContent_LinkerInviteMessageExtra): unknown {
    const obj: any = {};
    if (message.matchType !== 0) {
      obj.matchType = Math.round(message.matchType);
    }
    if (message.inviteType !== 0) {
      obj.inviteType = Math.round(message.inviteType);
    }
    if (message.subType !== 0) {
      obj.subType = Math.round(message.subType);
    }
    if (message.theme !== "") {
      obj.theme = message.theme;
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.layout !== 0) {
      obj.layout = Math.round(message.layout);
    }
    if (message.tips !== "") {
      obj.tips = message.tips;
    }
    if (message.inviterRivalExtra !== undefined) {
      obj.inviterRivalExtra = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.toJSON(
        message.inviterRivalExtra,
      );
    }
    if (message.otherRivalExtra?.length) {
      obj.otherRivalExtra = message.otherRivalExtra.map((e) =>
        LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.toJSON(e)
      );
    }
    if (message.topicInfo !== undefined) {
      obj.topicInfo = CohostTopic.toJSON(message.topicInfo);
    }
    if (message.algoRequestId !== "") {
      obj.algoRequestId = message.algoRequestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra>, I>>(
    base?: I,
  ): LinkerInviteContent_LinkerInviteMessageExtra {
    return LinkerInviteContent_LinkerInviteMessageExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra>, I>>(
    object: I,
  ): LinkerInviteContent_LinkerInviteMessageExtra {
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra();
    message.matchType = object.matchType ?? 0;
    message.inviteType = object.inviteType ?? 0;
    message.subType = object.subType ?? 0;
    message.theme = object.theme ?? "";
    message.duration = object.duration ?? 0;
    message.layout = object.layout ?? 0;
    message.tips = object.tips ?? "";
    message.inviterRivalExtra = (object.inviterRivalExtra !== undefined && object.inviterRivalExtra !== null)
      ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.fromPartial(object.inviterRivalExtra)
      : undefined;
    message.otherRivalExtra =
      object.otherRivalExtra?.map((e) =>
        LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.fromPartial(e)
      ) || [];
    message.topicInfo = (object.topicInfo !== undefined && object.topicInfo !== null)
      ? CohostTopic.fromPartial(object.topicInfo)
      : undefined;
    message.algoRequestId = object.algoRequestId ?? "";
    return message;
  },
};

function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra(): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra {
  return {
    textType: 0,
    text: "",
    label: "",
    userCount: 0,
    avatarThumb: undefined,
    displayId: "",
    authenticationInfo: undefined,
    nickname: "",
    followStatus: "0",
    mHashtag: undefined,
    userId: "0",
    isBestTeammate: false,
    optPairInfo: undefined,
    followerCount: "0",
  };
}

export const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra> = {
  encode(
    message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.textType !== 0) {
      writer.uint32(8).int32(message.textType);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.label !== "") {
      writer.uint32(26).string(message.label);
    }
    if (message.userCount !== 0) {
      writer.uint32(32).int32(message.userCount);
    }
    if (message.avatarThumb !== undefined) {
      ImageDecoder.encode(message.avatarThumb, writer.uint32(42).fork()).join();
    }
    if (message.displayId !== "") {
      writer.uint32(50).string(message.displayId);
    }
    if (message.authenticationInfo !== undefined) {
      LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfoDecoder.encode(
        message.authenticationInfo,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.nickname !== "") {
      writer.uint32(66).string(message.nickname);
    }
    if (message.followStatus !== "0") {
      writer.uint32(72).int64(message.followStatus);
    }
    if (message.mHashtag !== undefined) {
      LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_HashtagDecoder.encode(
        message.mHashtag,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.userId !== "0") {
      writer.uint32(96).int64(message.userId);
    }
    if (message.isBestTeammate !== false) {
      writer.uint32(104).bool(message.isBestTeammate);
    }
    if (message.optPairInfo !== undefined) {
      LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfoDecoder.encode(
        message.optPairInfo,
        writer.uint32(114).fork(),
      ).join();
    }
    if (message.followerCount !== "0") {
      writer.uint32(120).int64(message.followerCount);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.textType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avatarThumb = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.displayId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.authenticationInfo = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.followStatus = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.mHashtag = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_HashtagDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isBestTeammate = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.optPairInfo = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfoDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.followerCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra {
    return {
      textType: isSet(object.textType) ? textTypeFromJSON(object.textType) : 0,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      userCount: isSet(object.userCount) ? globalThis.Number(object.userCount) : 0,
      avatarThumb: isSet(object.avatarThumb) ? Image.fromJSON(object.avatarThumb) : undefined,
      displayId: isSet(object.displayId) ? globalThis.String(object.displayId) : "",
      authenticationInfo: isSet(object.authenticationInfo)
        ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo.fromJSON(
          object.authenticationInfo,
        )
        : undefined,
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      followStatus: isSet(object.followStatus) ? globalThis.String(object.followStatus) : "0",
      mHashtag: isSet(object.mHashtag)
        ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag.fromJSON(object.mHashtag)
        : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      isBestTeammate: isSet(object.isBestTeammate) ? globalThis.Boolean(object.isBestTeammate) : false,
      optPairInfo: isSet(object.optPairInfo)
        ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo.fromJSON(object.optPairInfo)
        : undefined,
      followerCount: isSet(object.followerCount) ? globalThis.String(object.followerCount) : "0",
    };
  },

  toJSON(message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra): unknown {
    const obj: any = {};
    if (message.textType !== 0) {
      obj.textType = textTypeToJSON(message.textType);
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.userCount !== 0) {
      obj.userCount = Math.round(message.userCount);
    }
    if (message.avatarThumb !== undefined) {
      obj.avatarThumb = Image.toJSON(message.avatarThumb);
    }
    if (message.displayId !== "") {
      obj.displayId = message.displayId;
    }
    if (message.authenticationInfo !== undefined) {
      obj.authenticationInfo = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo.toJSON(
        message.authenticationInfo,
      );
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.followStatus !== "0") {
      obj.followStatus = message.followStatus;
    }
    if (message.mHashtag !== undefined) {
      obj.mHashtag = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag.toJSON(message.mHashtag);
    }
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.isBestTeammate !== false) {
      obj.isBestTeammate = message.isBestTeammate;
    }
    if (message.optPairInfo !== undefined) {
      obj.optPairInfo = LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo.toJSON(
        message.optPairInfo,
      );
    }
    if (message.followerCount !== "0") {
      obj.followerCount = message.followerCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra>, I>>(
    base?: I,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra {
    return LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra>, I>>(
    object: I,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra {
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra();
    message.textType = object.textType ?? 0;
    message.text = object.text ?? "";
    message.label = object.label ?? "";
    message.userCount = object.userCount ?? 0;
    message.avatarThumb = (object.avatarThumb !== undefined && object.avatarThumb !== null)
      ? Image.fromPartial(object.avatarThumb)
      : undefined;
    message.displayId = object.displayId ?? "";
    message.authenticationInfo = (object.authenticationInfo !== undefined && object.authenticationInfo !== null)
      ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo.fromPartial(
        object.authenticationInfo,
      )
      : undefined;
    message.nickname = object.nickname ?? "";
    message.followStatus = object.followStatus ?? "0";
    message.mHashtag = (object.mHashtag !== undefined && object.mHashtag !== null)
      ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag.fromPartial(object.mHashtag)
      : undefined;
    message.userId = object.userId ?? "0";
    message.isBestTeammate = object.isBestTeammate ?? false;
    message.optPairInfo = (object.optPairInfo !== undefined && object.optPairInfo !== null)
      ? LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo.fromPartial(object.optPairInfo)
      : undefined;
    message.followerCount = object.followerCount ?? "0";
    return message;
  },
};

function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo(): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo {
  return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: undefined };
}

export const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfoDecoder: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo> = {
  encode(
    message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.customVerify !== "") {
      writer.uint32(10).string(message.customVerify);
    }
    if (message.enterpriseVerifyReason !== "") {
      writer.uint32(18).string(message.enterpriseVerifyReason);
    }
    if (message.authenticationBadge !== undefined) {
      ImageDecoder.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customVerify = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enterpriseVerifyReason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authenticationBadge = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo {
    return {
      customVerify: isSet(object.customVerify) ? globalThis.String(object.customVerify) : "",
      enterpriseVerifyReason: isSet(object.enterpriseVerifyReason)
        ? globalThis.String(object.enterpriseVerifyReason)
        : "",
      authenticationBadge: isSet(object.authenticationBadge) ? Image.fromJSON(object.authenticationBadge) : undefined,
    };
  },

  toJSON(message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo): unknown {
    const obj: any = {};
    if (message.customVerify !== "") {
      obj.customVerify = message.customVerify;
    }
    if (message.enterpriseVerifyReason !== "") {
      obj.enterpriseVerifyReason = message.enterpriseVerifyReason;
    }
    if (message.authenticationBadge !== undefined) {
      obj.authenticationBadge = Image.toJSON(message.authenticationBadge);
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo>, I>,
  >(base?: I): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo {
    return LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo>, I>,
  >(object: I): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo {
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo();
    message.customVerify = object.customVerify ?? "";
    message.enterpriseVerifyReason = object.enterpriseVerifyReason ?? "";
    message.authenticationBadge = (object.authenticationBadge !== undefined && object.authenticationBadge !== null)
      ? Image.fromPartial(object.authenticationBadge)
      : undefined;
    return message;
  },
};

function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag(): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag {
  return { id: "0", title: "", image: undefined, namespace: 0 };
}

export const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_HashtagDecoder: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag> = {
  encode(
    message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.image !== undefined) {
      ImageDecoder.encode(message.image, writer.uint32(26).fork()).join();
    }
    if (message.namespace !== 0) {
      writer.uint32(32).int32(message.namespace);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.namespace = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      image: isSet(object.image) ? Image.fromJSON(object.image) : undefined,
      namespace: isSet(object.namespace) ? hashtagNamespaceFromJSON(object.namespace) : 0,
    };
  },

  toJSON(message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.image !== undefined) {
      obj.image = Image.toJSON(message.image);
    }
    if (message.namespace !== 0) {
      obj.namespace = hashtagNamespaceToJSON(message.namespace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag>, I>>(
    base?: I,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag {
    return LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag>, I>>(
    object: I,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag {
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag();
    message.id = object.id ?? "0";
    message.title = object.title ?? "";
    message.image = (object.image !== undefined && object.image !== null) ? Image.fromPartial(object.image) : undefined;
    message.namespace = object.namespace ?? 0;
    return message;
  },
};

function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo(): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo {
  return { mappingId: "0", displayUserList: [], buttonNoticeType: 0, expectedTimeSec: "0", optPairType: "0" };
}

export const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfoDecoder: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo> = {
  encode(
    message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.mappingId !== "0") {
      writer.uint32(8).int64(message.mappingId);
    }
    for (const v of message.displayUserList) {
      LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUserDecoder.encode(
        v!,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.buttonNoticeType !== 0) {
      writer.uint32(24).int32(message.buttonNoticeType);
    }
    if (message.expectedTimeSec !== "0") {
      writer.uint32(32).int64(message.expectedTimeSec);
    }
    if (message.optPairType !== "0") {
      writer.uint32(40).int64(message.optPairType);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mappingId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayUserList.push(
            LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUserDecoder.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.buttonNoticeType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expectedTimeSec = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.optPairType = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo {
    return {
      mappingId: isSet(object.mappingId) ? globalThis.String(object.mappingId) : "0",
      displayUserList: globalThis.Array.isArray(object?.displayUserList)
        ? object.displayUserList.map((e: any) =>
          LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser.fromJSON(e)
        )
        : [],
      buttonNoticeType: isSet(object.buttonNoticeType) ? optPairStatusFromJSON(object.buttonNoticeType) : 0,
      expectedTimeSec: isSet(object.expectedTimeSec) ? globalThis.String(object.expectedTimeSec) : "0",
      optPairType: isSet(object.optPairType) ? globalThis.String(object.optPairType) : "0",
    };
  },

  toJSON(message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo): unknown {
    const obj: any = {};
    if (message.mappingId !== "0") {
      obj.mappingId = message.mappingId;
    }
    if (message.displayUserList?.length) {
      obj.displayUserList = message.displayUserList.map((e) =>
        LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser.toJSON(e)
      );
    }
    if (message.buttonNoticeType !== 0) {
      obj.buttonNoticeType = optPairStatusToJSON(message.buttonNoticeType);
    }
    if (message.expectedTimeSec !== "0") {
      obj.expectedTimeSec = message.expectedTimeSec;
    }
    if (message.optPairType !== "0") {
      obj.optPairType = message.optPairType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo>, I>>(
    base?: I,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo {
    return LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo>, I>,
  >(object: I): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo {
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo();
    message.mappingId = object.mappingId ?? "0";
    message.displayUserList =
      object.displayUserList?.map((e) =>
        LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser.fromPartial(e)
      ) || [];
    message.buttonNoticeType = object.buttonNoticeType ?? 0;
    message.expectedTimeSec = object.expectedTimeSec ?? "0";
    message.optPairType = object.optPairType ?? "0";
    return message;
  },
};

function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser(): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser {
  return { user: undefined, roomId: "0" };
}

export const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUserDecoder: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser> = {
  encode(
    message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.roomId !== "0") {
      writer.uint32(16).int64(message.roomId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
    };
  },

  toJSON(message: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser>,
      I
    >,
  >(base?: I): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser {
    return LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser>,
      I
    >,
  >(object: I): LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser {
    const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.roomId = object.roomId ?? "0";
    return message;
  },
};

function createBaseCohostTopic(): CohostTopic {
  return { id: "0", titleKey: "", titleText: "", liked: false, totalHeat: "0", totalRivals: "0", rivalsAvatar: [] };
}

export const CohostTopicDecoder: MessageFns<CohostTopic> = {
  encode(message: CohostTopic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.titleKey !== "") {
      writer.uint32(18).string(message.titleKey);
    }
    if (message.titleText !== "") {
      writer.uint32(26).string(message.titleText);
    }
    if (message.liked !== false) {
      writer.uint32(168).bool(message.liked);
    }
    if (message.totalHeat !== "0") {
      writer.uint32(176).int64(message.totalHeat);
    }
    if (message.totalRivals !== "0") {
      writer.uint32(184).int64(message.totalRivals);
    }
    for (const v of message.rivalsAvatar) {
      ImageDecoder.encode(v!, writer.uint32(194).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CohostTopic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCohostTopic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.titleKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.titleText = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.liked = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.totalHeat = reader.int64().toString();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.totalRivals = reader.int64().toString();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.rivalsAvatar.push(ImageDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CohostTopic {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      titleKey: isSet(object.titleKey) ? globalThis.String(object.titleKey) : "",
      titleText: isSet(object.titleText) ? globalThis.String(object.titleText) : "",
      liked: isSet(object.liked) ? globalThis.Boolean(object.liked) : false,
      totalHeat: isSet(object.totalHeat) ? globalThis.String(object.totalHeat) : "0",
      totalRivals: isSet(object.totalRivals) ? globalThis.String(object.totalRivals) : "0",
      rivalsAvatar: globalThis.Array.isArray(object?.rivalsAvatar)
        ? object.rivalsAvatar.map((e: any) => Image.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CohostTopic): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.titleKey !== "") {
      obj.titleKey = message.titleKey;
    }
    if (message.titleText !== "") {
      obj.titleText = message.titleText;
    }
    if (message.liked !== false) {
      obj.liked = message.liked;
    }
    if (message.totalHeat !== "0") {
      obj.totalHeat = message.totalHeat;
    }
    if (message.totalRivals !== "0") {
      obj.totalRivals = message.totalRivals;
    }
    if (message.rivalsAvatar?.length) {
      obj.rivalsAvatar = message.rivalsAvatar.map((e) => Image.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CohostTopic>, I>>(base?: I): CohostTopic {
    return CohostTopic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CohostTopic>, I>>(object: I): CohostTopic {
    const message = createBaseCohostTopic();
    message.id = object.id ?? "0";
    message.titleKey = object.titleKey ?? "";
    message.titleText = object.titleText ?? "";
    message.liked = object.liked ?? false;
    message.totalHeat = object.totalHeat ?? "0";
    message.totalRivals = object.totalRivals ?? "0";
    message.rivalsAvatar = object.rivalsAvatar?.map((e) => Image.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLinkerKickOutContent(): LinkerKickOutContent {
  return { fromUserId: "0", kickoutReason: 0 };
}

export const LinkerKickOutContentDecoder: MessageFns<LinkerKickOutContent> = {
  encode(message: LinkerKickOutContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromUserId !== "0") {
      writer.uint32(8).int64(message.fromUserId);
    }
    if (message.kickoutReason !== 0) {
      writer.uint32(16).int32(message.kickoutReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerKickOutContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerKickOutContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.kickoutReason = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerKickOutContent {
    return {
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      kickoutReason: isSet(object.kickoutReason) ? kickoutReasonFromJSON(object.kickoutReason) : 0,
    };
  },

  toJSON(message: LinkerKickOutContent): unknown {
    const obj: any = {};
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.kickoutReason !== 0) {
      obj.kickoutReason = kickoutReasonToJSON(message.kickoutReason);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerKickOutContent>, I>>(base?: I): LinkerKickOutContent {
    return LinkerKickOutContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerKickOutContent>, I>>(object: I): LinkerKickOutContent {
    const message = createBaseLinkerKickOutContent();
    message.fromUserId = object.fromUserId ?? "0";
    message.kickoutReason = object.kickoutReason ?? 0;
    return message;
  },
};

function createBaseLinkerLeaveContent(): LinkerLeaveContent {
  return { userId: "0", linkmicIdStr: "", sendLeaveUid: "0", leaveReason: "0" };
}

export const LinkerLeaveContentDecoder: MessageFns<LinkerLeaveContent> = {
  encode(message: LinkerLeaveContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.linkmicIdStr !== "") {
      writer.uint32(18).string(message.linkmicIdStr);
    }
    if (message.sendLeaveUid !== "0") {
      writer.uint32(24).int64(message.sendLeaveUid);
    }
    if (message.leaveReason !== "0") {
      writer.uint32(32).int64(message.leaveReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerLeaveContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerLeaveContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.linkmicIdStr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sendLeaveUid = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.leaveReason = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerLeaveContent {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      linkmicIdStr: isSet(object.linkmicIdStr) ? globalThis.String(object.linkmicIdStr) : "",
      sendLeaveUid: isSet(object.sendLeaveUid) ? globalThis.String(object.sendLeaveUid) : "0",
      leaveReason: isSet(object.leaveReason) ? globalThis.String(object.leaveReason) : "0",
    };
  },

  toJSON(message: LinkerLeaveContent): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.linkmicIdStr !== "") {
      obj.linkmicIdStr = message.linkmicIdStr;
    }
    if (message.sendLeaveUid !== "0") {
      obj.sendLeaveUid = message.sendLeaveUid;
    }
    if (message.leaveReason !== "0") {
      obj.leaveReason = message.leaveReason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerLeaveContent>, I>>(base?: I): LinkerLeaveContent {
    return LinkerLeaveContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerLeaveContent>, I>>(object: I): LinkerLeaveContent {
    const message = createBaseLinkerLeaveContent();
    message.userId = object.userId ?? "0";
    message.linkmicIdStr = object.linkmicIdStr ?? "";
    message.sendLeaveUid = object.sendLeaveUid ?? "0";
    message.leaveReason = object.leaveReason ?? "0";
    return message;
  },
};

function createBaseLinkerLinkedListChangeContent(): LinkerLinkedListChangeContent {
  return {};
}

export const LinkerLinkedListChangeContentDecoder: MessageFns<LinkerLinkedListChangeContent> = {
  encode(_: LinkerLinkedListChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerLinkedListChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerLinkedListChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LinkerLinkedListChangeContent {
    return {};
  },

  toJSON(_: LinkerLinkedListChangeContent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerLinkedListChangeContent>, I>>(base?: I): LinkerLinkedListChangeContent {
    return LinkerLinkedListChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerLinkedListChangeContent>, I>>(_: I): LinkerLinkedListChangeContent {
    const message = createBaseLinkerLinkedListChangeContent();
    return message;
  },
};

function createBaseCohostListChangeContent(): CohostListChangeContent {
  return {};
}

export const CohostListChangeContentDecoder: MessageFns<CohostListChangeContent> = {
  encode(_: CohostListChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CohostListChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCohostListChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CohostListChangeContent {
    return {};
  },

  toJSON(_: CohostListChangeContent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CohostListChangeContent>, I>>(base?: I): CohostListChangeContent {
    return CohostListChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CohostListChangeContent>, I>>(_: I): CohostListChangeContent {
    const message = createBaseCohostListChangeContent();
    return message;
  },
};

function createBaseLinkerListChangeContent(): LinkerListChangeContent {
  return { linkedUsers: [], appliedUsers: [], connectingUsers: [] };
}

export const LinkerListChangeContentDecoder: MessageFns<LinkerListChangeContent> = {
  encode(message: LinkerListChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.linkedUsers) {
      ListUserDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.appliedUsers) {
      ListUserDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.connectingUsers) {
      ListUserDecoder.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerListChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerListChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.linkedUsers.push(ListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.appliedUsers.push(ListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.connectingUsers.push(ListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerListChangeContent {
    return {
      linkedUsers: globalThis.Array.isArray(object?.linkedUsers)
        ? object.linkedUsers.map((e: any) => ListUser.fromJSON(e))
        : [],
      appliedUsers: globalThis.Array.isArray(object?.appliedUsers)
        ? object.appliedUsers.map((e: any) => ListUser.fromJSON(e))
        : [],
      connectingUsers: globalThis.Array.isArray(object?.connectingUsers)
        ? object.connectingUsers.map((e: any) => ListUser.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LinkerListChangeContent): unknown {
    const obj: any = {};
    if (message.linkedUsers?.length) {
      obj.linkedUsers = message.linkedUsers.map((e) => ListUser.toJSON(e));
    }
    if (message.appliedUsers?.length) {
      obj.appliedUsers = message.appliedUsers.map((e) => ListUser.toJSON(e));
    }
    if (message.connectingUsers?.length) {
      obj.connectingUsers = message.connectingUsers.map((e) => ListUser.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerListChangeContent>, I>>(base?: I): LinkerListChangeContent {
    return LinkerListChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerListChangeContent>, I>>(object: I): LinkerListChangeContent {
    const message = createBaseLinkerListChangeContent();
    message.linkedUsers = object.linkedUsers?.map((e) => ListUser.fromPartial(e)) || [];
    message.appliedUsers = object.appliedUsers?.map((e) => ListUser.fromPartial(e)) || [];
    message.connectingUsers = object.connectingUsers?.map((e) => ListUser.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLinkerMediaChangeContent(): LinkerMediaChangeContent {
  return { op: 0, toUserId: "0", anchorId: "0", roomId: "0", changeScene: 0, operatorInfo: undefined };
}

export const LinkerMediaChangeContentDecoder: MessageFns<LinkerMediaChangeContent> = {
  encode(message: LinkerMediaChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.toUserId !== "0") {
      writer.uint32(16).int64(message.toUserId);
    }
    if (message.anchorId !== "0") {
      writer.uint32(24).int64(message.anchorId);
    }
    if (message.roomId !== "0") {
      writer.uint32(32).int64(message.roomId);
    }
    if (message.changeScene !== 0) {
      writer.uint32(40).int32(message.changeScene);
    }
    if (message.operatorInfo !== undefined) {
      LinkerMediaChangeContent_LinkerMediaChangeOperatorDecoder.encode(message.operatorInfo, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerMediaChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerMediaChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.anchorId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.changeScene = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.operatorInfo = LinkerMediaChangeContent_LinkerMediaChangeOperatorDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerMediaChangeContent {
    return {
      op: isSet(object.op) ? guestMicCameraManageOpFromJSON(object.op) : 0,
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
      anchorId: isSet(object.anchorId) ? globalThis.String(object.anchorId) : "0",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      changeScene: isSet(object.changeScene) ? guestMicCameraChangeSceneFromJSON(object.changeScene) : 0,
      operatorInfo: isSet(object.operatorInfo)
        ? LinkerMediaChangeContent_LinkerMediaChangeOperator.fromJSON(object.operatorInfo)
        : undefined,
    };
  },

  toJSON(message: LinkerMediaChangeContent): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = guestMicCameraManageOpToJSON(message.op);
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    if (message.anchorId !== "0") {
      obj.anchorId = message.anchorId;
    }
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.changeScene !== 0) {
      obj.changeScene = guestMicCameraChangeSceneToJSON(message.changeScene);
    }
    if (message.operatorInfo !== undefined) {
      obj.operatorInfo = LinkerMediaChangeContent_LinkerMediaChangeOperator.toJSON(message.operatorInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerMediaChangeContent>, I>>(base?: I): LinkerMediaChangeContent {
    return LinkerMediaChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerMediaChangeContent>, I>>(object: I): LinkerMediaChangeContent {
    const message = createBaseLinkerMediaChangeContent();
    message.op = object.op ?? 0;
    message.toUserId = object.toUserId ?? "0";
    message.anchorId = object.anchorId ?? "0";
    message.roomId = object.roomId ?? "0";
    message.changeScene = object.changeScene ?? 0;
    message.operatorInfo = (object.operatorInfo !== undefined && object.operatorInfo !== null)
      ? LinkerMediaChangeContent_LinkerMediaChangeOperator.fromPartial(object.operatorInfo)
      : undefined;
    return message;
  },
};

function createBaseLinkerMediaChangeContent_LinkerMediaChangeOperator(): LinkerMediaChangeContent_LinkerMediaChangeOperator {
  return { userId: "0", operatorType: 0, nickName: "", displayId: "" };
}

export const LinkerMediaChangeContent_LinkerMediaChangeOperatorDecoder: MessageFns<LinkerMediaChangeContent_LinkerMediaChangeOperator> = {
  encode(
    message: LinkerMediaChangeContent_LinkerMediaChangeOperator,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.operatorType !== 0) {
      writer.uint32(16).int32(message.operatorType);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.displayId !== "") {
      writer.uint32(34).string(message.displayId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerMediaChangeContent_LinkerMediaChangeOperator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerMediaChangeContent_LinkerMediaChangeOperator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerMediaChangeContent_LinkerMediaChangeOperator {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      operatorType: isSet(object.operatorType) ? linkMicUserAdminTypeFromJSON(object.operatorType) : 0,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      displayId: isSet(object.displayId) ? globalThis.String(object.displayId) : "",
    };
  },

  toJSON(message: LinkerMediaChangeContent_LinkerMediaChangeOperator): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.operatorType !== 0) {
      obj.operatorType = linkMicUserAdminTypeToJSON(message.operatorType);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.displayId !== "") {
      obj.displayId = message.displayId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerMediaChangeContent_LinkerMediaChangeOperator>, I>>(
    base?: I,
  ): LinkerMediaChangeContent_LinkerMediaChangeOperator {
    return LinkerMediaChangeContent_LinkerMediaChangeOperator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerMediaChangeContent_LinkerMediaChangeOperator>, I>>(
    object: I,
  ): LinkerMediaChangeContent_LinkerMediaChangeOperator {
    const message = createBaseLinkerMediaChangeContent_LinkerMediaChangeOperator();
    message.userId = object.userId ?? "0";
    message.operatorType = object.operatorType ?? 0;
    message.nickName = object.nickName ?? "";
    message.displayId = object.displayId ?? "";
    return message;
  },
};

function createBaseLinkerMicIdxUpdateContent(): LinkerMicIdxUpdateContent {
  return {};
}

export const LinkerMicIdxUpdateContentDecoder: MessageFns<LinkerMicIdxUpdateContent> = {
  encode(_: LinkerMicIdxUpdateContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerMicIdxUpdateContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerMicIdxUpdateContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LinkerMicIdxUpdateContent {
    return {};
  },

  toJSON(_: LinkerMicIdxUpdateContent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerMicIdxUpdateContent>, I>>(base?: I): LinkerMicIdxUpdateContent {
    return LinkerMicIdxUpdateContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerMicIdxUpdateContent>, I>>(_: I): LinkerMicIdxUpdateContent {
    const message = createBaseLinkerMicIdxUpdateContent();
    return message;
  },
};

function createBaseLinkerMuteContent(): LinkerMuteContent {
  return { userId: "0", status: 0 };
}

export const LinkerMuteContentDecoder: MessageFns<LinkerMuteContent> = {
  encode(message: LinkerMuteContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerMuteContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerMuteContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerMuteContent {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      status: isSet(object.status) ? muteStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: LinkerMuteContent): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.status !== 0) {
      obj.status = muteStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerMuteContent>, I>>(base?: I): LinkerMuteContent {
    return LinkerMuteContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerMuteContent>, I>>(object: I): LinkerMuteContent {
    const message = createBaseLinkerMuteContent();
    message.userId = object.userId ?? "0";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseLinkerRandomMatchContent(): LinkerRandomMatchContent {
  return { user: undefined, roomId: "0", inviteType: "0", matchId: "", innerChannelId: "0" };
}

export const LinkerRandomMatchContentDecoder: MessageFns<LinkerRandomMatchContent> = {
  encode(message: LinkerRandomMatchContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.roomId !== "0") {
      writer.uint32(16).int64(message.roomId);
    }
    if (message.inviteType !== "0") {
      writer.uint32(24).int64(message.inviteType);
    }
    if (message.matchId !== "") {
      writer.uint32(34).string(message.matchId);
    }
    if (message.innerChannelId !== "0") {
      writer.uint32(40).int64(message.innerChannelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerRandomMatchContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerRandomMatchContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.inviteType = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.matchId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.innerChannelId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerRandomMatchContent {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      inviteType: isSet(object.inviteType) ? globalThis.String(object.inviteType) : "0",
      matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "",
      innerChannelId: isSet(object.innerChannelId) ? globalThis.String(object.innerChannelId) : "0",
    };
  },

  toJSON(message: LinkerRandomMatchContent): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.inviteType !== "0") {
      obj.inviteType = message.inviteType;
    }
    if (message.matchId !== "") {
      obj.matchId = message.matchId;
    }
    if (message.innerChannelId !== "0") {
      obj.innerChannelId = message.innerChannelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerRandomMatchContent>, I>>(base?: I): LinkerRandomMatchContent {
    return LinkerRandomMatchContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerRandomMatchContent>, I>>(object: I): LinkerRandomMatchContent {
    const message = createBaseLinkerRandomMatchContent();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.roomId = object.roomId ?? "0";
    message.inviteType = object.inviteType ?? "0";
    message.matchId = object.matchId ?? "";
    message.innerChannelId = object.innerChannelId ?? "0";
    return message;
  },
};

function createBaseLinkerReplyContent(): LinkerReplyContent {
  return {
    fromUserId: "0",
    fromRoomId: "0",
    fromUserLinkmicInfo: undefined,
    toUserId: "0",
    toUserLinkmicInfo: undefined,
    linkType: "0",
    replyStatus: "0",
    linkerSetting: undefined,
    fromUser: undefined,
    toUser: undefined,
  };
}

export const LinkerReplyContentDecoder: MessageFns<LinkerReplyContent> = {
  encode(message: LinkerReplyContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromUserId !== "0") {
      writer.uint32(8).int64(message.fromUserId);
    }
    if (message.fromRoomId !== "0") {
      writer.uint32(16).int64(message.fromRoomId);
    }
    if (message.fromUserLinkmicInfo !== undefined) {
      LinkerReplyContent_LinkmicInfoDecoder.encode(message.fromUserLinkmicInfo, writer.uint32(26).fork()).join();
    }
    if (message.toUserId !== "0") {
      writer.uint32(32).int64(message.toUserId);
    }
    if (message.toUserLinkmicInfo !== undefined) {
      LinkerReplyContent_LinkmicInfoDecoder.encode(message.toUserLinkmicInfo, writer.uint32(42).fork()).join();
    }
    if (message.linkType !== "0") {
      writer.uint32(48).int64(message.linkType);
    }
    if (message.replyStatus !== "0") {
      writer.uint32(56).int64(message.replyStatus);
    }
    if (message.linkerSetting !== undefined) {
      LinkerSettingDecoder.encode(message.linkerSetting, writer.uint32(66).fork()).join();
    }
    if (message.fromUser !== undefined) {
      UserDecoder.encode(message.fromUser, writer.uint32(74).fork()).join();
    }
    if (message.toUser !== undefined) {
      UserDecoder.encode(message.toUser, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerReplyContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerReplyContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromRoomId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fromUserLinkmicInfo = LinkerReplyContent_LinkmicInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.toUserLinkmicInfo = LinkerReplyContent_LinkmicInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.linkType = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.replyStatus = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.linkerSetting = LinkerSettingDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fromUser = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.toUser = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerReplyContent {
    return {
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      fromRoomId: isSet(object.fromRoomId) ? globalThis.String(object.fromRoomId) : "0",
      fromUserLinkmicInfo: isSet(object.fromUserLinkmicInfo)
        ? LinkerReplyContent_LinkmicInfo.fromJSON(object.fromUserLinkmicInfo)
        : undefined,
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
      toUserLinkmicInfo: isSet(object.toUserLinkmicInfo)
        ? LinkerReplyContent_LinkmicInfo.fromJSON(object.toUserLinkmicInfo)
        : undefined,
      linkType: isSet(object.linkType) ? globalThis.String(object.linkType) : "0",
      replyStatus: isSet(object.replyStatus) ? globalThis.String(object.replyStatus) : "0",
      linkerSetting: isSet(object.linkerSetting) ? LinkerSetting.fromJSON(object.linkerSetting) : undefined,
      fromUser: isSet(object.fromUser) ? User.fromJSON(object.fromUser) : undefined,
      toUser: isSet(object.toUser) ? User.fromJSON(object.toUser) : undefined,
    };
  },

  toJSON(message: LinkerReplyContent): unknown {
    const obj: any = {};
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.fromRoomId !== "0") {
      obj.fromRoomId = message.fromRoomId;
    }
    if (message.fromUserLinkmicInfo !== undefined) {
      obj.fromUserLinkmicInfo = LinkerReplyContent_LinkmicInfo.toJSON(message.fromUserLinkmicInfo);
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    if (message.toUserLinkmicInfo !== undefined) {
      obj.toUserLinkmicInfo = LinkerReplyContent_LinkmicInfo.toJSON(message.toUserLinkmicInfo);
    }
    if (message.linkType !== "0") {
      obj.linkType = message.linkType;
    }
    if (message.replyStatus !== "0") {
      obj.replyStatus = message.replyStatus;
    }
    if (message.linkerSetting !== undefined) {
      obj.linkerSetting = LinkerSetting.toJSON(message.linkerSetting);
    }
    if (message.fromUser !== undefined) {
      obj.fromUser = User.toJSON(message.fromUser);
    }
    if (message.toUser !== undefined) {
      obj.toUser = User.toJSON(message.toUser);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerReplyContent>, I>>(base?: I): LinkerReplyContent {
    return LinkerReplyContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerReplyContent>, I>>(object: I): LinkerReplyContent {
    const message = createBaseLinkerReplyContent();
    message.fromUserId = object.fromUserId ?? "0";
    message.fromRoomId = object.fromRoomId ?? "0";
    message.fromUserLinkmicInfo = (object.fromUserLinkmicInfo !== undefined && object.fromUserLinkmicInfo !== null)
      ? LinkerReplyContent_LinkmicInfo.fromPartial(object.fromUserLinkmicInfo)
      : undefined;
    message.toUserId = object.toUserId ?? "0";
    message.toUserLinkmicInfo = (object.toUserLinkmicInfo !== undefined && object.toUserLinkmicInfo !== null)
      ? LinkerReplyContent_LinkmicInfo.fromPartial(object.toUserLinkmicInfo)
      : undefined;
    message.linkType = object.linkType ?? "0";
    message.replyStatus = object.replyStatus ?? "0";
    message.linkerSetting = (object.linkerSetting !== undefined && object.linkerSetting !== null)
      ? LinkerSetting.fromPartial(object.linkerSetting)
      : undefined;
    message.fromUser = (object.fromUser !== undefined && object.fromUser !== null)
      ? User.fromPartial(object.fromUser)
      : undefined;
    message.toUser = (object.toUser !== undefined && object.toUser !== null)
      ? User.fromPartial(object.toUser)
      : undefined;
    return message;
  },
};

function createBaseLinkerReplyContent_LinkmicInfo(): LinkerReplyContent_LinkmicInfo {
  return {
    accessKey: "",
    linkMicId: "0",
    joinable: false,
    confluenceType: 0,
    rtcExtInfo: "",
    rtcAppId: "",
    rtcAppSign: "",
    linkmicIdStr: "",
    vendor: "0",
  };
}

export const LinkerReplyContent_LinkmicInfoDecoder: MessageFns<LinkerReplyContent_LinkmicInfo> = {
  encode(message: LinkerReplyContent_LinkmicInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessKey !== "") {
      writer.uint32(10).string(message.accessKey);
    }
    if (message.linkMicId !== "0") {
      writer.uint32(16).int64(message.linkMicId);
    }
    if (message.joinable !== false) {
      writer.uint32(24).bool(message.joinable);
    }
    if (message.confluenceType !== 0) {
      writer.uint32(32).int32(message.confluenceType);
    }
    if (message.rtcExtInfo !== "") {
      writer.uint32(42).string(message.rtcExtInfo);
    }
    if (message.rtcAppId !== "") {
      writer.uint32(50).string(message.rtcAppId);
    }
    if (message.rtcAppSign !== "") {
      writer.uint32(58).string(message.rtcAppSign);
    }
    if (message.linkmicIdStr !== "") {
      writer.uint32(66).string(message.linkmicIdStr);
    }
    if (message.vendor !== "0") {
      writer.uint32(72).int64(message.vendor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerReplyContent_LinkmicInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerReplyContent_LinkmicInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.linkMicId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.joinable = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.confluenceType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rtcExtInfo = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rtcAppId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rtcAppSign = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.linkmicIdStr = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.vendor = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerReplyContent_LinkmicInfo {
    return {
      accessKey: isSet(object.accessKey) ? globalThis.String(object.accessKey) : "",
      linkMicId: isSet(object.linkMicId) ? globalThis.String(object.linkMicId) : "0",
      joinable: isSet(object.joinable) ? globalThis.Boolean(object.joinable) : false,
      confluenceType: isSet(object.confluenceType) ? globalThis.Number(object.confluenceType) : 0,
      rtcExtInfo: isSet(object.rtcExtInfo) ? globalThis.String(object.rtcExtInfo) : "",
      rtcAppId: isSet(object.rtcAppId) ? globalThis.String(object.rtcAppId) : "",
      rtcAppSign: isSet(object.rtcAppSign) ? globalThis.String(object.rtcAppSign) : "",
      linkmicIdStr: isSet(object.linkmicIdStr) ? globalThis.String(object.linkmicIdStr) : "",
      vendor: isSet(object.vendor) ? globalThis.String(object.vendor) : "0",
    };
  },

  toJSON(message: LinkerReplyContent_LinkmicInfo): unknown {
    const obj: any = {};
    if (message.accessKey !== "") {
      obj.accessKey = message.accessKey;
    }
    if (message.linkMicId !== "0") {
      obj.linkMicId = message.linkMicId;
    }
    if (message.joinable !== false) {
      obj.joinable = message.joinable;
    }
    if (message.confluenceType !== 0) {
      obj.confluenceType = Math.round(message.confluenceType);
    }
    if (message.rtcExtInfo !== "") {
      obj.rtcExtInfo = message.rtcExtInfo;
    }
    if (message.rtcAppId !== "") {
      obj.rtcAppId = message.rtcAppId;
    }
    if (message.rtcAppSign !== "") {
      obj.rtcAppSign = message.rtcAppSign;
    }
    if (message.linkmicIdStr !== "") {
      obj.linkmicIdStr = message.linkmicIdStr;
    }
    if (message.vendor !== "0") {
      obj.vendor = message.vendor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerReplyContent_LinkmicInfo>, I>>(base?: I): LinkerReplyContent_LinkmicInfo {
    return LinkerReplyContent_LinkmicInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerReplyContent_LinkmicInfo>, I>>(
    object: I,
  ): LinkerReplyContent_LinkmicInfo {
    const message = createBaseLinkerReplyContent_LinkmicInfo();
    message.accessKey = object.accessKey ?? "";
    message.linkMicId = object.linkMicId ?? "0";
    message.joinable = object.joinable ?? false;
    message.confluenceType = object.confluenceType ?? 0;
    message.rtcExtInfo = object.rtcExtInfo ?? "";
    message.rtcAppId = object.rtcAppId ?? "";
    message.rtcAppSign = object.rtcAppSign ?? "";
    message.linkmicIdStr = object.linkmicIdStr ?? "";
    message.vendor = object.vendor ?? "0";
    return message;
  },
};

function createBaseLinkerSetting(): LinkerSetting {
  return { MaxMemberLimit: "0", LinkType: "0", Scene: 0, OwnerUserId: "0", OwnerRoomId: "0", Vendor: "0" };
}

export const LinkerSettingDecoder: MessageFns<LinkerSetting> = {
  encode(message: LinkerSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.MaxMemberLimit !== "0") {
      writer.uint32(8).int64(message.MaxMemberLimit);
    }
    if (message.LinkType !== "0") {
      writer.uint32(16).int64(message.LinkType);
    }
    if (message.Scene !== 0) {
      writer.uint32(24).int32(message.Scene);
    }
    if (message.OwnerUserId !== "0") {
      writer.uint32(32).int64(message.OwnerUserId);
    }
    if (message.OwnerRoomId !== "0") {
      writer.uint32(40).int64(message.OwnerRoomId);
    }
    if (message.Vendor !== "0") {
      writer.uint32(48).int64(message.Vendor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.MaxMemberLimit = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.LinkType = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Scene = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.OwnerUserId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.OwnerRoomId = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.Vendor = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerSetting {
    return {
      MaxMemberLimit: isSet(object.MaxMemberLimit) ? globalThis.String(object.MaxMemberLimit) : "0",
      LinkType: isSet(object.LinkType) ? globalThis.String(object.LinkType) : "0",
      Scene: isSet(object.Scene) ? sceneFromJSON(object.Scene) : 0,
      OwnerUserId: isSet(object.OwnerUserId) ? globalThis.String(object.OwnerUserId) : "0",
      OwnerRoomId: isSet(object.OwnerRoomId) ? globalThis.String(object.OwnerRoomId) : "0",
      Vendor: isSet(object.Vendor) ? globalThis.String(object.Vendor) : "0",
    };
  },

  toJSON(message: LinkerSetting): unknown {
    const obj: any = {};
    if (message.MaxMemberLimit !== "0") {
      obj.MaxMemberLimit = message.MaxMemberLimit;
    }
    if (message.LinkType !== "0") {
      obj.LinkType = message.LinkType;
    }
    if (message.Scene !== 0) {
      obj.Scene = sceneToJSON(message.Scene);
    }
    if (message.OwnerUserId !== "0") {
      obj.OwnerUserId = message.OwnerUserId;
    }
    if (message.OwnerRoomId !== "0") {
      obj.OwnerRoomId = message.OwnerRoomId;
    }
    if (message.Vendor !== "0") {
      obj.Vendor = message.Vendor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerSetting>, I>>(base?: I): LinkerSetting {
    return LinkerSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerSetting>, I>>(object: I): LinkerSetting {
    const message = createBaseLinkerSetting();
    message.MaxMemberLimit = object.MaxMemberLimit ?? "0";
    message.LinkType = object.LinkType ?? "0";
    message.Scene = object.Scene ?? 0;
    message.OwnerUserId = object.OwnerUserId ?? "0";
    message.OwnerRoomId = object.OwnerRoomId ?? "0";
    message.Vendor = object.Vendor ?? "0";
    return message;
  },
};

function createBaseLinkerSysKickOutContent(): LinkerSysKickOutContent {
  return { userId: "0", linkmicIdStr: "" };
}

export const LinkerSysKickOutContentDecoder: MessageFns<LinkerSysKickOutContent> = {
  encode(message: LinkerSysKickOutContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.linkmicIdStr !== "") {
      writer.uint32(18).string(message.linkmicIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerSysKickOutContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerSysKickOutContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.linkmicIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerSysKickOutContent {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      linkmicIdStr: isSet(object.linkmicIdStr) ? globalThis.String(object.linkmicIdStr) : "",
    };
  },

  toJSON(message: LinkerSysKickOutContent): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.linkmicIdStr !== "") {
      obj.linkmicIdStr = message.linkmicIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerSysKickOutContent>, I>>(base?: I): LinkerSysKickOutContent {
    return LinkerSysKickOutContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerSysKickOutContent>, I>>(object: I): LinkerSysKickOutContent {
    const message = createBaseLinkerSysKickOutContent();
    message.userId = object.userId ?? "0";
    message.linkmicIdStr = object.linkmicIdStr ?? "";
    return message;
  },
};

function createBaseLinkmicUserToastContent(): LinkmicUserToastContent {
  return { userId: "0", roomId: "0", displayText: undefined, leavedUserId: "0" };
}

export const LinkmicUserToastContentDecoder: MessageFns<LinkmicUserToastContent> = {
  encode(message: LinkmicUserToastContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.roomId !== "0") {
      writer.uint32(16).int64(message.roomId);
    }
    if (message.displayText !== undefined) {
      TextDecoder.encode(message.displayText, writer.uint32(26).fork()).join();
    }
    if (message.leavedUserId !== "0") {
      writer.uint32(32).int64(message.leavedUserId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkmicUserToastContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkmicUserToastContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.leavedUserId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkmicUserToastContent {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      displayText: isSet(object.displayText) ? Text.fromJSON(object.displayText) : undefined,
      leavedUserId: isSet(object.leavedUserId) ? globalThis.String(object.leavedUserId) : "0",
    };
  },

  toJSON(message: LinkmicUserToastContent): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.displayText !== undefined) {
      obj.displayText = Text.toJSON(message.displayText);
    }
    if (message.leavedUserId !== "0") {
      obj.leavedUserId = message.leavedUserId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkmicUserToastContent>, I>>(base?: I): LinkmicUserToastContent {
    return LinkmicUserToastContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkmicUserToastContent>, I>>(object: I): LinkmicUserToastContent {
    const message = createBaseLinkmicUserToastContent();
    message.userId = object.userId ?? "0";
    message.roomId = object.roomId ?? "0";
    message.displayText = (object.displayText !== undefined && object.displayText !== null)
      ? Text.fromPartial(object.displayText)
      : undefined;
    message.leavedUserId = object.leavedUserId ?? "0";
    return message;
  },
};

function createBaseLinkerUpdateUserContent(): LinkerUpdateUserContent {
  return { fromUserId: "0", toUserId: "0", updateInfo: {} };
}

export const LinkerUpdateUserContentDecoder: MessageFns<LinkerUpdateUserContent> = {
  encode(message: LinkerUpdateUserContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromUserId !== "0") {
      writer.uint32(8).int64(message.fromUserId);
    }
    if (message.toUserId !== "0") {
      writer.uint32(16).int64(message.toUserId);
    }
    Object.entries(message.updateInfo).forEach(([key, value]) => {
      LinkerUpdateUserContent_UpdateInfoEntryDecoder.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerUpdateUserContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerUpdateUserContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = LinkerUpdateUserContent_UpdateInfoEntryDecoder.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.updateInfo[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerUpdateUserContent {
    return {
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
      updateInfo: isObject(object.updateInfo)
        ? Object.entries(object.updateInfo).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: LinkerUpdateUserContent): unknown {
    const obj: any = {};
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    if (message.updateInfo) {
      const entries = Object.entries(message.updateInfo);
      if (entries.length > 0) {
        obj.updateInfo = {};
        entries.forEach(([k, v]) => {
          obj.updateInfo[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerUpdateUserContent>, I>>(base?: I): LinkerUpdateUserContent {
    return LinkerUpdateUserContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerUpdateUserContent>, I>>(object: I): LinkerUpdateUserContent {
    const message = createBaseLinkerUpdateUserContent();
    message.fromUserId = object.fromUserId ?? "0";
    message.toUserId = object.toUserId ?? "0";
    message.updateInfo = Object.entries(object.updateInfo ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseLinkerUpdateUserContent_UpdateInfoEntry(): LinkerUpdateUserContent_UpdateInfoEntry {
  return { key: "", value: "" };
}

export const LinkerUpdateUserContent_UpdateInfoEntryDecoder: MessageFns<LinkerUpdateUserContent_UpdateInfoEntry> = {
  encode(message: LinkerUpdateUserContent_UpdateInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerUpdateUserContent_UpdateInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerUpdateUserContent_UpdateInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerUpdateUserContent_UpdateInfoEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LinkerUpdateUserContent_UpdateInfoEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerUpdateUserContent_UpdateInfoEntry>, I>>(
    base?: I,
  ): LinkerUpdateUserContent_UpdateInfoEntry {
    return LinkerUpdateUserContent_UpdateInfoEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerUpdateUserContent_UpdateInfoEntry>, I>>(
    object: I,
  ): LinkerUpdateUserContent_UpdateInfoEntry {
    const message = createBaseLinkerUpdateUserContent_UpdateInfoEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLinkerUpdateUserSettingContent(): LinkerUpdateUserSettingContent {
  return { multiLiveAnchorPanelSettings: undefined };
}

export const LinkerUpdateUserSettingContentDecoder: MessageFns<LinkerUpdateUserSettingContent> = {
  encode(message: LinkerUpdateUserSettingContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.multiLiveAnchorPanelSettings !== undefined) {
      MultiLiveAnchorPanelSettingsDecoder.encode(message.multiLiveAnchorPanelSettings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerUpdateUserSettingContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerUpdateUserSettingContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.multiLiveAnchorPanelSettings = MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkerUpdateUserSettingContent {
    return {
      multiLiveAnchorPanelSettings: isSet(object.multiLiveAnchorPanelSettings)
        ? MultiLiveAnchorPanelSettings.fromJSON(object.multiLiveAnchorPanelSettings)
        : undefined,
    };
  },

  toJSON(message: LinkerUpdateUserSettingContent): unknown {
    const obj: any = {};
    if (message.multiLiveAnchorPanelSettings !== undefined) {
      obj.multiLiveAnchorPanelSettings = MultiLiveAnchorPanelSettings.toJSON(message.multiLiveAnchorPanelSettings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerUpdateUserSettingContent>, I>>(base?: I): LinkerUpdateUserSettingContent {
    return LinkerUpdateUserSettingContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerUpdateUserSettingContent>, I>>(
    object: I,
  ): LinkerUpdateUserSettingContent {
    const message = createBaseLinkerUpdateUserSettingContent();
    message.multiLiveAnchorPanelSettings =
      (object.multiLiveAnchorPanelSettings !== undefined && object.multiLiveAnchorPanelSettings !== null)
        ? MultiLiveAnchorPanelSettings.fromPartial(object.multiLiveAnchorPanelSettings)
        : undefined;
    return message;
  },
};

function createBaseLinkerWaitingListChangeContent(): LinkerWaitingListChangeContent {
  return {};
}

export const LinkerWaitingListChangeContentDecoder: MessageFns<LinkerWaitingListChangeContent> = {
  encode(_: LinkerWaitingListChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkerWaitingListChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkerWaitingListChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LinkerWaitingListChangeContent {
    return {};
  },

  toJSON(_: LinkerWaitingListChangeContent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkerWaitingListChangeContent>, I>>(base?: I): LinkerWaitingListChangeContent {
    return LinkerWaitingListChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkerWaitingListChangeContent>, I>>(_: I): LinkerWaitingListChangeContent {
    const message = createBaseLinkerWaitingListChangeContent();
    return message;
  },
};

function createBaseMultiLiveAnchorPanelSettings(): MultiLiveAnchorPanelSettings {
  return {
    userId: "0",
    layout: "0",
    fixMicNum: "0",
    allowRequestFromUser: "0",
    allowRequestFromFollowerOnly: "0",
    applierSortSetting: 0,
    applierSortGiftScoreThreshold: "0",
    allowRequestFromFriends: 0,
    allowRequestFromFollowers: 0,
    allowRequestFromOthers: 0,
    enableShowMultiGuestLayout: 0,
  };
}

export const MultiLiveAnchorPanelSettingsDecoder: MessageFns<MultiLiveAnchorPanelSettings> = {
  encode(message: MultiLiveAnchorPanelSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.layout !== "0") {
      writer.uint32(16).int64(message.layout);
    }
    if (message.fixMicNum !== "0") {
      writer.uint32(24).int64(message.fixMicNum);
    }
    if (message.allowRequestFromUser !== "0") {
      writer.uint32(32).int64(message.allowRequestFromUser);
    }
    if (message.allowRequestFromFollowerOnly !== "0") {
      writer.uint32(40).int64(message.allowRequestFromFollowerOnly);
    }
    if (message.applierSortSetting !== 0) {
      writer.uint32(56).int32(message.applierSortSetting);
    }
    if (message.applierSortGiftScoreThreshold !== "0") {
      writer.uint32(64).int64(message.applierSortGiftScoreThreshold);
    }
    if (message.allowRequestFromFriends !== 0) {
      writer.uint32(72).int32(message.allowRequestFromFriends);
    }
    if (message.allowRequestFromFollowers !== 0) {
      writer.uint32(80).int32(message.allowRequestFromFollowers);
    }
    if (message.allowRequestFromOthers !== 0) {
      writer.uint32(88).int32(message.allowRequestFromOthers);
    }
    if (message.enableShowMultiGuestLayout !== 0) {
      writer.uint32(96).int32(message.enableShowMultiGuestLayout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveAnchorPanelSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveAnchorPanelSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.layout = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fixMicNum = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.allowRequestFromUser = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.allowRequestFromFollowerOnly = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.applierSortSetting = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.applierSortGiftScoreThreshold = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.allowRequestFromFriends = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.allowRequestFromFollowers = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.allowRequestFromOthers = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.enableShowMultiGuestLayout = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveAnchorPanelSettings {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      layout: isSet(object.layout) ? globalThis.String(object.layout) : "0",
      fixMicNum: isSet(object.fixMicNum) ? globalThis.String(object.fixMicNum) : "0",
      allowRequestFromUser: isSet(object.allowRequestFromUser) ? globalThis.String(object.allowRequestFromUser) : "0",
      allowRequestFromFollowerOnly: isSet(object.allowRequestFromFollowerOnly)
        ? globalThis.String(object.allowRequestFromFollowerOnly)
        : "0",
      applierSortSetting: isSet(object.applierSortSetting)
        ? linkmicApplierSortSettingFromJSON(object.applierSortSetting)
        : 0,
      applierSortGiftScoreThreshold: isSet(object.applierSortGiftScoreThreshold)
        ? globalThis.String(object.applierSortGiftScoreThreshold)
        : "0",
      allowRequestFromFriends: isSet(object.allowRequestFromFriends)
        ? globalThis.Number(object.allowRequestFromFriends)
        : 0,
      allowRequestFromFollowers: isSet(object.allowRequestFromFollowers)
        ? globalThis.Number(object.allowRequestFromFollowers)
        : 0,
      allowRequestFromOthers: isSet(object.allowRequestFromOthers)
        ? globalThis.Number(object.allowRequestFromOthers)
        : 0,
      enableShowMultiGuestLayout: isSet(object.enableShowMultiGuestLayout)
        ? globalThis.Number(object.enableShowMultiGuestLayout)
        : 0,
    };
  },

  toJSON(message: MultiLiveAnchorPanelSettings): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.layout !== "0") {
      obj.layout = message.layout;
    }
    if (message.fixMicNum !== "0") {
      obj.fixMicNum = message.fixMicNum;
    }
    if (message.allowRequestFromUser !== "0") {
      obj.allowRequestFromUser = message.allowRequestFromUser;
    }
    if (message.allowRequestFromFollowerOnly !== "0") {
      obj.allowRequestFromFollowerOnly = message.allowRequestFromFollowerOnly;
    }
    if (message.applierSortSetting !== 0) {
      obj.applierSortSetting = linkmicApplierSortSettingToJSON(message.applierSortSetting);
    }
    if (message.applierSortGiftScoreThreshold !== "0") {
      obj.applierSortGiftScoreThreshold = message.applierSortGiftScoreThreshold;
    }
    if (message.allowRequestFromFriends !== 0) {
      obj.allowRequestFromFriends = Math.round(message.allowRequestFromFriends);
    }
    if (message.allowRequestFromFollowers !== 0) {
      obj.allowRequestFromFollowers = Math.round(message.allowRequestFromFollowers);
    }
    if (message.allowRequestFromOthers !== 0) {
      obj.allowRequestFromOthers = Math.round(message.allowRequestFromOthers);
    }
    if (message.enableShowMultiGuestLayout !== 0) {
      obj.enableShowMultiGuestLayout = Math.round(message.enableShowMultiGuestLayout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveAnchorPanelSettings>, I>>(base?: I): MultiLiveAnchorPanelSettings {
    return MultiLiveAnchorPanelSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveAnchorPanelSettings>, I>>(object: I): MultiLiveAnchorPanelSettings {
    const message = createBaseMultiLiveAnchorPanelSettings();
    message.userId = object.userId ?? "0";
    message.layout = object.layout ?? "0";
    message.fixMicNum = object.fixMicNum ?? "0";
    message.allowRequestFromUser = object.allowRequestFromUser ?? "0";
    message.allowRequestFromFollowerOnly = object.allowRequestFromFollowerOnly ?? "0";
    message.applierSortSetting = object.applierSortSetting ?? 0;
    message.applierSortGiftScoreThreshold = object.applierSortGiftScoreThreshold ?? "0";
    message.allowRequestFromFriends = object.allowRequestFromFriends ?? 0;
    message.allowRequestFromFollowers = object.allowRequestFromFollowers ?? 0;
    message.allowRequestFromOthers = object.allowRequestFromOthers ?? 0;
    message.enableShowMultiGuestLayout = object.enableShowMultiGuestLayout ?? 0;
    return message;
  },
};

function createBasePlayer(): Player {
  return { roomId: "0", userId: "0" };
}

export const PlayerDecoder: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== "0") {
      writer.uint32(8).int64(message.roomId);
    }
    if (message.userId !== "0") {
      writer.uint32(16).int64(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.roomId = object.roomId ?? "0";
    message.userId = object.userId ?? "0";
    return message;
  },
};

function createBaseAllListUser(): AllListUser {
  return { linkedList: [], appliedList: [], invitedList: [], readyList: [] };
}

export const AllListUserDecoder: MessageFns<AllListUser> = {
  encode(message: AllListUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.linkedList) {
      LinkLayerListUserDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.appliedList) {
      LinkLayerListUserDecoder.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.invitedList) {
      LinkLayerListUserDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.readyList) {
      LinkLayerListUserDecoder.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllListUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllListUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.linkedList.push(LinkLayerListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.appliedList.push(LinkLayerListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.invitedList.push(LinkLayerListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.readyList.push(LinkLayerListUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllListUser {
    return {
      linkedList: globalThis.Array.isArray(object?.linkedList)
        ? object.linkedList.map((e: any) => LinkLayerListUser.fromJSON(e))
        : [],
      appliedList: globalThis.Array.isArray(object?.appliedList)
        ? object.appliedList.map((e: any) => LinkLayerListUser.fromJSON(e))
        : [],
      invitedList: globalThis.Array.isArray(object?.invitedList)
        ? object.invitedList.map((e: any) => LinkLayerListUser.fromJSON(e))
        : [],
      readyList: globalThis.Array.isArray(object?.readyList)
        ? object.readyList.map((e: any) => LinkLayerListUser.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AllListUser): unknown {
    const obj: any = {};
    if (message.linkedList?.length) {
      obj.linkedList = message.linkedList.map((e) => LinkLayerListUser.toJSON(e));
    }
    if (message.appliedList?.length) {
      obj.appliedList = message.appliedList.map((e) => LinkLayerListUser.toJSON(e));
    }
    if (message.invitedList?.length) {
      obj.invitedList = message.invitedList.map((e) => LinkLayerListUser.toJSON(e));
    }
    if (message.readyList?.length) {
      obj.readyList = message.readyList.map((e) => LinkLayerListUser.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllListUser>, I>>(base?: I): AllListUser {
    return AllListUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllListUser>, I>>(object: I): AllListUser {
    const message = createBaseAllListUser();
    message.linkedList = object.linkedList?.map((e) => LinkLayerListUser.fromPartial(e)) || [];
    message.appliedList = object.appliedList?.map((e) => LinkLayerListUser.fromPartial(e)) || [];
    message.invitedList = object.invitedList?.map((e) => LinkLayerListUser.fromPartial(e)) || [];
    message.readyList = object.readyList?.map((e) => LinkLayerListUser.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLinkLayerListUser(): LinkLayerListUser {
  return { user: undefined, linkmicId: "0", pos: undefined, linkedTimeNano: "0", appVersion: "", magicNumber1: "0" };
}

export const LinkLayerListUserDecoder: MessageFns<LinkLayerListUser> = {
  encode(message: LinkLayerListUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.linkmicId !== "0") {
      writer.uint32(16).int64(message.linkmicId);
    }
    if (message.pos !== undefined) {
      PositionDecoder.encode(message.pos, writer.uint32(26).fork()).join();
    }
    if (message.linkedTimeNano !== "0") {
      writer.uint32(32).int64(message.linkedTimeNano);
    }
    if (message.appVersion !== "") {
      writer.uint32(42).string(message.appVersion);
    }
    if (message.magicNumber1 !== "0") {
      writer.uint32(56).int64(message.magicNumber1);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkLayerListUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkLayerListUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.linkmicId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pos = PositionDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.linkedTimeNano = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.appVersion = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.magicNumber1 = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkLayerListUser {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      linkmicId: isSet(object.linkmicId) ? globalThis.String(object.linkmicId) : "0",
      pos: isSet(object.pos) ? Position.fromJSON(object.pos) : undefined,
      linkedTimeNano: isSet(object.linkedTimeNano) ? globalThis.String(object.linkedTimeNano) : "0",
      appVersion: isSet(object.appVersion) ? globalThis.String(object.appVersion) : "",
      magicNumber1: isSet(object.magicNumber1) ? globalThis.String(object.magicNumber1) : "0",
    };
  },

  toJSON(message: LinkLayerListUser): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.linkmicId !== "0") {
      obj.linkmicId = message.linkmicId;
    }
    if (message.pos !== undefined) {
      obj.pos = Position.toJSON(message.pos);
    }
    if (message.linkedTimeNano !== "0") {
      obj.linkedTimeNano = message.linkedTimeNano;
    }
    if (message.appVersion !== "") {
      obj.appVersion = message.appVersion;
    }
    if (message.magicNumber1 !== "0") {
      obj.magicNumber1 = message.magicNumber1;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkLayerListUser>, I>>(base?: I): LinkLayerListUser {
    return LinkLayerListUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkLayerListUser>, I>>(object: I): LinkLayerListUser {
    const message = createBaseLinkLayerListUser();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.linkmicId = object.linkmicId ?? "0";
    message.pos = (object.pos !== undefined && object.pos !== null) ? Position.fromPartial(object.pos) : undefined;
    message.linkedTimeNano = object.linkedTimeNano ?? "0";
    message.appVersion = object.appVersion ?? "";
    message.magicNumber1 = object.magicNumber1 ?? "0";
    return message;
  },
};

function createBasePosition(): Position {
  return { type: 0, link: undefined };
}

export const PositionDecoder: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.link !== undefined) {
      LinkPositionDecoder.encode(message.link, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.link = LinkPositionDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      link: isSet(object.link) ? LinkPosition.fromJSON(object.link) : undefined,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.link !== undefined) {
      obj.link = LinkPosition.toJSON(message.link);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.type = object.type ?? 0;
    message.link = (object.link !== undefined && object.link !== null)
      ? LinkPosition.fromPartial(object.link)
      : undefined;
    return message;
  },
};

function createBaseLinkPosition(): LinkPosition {
  return { position: 0, opt: 0 };
}

export const LinkPositionDecoder: MessageFns<LinkPosition> = {
  encode(message: LinkPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== 0) {
      writer.uint32(8).int32(message.position);
    }
    if (message.opt !== 0) {
      writer.uint32(16).int32(message.opt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.position = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.opt = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkPosition {
    return {
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
      opt: isSet(object.opt) ? globalThis.Number(object.opt) : 0,
    };
  },

  toJSON(message: LinkPosition): unknown {
    const obj: any = {};
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    if (message.opt !== 0) {
      obj.opt = Math.round(message.opt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkPosition>, I>>(base?: I): LinkPosition {
    return LinkPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkPosition>, I>>(object: I): LinkPosition {
    const message = createBaseLinkPosition();
    message.position = object.position ?? 0;
    message.opt = object.opt ?? 0;
    return message;
  },
};

function createBaseGroupPlayer(): GroupPlayer {
  return { channelId: "0", user: undefined };
}

export const GroupPlayerDecoder: MessageFns<GroupPlayer> = {
  encode(message: GroupPlayer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelId !== "0") {
      writer.uint32(8).int64(message.channelId);
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupPlayer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.channelId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupPlayer {
    return {
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "0",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: GroupPlayer): unknown {
    const obj: any = {};
    if (message.channelId !== "0") {
      obj.channelId = message.channelId;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupPlayer>, I>>(base?: I): GroupPlayer {
    return GroupPlayer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupPlayer>, I>>(object: I): GroupPlayer {
    const message = createBaseGroupPlayer();
    message.channelId = object.channelId ?? "0";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseDSLConfig(): DSLConfig {
  return { sceneVersion: 0, layoutId: "" };
}

export const DSLConfigDecoder: MessageFns<DSLConfig> = {
  encode(message: DSLConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sceneVersion !== 0) {
      writer.uint32(8).int32(message.sceneVersion);
    }
    if (message.layoutId !== "") {
      writer.uint32(18).string(message.layoutId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DSLConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDSLConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sceneVersion = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.layoutId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DSLConfig {
    return {
      sceneVersion: isSet(object.sceneVersion) ? globalThis.Number(object.sceneVersion) : 0,
      layoutId: isSet(object.layoutId) ? globalThis.String(object.layoutId) : "",
    };
  },

  toJSON(message: DSLConfig): unknown {
    const obj: any = {};
    if (message.sceneVersion !== 0) {
      obj.sceneVersion = Math.round(message.sceneVersion);
    }
    if (message.layoutId !== "") {
      obj.layoutId = message.layoutId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DSLConfig>, I>>(base?: I): DSLConfig {
    return DSLConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DSLConfig>, I>>(object: I): DSLConfig {
    const message = createBaseDSLConfig();
    message.sceneVersion = object.sceneVersion ?? 0;
    message.layoutId = object.layoutId ?? "";
    return message;
  },
};

function createBaseGroupChannelAllUser(): GroupChannelAllUser {
  return { groupChannelId: "0", userList: [], contentVersion: "0" };
}

export const GroupChannelAllUserDecoder: MessageFns<GroupChannelAllUser> = {
  encode(message: GroupChannelAllUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupChannelId !== "0") {
      writer.uint32(8).int64(message.groupChannelId);
    }
    for (const v of message.userList) {
      GroupChannelUserDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.contentVersion !== "0") {
      writer.uint32(24).int64(message.contentVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupChannelAllUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupChannelAllUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.groupChannelId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userList.push(GroupChannelUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.contentVersion = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupChannelAllUser {
    return {
      groupChannelId: isSet(object.groupChannelId) ? globalThis.String(object.groupChannelId) : "0",
      userList: globalThis.Array.isArray(object?.userList)
        ? object.userList.map((e: any) => GroupChannelUser.fromJSON(e))
        : [],
      contentVersion: isSet(object.contentVersion) ? globalThis.String(object.contentVersion) : "0",
    };
  },

  toJSON(message: GroupChannelAllUser): unknown {
    const obj: any = {};
    if (message.groupChannelId !== "0") {
      obj.groupChannelId = message.groupChannelId;
    }
    if (message.userList?.length) {
      obj.userList = message.userList.map((e) => GroupChannelUser.toJSON(e));
    }
    if (message.contentVersion !== "0") {
      obj.contentVersion = message.contentVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupChannelAllUser>, I>>(base?: I): GroupChannelAllUser {
    return GroupChannelAllUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupChannelAllUser>, I>>(object: I): GroupChannelAllUser {
    const message = createBaseGroupChannelAllUser();
    message.groupChannelId = object.groupChannelId ?? "0";
    message.userList = object.userList?.map((e) => GroupChannelUser.fromPartial(e)) || [];
    message.contentVersion = object.contentVersion ?? "0";
    return message;
  },
};

function createBaseGroupChannelUser(): GroupChannelUser {
  return {
    channelId: "0",
    status: 0,
    type: 0,
    allUser: undefined,
    joinTime: "0",
    linkedTime: "0",
    ownerUser: undefined,
    groupLinkmicId: "",
  };
}

export const GroupChannelUserDecoder: MessageFns<GroupChannelUser> = {
  encode(message: GroupChannelUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelId !== "0") {
      writer.uint32(8).int64(message.channelId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.allUser !== undefined) {
      AllListUserDecoder.encode(message.allUser, writer.uint32(34).fork()).join();
    }
    if (message.joinTime !== "0") {
      writer.uint32(40).int64(message.joinTime);
    }
    if (message.linkedTime !== "0") {
      writer.uint32(48).int64(message.linkedTime);
    }
    if (message.ownerUser !== undefined) {
      GroupPlayerDecoder.encode(message.ownerUser, writer.uint32(58).fork()).join();
    }
    if (message.groupLinkmicId !== "") {
      writer.uint32(66).string(message.groupLinkmicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupChannelUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupChannelUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.channelId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.allUser = AllListUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.joinTime = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.linkedTime = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.ownerUser = GroupPlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.groupLinkmicId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupChannelUser {
    return {
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "0",
      status: isSet(object.status) ? groupStatusFromJSON(object.status) : 0,
      type: isSet(object.type) ? textTypeFromJSON(object.type) : 0,
      allUser: isSet(object.allUser) ? AllListUser.fromJSON(object.allUser) : undefined,
      joinTime: isSet(object.joinTime) ? globalThis.String(object.joinTime) : "0",
      linkedTime: isSet(object.linkedTime) ? globalThis.String(object.linkedTime) : "0",
      ownerUser: isSet(object.ownerUser) ? GroupPlayer.fromJSON(object.ownerUser) : undefined,
      groupLinkmicId: isSet(object.groupLinkmicId) ? globalThis.String(object.groupLinkmicId) : "",
    };
  },

  toJSON(message: GroupChannelUser): unknown {
    const obj: any = {};
    if (message.channelId !== "0") {
      obj.channelId = message.channelId;
    }
    if (message.status !== 0) {
      obj.status = groupStatusToJSON(message.status);
    }
    if (message.type !== 0) {
      obj.type = textTypeToJSON(message.type);
    }
    if (message.allUser !== undefined) {
      obj.allUser = AllListUser.toJSON(message.allUser);
    }
    if (message.joinTime !== "0") {
      obj.joinTime = message.joinTime;
    }
    if (message.linkedTime !== "0") {
      obj.linkedTime = message.linkedTime;
    }
    if (message.ownerUser !== undefined) {
      obj.ownerUser = GroupPlayer.toJSON(message.ownerUser);
    }
    if (message.groupLinkmicId !== "") {
      obj.groupLinkmicId = message.groupLinkmicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupChannelUser>, I>>(base?: I): GroupChannelUser {
    return GroupChannelUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupChannelUser>, I>>(object: I): GroupChannelUser {
    const message = createBaseGroupChannelUser();
    message.channelId = object.channelId ?? "0";
    message.status = object.status ?? 0;
    message.type = object.type ?? 0;
    message.allUser = (object.allUser !== undefined && object.allUser !== null)
      ? AllListUser.fromPartial(object.allUser)
      : undefined;
    message.joinTime = object.joinTime ?? "0";
    message.linkedTime = object.linkedTime ?? "0";
    message.ownerUser = (object.ownerUser !== undefined && object.ownerUser !== null)
      ? GroupPlayer.fromPartial(object.ownerUser)
      : undefined;
    message.groupLinkmicId = object.groupLinkmicId ?? "";
    return message;
  },
};

function createBaseRTCExtraInfo(): RTCExtraInfo {
  return {
    liveRtcEngineConfig: undefined,
    liveRtcVideoParamList: [],
    rtcBitrateMap: undefined,
    rtcFps: 0,
    rtcMixBase: undefined,
    byteRtcExtInfo: undefined,
    rtcInfoExtra: undefined,
    rtcBusinessId: "",
    rtcOther: undefined,
    interactClientType: 0,
  };
}

export const RTCExtraInfoDecoder: MessageFns<RTCExtraInfo> = {
  encode(message: RTCExtraInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.liveRtcEngineConfig !== undefined) {
      RTCExtraInfo_RTCEngineConfigDecoder.encode(message.liveRtcEngineConfig, writer.uint32(10).fork()).join();
    }
    for (const v of message.liveRtcVideoParamList) {
      RTCExtraInfo_RTCLiveVideoParamDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.rtcBitrateMap !== undefined) {
      RTCExtraInfo_RTCBitrateMapDecoder.encode(message.rtcBitrateMap, writer.uint32(26).fork()).join();
    }
    if (message.rtcFps !== 0) {
      writer.uint32(32).int32(message.rtcFps);
    }
    if (message.rtcMixBase !== undefined) {
      RTCExtraInfo_RTCMixBaseDecoder.encode(message.rtcMixBase, writer.uint32(42).fork()).join();
    }
    if (message.byteRtcExtInfo !== undefined) {
      RTCExtraInfo_ByteRTCExtInfoDecoder.encode(message.byteRtcExtInfo, writer.uint32(50).fork()).join();
    }
    if (message.rtcInfoExtra !== undefined) {
      RTCExtraInfo_RTCInfoExtraDecoder.encode(message.rtcInfoExtra, writer.uint32(58).fork()).join();
    }
    if (message.rtcBusinessId !== "") {
      writer.uint32(66).string(message.rtcBusinessId);
    }
    if (message.rtcOther !== undefined) {
      RTCExtraInfo_RTCOtherDecoder.encode(message.rtcOther, writer.uint32(74).fork()).join();
    }
    if (message.interactClientType !== 0) {
      writer.uint32(80).int32(message.interactClientType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.liveRtcEngineConfig = RTCExtraInfo_RTCEngineConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.liveRtcVideoParamList.push(RTCExtraInfo_RTCLiveVideoParamDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rtcBitrateMap = RTCExtraInfo_RTCBitrateMapDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rtcFps = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rtcMixBase = RTCExtraInfo_RTCMixBaseDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.byteRtcExtInfo = RTCExtraInfo_ByteRTCExtInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rtcInfoExtra = RTCExtraInfo_RTCInfoExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rtcBusinessId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.rtcOther = RTCExtraInfo_RTCOtherDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.interactClientType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo {
    return {
      liveRtcEngineConfig: isSet(object.liveRtcEngineConfig)
        ? RTCExtraInfo_RTCEngineConfig.fromJSON(object.liveRtcEngineConfig)
        : undefined,
      liveRtcVideoParamList: globalThis.Array.isArray(object?.liveRtcVideoParamList)
        ? object.liveRtcVideoParamList.map((e: any) => RTCExtraInfo_RTCLiveVideoParam.fromJSON(e))
        : [],
      rtcBitrateMap: isSet(object.rtcBitrateMap)
        ? RTCExtraInfo_RTCBitrateMap.fromJSON(object.rtcBitrateMap)
        : undefined,
      rtcFps: isSet(object.rtcFps) ? globalThis.Number(object.rtcFps) : 0,
      rtcMixBase: isSet(object.rtcMixBase) ? RTCExtraInfo_RTCMixBase.fromJSON(object.rtcMixBase) : undefined,
      byteRtcExtInfo: isSet(object.byteRtcExtInfo)
        ? RTCExtraInfo_ByteRTCExtInfo.fromJSON(object.byteRtcExtInfo)
        : undefined,
      rtcInfoExtra: isSet(object.rtcInfoExtra) ? RTCExtraInfo_RTCInfoExtra.fromJSON(object.rtcInfoExtra) : undefined,
      rtcBusinessId: isSet(object.rtcBusinessId) ? globalThis.String(object.rtcBusinessId) : "",
      rtcOther: isSet(object.rtcOther) ? RTCExtraInfo_RTCOther.fromJSON(object.rtcOther) : undefined,
      interactClientType: isSet(object.interactClientType) ? globalThis.Number(object.interactClientType) : 0,
    };
  },

  toJSON(message: RTCExtraInfo): unknown {
    const obj: any = {};
    if (message.liveRtcEngineConfig !== undefined) {
      obj.liveRtcEngineConfig = RTCExtraInfo_RTCEngineConfig.toJSON(message.liveRtcEngineConfig);
    }
    if (message.liveRtcVideoParamList?.length) {
      obj.liveRtcVideoParamList = message.liveRtcVideoParamList.map((e) => RTCExtraInfo_RTCLiveVideoParam.toJSON(e));
    }
    if (message.rtcBitrateMap !== undefined) {
      obj.rtcBitrateMap = RTCExtraInfo_RTCBitrateMap.toJSON(message.rtcBitrateMap);
    }
    if (message.rtcFps !== 0) {
      obj.rtcFps = Math.round(message.rtcFps);
    }
    if (message.rtcMixBase !== undefined) {
      obj.rtcMixBase = RTCExtraInfo_RTCMixBase.toJSON(message.rtcMixBase);
    }
    if (message.byteRtcExtInfo !== undefined) {
      obj.byteRtcExtInfo = RTCExtraInfo_ByteRTCExtInfo.toJSON(message.byteRtcExtInfo);
    }
    if (message.rtcInfoExtra !== undefined) {
      obj.rtcInfoExtra = RTCExtraInfo_RTCInfoExtra.toJSON(message.rtcInfoExtra);
    }
    if (message.rtcBusinessId !== "") {
      obj.rtcBusinessId = message.rtcBusinessId;
    }
    if (message.rtcOther !== undefined) {
      obj.rtcOther = RTCExtraInfo_RTCOther.toJSON(message.rtcOther);
    }
    if (message.interactClientType !== 0) {
      obj.interactClientType = Math.round(message.interactClientType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo>, I>>(base?: I): RTCExtraInfo {
    return RTCExtraInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo>, I>>(object: I): RTCExtraInfo {
    const message = createBaseRTCExtraInfo();
    message.liveRtcEngineConfig = (object.liveRtcEngineConfig !== undefined && object.liveRtcEngineConfig !== null)
      ? RTCExtraInfo_RTCEngineConfig.fromPartial(object.liveRtcEngineConfig)
      : undefined;
    message.liveRtcVideoParamList =
      object.liveRtcVideoParamList?.map((e) => RTCExtraInfo_RTCLiveVideoParam.fromPartial(e)) || [];
    message.rtcBitrateMap = (object.rtcBitrateMap !== undefined && object.rtcBitrateMap !== null)
      ? RTCExtraInfo_RTCBitrateMap.fromPartial(object.rtcBitrateMap)
      : undefined;
    message.rtcFps = object.rtcFps ?? 0;
    message.rtcMixBase = (object.rtcMixBase !== undefined && object.rtcMixBase !== null)
      ? RTCExtraInfo_RTCMixBase.fromPartial(object.rtcMixBase)
      : undefined;
    message.byteRtcExtInfo = (object.byteRtcExtInfo !== undefined && object.byteRtcExtInfo !== null)
      ? RTCExtraInfo_ByteRTCExtInfo.fromPartial(object.byteRtcExtInfo)
      : undefined;
    message.rtcInfoExtra = (object.rtcInfoExtra !== undefined && object.rtcInfoExtra !== null)
      ? RTCExtraInfo_RTCInfoExtra.fromPartial(object.rtcInfoExtra)
      : undefined;
    message.rtcBusinessId = object.rtcBusinessId ?? "";
    message.rtcOther = (object.rtcOther !== undefined && object.rtcOther !== null)
      ? RTCExtraInfo_RTCOther.fromPartial(object.rtcOther)
      : undefined;
    message.interactClientType = object.interactClientType ?? 0;
    return message;
  },
};

function createBaseRTCExtraInfo_RTCMixBase(): RTCExtraInfo_RTCMixBase {
  return { bitrate: 0 };
}

export const RTCExtraInfo_RTCMixBaseDecoder: MessageFns<RTCExtraInfo_RTCMixBase> = {
  encode(message: RTCExtraInfo_RTCMixBase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bitrate !== 0) {
      writer.uint32(8).int32(message.bitrate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_RTCMixBase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_RTCMixBase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.bitrate = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_RTCMixBase {
    return { bitrate: isSet(object.bitrate) ? globalThis.Number(object.bitrate) : 0 };
  },

  toJSON(message: RTCExtraInfo_RTCMixBase): unknown {
    const obj: any = {};
    if (message.bitrate !== 0) {
      obj.bitrate = Math.round(message.bitrate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_RTCMixBase>, I>>(base?: I): RTCExtraInfo_RTCMixBase {
    return RTCExtraInfo_RTCMixBase.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_RTCMixBase>, I>>(object: I): RTCExtraInfo_RTCMixBase {
    const message = createBaseRTCExtraInfo_RTCMixBase();
    message.bitrate = object.bitrate ?? 0;
    return message;
  },
};

function createBaseRTCExtraInfo_ByteRTCExtInfo(): RTCExtraInfo_ByteRTCExtInfo {
  return { defaultSignaling: 0 };
}

export const RTCExtraInfo_ByteRTCExtInfoDecoder: MessageFns<RTCExtraInfo_ByteRTCExtInfo> = {
  encode(message: RTCExtraInfo_ByteRTCExtInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.defaultSignaling !== 0) {
      writer.uint32(8).int32(message.defaultSignaling);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_ByteRTCExtInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_ByteRTCExtInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.defaultSignaling = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_ByteRTCExtInfo {
    return { defaultSignaling: isSet(object.defaultSignaling) ? globalThis.Number(object.defaultSignaling) : 0 };
  },

  toJSON(message: RTCExtraInfo_ByteRTCExtInfo): unknown {
    const obj: any = {};
    if (message.defaultSignaling !== 0) {
      obj.defaultSignaling = Math.round(message.defaultSignaling);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_ByteRTCExtInfo>, I>>(base?: I): RTCExtraInfo_ByteRTCExtInfo {
    return RTCExtraInfo_ByteRTCExtInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_ByteRTCExtInfo>, I>>(object: I): RTCExtraInfo_ByteRTCExtInfo {
    const message = createBaseRTCExtraInfo_ByteRTCExtInfo();
    message.defaultSignaling = object.defaultSignaling ?? 0;
    return message;
  },
};

function createBaseRTCExtraInfo_RTCInfoExtra(): RTCExtraInfo_RTCInfoExtra {
  return { version: "" };
}

export const RTCExtraInfo_RTCInfoExtraDecoder: MessageFns<RTCExtraInfo_RTCInfoExtra> = {
  encode(message: RTCExtraInfo_RTCInfoExtra, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_RTCInfoExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_RTCInfoExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_RTCInfoExtra {
    return { version: isSet(object.version) ? globalThis.String(object.version) : "" };
  },

  toJSON(message: RTCExtraInfo_RTCInfoExtra): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_RTCInfoExtra>, I>>(base?: I): RTCExtraInfo_RTCInfoExtra {
    return RTCExtraInfo_RTCInfoExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_RTCInfoExtra>, I>>(object: I): RTCExtraInfo_RTCInfoExtra {
    const message = createBaseRTCExtraInfo_RTCInfoExtra();
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseRTCExtraInfo_RTCOther(): RTCExtraInfo_RTCOther {
  return { transCodingSecond: 0 };
}

export const RTCExtraInfo_RTCOtherDecoder: MessageFns<RTCExtraInfo_RTCOther> = {
  encode(message: RTCExtraInfo_RTCOther, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transCodingSecond !== 0) {
      writer.uint32(8).int32(message.transCodingSecond);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_RTCOther {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_RTCOther();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.transCodingSecond = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_RTCOther {
    return { transCodingSecond: isSet(object.transCodingSecond) ? globalThis.Number(object.transCodingSecond) : 0 };
  },

  toJSON(message: RTCExtraInfo_RTCOther): unknown {
    const obj: any = {};
    if (message.transCodingSecond !== 0) {
      obj.transCodingSecond = Math.round(message.transCodingSecond);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_RTCOther>, I>>(base?: I): RTCExtraInfo_RTCOther {
    return RTCExtraInfo_RTCOther.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_RTCOther>, I>>(object: I): RTCExtraInfo_RTCOther {
    const message = createBaseRTCExtraInfo_RTCOther();
    message.transCodingSecond = object.transCodingSecond ?? 0;
    return message;
  },
};

function createBaseRTCExtraInfo_RTCEngineConfig(): RTCExtraInfo_RTCEngineConfig {
  return { rtcAppId: "", rtcUserId: "", rtcToken: "", rtcChannelId: "0" };
}

export const RTCExtraInfo_RTCEngineConfigDecoder: MessageFns<RTCExtraInfo_RTCEngineConfig> = {
  encode(message: RTCExtraInfo_RTCEngineConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rtcAppId !== "") {
      writer.uint32(10).string(message.rtcAppId);
    }
    if (message.rtcUserId !== "") {
      writer.uint32(18).string(message.rtcUserId);
    }
    if (message.rtcToken !== "") {
      writer.uint32(26).string(message.rtcToken);
    }
    if (message.rtcChannelId !== "0") {
      writer.uint32(32).int64(message.rtcChannelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_RTCEngineConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_RTCEngineConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rtcAppId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rtcUserId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rtcToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rtcChannelId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_RTCEngineConfig {
    return {
      rtcAppId: isSet(object.rtcAppId) ? globalThis.String(object.rtcAppId) : "",
      rtcUserId: isSet(object.rtcUserId) ? globalThis.String(object.rtcUserId) : "",
      rtcToken: isSet(object.rtcToken) ? globalThis.String(object.rtcToken) : "",
      rtcChannelId: isSet(object.rtcChannelId) ? globalThis.String(object.rtcChannelId) : "0",
    };
  },

  toJSON(message: RTCExtraInfo_RTCEngineConfig): unknown {
    const obj: any = {};
    if (message.rtcAppId !== "") {
      obj.rtcAppId = message.rtcAppId;
    }
    if (message.rtcUserId !== "") {
      obj.rtcUserId = message.rtcUserId;
    }
    if (message.rtcToken !== "") {
      obj.rtcToken = message.rtcToken;
    }
    if (message.rtcChannelId !== "0") {
      obj.rtcChannelId = message.rtcChannelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_RTCEngineConfig>, I>>(base?: I): RTCExtraInfo_RTCEngineConfig {
    return RTCExtraInfo_RTCEngineConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_RTCEngineConfig>, I>>(object: I): RTCExtraInfo_RTCEngineConfig {
    const message = createBaseRTCExtraInfo_RTCEngineConfig();
    message.rtcAppId = object.rtcAppId ?? "";
    message.rtcUserId = object.rtcUserId ?? "";
    message.rtcToken = object.rtcToken ?? "";
    message.rtcChannelId = object.rtcChannelId ?? "0";
    return message;
  },
};

function createBaseRTCExtraInfo_RTCLiveVideoParam(): RTCExtraInfo_RTCLiveVideoParam {
  return { strategyId: 0, params: undefined };
}

export const RTCExtraInfo_RTCLiveVideoParamDecoder: MessageFns<RTCExtraInfo_RTCLiveVideoParam> = {
  encode(message: RTCExtraInfo_RTCLiveVideoParam, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.strategyId !== 0) {
      writer.uint32(8).int32(message.strategyId);
    }
    if (message.params !== undefined) {
      RTCExtraInfo_RTCVideoParamDecoder.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_RTCLiveVideoParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_RTCLiveVideoParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.strategyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = RTCExtraInfo_RTCVideoParamDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_RTCLiveVideoParam {
    return {
      strategyId: isSet(object.strategyId) ? globalThis.Number(object.strategyId) : 0,
      params: isSet(object.params) ? RTCExtraInfo_RTCVideoParam.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: RTCExtraInfo_RTCLiveVideoParam): unknown {
    const obj: any = {};
    if (message.strategyId !== 0) {
      obj.strategyId = Math.round(message.strategyId);
    }
    if (message.params !== undefined) {
      obj.params = RTCExtraInfo_RTCVideoParam.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_RTCLiveVideoParam>, I>>(base?: I): RTCExtraInfo_RTCLiveVideoParam {
    return RTCExtraInfo_RTCLiveVideoParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_RTCLiveVideoParam>, I>>(
    object: I,
  ): RTCExtraInfo_RTCLiveVideoParam {
    const message = createBaseRTCExtraInfo_RTCLiveVideoParam();
    message.strategyId = object.strategyId ?? 0;
    message.params = (object.params !== undefined && object.params !== null)
      ? RTCExtraInfo_RTCVideoParam.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseRTCExtraInfo_RTCVideoParam(): RTCExtraInfo_RTCVideoParam {
  return { width: 0, height: 0, fps: 0, bitrateKbps: 0 };
}

export const RTCExtraInfo_RTCVideoParamDecoder: MessageFns<RTCExtraInfo_RTCVideoParam> = {
  encode(message: RTCExtraInfo_RTCVideoParam, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.fps !== 0) {
      writer.uint32(24).int32(message.fps);
    }
    if (message.bitrateKbps !== 0) {
      writer.uint32(32).int32(message.bitrateKbps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_RTCVideoParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_RTCVideoParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fps = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bitrateKbps = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_RTCVideoParam {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      fps: isSet(object.fps) ? globalThis.Number(object.fps) : 0,
      bitrateKbps: isSet(object.bitrateKbps) ? globalThis.Number(object.bitrateKbps) : 0,
    };
  },

  toJSON(message: RTCExtraInfo_RTCVideoParam): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.fps !== 0) {
      obj.fps = Math.round(message.fps);
    }
    if (message.bitrateKbps !== 0) {
      obj.bitrateKbps = Math.round(message.bitrateKbps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_RTCVideoParam>, I>>(base?: I): RTCExtraInfo_RTCVideoParam {
    return RTCExtraInfo_RTCVideoParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_RTCVideoParam>, I>>(object: I): RTCExtraInfo_RTCVideoParam {
    const message = createBaseRTCExtraInfo_RTCVideoParam();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.fps = object.fps ?? 0;
    message.bitrateKbps = object.bitrateKbps ?? 0;
    return message;
  },
};

function createBaseRTCExtraInfo_RTCBitrateMap(): RTCExtraInfo_RTCBitrateMap {
  return { xx1: 0, xx2: 0, xx3: 0, xx4: 0 };
}

export const RTCExtraInfo_RTCBitrateMapDecoder: MessageFns<RTCExtraInfo_RTCBitrateMap> = {
  encode(message: RTCExtraInfo_RTCBitrateMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xx1 !== 0) {
      writer.uint32(8).int32(message.xx1);
    }
    if (message.xx2 !== 0) {
      writer.uint32(16).int32(message.xx2);
    }
    if (message.xx3 !== 0) {
      writer.uint32(24).int32(message.xx3);
    }
    if (message.xx4 !== 0) {
      writer.uint32(32).int32(message.xx4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCExtraInfo_RTCBitrateMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCExtraInfo_RTCBitrateMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.xx1 = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.xx2 = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.xx3 = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.xx4 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCExtraInfo_RTCBitrateMap {
    return {
      xx1: isSet(object.xx1) ? globalThis.Number(object.xx1) : 0,
      xx2: isSet(object.xx2) ? globalThis.Number(object.xx2) : 0,
      xx3: isSet(object.xx3) ? globalThis.Number(object.xx3) : 0,
      xx4: isSet(object.xx4) ? globalThis.Number(object.xx4) : 0,
    };
  },

  toJSON(message: RTCExtraInfo_RTCBitrateMap): unknown {
    const obj: any = {};
    if (message.xx1 !== 0) {
      obj.xx1 = Math.round(message.xx1);
    }
    if (message.xx2 !== 0) {
      obj.xx2 = Math.round(message.xx2);
    }
    if (message.xx3 !== 0) {
      obj.xx3 = Math.round(message.xx3);
    }
    if (message.xx4 !== 0) {
      obj.xx4 = Math.round(message.xx4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCExtraInfo_RTCBitrateMap>, I>>(base?: I): RTCExtraInfo_RTCBitrateMap {
    return RTCExtraInfo_RTCBitrateMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCExtraInfo_RTCBitrateMap>, I>>(object: I): RTCExtraInfo_RTCBitrateMap {
    const message = createBaseRTCExtraInfo_RTCBitrateMap();
    message.xx1 = object.xx1 ?? 0;
    message.xx2 = object.xx2 ?? 0;
    message.xx3 = object.xx3 ?? 0;
    message.xx4 = object.xx4 ?? 0;
    return message;
  },
};

function createBaseCreateChannelContent(): CreateChannelContent {
  return { owner: undefined, ownerLinkMicId: "" };
}

export const CreateChannelContentDecoder: MessageFns<CreateChannelContent> = {
  encode(message: CreateChannelContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== undefined) {
      PlayerDecoder.encode(message.owner, writer.uint32(10).fork()).join();
    }
    if (message.ownerLinkMicId !== "") {
      writer.uint32(18).string(message.ownerLinkMicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChannelContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChannelContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerLinkMicId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChannelContent {
    return {
      owner: isSet(object.owner) ? Player.fromJSON(object.owner) : undefined,
      ownerLinkMicId: isSet(object.ownerLinkMicId) ? globalThis.String(object.ownerLinkMicId) : "",
    };
  },

  toJSON(message: CreateChannelContent): unknown {
    const obj: any = {};
    if (message.owner !== undefined) {
      obj.owner = Player.toJSON(message.owner);
    }
    if (message.ownerLinkMicId !== "") {
      obj.ownerLinkMicId = message.ownerLinkMicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateChannelContent>, I>>(base?: I): CreateChannelContent {
    return CreateChannelContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateChannelContent>, I>>(object: I): CreateChannelContent {
    const message = createBaseCreateChannelContent();
    message.owner = (object.owner !== undefined && object.owner !== null)
      ? Player.fromPartial(object.owner)
      : undefined;
    message.ownerLinkMicId = object.ownerLinkMicId ?? "";
    return message;
  },
};

function createBaseListChangeContent(): ListChangeContent {
  return { listChangeType: 0, userList: undefined, linkedUserUiPositions: [], contentPos: [] };
}

export const ListChangeContentDecoder: MessageFns<ListChangeContent> = {
  encode(message: ListChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listChangeType !== 0) {
      writer.uint32(8).int32(message.listChangeType);
    }
    if (message.userList !== undefined) {
      AllListUserDecoder.encode(message.userList, writer.uint32(18).fork()).join();
    }
    for (const v of message.linkedUserUiPositions) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.contentPos) {
      ContentPositionDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.listChangeType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userList = AllListUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.linkedUserUiPositions.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contentPos.push(ContentPositionDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChangeContent {
    return {
      listChangeType: isSet(object.listChangeType) ? globalThis.Number(object.listChangeType) : 0,
      userList: isSet(object.userList) ? AllListUser.fromJSON(object.userList) : undefined,
      linkedUserUiPositions: globalThis.Array.isArray(object?.linkedUserUiPositions)
        ? object.linkedUserUiPositions.map((e: any) => globalThis.String(e))
        : [],
      contentPos: globalThis.Array.isArray(object?.contentPos)
        ? object.contentPos.map((e: any) => ContentPosition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListChangeContent): unknown {
    const obj: any = {};
    if (message.listChangeType !== 0) {
      obj.listChangeType = Math.round(message.listChangeType);
    }
    if (message.userList !== undefined) {
      obj.userList = AllListUser.toJSON(message.userList);
    }
    if (message.linkedUserUiPositions?.length) {
      obj.linkedUserUiPositions = message.linkedUserUiPositions;
    }
    if (message.contentPos?.length) {
      obj.contentPos = message.contentPos.map((e) => ContentPosition.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListChangeContent>, I>>(base?: I): ListChangeContent {
    return ListChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListChangeContent>, I>>(object: I): ListChangeContent {
    const message = createBaseListChangeContent();
    message.listChangeType = object.listChangeType ?? 0;
    message.userList = (object.userList !== undefined && object.userList !== null)
      ? AllListUser.fromPartial(object.userList)
      : undefined;
    message.linkedUserUiPositions = object.linkedUserUiPositions?.map((e) => e) || [];
    message.contentPos = object.contentPos?.map((e) => ContentPosition.fromPartial(e)) || [];
    return message;
  },
};

function createBaseContentPosition(): ContentPosition {
  return { contentID: "", contentType: 0, pos: undefined, contentLinkmicID: "", startTimeNano: "0" };
}

export const ContentPositionDecoder: MessageFns<ContentPosition> = {
  encode(message: ContentPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contentID !== "") {
      writer.uint32(10).string(message.contentID);
    }
    if (message.contentType !== 0) {
      writer.uint32(16).int32(message.contentType);
    }
    if (message.pos !== undefined) {
      MicPositionDataDecoder.encode(message.pos, writer.uint32(26).fork()).join();
    }
    if (message.contentLinkmicID !== "") {
      writer.uint32(34).string(message.contentLinkmicID);
    }
    if (message.startTimeNano !== "0") {
      writer.uint32(40).int64(message.startTimeNano);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contentID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contentType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pos = MicPositionDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contentLinkmicID = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startTimeNano = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentPosition {
    return {
      contentID: isSet(object.contentID) ? globalThis.String(object.contentID) : "",
      contentType: isSet(object.contentType) ? contentPositionTypeFromJSON(object.contentType) : 0,
      pos: isSet(object.pos) ? MicPositionData.fromJSON(object.pos) : undefined,
      contentLinkmicID: isSet(object.contentLinkmicID) ? globalThis.String(object.contentLinkmicID) : "",
      startTimeNano: isSet(object.startTimeNano) ? globalThis.String(object.startTimeNano) : "0",
    };
  },

  toJSON(message: ContentPosition): unknown {
    const obj: any = {};
    if (message.contentID !== "") {
      obj.contentID = message.contentID;
    }
    if (message.contentType !== 0) {
      obj.contentType = contentPositionTypeToJSON(message.contentType);
    }
    if (message.pos !== undefined) {
      obj.pos = MicPositionData.toJSON(message.pos);
    }
    if (message.contentLinkmicID !== "") {
      obj.contentLinkmicID = message.contentLinkmicID;
    }
    if (message.startTimeNano !== "0") {
      obj.startTimeNano = message.startTimeNano;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentPosition>, I>>(base?: I): ContentPosition {
    return ContentPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentPosition>, I>>(object: I): ContentPosition {
    const message = createBaseContentPosition();
    message.contentID = object.contentID ?? "";
    message.contentType = object.contentType ?? 0;
    message.pos = (object.pos !== undefined && object.pos !== null)
      ? MicPositionData.fromPartial(object.pos)
      : undefined;
    message.contentLinkmicID = object.contentLinkmicID ?? "";
    message.startTimeNano = object.startTimeNano ?? "0";
    return message;
  },
};

function createBaseMicPositionData(): MicPositionData {
  return { type: 0, linkPosition: undefined };
}

export const MicPositionDataDecoder: MessageFns<MicPositionData> = {
  encode(message: MicPositionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.linkPosition !== undefined) {
      LinkPositionDecoder.encode(message.linkPosition, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MicPositionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMicPositionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.linkPosition = LinkPositionDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MicPositionData {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      linkPosition: isSet(object.linkPosition) ? LinkPosition.fromJSON(object.linkPosition) : undefined,
    };
  },

  toJSON(message: MicPositionData): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.linkPosition !== undefined) {
      obj.linkPosition = LinkPosition.toJSON(message.linkPosition);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MicPositionData>, I>>(base?: I): MicPositionData {
    return MicPositionData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MicPositionData>, I>>(object: I): MicPositionData {
    const message = createBaseMicPositionData();
    message.type = object.type ?? 0;
    message.linkPosition = (object.linkPosition !== undefined && object.linkPosition !== null)
      ? LinkPosition.fromPartial(object.linkPosition)
      : undefined;
    return message;
  },
};

function createBaseMultiLiveContent(): MultiLiveContent {
  return {
    applyBizContent: undefined,
    inviteBizContent: undefined,
    replyBizContent: undefined,
    permitBizContent: undefined,
    joinDirectBizContent: undefined,
    kickOutBizContent: undefined,
  };
}

export const MultiLiveContentDecoder: MessageFns<MultiLiveContent> = {
  encode(message: MultiLiveContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applyBizContent !== undefined) {
      MultiLiveContent_ApplyBizContentDecoder.encode(message.applyBizContent, writer.uint32(10).fork()).join();
    }
    if (message.inviteBizContent !== undefined) {
      MultiLiveContent_InviteBizContentDecoder.encode(message.inviteBizContent, writer.uint32(18).fork()).join();
    }
    if (message.replyBizContent !== undefined) {
      MultiLiveContent_ReplyBizContentDecoder.encode(message.replyBizContent, writer.uint32(26).fork()).join();
    }
    if (message.permitBizContent !== undefined) {
      MultiLiveContent_PermitBizContentDecoder.encode(message.permitBizContent, writer.uint32(34).fork()).join();
    }
    if (message.joinDirectBizContent !== undefined) {
      MultiLiveContent_JoinDirectBizContentDecoder.encode(message.joinDirectBizContent, writer.uint32(42).fork()).join();
    }
    if (message.kickOutBizContent !== undefined) {
      MultiLiveContent_KickOutBizContentDecoder.encode(message.kickOutBizContent, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applyBizContent = MultiLiveContent_ApplyBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inviteBizContent = MultiLiveContent_InviteBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.replyBizContent = MultiLiveContent_ReplyBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.permitBizContent = MultiLiveContent_PermitBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.joinDirectBizContent = MultiLiveContent_JoinDirectBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.kickOutBizContent = MultiLiveContent_KickOutBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveContent {
    return {
      applyBizContent: isSet(object.applyBizContent)
        ? MultiLiveContent_ApplyBizContent.fromJSON(object.applyBizContent)
        : undefined,
      inviteBizContent: isSet(object.inviteBizContent)
        ? MultiLiveContent_InviteBizContent.fromJSON(object.inviteBizContent)
        : undefined,
      replyBizContent: isSet(object.replyBizContent)
        ? MultiLiveContent_ReplyBizContent.fromJSON(object.replyBizContent)
        : undefined,
      permitBizContent: isSet(object.permitBizContent)
        ? MultiLiveContent_PermitBizContent.fromJSON(object.permitBizContent)
        : undefined,
      joinDirectBizContent: isSet(object.joinDirectBizContent)
        ? MultiLiveContent_JoinDirectBizContent.fromJSON(object.joinDirectBizContent)
        : undefined,
      kickOutBizContent: isSet(object.kickOutBizContent)
        ? MultiLiveContent_KickOutBizContent.fromJSON(object.kickOutBizContent)
        : undefined,
    };
  },

  toJSON(message: MultiLiveContent): unknown {
    const obj: any = {};
    if (message.applyBizContent !== undefined) {
      obj.applyBizContent = MultiLiveContent_ApplyBizContent.toJSON(message.applyBizContent);
    }
    if (message.inviteBizContent !== undefined) {
      obj.inviteBizContent = MultiLiveContent_InviteBizContent.toJSON(message.inviteBizContent);
    }
    if (message.replyBizContent !== undefined) {
      obj.replyBizContent = MultiLiveContent_ReplyBizContent.toJSON(message.replyBizContent);
    }
    if (message.permitBizContent !== undefined) {
      obj.permitBizContent = MultiLiveContent_PermitBizContent.toJSON(message.permitBizContent);
    }
    if (message.joinDirectBizContent !== undefined) {
      obj.joinDirectBizContent = MultiLiveContent_JoinDirectBizContent.toJSON(message.joinDirectBizContent);
    }
    if (message.kickOutBizContent !== undefined) {
      obj.kickOutBizContent = MultiLiveContent_KickOutBizContent.toJSON(message.kickOutBizContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveContent>, I>>(base?: I): MultiLiveContent {
    return MultiLiveContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveContent>, I>>(object: I): MultiLiveContent {
    const message = createBaseMultiLiveContent();
    message.applyBizContent = (object.applyBizContent !== undefined && object.applyBizContent !== null)
      ? MultiLiveContent_ApplyBizContent.fromPartial(object.applyBizContent)
      : undefined;
    message.inviteBizContent = (object.inviteBizContent !== undefined && object.inviteBizContent !== null)
      ? MultiLiveContent_InviteBizContent.fromPartial(object.inviteBizContent)
      : undefined;
    message.replyBizContent = (object.replyBizContent !== undefined && object.replyBizContent !== null)
      ? MultiLiveContent_ReplyBizContent.fromPartial(object.replyBizContent)
      : undefined;
    message.permitBizContent = (object.permitBizContent !== undefined && object.permitBizContent !== null)
      ? MultiLiveContent_PermitBizContent.fromPartial(object.permitBizContent)
      : undefined;
    message.joinDirectBizContent = (object.joinDirectBizContent !== undefined && object.joinDirectBizContent !== null)
      ? MultiLiveContent_JoinDirectBizContent.fromPartial(object.joinDirectBizContent)
      : undefined;
    message.kickOutBizContent = (object.kickOutBizContent !== undefined && object.kickOutBizContent !== null)
      ? MultiLiveContent_KickOutBizContent.fromPartial(object.kickOutBizContent)
      : undefined;
    return message;
  },
};

function createBaseMultiLiveContent_ApplyBizContent(): MultiLiveContent_ApplyBizContent {
  return { user: undefined };
}

export const MultiLiveContent_ApplyBizContentDecoder: MessageFns<MultiLiveContent_ApplyBizContent> = {
  encode(message: MultiLiveContent_ApplyBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveContent_ApplyBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveContent_ApplyBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveContent_ApplyBizContent {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: MultiLiveContent_ApplyBizContent): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveContent_ApplyBizContent>, I>>(
    base?: I,
  ): MultiLiveContent_ApplyBizContent {
    return MultiLiveContent_ApplyBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveContent_ApplyBizContent>, I>>(
    object: I,
  ): MultiLiveContent_ApplyBizContent {
    const message = createBaseMultiLiveContent_ApplyBizContent();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseMultiLiveContent_JoinDirectBizContent(): MultiLiveContent_JoinDirectBizContent {
  return { replyImMsgId: "0", outsideRoomInviteSource: 0 };
}

export const MultiLiveContent_JoinDirectBizContentDecoder: MessageFns<MultiLiveContent_JoinDirectBizContent> = {
  encode(message: MultiLiveContent_JoinDirectBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.replyImMsgId !== "0") {
      writer.uint32(8).int64(message.replyImMsgId);
    }
    if (message.outsideRoomInviteSource !== 0) {
      writer.uint32(16).int32(message.outsideRoomInviteSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveContent_JoinDirectBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveContent_JoinDirectBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.replyImMsgId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.outsideRoomInviteSource = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveContent_JoinDirectBizContent {
    return {
      replyImMsgId: isSet(object.replyImMsgId) ? globalThis.String(object.replyImMsgId) : "0",
      outsideRoomInviteSource: isSet(object.outsideRoomInviteSource)
        ? multiGuestOutsideRoomInviteSourceFromJSON(object.outsideRoomInviteSource)
        : 0,
    };
  },

  toJSON(message: MultiLiveContent_JoinDirectBizContent): unknown {
    const obj: any = {};
    if (message.replyImMsgId !== "0") {
      obj.replyImMsgId = message.replyImMsgId;
    }
    if (message.outsideRoomInviteSource !== 0) {
      obj.outsideRoomInviteSource = multiGuestOutsideRoomInviteSourceToJSON(message.outsideRoomInviteSource);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveContent_JoinDirectBizContent>, I>>(
    base?: I,
  ): MultiLiveContent_JoinDirectBizContent {
    return MultiLiveContent_JoinDirectBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveContent_JoinDirectBizContent>, I>>(
    object: I,
  ): MultiLiveContent_JoinDirectBizContent {
    const message = createBaseMultiLiveContent_JoinDirectBizContent();
    message.replyImMsgId = object.replyImMsgId ?? "0";
    message.outsideRoomInviteSource = object.outsideRoomInviteSource ?? 0;
    return message;
  },
};

function createBaseMultiLiveContent_InviteBizContent(): MultiLiveContent_InviteBizContent {
  return {
    anchorSettingInfo: undefined,
    inviteSource: 0,
    operatorUserInfo: undefined,
    operatorLinkAdminType: 0,
    inviteeUserInfo: undefined,
    shareRevenueSetting: 0,
  };
}

export const MultiLiveContent_InviteBizContentDecoder: MessageFns<MultiLiveContent_InviteBizContent> = {
  encode(message: MultiLiveContent_InviteBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.anchorSettingInfo !== undefined) {
      MultiLiveAnchorPanelSettingsDecoder.encode(message.anchorSettingInfo, writer.uint32(10).fork()).join();
    }
    if (message.inviteSource !== 0) {
      writer.uint32(16).int32(message.inviteSource);
    }
    if (message.operatorUserInfo !== undefined) {
      UserDecoder.encode(message.operatorUserInfo, writer.uint32(26).fork()).join();
    }
    if (message.operatorLinkAdminType !== 0) {
      writer.uint32(32).int32(message.operatorLinkAdminType);
    }
    if (message.inviteeUserInfo !== undefined) {
      UserDecoder.encode(message.inviteeUserInfo, writer.uint32(42).fork()).join();
    }
    if (message.shareRevenueSetting !== 0) {
      writer.uint32(48).int32(message.shareRevenueSetting);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveContent_InviteBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveContent_InviteBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.anchorSettingInfo = MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.inviteSource = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.operatorUserInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.operatorLinkAdminType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inviteeUserInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.shareRevenueSetting = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveContent_InviteBizContent {
    return {
      anchorSettingInfo: isSet(object.anchorSettingInfo)
        ? MultiLiveAnchorPanelSettings.fromJSON(object.anchorSettingInfo)
        : undefined,
      inviteSource: isSet(object.inviteSource) ? contentInviteSourceFromJSON(object.inviteSource) : 0,
      operatorUserInfo: isSet(object.operatorUserInfo) ? User.fromJSON(object.operatorUserInfo) : undefined,
      operatorLinkAdminType: isSet(object.operatorLinkAdminType)
        ? linkMicUserAdminTypeFromJSON(object.operatorLinkAdminType)
        : 0,
      inviteeUserInfo: isSet(object.inviteeUserInfo) ? User.fromJSON(object.inviteeUserInfo) : undefined,
      shareRevenueSetting: isSet(object.shareRevenueSetting)
        ? linkmicShareRevenueSettingFromJSON(object.shareRevenueSetting)
        : 0,
    };
  },

  toJSON(message: MultiLiveContent_InviteBizContent): unknown {
    const obj: any = {};
    if (message.anchorSettingInfo !== undefined) {
      obj.anchorSettingInfo = MultiLiveAnchorPanelSettings.toJSON(message.anchorSettingInfo);
    }
    if (message.inviteSource !== 0) {
      obj.inviteSource = contentInviteSourceToJSON(message.inviteSource);
    }
    if (message.operatorUserInfo !== undefined) {
      obj.operatorUserInfo = User.toJSON(message.operatorUserInfo);
    }
    if (message.operatorLinkAdminType !== 0) {
      obj.operatorLinkAdminType = linkMicUserAdminTypeToJSON(message.operatorLinkAdminType);
    }
    if (message.inviteeUserInfo !== undefined) {
      obj.inviteeUserInfo = User.toJSON(message.inviteeUserInfo);
    }
    if (message.shareRevenueSetting !== 0) {
      obj.shareRevenueSetting = linkmicShareRevenueSettingToJSON(message.shareRevenueSetting);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveContent_InviteBizContent>, I>>(
    base?: I,
  ): MultiLiveContent_InviteBizContent {
    return MultiLiveContent_InviteBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveContent_InviteBizContent>, I>>(
    object: I,
  ): MultiLiveContent_InviteBizContent {
    const message = createBaseMultiLiveContent_InviteBizContent();
    message.anchorSettingInfo = (object.anchorSettingInfo !== undefined && object.anchorSettingInfo !== null)
      ? MultiLiveAnchorPanelSettings.fromPartial(object.anchorSettingInfo)
      : undefined;
    message.inviteSource = object.inviteSource ?? 0;
    message.operatorUserInfo = (object.operatorUserInfo !== undefined && object.operatorUserInfo !== null)
      ? User.fromPartial(object.operatorUserInfo)
      : undefined;
    message.operatorLinkAdminType = object.operatorLinkAdminType ?? 0;
    message.inviteeUserInfo = (object.inviteeUserInfo !== undefined && object.inviteeUserInfo !== null)
      ? User.fromPartial(object.inviteeUserInfo)
      : undefined;
    message.shareRevenueSetting = object.shareRevenueSetting ?? 0;
    return message;
  },
};

function createBaseMultiLiveContent_ReplyBizContent(): MultiLiveContent_ReplyBizContent {
  return { linkType: 0, isTurnOffInvitation: 0, replyUserInfo: undefined };
}

export const MultiLiveContent_ReplyBizContentDecoder: MessageFns<MultiLiveContent_ReplyBizContent> = {
  encode(message: MultiLiveContent_ReplyBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkType !== 0) {
      writer.uint32(8).int32(message.linkType);
    }
    if (message.isTurnOffInvitation !== 0) {
      writer.uint32(16).int32(message.isTurnOffInvitation);
    }
    if (message.replyUserInfo !== undefined) {
      UserDecoder.encode(message.replyUserInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveContent_ReplyBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveContent_ReplyBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.linkType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isTurnOffInvitation = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.replyUserInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveContent_ReplyBizContent {
    return {
      linkType: isSet(object.linkType) ? globalThis.Number(object.linkType) : 0,
      isTurnOffInvitation: isSet(object.isTurnOffInvitation) ? globalThis.Number(object.isTurnOffInvitation) : 0,
      replyUserInfo: isSet(object.replyUserInfo) ? User.fromJSON(object.replyUserInfo) : undefined,
    };
  },

  toJSON(message: MultiLiveContent_ReplyBizContent): unknown {
    const obj: any = {};
    if (message.linkType !== 0) {
      obj.linkType = Math.round(message.linkType);
    }
    if (message.isTurnOffInvitation !== 0) {
      obj.isTurnOffInvitation = Math.round(message.isTurnOffInvitation);
    }
    if (message.replyUserInfo !== undefined) {
      obj.replyUserInfo = User.toJSON(message.replyUserInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveContent_ReplyBizContent>, I>>(
    base?: I,
  ): MultiLiveContent_ReplyBizContent {
    return MultiLiveContent_ReplyBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveContent_ReplyBizContent>, I>>(
    object: I,
  ): MultiLiveContent_ReplyBizContent {
    const message = createBaseMultiLiveContent_ReplyBizContent();
    message.linkType = object.linkType ?? 0;
    message.isTurnOffInvitation = object.isTurnOffInvitation ?? 0;
    message.replyUserInfo = (object.replyUserInfo !== undefined && object.replyUserInfo !== null)
      ? User.fromPartial(object.replyUserInfo)
      : undefined;
    return message;
  },
};

function createBaseMultiLiveContent_PermitBizContent(): MultiLiveContent_PermitBizContent {
  return {
    anchorSettingInfo: undefined,
    expireTimestamp: "0",
    operatorUserInfo: undefined,
    operatorLinkAdminType: 0,
    linkUserType: 0,
  };
}

export const MultiLiveContent_PermitBizContentDecoder: MessageFns<MultiLiveContent_PermitBizContent> = {
  encode(message: MultiLiveContent_PermitBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.anchorSettingInfo !== undefined) {
      MultiLiveAnchorPanelSettingsDecoder.encode(message.anchorSettingInfo, writer.uint32(10).fork()).join();
    }
    if (message.expireTimestamp !== "0") {
      writer.uint32(16).int64(message.expireTimestamp);
    }
    if (message.operatorUserInfo !== undefined) {
      UserDecoder.encode(message.operatorUserInfo, writer.uint32(26).fork()).join();
    }
    if (message.operatorLinkAdminType !== 0) {
      writer.uint32(32).int32(message.operatorLinkAdminType);
    }
    if (message.linkUserType !== 0) {
      writer.uint32(40).int32(message.linkUserType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveContent_PermitBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveContent_PermitBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.anchorSettingInfo = MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expireTimestamp = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.operatorUserInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.operatorLinkAdminType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.linkUserType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveContent_PermitBizContent {
    return {
      anchorSettingInfo: isSet(object.anchorSettingInfo)
        ? MultiLiveAnchorPanelSettings.fromJSON(object.anchorSettingInfo)
        : undefined,
      expireTimestamp: isSet(object.expireTimestamp) ? globalThis.String(object.expireTimestamp) : "0",
      operatorUserInfo: isSet(object.operatorUserInfo) ? User.fromJSON(object.operatorUserInfo) : undefined,
      operatorLinkAdminType: isSet(object.operatorLinkAdminType)
        ? linkMicUserAdminTypeFromJSON(object.operatorLinkAdminType)
        : 0,
      linkUserType: isSet(object.linkUserType) ? linkUserTypeFromJSON(object.linkUserType) : 0,
    };
  },

  toJSON(message: MultiLiveContent_PermitBizContent): unknown {
    const obj: any = {};
    if (message.anchorSettingInfo !== undefined) {
      obj.anchorSettingInfo = MultiLiveAnchorPanelSettings.toJSON(message.anchorSettingInfo);
    }
    if (message.expireTimestamp !== "0") {
      obj.expireTimestamp = message.expireTimestamp;
    }
    if (message.operatorUserInfo !== undefined) {
      obj.operatorUserInfo = User.toJSON(message.operatorUserInfo);
    }
    if (message.operatorLinkAdminType !== 0) {
      obj.operatorLinkAdminType = linkMicUserAdminTypeToJSON(message.operatorLinkAdminType);
    }
    if (message.linkUserType !== 0) {
      obj.linkUserType = linkUserTypeToJSON(message.linkUserType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveContent_PermitBizContent>, I>>(
    base?: I,
  ): MultiLiveContent_PermitBizContent {
    return MultiLiveContent_PermitBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveContent_PermitBizContent>, I>>(
    object: I,
  ): MultiLiveContent_PermitBizContent {
    const message = createBaseMultiLiveContent_PermitBizContent();
    message.anchorSettingInfo = (object.anchorSettingInfo !== undefined && object.anchorSettingInfo !== null)
      ? MultiLiveAnchorPanelSettings.fromPartial(object.anchorSettingInfo)
      : undefined;
    message.expireTimestamp = object.expireTimestamp ?? "0";
    message.operatorUserInfo = (object.operatorUserInfo !== undefined && object.operatorUserInfo !== null)
      ? User.fromPartial(object.operatorUserInfo)
      : undefined;
    message.operatorLinkAdminType = object.operatorLinkAdminType ?? 0;
    message.linkUserType = object.linkUserType ?? 0;
    return message;
  },
};

function createBaseMultiLiveContent_KickOutBizContent(): MultiLiveContent_KickOutBizContent {
  return { operatorUserInfo: undefined, operatorLinkAdminType: 0, kickPlayerUserInfo: undefined };
}

export const MultiLiveContent_KickOutBizContentDecoder: MessageFns<MultiLiveContent_KickOutBizContent> = {
  encode(message: MultiLiveContent_KickOutBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorUserInfo !== undefined) {
      UserDecoder.encode(message.operatorUserInfo, writer.uint32(10).fork()).join();
    }
    if (message.operatorLinkAdminType !== 0) {
      writer.uint32(16).int32(message.operatorLinkAdminType);
    }
    if (message.kickPlayerUserInfo !== undefined) {
      UserDecoder.encode(message.kickPlayerUserInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiLiveContent_KickOutBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiLiveContent_KickOutBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operatorUserInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorLinkAdminType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.kickPlayerUserInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiLiveContent_KickOutBizContent {
    return {
      operatorUserInfo: isSet(object.operatorUserInfo) ? User.fromJSON(object.operatorUserInfo) : undefined,
      operatorLinkAdminType: isSet(object.operatorLinkAdminType)
        ? linkMicUserAdminTypeFromJSON(object.operatorLinkAdminType)
        : 0,
      kickPlayerUserInfo: isSet(object.kickPlayerUserInfo) ? User.fromJSON(object.kickPlayerUserInfo) : undefined,
    };
  },

  toJSON(message: MultiLiveContent_KickOutBizContent): unknown {
    const obj: any = {};
    if (message.operatorUserInfo !== undefined) {
      obj.operatorUserInfo = User.toJSON(message.operatorUserInfo);
    }
    if (message.operatorLinkAdminType !== 0) {
      obj.operatorLinkAdminType = linkMicUserAdminTypeToJSON(message.operatorLinkAdminType);
    }
    if (message.kickPlayerUserInfo !== undefined) {
      obj.kickPlayerUserInfo = User.toJSON(message.kickPlayerUserInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiLiveContent_KickOutBizContent>, I>>(
    base?: I,
  ): MultiLiveContent_KickOutBizContent {
    return MultiLiveContent_KickOutBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiLiveContent_KickOutBizContent>, I>>(
    object: I,
  ): MultiLiveContent_KickOutBizContent {
    const message = createBaseMultiLiveContent_KickOutBizContent();
    message.operatorUserInfo = (object.operatorUserInfo !== undefined && object.operatorUserInfo !== null)
      ? User.fromPartial(object.operatorUserInfo)
      : undefined;
    message.operatorLinkAdminType = object.operatorLinkAdminType ?? 0;
    message.kickPlayerUserInfo = (object.kickPlayerUserInfo !== undefined && object.kickPlayerUserInfo !== null)
      ? User.fromPartial(object.kickPlayerUserInfo)
      : undefined;
    return message;
  },
};

function createBaseInviteContent(): InviteContent {
  return {
    invitor: undefined,
    inviteeRtcExtInfo: undefined,
    invitorLinkMicId: "",
    inviteeLinkMicId: "",
    isOwner: false,
    pos: undefined,
    dsl: undefined,
    invitee: undefined,
    operator: undefined,
  };
}

export const InviteContentDecoder: MessageFns<InviteContent> = {
  encode(message: InviteContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitor !== undefined) {
      PlayerDecoder.encode(message.invitor, writer.uint32(10).fork()).join();
    }
    if (message.inviteeRtcExtInfo !== undefined) {
      RTCExtraInfoDecoder.encode(message.inviteeRtcExtInfo, writer.uint32(18).fork()).join();
    }
    if (message.invitorLinkMicId !== "") {
      writer.uint32(26).string(message.invitorLinkMicId);
    }
    if (message.inviteeLinkMicId !== "") {
      writer.uint32(34).string(message.inviteeLinkMicId);
    }
    if (message.isOwner !== false) {
      writer.uint32(40).bool(message.isOwner);
    }
    if (message.pos !== undefined) {
      PositionDecoder.encode(message.pos, writer.uint32(50).fork()).join();
    }
    if (message.dsl !== undefined) {
      DSLConfigDecoder.encode(message.dsl, writer.uint32(58).fork()).join();
    }
    if (message.invitee !== undefined) {
      UserDecoder.encode(message.invitee, writer.uint32(66).fork()).join();
    }
    if (message.operator !== undefined) {
      UserDecoder.encode(message.operator, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InviteContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInviteContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitor = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inviteeRtcExtInfo = RTCExtraInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.invitorLinkMicId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inviteeLinkMicId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isOwner = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pos = PositionDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.dsl = DSLConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.invitee = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.operator = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InviteContent {
    return {
      invitor: isSet(object.invitor) ? Player.fromJSON(object.invitor) : undefined,
      inviteeRtcExtInfo: isSet(object.inviteeRtcExtInfo) ? RTCExtraInfo.fromJSON(object.inviteeRtcExtInfo) : undefined,
      invitorLinkMicId: isSet(object.invitorLinkMicId) ? globalThis.String(object.invitorLinkMicId) : "",
      inviteeLinkMicId: isSet(object.inviteeLinkMicId) ? globalThis.String(object.inviteeLinkMicId) : "",
      isOwner: isSet(object.isOwner) ? globalThis.Boolean(object.isOwner) : false,
      pos: isSet(object.pos) ? Position.fromJSON(object.pos) : undefined,
      dsl: isSet(object.dsl) ? DSLConfig.fromJSON(object.dsl) : undefined,
      invitee: isSet(object.invitee) ? User.fromJSON(object.invitee) : undefined,
      operator: isSet(object.operator) ? User.fromJSON(object.operator) : undefined,
    };
  },

  toJSON(message: InviteContent): unknown {
    const obj: any = {};
    if (message.invitor !== undefined) {
      obj.invitor = Player.toJSON(message.invitor);
    }
    if (message.inviteeRtcExtInfo !== undefined) {
      obj.inviteeRtcExtInfo = RTCExtraInfo.toJSON(message.inviteeRtcExtInfo);
    }
    if (message.invitorLinkMicId !== "") {
      obj.invitorLinkMicId = message.invitorLinkMicId;
    }
    if (message.inviteeLinkMicId !== "") {
      obj.inviteeLinkMicId = message.inviteeLinkMicId;
    }
    if (message.isOwner !== false) {
      obj.isOwner = message.isOwner;
    }
    if (message.pos !== undefined) {
      obj.pos = Position.toJSON(message.pos);
    }
    if (message.dsl !== undefined) {
      obj.dsl = DSLConfig.toJSON(message.dsl);
    }
    if (message.invitee !== undefined) {
      obj.invitee = User.toJSON(message.invitee);
    }
    if (message.operator !== undefined) {
      obj.operator = User.toJSON(message.operator);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InviteContent>, I>>(base?: I): InviteContent {
    return InviteContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InviteContent>, I>>(object: I): InviteContent {
    const message = createBaseInviteContent();
    message.invitor = (object.invitor !== undefined && object.invitor !== null)
      ? Player.fromPartial(object.invitor)
      : undefined;
    message.inviteeRtcExtInfo = (object.inviteeRtcExtInfo !== undefined && object.inviteeRtcExtInfo !== null)
      ? RTCExtraInfo.fromPartial(object.inviteeRtcExtInfo)
      : undefined;
    message.invitorLinkMicId = object.invitorLinkMicId ?? "";
    message.inviteeLinkMicId = object.inviteeLinkMicId ?? "";
    message.isOwner = object.isOwner ?? false;
    message.pos = (object.pos !== undefined && object.pos !== null) ? Position.fromPartial(object.pos) : undefined;
    message.dsl = (object.dsl !== undefined && object.dsl !== null) ? DSLConfig.fromPartial(object.dsl) : undefined;
    message.invitee = (object.invitee !== undefined && object.invitee !== null)
      ? User.fromPartial(object.invitee)
      : undefined;
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? User.fromPartial(object.operator)
      : undefined;
    return message;
  },
};

function createBaseApplyContent(): ApplyContent {
  return { applier: undefined, applierLinkMicId: "" };
}

export const ApplyContentDecoder: MessageFns<ApplyContent> = {
  encode(message: ApplyContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applier !== undefined) {
      PlayerDecoder.encode(message.applier, writer.uint32(10).fork()).join();
    }
    if (message.applierLinkMicId !== "") {
      writer.uint32(18).string(message.applierLinkMicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applier = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.applierLinkMicId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyContent {
    return {
      applier: isSet(object.applier) ? Player.fromJSON(object.applier) : undefined,
      applierLinkMicId: isSet(object.applierLinkMicId) ? globalThis.String(object.applierLinkMicId) : "",
    };
  },

  toJSON(message: ApplyContent): unknown {
    const obj: any = {};
    if (message.applier !== undefined) {
      obj.applier = Player.toJSON(message.applier);
    }
    if (message.applierLinkMicId !== "") {
      obj.applierLinkMicId = message.applierLinkMicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplyContent>, I>>(base?: I): ApplyContent {
    return ApplyContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplyContent>, I>>(object: I): ApplyContent {
    const message = createBaseApplyContent();
    message.applier = (object.applier !== undefined && object.applier !== null)
      ? Player.fromPartial(object.applier)
      : undefined;
    message.applierLinkMicId = object.applierLinkMicId ?? "";
    return message;
  },
};

function createBasePermitApplyContent(): PermitApplyContent {
  return {
    permiter: undefined,
    permiterLinkMicId: "",
    applierPos: undefined,
    replyStatus: 0,
    dsl: undefined,
    applier: undefined,
    operator: undefined,
    applierLinkMicId: "",
  };
}

export const PermitApplyContentDecoder: MessageFns<PermitApplyContent> = {
  encode(message: PermitApplyContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permiter !== undefined) {
      PlayerDecoder.encode(message.permiter, writer.uint32(10).fork()).join();
    }
    if (message.permiterLinkMicId !== "") {
      writer.uint32(18).string(message.permiterLinkMicId);
    }
    if (message.applierPos !== undefined) {
      PositionDecoder.encode(message.applierPos, writer.uint32(26).fork()).join();
    }
    if (message.replyStatus !== 0) {
      writer.uint32(32).int32(message.replyStatus);
    }
    if (message.dsl !== undefined) {
      DSLConfigDecoder.encode(message.dsl, writer.uint32(42).fork()).join();
    }
    if (message.applier !== undefined) {
      UserDecoder.encode(message.applier, writer.uint32(50).fork()).join();
    }
    if (message.operator !== undefined) {
      UserDecoder.encode(message.operator, writer.uint32(58).fork()).join();
    }
    if (message.applierLinkMicId !== "") {
      writer.uint32(66).string(message.applierLinkMicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermitApplyContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermitApplyContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permiter = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.permiterLinkMicId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.applierPos = PositionDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.replyStatus = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.dsl = DSLConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.applier = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.operator = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.applierLinkMicId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermitApplyContent {
    return {
      permiter: isSet(object.permiter) ? Player.fromJSON(object.permiter) : undefined,
      permiterLinkMicId: isSet(object.permiterLinkMicId) ? globalThis.String(object.permiterLinkMicId) : "",
      applierPos: isSet(object.applierPos) ? Position.fromJSON(object.applierPos) : undefined,
      replyStatus: isSet(object.replyStatus) ? replyStatusFromJSON(object.replyStatus) : 0,
      dsl: isSet(object.dsl) ? DSLConfig.fromJSON(object.dsl) : undefined,
      applier: isSet(object.applier) ? User.fromJSON(object.applier) : undefined,
      operator: isSet(object.operator) ? User.fromJSON(object.operator) : undefined,
      applierLinkMicId: isSet(object.applierLinkMicId) ? globalThis.String(object.applierLinkMicId) : "",
    };
  },

  toJSON(message: PermitApplyContent): unknown {
    const obj: any = {};
    if (message.permiter !== undefined) {
      obj.permiter = Player.toJSON(message.permiter);
    }
    if (message.permiterLinkMicId !== "") {
      obj.permiterLinkMicId = message.permiterLinkMicId;
    }
    if (message.applierPos !== undefined) {
      obj.applierPos = Position.toJSON(message.applierPos);
    }
    if (message.replyStatus !== 0) {
      obj.replyStatus = replyStatusToJSON(message.replyStatus);
    }
    if (message.dsl !== undefined) {
      obj.dsl = DSLConfig.toJSON(message.dsl);
    }
    if (message.applier !== undefined) {
      obj.applier = User.toJSON(message.applier);
    }
    if (message.operator !== undefined) {
      obj.operator = User.toJSON(message.operator);
    }
    if (message.applierLinkMicId !== "") {
      obj.applierLinkMicId = message.applierLinkMicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermitApplyContent>, I>>(base?: I): PermitApplyContent {
    return PermitApplyContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermitApplyContent>, I>>(object: I): PermitApplyContent {
    const message = createBasePermitApplyContent();
    message.permiter = (object.permiter !== undefined && object.permiter !== null)
      ? Player.fromPartial(object.permiter)
      : undefined;
    message.permiterLinkMicId = object.permiterLinkMicId ?? "";
    message.applierPos = (object.applierPos !== undefined && object.applierPos !== null)
      ? Position.fromPartial(object.applierPos)
      : undefined;
    message.replyStatus = object.replyStatus ?? 0;
    message.dsl = (object.dsl !== undefined && object.dsl !== null) ? DSLConfig.fromPartial(object.dsl) : undefined;
    message.applier = (object.applier !== undefined && object.applier !== null)
      ? User.fromPartial(object.applier)
      : undefined;
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? User.fromPartial(object.operator)
      : undefined;
    message.applierLinkMicId = object.applierLinkMicId ?? "";
    return message;
  },
};

function createBaseReplyInviteContent(): ReplyInviteContent {
  return {
    invitee: undefined,
    replyStatus: 0,
    inviteeLinkMicId: "",
    inviteePos: undefined,
    inviteOperatorUser: undefined,
    linkedUserUiPositions: [],
    uiPos: [],
  };
}

export const ReplyInviteContentDecoder: MessageFns<ReplyInviteContent> = {
  encode(message: ReplyInviteContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitee !== undefined) {
      PlayerDecoder.encode(message.invitee, writer.uint32(10).fork()).join();
    }
    if (message.replyStatus !== 0) {
      writer.uint32(16).int32(message.replyStatus);
    }
    if (message.inviteeLinkMicId !== "") {
      writer.uint32(26).string(message.inviteeLinkMicId);
    }
    if (message.inviteePos !== undefined) {
      PositionDecoder.encode(message.inviteePos, writer.uint32(34).fork()).join();
    }
    if (message.inviteOperatorUser !== undefined) {
      PlayerDecoder.encode(message.inviteOperatorUser, writer.uint32(42).fork()).join();
    }
    for (const v of message.linkedUserUiPositions) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.uiPos) {
      PosIdentityDecoder.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplyInviteContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplyInviteContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitee = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.replyStatus = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inviteeLinkMicId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inviteePos = PositionDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inviteOperatorUser = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.linkedUserUiPositions.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.uiPos.push(PosIdentityDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplyInviteContent {
    return {
      invitee: isSet(object.invitee) ? Player.fromJSON(object.invitee) : undefined,
      replyStatus: isSet(object.replyStatus) ? replyStatusFromJSON(object.replyStatus) : 0,
      inviteeLinkMicId: isSet(object.inviteeLinkMicId) ? globalThis.String(object.inviteeLinkMicId) : "",
      inviteePos: isSet(object.inviteePos) ? Position.fromJSON(object.inviteePos) : undefined,
      inviteOperatorUser: isSet(object.inviteOperatorUser) ? Player.fromJSON(object.inviteOperatorUser) : undefined,
      linkedUserUiPositions: globalThis.Array.isArray(object?.linkedUserUiPositions)
        ? object.linkedUserUiPositions.map((e: any) => globalThis.String(e))
        : [],
      uiPos: globalThis.Array.isArray(object?.uiPos) ? object.uiPos.map((e: any) => PosIdentity.fromJSON(e)) : [],
    };
  },

  toJSON(message: ReplyInviteContent): unknown {
    const obj: any = {};
    if (message.invitee !== undefined) {
      obj.invitee = Player.toJSON(message.invitee);
    }
    if (message.replyStatus !== 0) {
      obj.replyStatus = replyStatusToJSON(message.replyStatus);
    }
    if (message.inviteeLinkMicId !== "") {
      obj.inviteeLinkMicId = message.inviteeLinkMicId;
    }
    if (message.inviteePos !== undefined) {
      obj.inviteePos = Position.toJSON(message.inviteePos);
    }
    if (message.inviteOperatorUser !== undefined) {
      obj.inviteOperatorUser = Player.toJSON(message.inviteOperatorUser);
    }
    if (message.linkedUserUiPositions?.length) {
      obj.linkedUserUiPositions = message.linkedUserUiPositions;
    }
    if (message.uiPos?.length) {
      obj.uiPos = message.uiPos.map((e) => PosIdentity.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReplyInviteContent>, I>>(base?: I): ReplyInviteContent {
    return ReplyInviteContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReplyInviteContent>, I>>(object: I): ReplyInviteContent {
    const message = createBaseReplyInviteContent();
    message.invitee = (object.invitee !== undefined && object.invitee !== null)
      ? Player.fromPartial(object.invitee)
      : undefined;
    message.replyStatus = object.replyStatus ?? 0;
    message.inviteeLinkMicId = object.inviteeLinkMicId ?? "";
    message.inviteePos = (object.inviteePos !== undefined && object.inviteePos !== null)
      ? Position.fromPartial(object.inviteePos)
      : undefined;
    message.inviteOperatorUser = (object.inviteOperatorUser !== undefined && object.inviteOperatorUser !== null)
      ? Player.fromPartial(object.inviteOperatorUser)
      : undefined;
    message.linkedUserUiPositions = object.linkedUserUiPositions?.map((e) => e) || [];
    message.uiPos = object.uiPos?.map((e) => PosIdentity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKickOutContent(): KickOutContent {
  return { offliner: undefined, kickoutReason: 0, linkedUserUiPositions: [], uiPos: [] };
}

export const KickOutContentDecoder: MessageFns<KickOutContent> = {
  encode(message: KickOutContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offliner !== undefined) {
      PlayerDecoder.encode(message.offliner, writer.uint32(10).fork()).join();
    }
    if (message.kickoutReason !== 0) {
      writer.uint32(16).int32(message.kickoutReason);
    }
    for (const v of message.linkedUserUiPositions) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.uiPos) {
      PosIdentityDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KickOutContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKickOutContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.offliner = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.kickoutReason = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.linkedUserUiPositions.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.uiPos.push(PosIdentityDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KickOutContent {
    return {
      offliner: isSet(object.offliner) ? Player.fromJSON(object.offliner) : undefined,
      kickoutReason: isSet(object.kickoutReason) ? kickoutReasonFromJSON(object.kickoutReason) : 0,
      linkedUserUiPositions: globalThis.Array.isArray(object?.linkedUserUiPositions)
        ? object.linkedUserUiPositions.map((e: any) => globalThis.String(e))
        : [],
      uiPos: globalThis.Array.isArray(object?.uiPos) ? object.uiPos.map((e: any) => PosIdentity.fromJSON(e)) : [],
    };
  },

  toJSON(message: KickOutContent): unknown {
    const obj: any = {};
    if (message.offliner !== undefined) {
      obj.offliner = Player.toJSON(message.offliner);
    }
    if (message.kickoutReason !== 0) {
      obj.kickoutReason = kickoutReasonToJSON(message.kickoutReason);
    }
    if (message.linkedUserUiPositions?.length) {
      obj.linkedUserUiPositions = message.linkedUserUiPositions;
    }
    if (message.uiPos?.length) {
      obj.uiPos = message.uiPos.map((e) => PosIdentity.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KickOutContent>, I>>(base?: I): KickOutContent {
    return KickOutContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KickOutContent>, I>>(object: I): KickOutContent {
    const message = createBaseKickOutContent();
    message.offliner = (object.offliner !== undefined && object.offliner !== null)
      ? Player.fromPartial(object.offliner)
      : undefined;
    message.kickoutReason = object.kickoutReason ?? 0;
    message.linkedUserUiPositions = object.linkedUserUiPositions?.map((e) => e) || [];
    message.uiPos = object.uiPos?.map((e) => PosIdentity.fromPartial(e)) || [];
    return message;
  },
};

function createBasePosIdentity(): PosIdentity {
  return { type: 0, value: "" };
}

export const PosIdentityDecoder: MessageFns<PosIdentity> = {
  encode(message: PosIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PosIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PosIdentity {
    return {
      type: isSet(object.type) ? posIdentityTypeFromJSON(object.type) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: PosIdentity): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = posIdentityTypeToJSON(message.type);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PosIdentity>, I>>(base?: I): PosIdentity {
    return PosIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PosIdentity>, I>>(object: I): PosIdentity {
    const message = createBasePosIdentity();
    message.type = object.type ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCancelApplyContent(): CancelApplyContent {
  return { applier: undefined, applierLinkMicId: "" };
}

export const CancelApplyContentDecoder: MessageFns<CancelApplyContent> = {
  encode(message: CancelApplyContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applier !== undefined) {
      PlayerDecoder.encode(message.applier, writer.uint32(10).fork()).join();
    }
    if (message.applierLinkMicId !== "") {
      writer.uint32(18).string(message.applierLinkMicId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelApplyContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelApplyContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applier = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.applierLinkMicId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelApplyContent {
    return {
      applier: isSet(object.applier) ? Player.fromJSON(object.applier) : undefined,
      applierLinkMicId: isSet(object.applierLinkMicId) ? globalThis.String(object.applierLinkMicId) : "",
    };
  },

  toJSON(message: CancelApplyContent): unknown {
    const obj: any = {};
    if (message.applier !== undefined) {
      obj.applier = Player.toJSON(message.applier);
    }
    if (message.applierLinkMicId !== "") {
      obj.applierLinkMicId = message.applierLinkMicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelApplyContent>, I>>(base?: I): CancelApplyContent {
    return CancelApplyContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelApplyContent>, I>>(object: I): CancelApplyContent {
    const message = createBaseCancelApplyContent();
    message.applier = (object.applier !== undefined && object.applier !== null)
      ? Player.fromPartial(object.applier)
      : undefined;
    message.applierLinkMicId = object.applierLinkMicId ?? "";
    return message;
  },
};

function createBaseCancelInviteContent(): CancelInviteContent {
  return { invitor: undefined, invitorLinkMicId: "", inviteeLinkMicId: "", inviteSeqId: "0", invitee: undefined };
}

export const CancelInviteContentDecoder: MessageFns<CancelInviteContent> = {
  encode(message: CancelInviteContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitor !== undefined) {
      PlayerDecoder.encode(message.invitor, writer.uint32(10).fork()).join();
    }
    if (message.invitorLinkMicId !== "") {
      writer.uint32(18).string(message.invitorLinkMicId);
    }
    if (message.inviteeLinkMicId !== "") {
      writer.uint32(26).string(message.inviteeLinkMicId);
    }
    if (message.inviteSeqId !== "0") {
      writer.uint32(32).int64(message.inviteSeqId);
    }
    if (message.invitee !== undefined) {
      PlayerDecoder.encode(message.invitee, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelInviteContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelInviteContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitor = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitorLinkMicId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inviteeLinkMicId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.inviteSeqId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.invitee = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelInviteContent {
    return {
      invitor: isSet(object.invitor) ? Player.fromJSON(object.invitor) : undefined,
      invitorLinkMicId: isSet(object.invitorLinkMicId) ? globalThis.String(object.invitorLinkMicId) : "",
      inviteeLinkMicId: isSet(object.inviteeLinkMicId) ? globalThis.String(object.inviteeLinkMicId) : "",
      inviteSeqId: isSet(object.inviteSeqId) ? globalThis.String(object.inviteSeqId) : "0",
      invitee: isSet(object.invitee) ? Player.fromJSON(object.invitee) : undefined,
    };
  },

  toJSON(message: CancelInviteContent): unknown {
    const obj: any = {};
    if (message.invitor !== undefined) {
      obj.invitor = Player.toJSON(message.invitor);
    }
    if (message.invitorLinkMicId !== "") {
      obj.invitorLinkMicId = message.invitorLinkMicId;
    }
    if (message.inviteeLinkMicId !== "") {
      obj.inviteeLinkMicId = message.inviteeLinkMicId;
    }
    if (message.inviteSeqId !== "0") {
      obj.inviteSeqId = message.inviteSeqId;
    }
    if (message.invitee !== undefined) {
      obj.invitee = Player.toJSON(message.invitee);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelInviteContent>, I>>(base?: I): CancelInviteContent {
    return CancelInviteContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelInviteContent>, I>>(object: I): CancelInviteContent {
    const message = createBaseCancelInviteContent();
    message.invitor = (object.invitor !== undefined && object.invitor !== null)
      ? Player.fromPartial(object.invitor)
      : undefined;
    message.invitorLinkMicId = object.invitorLinkMicId ?? "";
    message.inviteeLinkMicId = object.inviteeLinkMicId ?? "";
    message.inviteSeqId = object.inviteSeqId ?? "0";
    message.invitee = (object.invitee !== undefined && object.invitee !== null)
      ? Player.fromPartial(object.invitee)
      : undefined;
    return message;
  },
};

function createBaseLeaveContent(): LeaveContent {
  return { leaver: undefined, leaveReason: "0", linkedUserUiPositions: [], uiPos: [] };
}

export const LeaveContentDecoder: MessageFns<LeaveContent> = {
  encode(message: LeaveContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leaver !== undefined) {
      PlayerDecoder.encode(message.leaver, writer.uint32(10).fork()).join();
    }
    if (message.leaveReason !== "0") {
      writer.uint32(16).int64(message.leaveReason);
    }
    for (const v of message.linkedUserUiPositions) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.uiPos) {
      PosIdentityDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaveContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leaver = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.leaveReason = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.linkedUserUiPositions.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.uiPos.push(PosIdentityDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaveContent {
    return {
      leaver: isSet(object.leaver) ? Player.fromJSON(object.leaver) : undefined,
      leaveReason: isSet(object.leaveReason) ? globalThis.String(object.leaveReason) : "0",
      linkedUserUiPositions: globalThis.Array.isArray(object?.linkedUserUiPositions)
        ? object.linkedUserUiPositions.map((e: any) => globalThis.String(e))
        : [],
      uiPos: globalThis.Array.isArray(object?.uiPos) ? object.uiPos.map((e: any) => PosIdentity.fromJSON(e)) : [],
    };
  },

  toJSON(message: LeaveContent): unknown {
    const obj: any = {};
    if (message.leaver !== undefined) {
      obj.leaver = Player.toJSON(message.leaver);
    }
    if (message.leaveReason !== "0") {
      obj.leaveReason = message.leaveReason;
    }
    if (message.linkedUserUiPositions?.length) {
      obj.linkedUserUiPositions = message.linkedUserUiPositions;
    }
    if (message.uiPos?.length) {
      obj.uiPos = message.uiPos.map((e) => PosIdentity.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaveContent>, I>>(base?: I): LeaveContent {
    return LeaveContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaveContent>, I>>(object: I): LeaveContent {
    const message = createBaseLeaveContent();
    message.leaver = (object.leaver !== undefined && object.leaver !== null)
      ? Player.fromPartial(object.leaver)
      : undefined;
    message.leaveReason = object.leaveReason ?? "0";
    message.linkedUserUiPositions = object.linkedUserUiPositions?.map((e) => e) || [];
    message.uiPos = object.uiPos?.map((e) => PosIdentity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFinishChannelContent(): FinishChannelContent {
  return { owner: undefined, finishReason: "0" };
}

export const FinishChannelContentDecoder: MessageFns<FinishChannelContent> = {
  encode(message: FinishChannelContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== undefined) {
      PlayerDecoder.encode(message.owner, writer.uint32(10).fork()).join();
    }
    if (message.finishReason !== "0") {
      writer.uint32(16).int64(message.finishReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinishChannelContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinishChannelContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = PlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.finishReason = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinishChannelContent {
    return {
      owner: isSet(object.owner) ? Player.fromJSON(object.owner) : undefined,
      finishReason: isSet(object.finishReason) ? globalThis.String(object.finishReason) : "0",
    };
  },

  toJSON(message: FinishChannelContent): unknown {
    const obj: any = {};
    if (message.owner !== undefined) {
      obj.owner = Player.toJSON(message.owner);
    }
    if (message.finishReason !== "0") {
      obj.finishReason = message.finishReason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinishChannelContent>, I>>(base?: I): FinishChannelContent {
    return FinishChannelContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinishChannelContent>, I>>(object: I): FinishChannelContent {
    const message = createBaseFinishChannelContent();
    message.owner = (object.owner !== undefined && object.owner !== null)
      ? Player.fromPartial(object.owner)
      : undefined;
    message.finishReason = object.finishReason ?? "0";
    return message;
  },
};

function createBaseJoinDirectContent(): JoinDirectContent {
  return { joiner: undefined, allUsers: undefined };
}

export const JoinDirectContentDecoder: MessageFns<JoinDirectContent> = {
  encode(message: JoinDirectContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.joiner !== undefined) {
      LinkLayerListUserDecoder.encode(message.joiner, writer.uint32(10).fork()).join();
    }
    if (message.allUsers !== undefined) {
      AllListUserDecoder.encode(message.allUsers, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinDirectContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinDirectContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.joiner = LinkLayerListUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.allUsers = AllListUserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinDirectContent {
    return {
      joiner: isSet(object.joiner) ? LinkLayerListUser.fromJSON(object.joiner) : undefined,
      allUsers: isSet(object.allUsers) ? AllListUser.fromJSON(object.allUsers) : undefined,
    };
  },

  toJSON(message: JoinDirectContent): unknown {
    const obj: any = {};
    if (message.joiner !== undefined) {
      obj.joiner = LinkLayerListUser.toJSON(message.joiner);
    }
    if (message.allUsers !== undefined) {
      obj.allUsers = AllListUser.toJSON(message.allUsers);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinDirectContent>, I>>(base?: I): JoinDirectContent {
    return JoinDirectContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinDirectContent>, I>>(object: I): JoinDirectContent {
    const message = createBaseJoinDirectContent();
    message.joiner = (object.joiner !== undefined && object.joiner !== null)
      ? LinkLayerListUser.fromPartial(object.joiner)
      : undefined;
    message.allUsers = (object.allUsers !== undefined && object.allUsers !== null)
      ? AllListUser.fromPartial(object.allUsers)
      : undefined;
    return message;
  },
};

function createBaseLeaveJoinGroupContent(): LeaveJoinGroupContent {
  return { operator: undefined, groupChannelId: "0", leaveSource: "", linkedUserUiPositions: [] };
}

export const LeaveJoinGroupContentDecoder: MessageFns<LeaveJoinGroupContent> = {
  encode(message: LeaveJoinGroupContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operator !== undefined) {
      GroupPlayerDecoder.encode(message.operator, writer.uint32(10).fork()).join();
    }
    if (message.groupChannelId !== "0") {
      writer.uint32(16).int64(message.groupChannelId);
    }
    if (message.leaveSource !== "") {
      writer.uint32(26).string(message.leaveSource);
    }
    for (const v of message.linkedUserUiPositions) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaveJoinGroupContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveJoinGroupContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operator = GroupPlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.groupChannelId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.leaveSource = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.linkedUserUiPositions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaveJoinGroupContent {
    return {
      operator: isSet(object.operator) ? GroupPlayer.fromJSON(object.operator) : undefined,
      groupChannelId: isSet(object.groupChannelId) ? globalThis.String(object.groupChannelId) : "0",
      leaveSource: isSet(object.leaveSource) ? globalThis.String(object.leaveSource) : "",
      linkedUserUiPositions: globalThis.Array.isArray(object?.linkedUserUiPositions)
        ? object.linkedUserUiPositions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: LeaveJoinGroupContent): unknown {
    const obj: any = {};
    if (message.operator !== undefined) {
      obj.operator = GroupPlayer.toJSON(message.operator);
    }
    if (message.groupChannelId !== "0") {
      obj.groupChannelId = message.groupChannelId;
    }
    if (message.leaveSource !== "") {
      obj.leaveSource = message.leaveSource;
    }
    if (message.linkedUserUiPositions?.length) {
      obj.linkedUserUiPositions = message.linkedUserUiPositions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaveJoinGroupContent>, I>>(base?: I): LeaveJoinGroupContent {
    return LeaveJoinGroupContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaveJoinGroupContent>, I>>(object: I): LeaveJoinGroupContent {
    const message = createBaseLeaveJoinGroupContent();
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? GroupPlayer.fromPartial(object.operator)
      : undefined;
    message.groupChannelId = object.groupChannelId ?? "0";
    message.leaveSource = object.leaveSource ?? "";
    message.linkedUserUiPositions = object.linkedUserUiPositions?.map((e) => e) || [];
    return message;
  },
};

function createBasePermitJoinGroupContent(): PermitJoinGroupContent {
  return {
    approver: undefined,
    agreeStatus: 0,
    type: 0,
    groupExtInfoList: [],
    groupUser: undefined,
    migrationDetails: undefined,
    linkedUserUiPositions: [],
  };
}

export const PermitJoinGroupContentDecoder: MessageFns<PermitJoinGroupContent> = {
  encode(message: PermitJoinGroupContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.approver !== undefined) {
      GroupPlayerDecoder.encode(message.approver, writer.uint32(10).fork()).join();
    }
    if (message.agreeStatus !== 0) {
      writer.uint32(16).int32(message.agreeStatus);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    for (const v of message.groupExtInfoList) {
      RTCExtraInfoDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.groupUser !== undefined) {
      GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(42).fork()).join();
    }
    if (message.migrationDetails !== undefined) {
      MigrationDetailsDecoder.encode(message.migrationDetails, writer.uint32(50).fork()).join();
    }
    for (const v of message.linkedUserUiPositions) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermitJoinGroupContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermitJoinGroupContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.approver = GroupPlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.agreeStatus = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.groupExtInfoList.push(RTCExtraInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.groupUser = GroupChannelAllUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.migrationDetails = MigrationDetailsDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.linkedUserUiPositions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermitJoinGroupContent {
    return {
      approver: isSet(object.approver) ? GroupPlayer.fromJSON(object.approver) : undefined,
      agreeStatus: isSet(object.agreeStatus) ? agreeStatusFromJSON(object.agreeStatus) : 0,
      type: isSet(object.type) ? joinTypeFromJSON(object.type) : 0,
      groupExtInfoList: globalThis.Array.isArray(object?.groupExtInfoList)
        ? object.groupExtInfoList.map((e: any) => RTCExtraInfo.fromJSON(e))
        : [],
      groupUser: isSet(object.groupUser) ? GroupChannelAllUser.fromJSON(object.groupUser) : undefined,
      migrationDetails: isSet(object.migrationDetails) ? MigrationDetails.fromJSON(object.migrationDetails) : undefined,
      linkedUserUiPositions: globalThis.Array.isArray(object?.linkedUserUiPositions)
        ? object.linkedUserUiPositions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PermitJoinGroupContent): unknown {
    const obj: any = {};
    if (message.approver !== undefined) {
      obj.approver = GroupPlayer.toJSON(message.approver);
    }
    if (message.agreeStatus !== 0) {
      obj.agreeStatus = agreeStatusToJSON(message.agreeStatus);
    }
    if (message.type !== 0) {
      obj.type = joinTypeToJSON(message.type);
    }
    if (message.groupExtInfoList?.length) {
      obj.groupExtInfoList = message.groupExtInfoList.map((e) => RTCExtraInfo.toJSON(e));
    }
    if (message.groupUser !== undefined) {
      obj.groupUser = GroupChannelAllUser.toJSON(message.groupUser);
    }
    if (message.migrationDetails !== undefined) {
      obj.migrationDetails = MigrationDetails.toJSON(message.migrationDetails);
    }
    if (message.linkedUserUiPositions?.length) {
      obj.linkedUserUiPositions = message.linkedUserUiPositions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermitJoinGroupContent>, I>>(base?: I): PermitJoinGroupContent {
    return PermitJoinGroupContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermitJoinGroupContent>, I>>(object: I): PermitJoinGroupContent {
    const message = createBasePermitJoinGroupContent();
    message.approver = (object.approver !== undefined && object.approver !== null)
      ? GroupPlayer.fromPartial(object.approver)
      : undefined;
    message.agreeStatus = object.agreeStatus ?? 0;
    message.type = object.type ?? 0;
    message.groupExtInfoList = object.groupExtInfoList?.map((e) => RTCExtraInfo.fromPartial(e)) || [];
    message.groupUser = (object.groupUser !== undefined && object.groupUser !== null)
      ? GroupChannelAllUser.fromPartial(object.groupUser)
      : undefined;
    message.migrationDetails = (object.migrationDetails !== undefined && object.migrationDetails !== null)
      ? MigrationDetails.fromPartial(object.migrationDetails)
      : undefined;
    message.linkedUserUiPositions = object.linkedUserUiPositions?.map((e) => e) || [];
    return message;
  },
};

function createBaseMigrationDetails(): MigrationDetails {
  return { isMigrate: false, sourceGroupChannelId: "0", targetGroupChannelId: "0" };
}

export const MigrationDetailsDecoder: MessageFns<MigrationDetails> = {
  encode(message: MigrationDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isMigrate !== false) {
      writer.uint32(8).bool(message.isMigrate);
    }
    if (message.sourceGroupChannelId !== "0") {
      writer.uint32(16).int64(message.sourceGroupChannelId);
    }
    if (message.targetGroupChannelId !== "0") {
      writer.uint32(24).int64(message.targetGroupChannelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrationDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrationDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isMigrate = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sourceGroupChannelId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetGroupChannelId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrationDetails {
    return {
      isMigrate: isSet(object.isMigrate) ? globalThis.Boolean(object.isMigrate) : false,
      sourceGroupChannelId: isSet(object.sourceGroupChannelId) ? globalThis.String(object.sourceGroupChannelId) : "0",
      targetGroupChannelId: isSet(object.targetGroupChannelId) ? globalThis.String(object.targetGroupChannelId) : "0",
    };
  },

  toJSON(message: MigrationDetails): unknown {
    const obj: any = {};
    if (message.isMigrate !== false) {
      obj.isMigrate = message.isMigrate;
    }
    if (message.sourceGroupChannelId !== "0") {
      obj.sourceGroupChannelId = message.sourceGroupChannelId;
    }
    if (message.targetGroupChannelId !== "0") {
      obj.targetGroupChannelId = message.targetGroupChannelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MigrationDetails>, I>>(base?: I): MigrationDetails {
    return MigrationDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MigrationDetails>, I>>(object: I): MigrationDetails {
    const message = createBaseMigrationDetails();
    message.isMigrate = object.isMigrate ?? false;
    message.sourceGroupChannelId = object.sourceGroupChannelId ?? "0";
    message.targetGroupChannelId = object.targetGroupChannelId ?? "0";
    return message;
  },
};

function createBaseCancelJoinGroupContent(): CancelJoinGroupContent {
  return { leaverList: [], operator: undefined, type: 0, groupUser: undefined };
}

export const CancelJoinGroupContentDecoder: MessageFns<CancelJoinGroupContent> = {
  encode(message: CancelJoinGroupContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.leaverList) {
      GroupPlayerDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.operator !== undefined) {
      GroupPlayerDecoder.encode(message.operator, writer.uint32(18).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.groupUser !== undefined) {
      GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelJoinGroupContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelJoinGroupContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leaverList.push(GroupPlayerDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operator = GroupPlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.groupUser = GroupChannelAllUserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelJoinGroupContent {
    return {
      leaverList: globalThis.Array.isArray(object?.leaverList)
        ? object.leaverList.map((e: any) => GroupPlayer.fromJSON(e))
        : [],
      operator: isSet(object.operator) ? GroupPlayer.fromJSON(object.operator) : undefined,
      type: isSet(object.type) ? joinTypeFromJSON(object.type) : 0,
      groupUser: isSet(object.groupUser) ? GroupChannelAllUser.fromJSON(object.groupUser) : undefined,
    };
  },

  toJSON(message: CancelJoinGroupContent): unknown {
    const obj: any = {};
    if (message.leaverList?.length) {
      obj.leaverList = message.leaverList.map((e) => GroupPlayer.toJSON(e));
    }
    if (message.operator !== undefined) {
      obj.operator = GroupPlayer.toJSON(message.operator);
    }
    if (message.type !== 0) {
      obj.type = joinTypeToJSON(message.type);
    }
    if (message.groupUser !== undefined) {
      obj.groupUser = GroupChannelAllUser.toJSON(message.groupUser);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelJoinGroupContent>, I>>(base?: I): CancelJoinGroupContent {
    return CancelJoinGroupContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelJoinGroupContent>, I>>(object: I): CancelJoinGroupContent {
    const message = createBaseCancelJoinGroupContent();
    message.leaverList = object.leaverList?.map((e) => GroupPlayer.fromPartial(e)) || [];
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? GroupPlayer.fromPartial(object.operator)
      : undefined;
    message.type = object.type ?? 0;
    message.groupUser = (object.groupUser !== undefined && object.groupUser !== null)
      ? GroupChannelAllUser.fromPartial(object.groupUser)
      : undefined;
    return message;
  },
};

function createBaseP2PGroupChangeContent(): P2PGroupChangeContent {
  return { groupExtInfoList: [], groupUser: undefined, migrationDetails: undefined, contentPos: [] };
}

export const P2PGroupChangeContentDecoder: MessageFns<P2PGroupChangeContent> = {
  encode(message: P2PGroupChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groupExtInfoList) {
      RTCExtraInfoDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.groupUser !== undefined) {
      GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(18).fork()).join();
    }
    if (message.migrationDetails !== undefined) {
      MigrationDetailsDecoder.encode(message.migrationDetails, writer.uint32(26).fork()).join();
    }
    for (const v of message.contentPos) {
      ContentPositionDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): P2PGroupChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseP2PGroupChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupExtInfoList.push(RTCExtraInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.groupUser = GroupChannelAllUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.migrationDetails = MigrationDetailsDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contentPos.push(ContentPositionDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): P2PGroupChangeContent {
    return {
      groupExtInfoList: globalThis.Array.isArray(object?.groupExtInfoList)
        ? object.groupExtInfoList.map((e: any) => RTCExtraInfo.fromJSON(e))
        : [],
      groupUser: isSet(object.groupUser) ? GroupChannelAllUser.fromJSON(object.groupUser) : undefined,
      migrationDetails: isSet(object.migrationDetails) ? MigrationDetails.fromJSON(object.migrationDetails) : undefined,
      contentPos: globalThis.Array.isArray(object?.contentPos)
        ? object.contentPos.map((e: any) => ContentPosition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: P2PGroupChangeContent): unknown {
    const obj: any = {};
    if (message.groupExtInfoList?.length) {
      obj.groupExtInfoList = message.groupExtInfoList.map((e) => RTCExtraInfo.toJSON(e));
    }
    if (message.groupUser !== undefined) {
      obj.groupUser = GroupChannelAllUser.toJSON(message.groupUser);
    }
    if (message.migrationDetails !== undefined) {
      obj.migrationDetails = MigrationDetails.toJSON(message.migrationDetails);
    }
    if (message.contentPos?.length) {
      obj.contentPos = message.contentPos.map((e) => ContentPosition.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<P2PGroupChangeContent>, I>>(base?: I): P2PGroupChangeContent {
    return P2PGroupChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<P2PGroupChangeContent>, I>>(object: I): P2PGroupChangeContent {
    const message = createBaseP2PGroupChangeContent();
    message.groupExtInfoList = object.groupExtInfoList?.map((e) => RTCExtraInfo.fromPartial(e)) || [];
    message.groupUser = (object.groupUser !== undefined && object.groupUser !== null)
      ? GroupChannelAllUser.fromPartial(object.groupUser)
      : undefined;
    message.migrationDetails = (object.migrationDetails !== undefined && object.migrationDetails !== null)
      ? MigrationDetails.fromPartial(object.migrationDetails)
      : undefined;
    message.contentPos = object.contentPos?.map((e) => ContentPosition.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGroupChangeContent(): GroupChangeContent {
  return { groupUser: undefined, linkedUserUiPositions: [] };
}

export const GroupChangeContentDecoder: MessageFns<GroupChangeContent> = {
  encode(message: GroupChangeContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupUser !== undefined) {
      GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(10).fork()).join();
    }
    for (const v of message.linkedUserUiPositions) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupChangeContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupChangeContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupUser = GroupChannelAllUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.linkedUserUiPositions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupChangeContent {
    return {
      groupUser: isSet(object.groupUser) ? GroupChannelAllUser.fromJSON(object.groupUser) : undefined,
      linkedUserUiPositions: globalThis.Array.isArray(object?.linkedUserUiPositions)
        ? object.linkedUserUiPositions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GroupChangeContent): unknown {
    const obj: any = {};
    if (message.groupUser !== undefined) {
      obj.groupUser = GroupChannelAllUser.toJSON(message.groupUser);
    }
    if (message.linkedUserUiPositions?.length) {
      obj.linkedUserUiPositions = message.linkedUserUiPositions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupChangeContent>, I>>(base?: I): GroupChangeContent {
    return GroupChangeContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupChangeContent>, I>>(object: I): GroupChangeContent {
    const message = createBaseGroupChangeContent();
    message.groupUser = (object.groupUser !== undefined && object.groupUser !== null)
      ? GroupChannelAllUser.fromPartial(object.groupUser)
      : undefined;
    message.linkedUserUiPositions = object.linkedUserUiPositions?.map((e) => e) || [];
    return message;
  },
};

function createBaseBusinessContent(): BusinessContent {
  return { overLength: "0", multiLiveContent: undefined, cohostContent: undefined };
}

export const BusinessContentDecoder: MessageFns<BusinessContent> = {
  encode(message: BusinessContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.overLength !== "0") {
      writer.uint32(8).int64(message.overLength);
    }
    if (message.multiLiveContent !== undefined) {
      MultiLiveContentDecoder.encode(message.multiLiveContent, writer.uint32(802).fork()).join();
    }
    if (message.cohostContent !== undefined) {
      BusinessContent_CohostContentDecoder.encode(message.cohostContent, writer.uint32(1602).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.overLength = reader.int64().toString();
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.multiLiveContent = MultiLiveContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 200: {
          if (tag !== 1602) {
            break;
          }

          message.cohostContent = BusinessContent_CohostContentDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent {
    return {
      overLength: isSet(object.overLength) ? globalThis.String(object.overLength) : "0",
      multiLiveContent: isSet(object.multiLiveContent) ? MultiLiveContent.fromJSON(object.multiLiveContent) : undefined,
      cohostContent: isSet(object.cohostContent)
        ? BusinessContent_CohostContent.fromJSON(object.cohostContent)
        : undefined,
    };
  },

  toJSON(message: BusinessContent): unknown {
    const obj: any = {};
    if (message.overLength !== "0") {
      obj.overLength = message.overLength;
    }
    if (message.multiLiveContent !== undefined) {
      obj.multiLiveContent = MultiLiveContent.toJSON(message.multiLiveContent);
    }
    if (message.cohostContent !== undefined) {
      obj.cohostContent = BusinessContent_CohostContent.toJSON(message.cohostContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent>, I>>(base?: I): BusinessContent {
    return BusinessContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent>, I>>(object: I): BusinessContent {
    const message = createBaseBusinessContent();
    message.overLength = object.overLength ?? "0";
    message.multiLiveContent = (object.multiLiveContent !== undefined && object.multiLiveContent !== null)
      ? MultiLiveContent.fromPartial(object.multiLiveContent)
      : undefined;
    message.cohostContent = (object.cohostContent !== undefined && object.cohostContent !== null)
      ? BusinessContent_CohostContent.fromPartial(object.cohostContent)
      : undefined;
    return message;
  },
};

function createBaseBusinessContent_CohostContent(): BusinessContent_CohostContent {
  return { joinGroupBizContent: undefined, permitJoinGroupBizContent: undefined, listChangeBizContent: undefined };
}

export const BusinessContent_CohostContentDecoder: MessageFns<BusinessContent_CohostContent> = {
  encode(message: BusinessContent_CohostContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.joinGroupBizContent !== undefined) {
      BusinessContent_JoinGroupBizContentDecoder.encode(message.joinGroupBizContent, writer.uint32(10).fork()).join();
    }
    if (message.permitJoinGroupBizContent !== undefined) {
      BusinessContent_PermitJoinGroupBizContentDecoder.encode(message.permitJoinGroupBizContent, writer.uint32(18).fork())
        .join();
    }
    if (message.listChangeBizContent !== undefined) {
      BusinessContent_ListChangeBizContentDecoder.encode(message.listChangeBizContent, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_CohostContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_CohostContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.joinGroupBizContent = BusinessContent_JoinGroupBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.permitJoinGroupBizContent = BusinessContent_PermitJoinGroupBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.listChangeBizContent = BusinessContent_ListChangeBizContentDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_CohostContent {
    return {
      joinGroupBizContent: isSet(object.joinGroupBizContent)
        ? BusinessContent_JoinGroupBizContent.fromJSON(object.joinGroupBizContent)
        : undefined,
      permitJoinGroupBizContent: isSet(object.permitJoinGroupBizContent)
        ? BusinessContent_PermitJoinGroupBizContent.fromJSON(object.permitJoinGroupBizContent)
        : undefined,
      listChangeBizContent: isSet(object.listChangeBizContent)
        ? BusinessContent_ListChangeBizContent.fromJSON(object.listChangeBizContent)
        : undefined,
    };
  },

  toJSON(message: BusinessContent_CohostContent): unknown {
    const obj: any = {};
    if (message.joinGroupBizContent !== undefined) {
      obj.joinGroupBizContent = BusinessContent_JoinGroupBizContent.toJSON(message.joinGroupBizContent);
    }
    if (message.permitJoinGroupBizContent !== undefined) {
      obj.permitJoinGroupBizContent = BusinessContent_PermitJoinGroupBizContent.toJSON(
        message.permitJoinGroupBizContent,
      );
    }
    if (message.listChangeBizContent !== undefined) {
      obj.listChangeBizContent = BusinessContent_ListChangeBizContent.toJSON(message.listChangeBizContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_CohostContent>, I>>(base?: I): BusinessContent_CohostContent {
    return BusinessContent_CohostContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_CohostContent>, I>>(
    object: I,
  ): BusinessContent_CohostContent {
    const message = createBaseBusinessContent_CohostContent();
    message.joinGroupBizContent = (object.joinGroupBizContent !== undefined && object.joinGroupBizContent !== null)
      ? BusinessContent_JoinGroupBizContent.fromPartial(object.joinGroupBizContent)
      : undefined;
    message.permitJoinGroupBizContent =
      (object.permitJoinGroupBizContent !== undefined && object.permitJoinGroupBizContent !== null)
        ? BusinessContent_PermitJoinGroupBizContent.fromPartial(object.permitJoinGroupBizContent)
        : undefined;
    message.listChangeBizContent = (object.listChangeBizContent !== undefined && object.listChangeBizContent !== null)
      ? BusinessContent_ListChangeBizContent.fromPartial(object.listChangeBizContent)
      : undefined;
    return message;
  },
};

function createBaseBusinessContent_PermitJoinGroupBizContent(): BusinessContent_PermitJoinGroupBizContent {
  return { replyStatus: 0, sourceType: 0 };
}

export const BusinessContent_PermitJoinGroupBizContentDecoder: MessageFns<BusinessContent_PermitJoinGroupBizContent> = {
  encode(message: BusinessContent_PermitJoinGroupBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.replyStatus !== 0) {
      writer.uint32(8).int32(message.replyStatus);
    }
    if (message.sourceType !== 0) {
      writer.uint32(16).int32(message.sourceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_PermitJoinGroupBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_PermitJoinGroupBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.replyStatus = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sourceType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_PermitJoinGroupBizContent {
    return {
      replyStatus: isSet(object.replyStatus) ? replyStatusFromJSON(object.replyStatus) : 0,
      sourceType: isSet(object.sourceType) ? sourceTypeFromJSON(object.sourceType) : 0,
    };
  },

  toJSON(message: BusinessContent_PermitJoinGroupBizContent): unknown {
    const obj: any = {};
    if (message.replyStatus !== 0) {
      obj.replyStatus = replyStatusToJSON(message.replyStatus);
    }
    if (message.sourceType !== 0) {
      obj.sourceType = sourceTypeToJSON(message.sourceType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_PermitJoinGroupBizContent>, I>>(
    base?: I,
  ): BusinessContent_PermitJoinGroupBizContent {
    return BusinessContent_PermitJoinGroupBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_PermitJoinGroupBizContent>, I>>(
    object: I,
  ): BusinessContent_PermitJoinGroupBizContent {
    const message = createBaseBusinessContent_PermitJoinGroupBizContent();
    message.replyStatus = object.replyStatus ?? 0;
    message.sourceType = object.sourceType ?? 0;
    return message;
  },
};

function createBaseBusinessContent_ListChangeBizContent(): BusinessContent_ListChangeBizContent {
  return { userInfos: {}, waitingUsers: [] };
}

export const BusinessContent_ListChangeBizContentDecoder: MessageFns<BusinessContent_ListChangeBizContent> = {
  encode(message: BusinessContent_ListChangeBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.userInfos).forEach(([key, value]) => {
      BusinessContent_ListChangeBizContent_UserInfosEntryDecoder.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    for (const v of message.waitingUsers) {
      BusinessContent_ListChangeBizContent_VirtualWaitingUserDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_ListChangeBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_ListChangeBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = BusinessContent_ListChangeBizContent_UserInfosEntryDecoder.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.userInfos[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.waitingUsers.push(
            BusinessContent_ListChangeBizContent_VirtualWaitingUserDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_ListChangeBizContent {
    return {
      userInfos: isObject(object.userInfos)
        ? Object.entries(object.userInfos).reduce<{ [key: string]: BusinessContent_CohostUserInfo }>(
          (acc, [key, value]) => {
            acc[key] = BusinessContent_CohostUserInfo.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      waitingUsers: globalThis.Array.isArray(object?.waitingUsers)
        ? object.waitingUsers.map((e: any) => BusinessContent_ListChangeBizContent_VirtualWaitingUser.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BusinessContent_ListChangeBizContent): unknown {
    const obj: any = {};
    if (message.userInfos) {
      const entries = Object.entries(message.userInfos);
      if (entries.length > 0) {
        obj.userInfos = {};
        entries.forEach(([k, v]) => {
          obj.userInfos[k] = BusinessContent_CohostUserInfo.toJSON(v);
        });
      }
    }
    if (message.waitingUsers?.length) {
      obj.waitingUsers = message.waitingUsers.map((e) =>
        BusinessContent_ListChangeBizContent_VirtualWaitingUser.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_ListChangeBizContent>, I>>(
    base?: I,
  ): BusinessContent_ListChangeBizContent {
    return BusinessContent_ListChangeBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_ListChangeBizContent>, I>>(
    object: I,
  ): BusinessContent_ListChangeBizContent {
    const message = createBaseBusinessContent_ListChangeBizContent();
    message.userInfos = Object.entries(object.userInfos ?? {}).reduce<
      { [key: string]: BusinessContent_CohostUserInfo }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = BusinessContent_CohostUserInfo.fromPartial(value);
      }
      return acc;
    }, {});
    message.waitingUsers =
      object.waitingUsers?.map((e) => BusinessContent_ListChangeBizContent_VirtualWaitingUser.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBusinessContent_ListChangeBizContent_UserInfosEntry(): BusinessContent_ListChangeBizContent_UserInfosEntry {
  return { key: "0", value: undefined };
}

export const BusinessContent_ListChangeBizContent_UserInfosEntryDecoder: MessageFns<BusinessContent_ListChangeBizContent_UserInfosEntry> = {
  encode(
    message: BusinessContent_ListChangeBizContent_UserInfosEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      BusinessContent_CohostUserInfoDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_ListChangeBizContent_UserInfosEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_ListChangeBizContent_UserInfosEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = BusinessContent_CohostUserInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_ListChangeBizContent_UserInfosEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? BusinessContent_CohostUserInfo.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: BusinessContent_ListChangeBizContent_UserInfosEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = BusinessContent_CohostUserInfo.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_ListChangeBizContent_UserInfosEntry>, I>>(
    base?: I,
  ): BusinessContent_ListChangeBizContent_UserInfosEntry {
    return BusinessContent_ListChangeBizContent_UserInfosEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_ListChangeBizContent_UserInfosEntry>, I>>(
    object: I,
  ): BusinessContent_ListChangeBizContent_UserInfosEntry {
    const message = createBaseBusinessContent_ListChangeBizContent_UserInfosEntry();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? BusinessContent_CohostUserInfo.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseBusinessContent_ListChangeBizContent_VirtualWaitingUser(): BusinessContent_ListChangeBizContent_VirtualWaitingUser {
  return { userId: "0", timestamp: "0", avatars: [] };
}

export const BusinessContent_ListChangeBizContent_VirtualWaitingUserDecoder: MessageFns<BusinessContent_ListChangeBizContent_VirtualWaitingUser> = {
  encode(
    message: BusinessContent_ListChangeBizContent_VirtualWaitingUser,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).int64(message.timestamp);
    }
    for (const v of message.avatars) {
      ImageDecoder.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_ListChangeBizContent_VirtualWaitingUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_ListChangeBizContent_VirtualWaitingUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatars.push(ImageDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_ListChangeBizContent_VirtualWaitingUser {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
      avatars: globalThis.Array.isArray(object?.avatars) ? object.avatars.map((e: any) => Image.fromJSON(e)) : [],
    };
  },

  toJSON(message: BusinessContent_ListChangeBizContent_VirtualWaitingUser): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    if (message.avatars?.length) {
      obj.avatars = message.avatars.map((e) => Image.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_ListChangeBizContent_VirtualWaitingUser>, I>>(
    base?: I,
  ): BusinessContent_ListChangeBizContent_VirtualWaitingUser {
    return BusinessContent_ListChangeBizContent_VirtualWaitingUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_ListChangeBizContent_VirtualWaitingUser>, I>>(
    object: I,
  ): BusinessContent_ListChangeBizContent_VirtualWaitingUser {
    const message = createBaseBusinessContent_ListChangeBizContent_VirtualWaitingUser();
    message.userId = object.userId ?? "0";
    message.timestamp = object.timestamp ?? "0";
    message.avatars = object.avatars?.map((e) => Image.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBusinessContent_CohostUserInfo(): BusinessContent_CohostUserInfo {
  return {
    permissionType: "0",
    sourceType: 0,
    isLowVersion: false,
    bestTeammateUid: "0",
    hasTopicPerm: false,
    streamConfig: undefined,
    inDifferentInviteTypeControlGroup: false,
    nickname: "",
    displayId: "",
    avatarThumb: undefined,
    followStatus: "0",
    userIdStr: "",
  };
}

export const BusinessContent_CohostUserInfoDecoder: MessageFns<BusinessContent_CohostUserInfo> = {
  encode(message: BusinessContent_CohostUserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionType !== "0") {
      writer.uint32(8).int64(message.permissionType);
    }
    if (message.sourceType !== 0) {
      writer.uint32(16).int32(message.sourceType);
    }
    if (message.isLowVersion !== false) {
      writer.uint32(24).bool(message.isLowVersion);
    }
    if (message.bestTeammateUid !== "0") {
      writer.uint32(32).int64(message.bestTeammateUid);
    }
    if (message.hasTopicPerm !== false) {
      writer.uint32(40).bool(message.hasTopicPerm);
    }
    if (message.streamConfig !== undefined) {
      BusinessContent_CohostUserInfo_CohostStreamConfigDecoder.encode(message.streamConfig, writer.uint32(50).fork()).join();
    }
    if (message.inDifferentInviteTypeControlGroup !== false) {
      writer.uint32(56).bool(message.inDifferentInviteTypeControlGroup);
    }
    if (message.nickname !== "") {
      writer.uint32(90).string(message.nickname);
    }
    if (message.displayId !== "") {
      writer.uint32(98).string(message.displayId);
    }
    if (message.avatarThumb !== undefined) {
      ImageDecoder.encode(message.avatarThumb, writer.uint32(106).fork()).join();
    }
    if (message.followStatus !== "0") {
      writer.uint32(112).int64(message.followStatus);
    }
    if (message.userIdStr !== "") {
      writer.uint32(122).string(message.userIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_CohostUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_CohostUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionType = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sourceType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isLowVersion = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bestTeammateUid = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hasTopicPerm = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.streamConfig = BusinessContent_CohostUserInfo_CohostStreamConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.inDifferentInviteTypeControlGroup = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.displayId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.avatarThumb = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.followStatus = reader.int64().toString();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.userIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_CohostUserInfo {
    return {
      permissionType: isSet(object.permissionType) ? globalThis.String(object.permissionType) : "0",
      sourceType: isSet(object.sourceType) ? sourceTypeFromJSON(object.sourceType) : 0,
      isLowVersion: isSet(object.isLowVersion) ? globalThis.Boolean(object.isLowVersion) : false,
      bestTeammateUid: isSet(object.bestTeammateUid) ? globalThis.String(object.bestTeammateUid) : "0",
      hasTopicPerm: isSet(object.hasTopicPerm) ? globalThis.Boolean(object.hasTopicPerm) : false,
      streamConfig: isSet(object.streamConfig)
        ? BusinessContent_CohostUserInfo_CohostStreamConfig.fromJSON(object.streamConfig)
        : undefined,
      inDifferentInviteTypeControlGroup: isSet(object.inDifferentInviteTypeControlGroup)
        ? globalThis.Boolean(object.inDifferentInviteTypeControlGroup)
        : false,
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      displayId: isSet(object.displayId) ? globalThis.String(object.displayId) : "",
      avatarThumb: isSet(object.avatarThumb) ? Image.fromJSON(object.avatarThumb) : undefined,
      followStatus: isSet(object.followStatus) ? globalThis.String(object.followStatus) : "0",
      userIdStr: isSet(object.userIdStr) ? globalThis.String(object.userIdStr) : "",
    };
  },

  toJSON(message: BusinessContent_CohostUserInfo): unknown {
    const obj: any = {};
    if (message.permissionType !== "0") {
      obj.permissionType = message.permissionType;
    }
    if (message.sourceType !== 0) {
      obj.sourceType = sourceTypeToJSON(message.sourceType);
    }
    if (message.isLowVersion !== false) {
      obj.isLowVersion = message.isLowVersion;
    }
    if (message.bestTeammateUid !== "0") {
      obj.bestTeammateUid = message.bestTeammateUid;
    }
    if (message.hasTopicPerm !== false) {
      obj.hasTopicPerm = message.hasTopicPerm;
    }
    if (message.streamConfig !== undefined) {
      obj.streamConfig = BusinessContent_CohostUserInfo_CohostStreamConfig.toJSON(message.streamConfig);
    }
    if (message.inDifferentInviteTypeControlGroup !== false) {
      obj.inDifferentInviteTypeControlGroup = message.inDifferentInviteTypeControlGroup;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.displayId !== "") {
      obj.displayId = message.displayId;
    }
    if (message.avatarThumb !== undefined) {
      obj.avatarThumb = Image.toJSON(message.avatarThumb);
    }
    if (message.followStatus !== "0") {
      obj.followStatus = message.followStatus;
    }
    if (message.userIdStr !== "") {
      obj.userIdStr = message.userIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_CohostUserInfo>, I>>(base?: I): BusinessContent_CohostUserInfo {
    return BusinessContent_CohostUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_CohostUserInfo>, I>>(
    object: I,
  ): BusinessContent_CohostUserInfo {
    const message = createBaseBusinessContent_CohostUserInfo();
    message.permissionType = object.permissionType ?? "0";
    message.sourceType = object.sourceType ?? 0;
    message.isLowVersion = object.isLowVersion ?? false;
    message.bestTeammateUid = object.bestTeammateUid ?? "0";
    message.hasTopicPerm = object.hasTopicPerm ?? false;
    message.streamConfig = (object.streamConfig !== undefined && object.streamConfig !== null)
      ? BusinessContent_CohostUserInfo_CohostStreamConfig.fromPartial(object.streamConfig)
      : undefined;
    message.inDifferentInviteTypeControlGroup = object.inDifferentInviteTypeControlGroup ?? false;
    message.nickname = object.nickname ?? "";
    message.displayId = object.displayId ?? "";
    message.avatarThumb = (object.avatarThumb !== undefined && object.avatarThumb !== null)
      ? Image.fromPartial(object.avatarThumb)
      : undefined;
    message.followStatus = object.followStatus ?? "0";
    message.userIdStr = object.userIdStr ?? "";
    return message;
  },
};

function createBaseBusinessContent_CohostUserInfo_CohostStreamConfig(): BusinessContent_CohostUserInfo_CohostStreamConfig {
  return { screenShareStreamId: "" };
}

export const BusinessContent_CohostUserInfo_CohostStreamConfigDecoder: MessageFns<BusinessContent_CohostUserInfo_CohostStreamConfig> = {
  encode(
    message: BusinessContent_CohostUserInfo_CohostStreamConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.screenShareStreamId !== "") {
      writer.uint32(10).string(message.screenShareStreamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_CohostUserInfo_CohostStreamConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_CohostUserInfo_CohostStreamConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.screenShareStreamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_CohostUserInfo_CohostStreamConfig {
    return {
      screenShareStreamId: isSet(object.screenShareStreamId) ? globalThis.String(object.screenShareStreamId) : "",
    };
  },

  toJSON(message: BusinessContent_CohostUserInfo_CohostStreamConfig): unknown {
    const obj: any = {};
    if (message.screenShareStreamId !== "") {
      obj.screenShareStreamId = message.screenShareStreamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_CohostUserInfo_CohostStreamConfig>, I>>(
    base?: I,
  ): BusinessContent_CohostUserInfo_CohostStreamConfig {
    return BusinessContent_CohostUserInfo_CohostStreamConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_CohostUserInfo_CohostStreamConfig>, I>>(
    object: I,
  ): BusinessContent_CohostUserInfo_CohostStreamConfig {
    const message = createBaseBusinessContent_CohostUserInfo_CohostStreamConfig();
    message.screenShareStreamId = object.screenShareStreamId ?? "";
    return message;
  },
};

function createBaseBusinessContent_JoinGroupBizContent(): BusinessContent_JoinGroupBizContent {
  return {
    fromRoomAgeRestricted: 0,
    fromTag: undefined,
    dialog: undefined,
    punishInfo: undefined,
    topicInfo: undefined,
    algoRequestId: "",
    cohostLayoutMode: 0,
    tag: undefined,
    gameTag: undefined,
    newUserEducation: "",
    joinGroupMsgExtra: undefined,
  };
}

export const BusinessContent_JoinGroupBizContentDecoder: MessageFns<BusinessContent_JoinGroupBizContent> = {
  encode(message: BusinessContent_JoinGroupBizContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromRoomAgeRestricted !== 0) {
      writer.uint32(8).int32(message.fromRoomAgeRestricted);
    }
    if (message.fromTag !== undefined) {
      BusinessContent_TagDecoder.encode(message.fromTag, writer.uint32(18).fork()).join();
    }
    if (message.dialog !== undefined) {
      BusinessContent_PerceptionDialogInfoDecoder.encode(message.dialog, writer.uint32(26).fork()).join();
    }
    if (message.punishInfo !== undefined) {
      PunishEventInfoDecoder.encode(message.punishInfo, writer.uint32(34).fork()).join();
    }
    if (message.topicInfo !== undefined) {
      CohostTopicDecoder.encode(message.topicInfo, writer.uint32(42).fork()).join();
    }
    if (message.algoRequestId !== "") {
      writer.uint32(50).string(message.algoRequestId);
    }
    if (message.cohostLayoutMode !== 0) {
      writer.uint32(56).int32(message.cohostLayoutMode);
    }
    if (message.tag !== undefined) {
      BusinessContent_JoinGroupBizContent_TagV2Decoder.encode(message.tag, writer.uint32(66).fork()).join();
    }
    if (message.gameTag !== undefined) {
      BusinessContent_JoinGroupBizContent_RivalsGameTagDecoder.encode(message.gameTag, writer.uint32(74).fork()).join();
    }
    if (message.newUserEducation !== "") {
      writer.uint32(90).string(message.newUserEducation);
    }
    if (message.joinGroupMsgExtra !== undefined) {
      BusinessContent_JoinGroupMessageExtraDecoder.encode(message.joinGroupMsgExtra, writer.uint32(810).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_JoinGroupBizContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupBizContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromRoomAgeRestricted = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fromTag = BusinessContent_TagDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dialog = BusinessContent_PerceptionDialogInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.punishInfo = PunishEventInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.topicInfo = CohostTopicDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.algoRequestId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.cohostLayoutMode = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tag = BusinessContent_JoinGroupBizContent_TagV2Decoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.gameTag = BusinessContent_JoinGroupBizContent_RivalsGameTagDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.newUserEducation = reader.string();
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.joinGroupMsgExtra = BusinessContent_JoinGroupMessageExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupBizContent {
    return {
      fromRoomAgeRestricted: isSet(object.fromRoomAgeRestricted) ? globalThis.Number(object.fromRoomAgeRestricted) : 0,
      fromTag: isSet(object.fromTag) ? BusinessContent_Tag.fromJSON(object.fromTag) : undefined,
      dialog: isSet(object.dialog) ? BusinessContent_PerceptionDialogInfo.fromJSON(object.dialog) : undefined,
      punishInfo: isSet(object.punishInfo) ? PunishEventInfo.fromJSON(object.punishInfo) : undefined,
      topicInfo: isSet(object.topicInfo) ? CohostTopic.fromJSON(object.topicInfo) : undefined,
      algoRequestId: isSet(object.algoRequestId) ? globalThis.String(object.algoRequestId) : "",
      cohostLayoutMode: isSet(object.cohostLayoutMode) ? cohostLayoutModeFromJSON(object.cohostLayoutMode) : 0,
      tag: isSet(object.tag) ? BusinessContent_JoinGroupBizContent_TagV2.fromJSON(object.tag) : undefined,
      gameTag: isSet(object.gameTag)
        ? BusinessContent_JoinGroupBizContent_RivalsGameTag.fromJSON(object.gameTag)
        : undefined,
      newUserEducation: isSet(object.newUserEducation) ? globalThis.String(object.newUserEducation) : "",
      joinGroupMsgExtra: isSet(object.joinGroupMsgExtra)
        ? BusinessContent_JoinGroupMessageExtra.fromJSON(object.joinGroupMsgExtra)
        : undefined,
    };
  },

  toJSON(message: BusinessContent_JoinGroupBizContent): unknown {
    const obj: any = {};
    if (message.fromRoomAgeRestricted !== 0) {
      obj.fromRoomAgeRestricted = Math.round(message.fromRoomAgeRestricted);
    }
    if (message.fromTag !== undefined) {
      obj.fromTag = BusinessContent_Tag.toJSON(message.fromTag);
    }
    if (message.dialog !== undefined) {
      obj.dialog = BusinessContent_PerceptionDialogInfo.toJSON(message.dialog);
    }
    if (message.punishInfo !== undefined) {
      obj.punishInfo = PunishEventInfo.toJSON(message.punishInfo);
    }
    if (message.topicInfo !== undefined) {
      obj.topicInfo = CohostTopic.toJSON(message.topicInfo);
    }
    if (message.algoRequestId !== "") {
      obj.algoRequestId = message.algoRequestId;
    }
    if (message.cohostLayoutMode !== 0) {
      obj.cohostLayoutMode = cohostLayoutModeToJSON(message.cohostLayoutMode);
    }
    if (message.tag !== undefined) {
      obj.tag = BusinessContent_JoinGroupBizContent_TagV2.toJSON(message.tag);
    }
    if (message.gameTag !== undefined) {
      obj.gameTag = BusinessContent_JoinGroupBizContent_RivalsGameTag.toJSON(message.gameTag);
    }
    if (message.newUserEducation !== "") {
      obj.newUserEducation = message.newUserEducation;
    }
    if (message.joinGroupMsgExtra !== undefined) {
      obj.joinGroupMsgExtra = BusinessContent_JoinGroupMessageExtra.toJSON(message.joinGroupMsgExtra);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupBizContent {
    return BusinessContent_JoinGroupBizContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent>, I>>(
    object: I,
  ): BusinessContent_JoinGroupBizContent {
    const message = createBaseBusinessContent_JoinGroupBizContent();
    message.fromRoomAgeRestricted = object.fromRoomAgeRestricted ?? 0;
    message.fromTag = (object.fromTag !== undefined && object.fromTag !== null)
      ? BusinessContent_Tag.fromPartial(object.fromTag)
      : undefined;
    message.dialog = (object.dialog !== undefined && object.dialog !== null)
      ? BusinessContent_PerceptionDialogInfo.fromPartial(object.dialog)
      : undefined;
    message.punishInfo = (object.punishInfo !== undefined && object.punishInfo !== null)
      ? PunishEventInfo.fromPartial(object.punishInfo)
      : undefined;
    message.topicInfo = (object.topicInfo !== undefined && object.topicInfo !== null)
      ? CohostTopic.fromPartial(object.topicInfo)
      : undefined;
    message.algoRequestId = object.algoRequestId ?? "";
    message.cohostLayoutMode = object.cohostLayoutMode ?? 0;
    message.tag = (object.tag !== undefined && object.tag !== null)
      ? BusinessContent_JoinGroupBizContent_TagV2.fromPartial(object.tag)
      : undefined;
    message.gameTag = (object.gameTag !== undefined && object.gameTag !== null)
      ? BusinessContent_JoinGroupBizContent_RivalsGameTag.fromPartial(object.gameTag)
      : undefined;
    message.newUserEducation = object.newUserEducation ?? "";
    message.joinGroupMsgExtra = (object.joinGroupMsgExtra !== undefined && object.joinGroupMsgExtra !== null)
      ? BusinessContent_JoinGroupMessageExtra.fromPartial(object.joinGroupMsgExtra)
      : undefined;
    return message;
  },
};

function createBaseBusinessContent_JoinGroupBizContent_RivalsGameTag(): BusinessContent_JoinGroupBizContent_RivalsGameTag {
  return { tagId: "0", tagDisplayText: "" };
}

export const BusinessContent_JoinGroupBizContent_RivalsGameTagDecoder: MessageFns<BusinessContent_JoinGroupBizContent_RivalsGameTag> = {
  encode(
    message: BusinessContent_JoinGroupBizContent_RivalsGameTag,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.tagId !== "0") {
      writer.uint32(8).int64(message.tagId);
    }
    if (message.tagDisplayText !== "") {
      writer.uint32(18).string(message.tagDisplayText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_JoinGroupBizContent_RivalsGameTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupBizContent_RivalsGameTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tagId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tagDisplayText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupBizContent_RivalsGameTag {
    return {
      tagId: isSet(object.tagId) ? globalThis.String(object.tagId) : "0",
      tagDisplayText: isSet(object.tagDisplayText) ? globalThis.String(object.tagDisplayText) : "",
    };
  },

  toJSON(message: BusinessContent_JoinGroupBizContent_RivalsGameTag): unknown {
    const obj: any = {};
    if (message.tagId !== "0") {
      obj.tagId = message.tagId;
    }
    if (message.tagDisplayText !== "") {
      obj.tagDisplayText = message.tagDisplayText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_RivalsGameTag>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupBizContent_RivalsGameTag {
    return BusinessContent_JoinGroupBizContent_RivalsGameTag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_RivalsGameTag>, I>>(
    object: I,
  ): BusinessContent_JoinGroupBizContent_RivalsGameTag {
    const message = createBaseBusinessContent_JoinGroupBizContent_RivalsGameTag();
    message.tagId = object.tagId ?? "0";
    message.tagDisplayText = object.tagDisplayText ?? "";
    return message;
  },
};

function createBaseBusinessContent_JoinGroupBizContent_TagV2(): BusinessContent_JoinGroupBizContent_TagV2 {
  return {
    tagClassification: 0,
    tagType: 0,
    tagValue: "",
    starlingKey: "",
    secondDegreeRelationContent: undefined,
    cohostHistoryDay: "0",
    similarInterestContent: undefined,
  };
}

export const BusinessContent_JoinGroupBizContent_TagV2Decoder: MessageFns<BusinessContent_JoinGroupBizContent_TagV2> = {
  encode(message: BusinessContent_JoinGroupBizContent_TagV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagClassification !== 0) {
      writer.uint32(8).int32(message.tagClassification);
    }
    if (message.tagType !== 0) {
      writer.uint32(16).int32(message.tagType);
    }
    if (message.tagValue !== "") {
      writer.uint32(26).string(message.tagValue);
    }
    if (message.starlingKey !== "") {
      writer.uint32(34).string(message.starlingKey);
    }
    if (message.secondDegreeRelationContent !== undefined) {
      BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContentDecoder.encode(
        message.secondDegreeRelationContent,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.cohostHistoryDay !== "0") {
      writer.uint32(88).int64(message.cohostHistoryDay);
    }
    if (message.similarInterestContent !== undefined) {
      BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContentDecoder.encode(
        message.similarInterestContent,
        writer.uint32(98).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_JoinGroupBizContent_TagV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tagClassification = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tagType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tagValue = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.starlingKey = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.secondDegreeRelationContent = BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.cohostHistoryDay = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.similarInterestContent = BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContentDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupBizContent_TagV2 {
    return {
      tagClassification: isSet(object.tagClassification) ? tagClassificationFromJSON(object.tagClassification) : 0,
      tagType: isSet(object.tagType) ? globalThis.Number(object.tagType) : 0,
      tagValue: isSet(object.tagValue) ? globalThis.String(object.tagValue) : "",
      starlingKey: isSet(object.starlingKey) ? globalThis.String(object.starlingKey) : "",
      secondDegreeRelationContent: isSet(object.secondDegreeRelationContent)
        ? BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent.fromJSON(
          object.secondDegreeRelationContent,
        )
        : undefined,
      cohostHistoryDay: isSet(object.cohostHistoryDay) ? globalThis.String(object.cohostHistoryDay) : "0",
      similarInterestContent: isSet(object.similarInterestContent)
        ? BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent.fromJSON(object.similarInterestContent)
        : undefined,
    };
  },

  toJSON(message: BusinessContent_JoinGroupBizContent_TagV2): unknown {
    const obj: any = {};
    if (message.tagClassification !== 0) {
      obj.tagClassification = tagClassificationToJSON(message.tagClassification);
    }
    if (message.tagType !== 0) {
      obj.tagType = Math.round(message.tagType);
    }
    if (message.tagValue !== "") {
      obj.tagValue = message.tagValue;
    }
    if (message.starlingKey !== "") {
      obj.starlingKey = message.starlingKey;
    }
    if (message.secondDegreeRelationContent !== undefined) {
      obj.secondDegreeRelationContent = BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent.toJSON(
        message.secondDegreeRelationContent,
      );
    }
    if (message.cohostHistoryDay !== "0") {
      obj.cohostHistoryDay = message.cohostHistoryDay;
    }
    if (message.similarInterestContent !== undefined) {
      obj.similarInterestContent = BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent.toJSON(
        message.similarInterestContent,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupBizContent_TagV2 {
    return BusinessContent_JoinGroupBizContent_TagV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2>, I>>(
    object: I,
  ): BusinessContent_JoinGroupBizContent_TagV2 {
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2();
    message.tagClassification = object.tagClassification ?? 0;
    message.tagType = object.tagType ?? 0;
    message.tagValue = object.tagValue ?? "";
    message.starlingKey = object.starlingKey ?? "";
    message.secondDegreeRelationContent =
      (object.secondDegreeRelationContent !== undefined && object.secondDegreeRelationContent !== null)
        ? BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent.fromPartial(
          object.secondDegreeRelationContent,
        )
        : undefined;
    message.cohostHistoryDay = object.cohostHistoryDay ?? "0";
    message.similarInterestContent =
      (object.similarInterestContent !== undefined && object.similarInterestContent !== null)
        ? BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent.fromPartial(object.similarInterestContent)
        : undefined;
    return message;
  },
};

function createBaseBusinessContent_JoinGroupBizContent_TagV2_UserInfo(): BusinessContent_JoinGroupBizContent_TagV2_UserInfo {
  return { userId: "0", nickName: "", avatarThumb: undefined };
}

export const BusinessContent_JoinGroupBizContent_TagV2_UserInfoDecoder: MessageFns<BusinessContent_JoinGroupBizContent_TagV2_UserInfo> = {
  encode(
    message: BusinessContent_JoinGroupBizContent_TagV2_UserInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.avatarThumb !== undefined) {
      ImageDecoder.encode(message.avatarThumb, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_JoinGroupBizContent_TagV2_UserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_UserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatarThumb = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupBizContent_TagV2_UserInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      avatarThumb: isSet(object.avatarThumb) ? Image.fromJSON(object.avatarThumb) : undefined,
    };
  },

  toJSON(message: BusinessContent_JoinGroupBizContent_TagV2_UserInfo): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.avatarThumb !== undefined) {
      obj.avatarThumb = Image.toJSON(message.avatarThumb);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2_UserInfo>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupBizContent_TagV2_UserInfo {
    return BusinessContent_JoinGroupBizContent_TagV2_UserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2_UserInfo>, I>>(
    object: I,
  ): BusinessContent_JoinGroupBizContent_TagV2_UserInfo {
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_UserInfo();
    message.userId = object.userId ?? "0";
    message.nickName = object.nickName ?? "";
    message.avatarThumb = (object.avatarThumb !== undefined && object.avatarThumb !== null)
      ? Image.fromPartial(object.avatarThumb)
      : undefined;
    return message;
  },
};

function createBaseBusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent(): BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent {
  return { relatedUsers: [], totalRelatedUserCnt: "0" };
}

export const BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContentDecoder: MessageFns<BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent> = {
  encode(
    message: BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.relatedUsers) {
      BusinessContent_JoinGroupBizContent_TagV2_UserInfoDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalRelatedUserCnt !== "0") {
      writer.uint32(16).int64(message.totalRelatedUserCnt);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.relatedUsers.push(BusinessContent_JoinGroupBizContent_TagV2_UserInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalRelatedUserCnt = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent {
    return {
      relatedUsers: globalThis.Array.isArray(object?.relatedUsers)
        ? object.relatedUsers.map((e: any) => BusinessContent_JoinGroupBizContent_TagV2_UserInfo.fromJSON(e))
        : [],
      totalRelatedUserCnt: isSet(object.totalRelatedUserCnt) ? globalThis.String(object.totalRelatedUserCnt) : "0",
    };
  },

  toJSON(message: BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent): unknown {
    const obj: any = {};
    if (message.relatedUsers?.length) {
      obj.relatedUsers = message.relatedUsers.map((e) => BusinessContent_JoinGroupBizContent_TagV2_UserInfo.toJSON(e));
    }
    if (message.totalRelatedUserCnt !== "0") {
      obj.totalRelatedUserCnt = message.totalRelatedUserCnt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent {
    return BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent>, I>>(
    object: I,
  ): BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent {
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent();
    message.relatedUsers =
      object.relatedUsers?.map((e) => BusinessContent_JoinGroupBizContent_TagV2_UserInfo.fromPartial(e)) || [];
    message.totalRelatedUserCnt = object.totalRelatedUserCnt ?? "0";
    return message;
  },
};

function createBaseBusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent(): BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent {
  return { contentId: "0", displayText: "" };
}

export const BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContentDecoder: MessageFns<BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent> = {
  encode(
    message: BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.contentId !== "0") {
      writer.uint32(8).int64(message.contentId);
    }
    if (message.displayText !== "") {
      writer.uint32(18).string(message.displayText);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.contentId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent {
    return {
      contentId: isSet(object.contentId) ? globalThis.String(object.contentId) : "0",
      displayText: isSet(object.displayText) ? globalThis.String(object.displayText) : "",
    };
  },

  toJSON(message: BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent): unknown {
    const obj: any = {};
    if (message.contentId !== "0") {
      obj.contentId = message.contentId;
    }
    if (message.displayText !== "") {
      obj.displayText = message.displayText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent {
    return BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent>, I>>(
    object: I,
  ): BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent {
    const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent();
    message.contentId = object.contentId ?? "0";
    message.displayText = object.displayText ?? "";
    return message;
  },
};

function createBaseBusinessContent_Tag(): BusinessContent_Tag {
  return { tagType: 0, tagValue: "", tagText: "" };
}

export const BusinessContent_TagDecoder: MessageFns<BusinessContent_Tag> = {
  encode(message: BusinessContent_Tag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagType !== 0) {
      writer.uint32(8).int32(message.tagType);
    }
    if (message.tagValue !== "") {
      writer.uint32(18).string(message.tagValue);
    }
    if (message.tagText !== "") {
      writer.uint32(26).string(message.tagText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_Tag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_Tag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tagType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tagValue = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tagText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_Tag {
    return {
      tagType: isSet(object.tagType) ? globalThis.Number(object.tagType) : 0,
      tagValue: isSet(object.tagValue) ? globalThis.String(object.tagValue) : "",
      tagText: isSet(object.tagText) ? globalThis.String(object.tagText) : "",
    };
  },

  toJSON(message: BusinessContent_Tag): unknown {
    const obj: any = {};
    if (message.tagType !== 0) {
      obj.tagType = Math.round(message.tagType);
    }
    if (message.tagValue !== "") {
      obj.tagValue = message.tagValue;
    }
    if (message.tagText !== "") {
      obj.tagText = message.tagText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_Tag>, I>>(base?: I): BusinessContent_Tag {
    return BusinessContent_Tag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_Tag>, I>>(object: I): BusinessContent_Tag {
    const message = createBaseBusinessContent_Tag();
    message.tagType = object.tagType ?? 0;
    message.tagValue = object.tagValue ?? "";
    message.tagText = object.tagText ?? "";
    return message;
  },
};

function createBaseBusinessContent_PerceptionDialogInfo(): BusinessContent_PerceptionDialogInfo {
  return {
    iconType: "0",
    title: undefined,
    subTitle: undefined,
    adviceActionText: undefined,
    defaultActionText: undefined,
    violationDetailUrl: "",
    scene: 0,
    targetUserId: "0",
    targetRoomId: "0",
    countDownTime: "0",
    showFeedback: false,
    feedbackOptionsList: [],
    policyTip: "0",
  };
}

export const BusinessContent_PerceptionDialogInfoDecoder: MessageFns<BusinessContent_PerceptionDialogInfo> = {
  encode(message: BusinessContent_PerceptionDialogInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iconType !== "0") {
      writer.uint32(8).int64(message.iconType);
    }
    if (message.title !== undefined) {
      TextDecoder.encode(message.title, writer.uint32(18).fork()).join();
    }
    if (message.subTitle !== undefined) {
      TextDecoder.encode(message.subTitle, writer.uint32(26).fork()).join();
    }
    if (message.adviceActionText !== undefined) {
      TextDecoder.encode(message.adviceActionText, writer.uint32(34).fork()).join();
    }
    if (message.defaultActionText !== undefined) {
      TextDecoder.encode(message.defaultActionText, writer.uint32(42).fork()).join();
    }
    if (message.violationDetailUrl !== "") {
      writer.uint32(50).string(message.violationDetailUrl);
    }
    if (message.scene !== 0) {
      writer.uint32(56).int32(message.scene);
    }
    if (message.targetUserId !== "0") {
      writer.uint32(64).int64(message.targetUserId);
    }
    if (message.targetRoomId !== "0") {
      writer.uint32(72).int64(message.targetRoomId);
    }
    if (message.countDownTime !== "0") {
      writer.uint32(80).int64(message.countDownTime);
    }
    if (message.showFeedback !== false) {
      writer.uint32(88).bool(message.showFeedback);
    }
    for (const v of message.feedbackOptionsList) {
      BusinessContent_PerceptionFeedbackOptionDecoder.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.policyTip !== "0") {
      writer.uint32(104).int64(message.policyTip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_PerceptionDialogInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_PerceptionDialogInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.iconType = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.subTitle = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.adviceActionText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.defaultActionText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.violationDetailUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.scene = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.targetUserId = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.targetRoomId = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.countDownTime = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.showFeedback = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.feedbackOptionsList.push(BusinessContent_PerceptionFeedbackOptionDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.policyTip = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_PerceptionDialogInfo {
    return {
      iconType: isSet(object.iconType) ? globalThis.String(object.iconType) : "0",
      title: isSet(object.title) ? Text.fromJSON(object.title) : undefined,
      subTitle: isSet(object.subTitle) ? Text.fromJSON(object.subTitle) : undefined,
      adviceActionText: isSet(object.adviceActionText) ? Text.fromJSON(object.adviceActionText) : undefined,
      defaultActionText: isSet(object.defaultActionText) ? Text.fromJSON(object.defaultActionText) : undefined,
      violationDetailUrl: isSet(object.violationDetailUrl) ? globalThis.String(object.violationDetailUrl) : "",
      scene: isSet(object.scene) ? globalThis.Number(object.scene) : 0,
      targetUserId: isSet(object.targetUserId) ? globalThis.String(object.targetUserId) : "0",
      targetRoomId: isSet(object.targetRoomId) ? globalThis.String(object.targetRoomId) : "0",
      countDownTime: isSet(object.countDownTime) ? globalThis.String(object.countDownTime) : "0",
      showFeedback: isSet(object.showFeedback) ? globalThis.Boolean(object.showFeedback) : false,
      feedbackOptionsList: globalThis.Array.isArray(object?.feedbackOptionsList)
        ? object.feedbackOptionsList.map((e: any) => BusinessContent_PerceptionFeedbackOption.fromJSON(e))
        : [],
      policyTip: isSet(object.policyTip) ? globalThis.String(object.policyTip) : "0",
    };
  },

  toJSON(message: BusinessContent_PerceptionDialogInfo): unknown {
    const obj: any = {};
    if (message.iconType !== "0") {
      obj.iconType = message.iconType;
    }
    if (message.title !== undefined) {
      obj.title = Text.toJSON(message.title);
    }
    if (message.subTitle !== undefined) {
      obj.subTitle = Text.toJSON(message.subTitle);
    }
    if (message.adviceActionText !== undefined) {
      obj.adviceActionText = Text.toJSON(message.adviceActionText);
    }
    if (message.defaultActionText !== undefined) {
      obj.defaultActionText = Text.toJSON(message.defaultActionText);
    }
    if (message.violationDetailUrl !== "") {
      obj.violationDetailUrl = message.violationDetailUrl;
    }
    if (message.scene !== 0) {
      obj.scene = Math.round(message.scene);
    }
    if (message.targetUserId !== "0") {
      obj.targetUserId = message.targetUserId;
    }
    if (message.targetRoomId !== "0") {
      obj.targetRoomId = message.targetRoomId;
    }
    if (message.countDownTime !== "0") {
      obj.countDownTime = message.countDownTime;
    }
    if (message.showFeedback !== false) {
      obj.showFeedback = message.showFeedback;
    }
    if (message.feedbackOptionsList?.length) {
      obj.feedbackOptionsList = message.feedbackOptionsList.map((e) =>
        BusinessContent_PerceptionFeedbackOption.toJSON(e)
      );
    }
    if (message.policyTip !== "0") {
      obj.policyTip = message.policyTip;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_PerceptionDialogInfo>, I>>(
    base?: I,
  ): BusinessContent_PerceptionDialogInfo {
    return BusinessContent_PerceptionDialogInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_PerceptionDialogInfo>, I>>(
    object: I,
  ): BusinessContent_PerceptionDialogInfo {
    const message = createBaseBusinessContent_PerceptionDialogInfo();
    message.iconType = object.iconType ?? "0";
    message.title = (object.title !== undefined && object.title !== null) ? Text.fromPartial(object.title) : undefined;
    message.subTitle = (object.subTitle !== undefined && object.subTitle !== null)
      ? Text.fromPartial(object.subTitle)
      : undefined;
    message.adviceActionText = (object.adviceActionText !== undefined && object.adviceActionText !== null)
      ? Text.fromPartial(object.adviceActionText)
      : undefined;
    message.defaultActionText = (object.defaultActionText !== undefined && object.defaultActionText !== null)
      ? Text.fromPartial(object.defaultActionText)
      : undefined;
    message.violationDetailUrl = object.violationDetailUrl ?? "";
    message.scene = object.scene ?? 0;
    message.targetUserId = object.targetUserId ?? "0";
    message.targetRoomId = object.targetRoomId ?? "0";
    message.countDownTime = object.countDownTime ?? "0";
    message.showFeedback = object.showFeedback ?? false;
    message.feedbackOptionsList =
      object.feedbackOptionsList?.map((e) => BusinessContent_PerceptionFeedbackOption.fromPartial(e)) || [];
    message.policyTip = object.policyTip ?? "0";
    return message;
  },
};

function createBaseBusinessContent_PerceptionFeedbackOption(): BusinessContent_PerceptionFeedbackOption {
  return { id: "0", contentKey: "" };
}

export const BusinessContent_PerceptionFeedbackOptionDecoder: MessageFns<BusinessContent_PerceptionFeedbackOption> = {
  encode(message: BusinessContent_PerceptionFeedbackOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.contentKey !== "") {
      writer.uint32(18).string(message.contentKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_PerceptionFeedbackOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_PerceptionFeedbackOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_PerceptionFeedbackOption {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      contentKey: isSet(object.contentKey) ? globalThis.String(object.contentKey) : "",
    };
  },

  toJSON(message: BusinessContent_PerceptionFeedbackOption): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.contentKey !== "") {
      obj.contentKey = message.contentKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_PerceptionFeedbackOption>, I>>(
    base?: I,
  ): BusinessContent_PerceptionFeedbackOption {
    return BusinessContent_PerceptionFeedbackOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_PerceptionFeedbackOption>, I>>(
    object: I,
  ): BusinessContent_PerceptionFeedbackOption {
    const message = createBaseBusinessContent_PerceptionFeedbackOption();
    message.id = object.id ?? "0";
    message.contentKey = object.contentKey ?? "";
    return message;
  },
};

function createBaseBusinessContent_JoinGroupMessageExtra(): BusinessContent_JoinGroupMessageExtra {
  return { sourceType: "0", extra: undefined, otherUsersList: [] };
}

export const BusinessContent_JoinGroupMessageExtraDecoder: MessageFns<BusinessContent_JoinGroupMessageExtra> = {
  encode(message: BusinessContent_JoinGroupMessageExtra, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceType !== "0") {
      writer.uint32(8).int64(message.sourceType);
    }
    if (message.extra !== undefined) {
      BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.encode(message.extra, writer.uint32(18).fork()).join();
    }
    for (const v of message.otherUsersList) {
      BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_JoinGroupMessageExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupMessageExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sourceType = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extra = BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.otherUsersList.push(BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupMessageExtra {
    return {
      sourceType: isSet(object.sourceType) ? globalThis.String(object.sourceType) : "0",
      extra: isSet(object.extra) ? BusinessContent_JoinGroupMessageExtra_RivalExtra.fromJSON(object.extra) : undefined,
      otherUsersList: globalThis.Array.isArray(object?.otherUsersList)
        ? object.otherUsersList.map((e: any) => BusinessContent_JoinGroupMessageExtra_RivalExtra.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BusinessContent_JoinGroupMessageExtra): unknown {
    const obj: any = {};
    if (message.sourceType !== "0") {
      obj.sourceType = message.sourceType;
    }
    if (message.extra !== undefined) {
      obj.extra = BusinessContent_JoinGroupMessageExtra_RivalExtra.toJSON(message.extra);
    }
    if (message.otherUsersList?.length) {
      obj.otherUsersList = message.otherUsersList.map((e) =>
        BusinessContent_JoinGroupMessageExtra_RivalExtra.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupMessageExtra>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupMessageExtra {
    return BusinessContent_JoinGroupMessageExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupMessageExtra>, I>>(
    object: I,
  ): BusinessContent_JoinGroupMessageExtra {
    const message = createBaseBusinessContent_JoinGroupMessageExtra();
    message.sourceType = object.sourceType ?? "0";
    message.extra = (object.extra !== undefined && object.extra !== null)
      ? BusinessContent_JoinGroupMessageExtra_RivalExtra.fromPartial(object.extra)
      : undefined;
    message.otherUsersList =
      object.otherUsersList?.map((e) => BusinessContent_JoinGroupMessageExtra_RivalExtra.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra(): BusinessContent_JoinGroupMessageExtra_RivalExtra {
  return {
    userCount: "0",
    avatarThumb: undefined,
    displayId: "",
    authenticationInfo: undefined,
    nickname: "",
    followStatus: "0",
    hashtag: undefined,
    topHostInfo: undefined,
    userId: "0",
    isBestTeammate: false,
  };
}

export const BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder: MessageFns<BusinessContent_JoinGroupMessageExtra_RivalExtra> = {
  encode(
    message: BusinessContent_JoinGroupMessageExtra_RivalExtra,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userCount !== "0") {
      writer.uint32(32).int64(message.userCount);
    }
    if (message.avatarThumb !== undefined) {
      ImageDecoder.encode(message.avatarThumb, writer.uint32(42).fork()).join();
    }
    if (message.displayId !== "") {
      writer.uint32(50).string(message.displayId);
    }
    if (message.authenticationInfo !== undefined) {
      BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfoDecoder.encode(
        message.authenticationInfo,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.nickname !== "") {
      writer.uint32(66).string(message.nickname);
    }
    if (message.followStatus !== "0") {
      writer.uint32(72).int64(message.followStatus);
    }
    if (message.hashtag !== undefined) {
      BusinessContent_HashtagDecoder.encode(message.hashtag, writer.uint32(82).fork()).join();
    }
    if (message.topHostInfo !== undefined) {
      BusinessContent_TopHostInfoDecoder.encode(message.topHostInfo, writer.uint32(90).fork()).join();
    }
    if (message.userId !== "0") {
      writer.uint32(96).int64(message.userId);
    }
    if (message.isBestTeammate !== false) {
      writer.uint32(104).bool(message.isBestTeammate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_JoinGroupMessageExtra_RivalExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userCount = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avatarThumb = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.displayId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.authenticationInfo = BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfoDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.followStatus = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.hashtag = BusinessContent_HashtagDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.topHostInfo = BusinessContent_TopHostInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isBestTeammate = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupMessageExtra_RivalExtra {
    return {
      userCount: isSet(object.userCount) ? globalThis.String(object.userCount) : "0",
      avatarThumb: isSet(object.avatarThumb) ? Image.fromJSON(object.avatarThumb) : undefined,
      displayId: isSet(object.displayId) ? globalThis.String(object.displayId) : "",
      authenticationInfo: isSet(object.authenticationInfo)
        ? BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo.fromJSON(object.authenticationInfo)
        : undefined,
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      followStatus: isSet(object.followStatus) ? globalThis.String(object.followStatus) : "0",
      hashtag: isSet(object.hashtag) ? BusinessContent_Hashtag.fromJSON(object.hashtag) : undefined,
      topHostInfo: isSet(object.topHostInfo) ? BusinessContent_TopHostInfo.fromJSON(object.topHostInfo) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      isBestTeammate: isSet(object.isBestTeammate) ? globalThis.Boolean(object.isBestTeammate) : false,
    };
  },

  toJSON(message: BusinessContent_JoinGroupMessageExtra_RivalExtra): unknown {
    const obj: any = {};
    if (message.userCount !== "0") {
      obj.userCount = message.userCount;
    }
    if (message.avatarThumb !== undefined) {
      obj.avatarThumb = Image.toJSON(message.avatarThumb);
    }
    if (message.displayId !== "") {
      obj.displayId = message.displayId;
    }
    if (message.authenticationInfo !== undefined) {
      obj.authenticationInfo = BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo.toJSON(
        message.authenticationInfo,
      );
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.followStatus !== "0") {
      obj.followStatus = message.followStatus;
    }
    if (message.hashtag !== undefined) {
      obj.hashtag = BusinessContent_Hashtag.toJSON(message.hashtag);
    }
    if (message.topHostInfo !== undefined) {
      obj.topHostInfo = BusinessContent_TopHostInfo.toJSON(message.topHostInfo);
    }
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.isBestTeammate !== false) {
      obj.isBestTeammate = message.isBestTeammate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupMessageExtra_RivalExtra>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupMessageExtra_RivalExtra {
    return BusinessContent_JoinGroupMessageExtra_RivalExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupMessageExtra_RivalExtra>, I>>(
    object: I,
  ): BusinessContent_JoinGroupMessageExtra_RivalExtra {
    const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra();
    message.userCount = object.userCount ?? "0";
    message.avatarThumb = (object.avatarThumb !== undefined && object.avatarThumb !== null)
      ? Image.fromPartial(object.avatarThumb)
      : undefined;
    message.displayId = object.displayId ?? "";
    message.authenticationInfo = (object.authenticationInfo !== undefined && object.authenticationInfo !== null)
      ? BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo.fromPartial(object.authenticationInfo)
      : undefined;
    message.nickname = object.nickname ?? "";
    message.followStatus = object.followStatus ?? "0";
    message.hashtag = (object.hashtag !== undefined && object.hashtag !== null)
      ? BusinessContent_Hashtag.fromPartial(object.hashtag)
      : undefined;
    message.topHostInfo = (object.topHostInfo !== undefined && object.topHostInfo !== null)
      ? BusinessContent_TopHostInfo.fromPartial(object.topHostInfo)
      : undefined;
    message.userId = object.userId ?? "0";
    message.isBestTeammate = object.isBestTeammate ?? false;
    return message;
  },
};

function createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo(): BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
  return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: undefined };
}

export const BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfoDecoder: MessageFns<BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo> = {
  encode(
    message: BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.customVerify !== "") {
      writer.uint32(10).string(message.customVerify);
    }
    if (message.enterpriseVerifyReason !== "") {
      writer.uint32(18).string(message.enterpriseVerifyReason);
    }
    if (message.authenticationBadge !== undefined) {
      ImageDecoder.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customVerify = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enterpriseVerifyReason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authenticationBadge = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
    return {
      customVerify: isSet(object.customVerify) ? globalThis.String(object.customVerify) : "",
      enterpriseVerifyReason: isSet(object.enterpriseVerifyReason)
        ? globalThis.String(object.enterpriseVerifyReason)
        : "",
      authenticationBadge: isSet(object.authenticationBadge) ? Image.fromJSON(object.authenticationBadge) : undefined,
    };
  },

  toJSON(message: BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo): unknown {
    const obj: any = {};
    if (message.customVerify !== "") {
      obj.customVerify = message.customVerify;
    }
    if (message.enterpriseVerifyReason !== "") {
      obj.enterpriseVerifyReason = message.enterpriseVerifyReason;
    }
    if (message.authenticationBadge !== undefined) {
      obj.authenticationBadge = Image.toJSON(message.authenticationBadge);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo>, I>>(
    base?: I,
  ): BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
    return BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo>, I>>(
    object: I,
  ): BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
    const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo();
    message.customVerify = object.customVerify ?? "";
    message.enterpriseVerifyReason = object.enterpriseVerifyReason ?? "";
    message.authenticationBadge = (object.authenticationBadge !== undefined && object.authenticationBadge !== null)
      ? Image.fromPartial(object.authenticationBadge)
      : undefined;
    return message;
  },
};

function createBaseBusinessContent_Hashtag(): BusinessContent_Hashtag {
  return { id: "0", title: "", image: undefined, namespace: 0 };
}

export const BusinessContent_HashtagDecoder: MessageFns<BusinessContent_Hashtag> = {
  encode(message: BusinessContent_Hashtag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.image !== undefined) {
      ImageDecoder.encode(message.image, writer.uint32(26).fork()).join();
    }
    if (message.namespace !== 0) {
      writer.uint32(32).int32(message.namespace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_Hashtag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_Hashtag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.namespace = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_Hashtag {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      image: isSet(object.image) ? Image.fromJSON(object.image) : undefined,
      namespace: isSet(object.namespace) ? hashtagNamespaceFromJSON(object.namespace) : 0,
    };
  },

  toJSON(message: BusinessContent_Hashtag): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.image !== undefined) {
      obj.image = Image.toJSON(message.image);
    }
    if (message.namespace !== 0) {
      obj.namespace = hashtagNamespaceToJSON(message.namespace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_Hashtag>, I>>(base?: I): BusinessContent_Hashtag {
    return BusinessContent_Hashtag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_Hashtag>, I>>(object: I): BusinessContent_Hashtag {
    const message = createBaseBusinessContent_Hashtag();
    message.id = object.id ?? "0";
    message.title = object.title ?? "";
    message.image = (object.image !== undefined && object.image !== null) ? Image.fromPartial(object.image) : undefined;
    message.namespace = object.namespace ?? 0;
    return message;
  },
};

function createBaseBusinessContent_TopHostInfo(): BusinessContent_TopHostInfo {
  return { rankType: "", topIndex: "0" };
}

export const BusinessContent_TopHostInfoDecoder: MessageFns<BusinessContent_TopHostInfo> = {
  encode(message: BusinessContent_TopHostInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rankType !== "") {
      writer.uint32(10).string(message.rankType);
    }
    if (message.topIndex !== "0") {
      writer.uint32(16).int64(message.topIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessContent_TopHostInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessContent_TopHostInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rankType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.topIndex = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessContent_TopHostInfo {
    return {
      rankType: isSet(object.rankType) ? globalThis.String(object.rankType) : "",
      topIndex: isSet(object.topIndex) ? globalThis.String(object.topIndex) : "0",
    };
  },

  toJSON(message: BusinessContent_TopHostInfo): unknown {
    const obj: any = {};
    if (message.rankType !== "") {
      obj.rankType = message.rankType;
    }
    if (message.topIndex !== "0") {
      obj.topIndex = message.topIndex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BusinessContent_TopHostInfo>, I>>(base?: I): BusinessContent_TopHostInfo {
    return BusinessContent_TopHostInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BusinessContent_TopHostInfo>, I>>(object: I): BusinessContent_TopHostInfo {
    const message = createBaseBusinessContent_TopHostInfo();
    message.rankType = object.rankType ?? "";
    message.topIndex = object.topIndex ?? "0";
    return message;
  },
};

function createBaseJoinGroupContent(): JoinGroupContent {
  return { groupUser: undefined, joinUser: undefined, type: 0, groupExtInfo: [] };
}

export const JoinGroupContentDecoder: MessageFns<JoinGroupContent> = {
  encode(message: JoinGroupContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupUser !== undefined) {
      GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(10).fork()).join();
    }
    if (message.joinUser !== undefined) {
      GroupPlayerDecoder.encode(message.joinUser, writer.uint32(18).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    for (const v of message.groupExtInfo) {
      RTCExtraInfoDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinGroupContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinGroupContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupUser = GroupChannelAllUserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.joinUser = GroupPlayerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.groupExtInfo.push(RTCExtraInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinGroupContent {
    return {
      groupUser: isSet(object.groupUser) ? GroupChannelAllUser.fromJSON(object.groupUser) : undefined,
      joinUser: isSet(object.joinUser) ? GroupPlayer.fromJSON(object.joinUser) : undefined,
      type: isSet(object.type) ? joinTypeFromJSON(object.type) : 0,
      groupExtInfo: globalThis.Array.isArray(object?.groupExtInfo)
        ? object.groupExtInfo.map((e: any) => RTCExtraInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: JoinGroupContent): unknown {
    const obj: any = {};
    if (message.groupUser !== undefined) {
      obj.groupUser = GroupChannelAllUser.toJSON(message.groupUser);
    }
    if (message.joinUser !== undefined) {
      obj.joinUser = GroupPlayer.toJSON(message.joinUser);
    }
    if (message.type !== 0) {
      obj.type = joinTypeToJSON(message.type);
    }
    if (message.groupExtInfo?.length) {
      obj.groupExtInfo = message.groupExtInfo.map((e) => RTCExtraInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinGroupContent>, I>>(base?: I): JoinGroupContent {
    return JoinGroupContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinGroupContent>, I>>(object: I): JoinGroupContent {
    const message = createBaseJoinGroupContent();
    message.groupUser = (object.groupUser !== undefined && object.groupUser !== null)
      ? GroupChannelAllUser.fromPartial(object.groupUser)
      : undefined;
    message.joinUser = (object.joinUser !== undefined && object.joinUser !== null)
      ? GroupPlayer.fromPartial(object.joinUser)
      : undefined;
    message.type = object.type ?? 0;
    message.groupExtInfo = object.groupExtInfo?.map((e) => RTCExtraInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBasePrivilegeLogExtra(): PrivilegeLogExtra {
  return { dataVersion: "", privilegeId: "", privilegeVersion: "", privilegeOrderId: "", level: "" };
}

export const PrivilegeLogExtraDecoder: MessageFns<PrivilegeLogExtra> = {
  encode(message: PrivilegeLogExtra, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataVersion !== "") {
      writer.uint32(10).string(message.dataVersion);
    }
    if (message.privilegeId !== "") {
      writer.uint32(18).string(message.privilegeId);
    }
    if (message.privilegeVersion !== "") {
      writer.uint32(26).string(message.privilegeVersion);
    }
    if (message.privilegeOrderId !== "") {
      writer.uint32(34).string(message.privilegeOrderId);
    }
    if (message.level !== "") {
      writer.uint32(42).string(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivilegeLogExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivilegeLogExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dataVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.privilegeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.privilegeVersion = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.privilegeOrderId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.level = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivilegeLogExtra {
    return {
      dataVersion: isSet(object.dataVersion) ? globalThis.String(object.dataVersion) : "",
      privilegeId: isSet(object.privilegeId) ? globalThis.String(object.privilegeId) : "",
      privilegeVersion: isSet(object.privilegeVersion) ? globalThis.String(object.privilegeVersion) : "",
      privilegeOrderId: isSet(object.privilegeOrderId) ? globalThis.String(object.privilegeOrderId) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
    };
  },

  toJSON(message: PrivilegeLogExtra): unknown {
    const obj: any = {};
    if (message.dataVersion !== "") {
      obj.dataVersion = message.dataVersion;
    }
    if (message.privilegeId !== "") {
      obj.privilegeId = message.privilegeId;
    }
    if (message.privilegeVersion !== "") {
      obj.privilegeVersion = message.privilegeVersion;
    }
    if (message.privilegeOrderId !== "") {
      obj.privilegeOrderId = message.privilegeOrderId;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivilegeLogExtra>, I>>(base?: I): PrivilegeLogExtra {
    return PrivilegeLogExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivilegeLogExtra>, I>>(object: I): PrivilegeLogExtra {
    const message = createBasePrivilegeLogExtra();
    message.dataVersion = object.dataVersion ?? "";
    message.privilegeId = object.privilegeId ?? "";
    message.privilegeVersion = object.privilegeVersion ?? "";
    message.privilegeOrderId = object.privilegeOrderId ?? "";
    message.level = object.level ?? "";
    return message;
  },
};

function createBaseFontStyle(): FontStyle {
  return { fontSize: 0, fontWidth: 0, fontColor: "", borderColor: "" };
}

export const FontStyleDecoder: MessageFns<FontStyle> = {
  encode(message: FontStyle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fontSize !== 0) {
      writer.uint32(8).int32(message.fontSize);
    }
    if (message.fontWidth !== 0) {
      writer.uint32(16).int32(message.fontWidth);
    }
    if (message.fontColor !== "") {
      writer.uint32(26).string(message.fontColor);
    }
    if (message.borderColor !== "") {
      writer.uint32(34).string(message.borderColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FontStyle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFontStyle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fontSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fontWidth = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.borderColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FontStyle {
    return {
      fontSize: isSet(object.fontSize) ? globalThis.Number(object.fontSize) : 0,
      fontWidth: isSet(object.fontWidth) ? globalThis.Number(object.fontWidth) : 0,
      fontColor: isSet(object.fontColor) ? globalThis.String(object.fontColor) : "",
      borderColor: isSet(object.borderColor) ? globalThis.String(object.borderColor) : "",
    };
  },

  toJSON(message: FontStyle): unknown {
    const obj: any = {};
    if (message.fontSize !== 0) {
      obj.fontSize = Math.round(message.fontSize);
    }
    if (message.fontWidth !== 0) {
      obj.fontWidth = Math.round(message.fontWidth);
    }
    if (message.fontColor !== "") {
      obj.fontColor = message.fontColor;
    }
    if (message.borderColor !== "") {
      obj.borderColor = message.borderColor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FontStyle>, I>>(base?: I): FontStyle {
    return FontStyle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FontStyle>, I>>(object: I): FontStyle {
    const message = createBaseFontStyle();
    message.fontSize = object.fontSize ?? 0;
    message.fontWidth = object.fontWidth ?? 0;
    message.fontColor = object.fontColor ?? "";
    message.borderColor = object.borderColor ?? "";
    return message;
  },
};

function createBaseUserHonor(): UserHonor {
  return {
    totalDiamond: "0",
    diamondIcon: undefined,
    currentHonorName: "",
    currentHonorIcon: undefined,
    nextHonorName: "",
    level: 0,
    nextHonorIcon: undefined,
    currentDiamond: "0",
    thisGradeMinDiamond: "0",
    thisGradeMaxDiamond: "0",
    gradeDescribe: "",
    gradeIconList: [],
    screenChatType: "0",
    imIcon: undefined,
    imIconWithLevel: undefined,
    liveIcon: undefined,
    newImIconWithLevel: undefined,
    newLiveIcon: undefined,
    upgradeNeedConsume: "0",
    nextPrivileges: "",
    profileDialogBg: undefined,
    profileDialogBackBg: undefined,
    score: "0",
    gradeBanner: "",
  };
}

export const UserHonorDecoder: MessageFns<UserHonor> = {
  encode(message: UserHonor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalDiamond !== "0") {
      writer.uint32(8).int64(message.totalDiamond);
    }
    if (message.diamondIcon !== undefined) {
      ImageDecoder.encode(message.diamondIcon, writer.uint32(18).fork()).join();
    }
    if (message.currentHonorName !== "") {
      writer.uint32(26).string(message.currentHonorName);
    }
    if (message.currentHonorIcon !== undefined) {
      ImageDecoder.encode(message.currentHonorIcon, writer.uint32(34).fork()).join();
    }
    if (message.nextHonorName !== "") {
      writer.uint32(42).string(message.nextHonorName);
    }
    if (message.level !== 0) {
      writer.uint32(48).int32(message.level);
    }
    if (message.nextHonorIcon !== undefined) {
      ImageDecoder.encode(message.nextHonorIcon, writer.uint32(58).fork()).join();
    }
    if (message.currentDiamond !== "0") {
      writer.uint32(72).int64(message.currentDiamond);
    }
    if (message.thisGradeMinDiamond !== "0") {
      writer.uint32(80).int64(message.thisGradeMinDiamond);
    }
    if (message.thisGradeMaxDiamond !== "0") {
      writer.uint32(88).int64(message.thisGradeMaxDiamond);
    }
    if (message.gradeDescribe !== "") {
      writer.uint32(106).string(message.gradeDescribe);
    }
    for (const v of message.gradeIconList) {
      GradeIconDecoder.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.screenChatType !== "0") {
      writer.uint32(120).int64(message.screenChatType);
    }
    if (message.imIcon !== undefined) {
      ImageDecoder.encode(message.imIcon, writer.uint32(130).fork()).join();
    }
    if (message.imIconWithLevel !== undefined) {
      ImageDecoder.encode(message.imIconWithLevel, writer.uint32(138).fork()).join();
    }
    if (message.liveIcon !== undefined) {
      ImageDecoder.encode(message.liveIcon, writer.uint32(146).fork()).join();
    }
    if (message.newImIconWithLevel !== undefined) {
      ImageDecoder.encode(message.newImIconWithLevel, writer.uint32(154).fork()).join();
    }
    if (message.newLiveIcon !== undefined) {
      ImageDecoder.encode(message.newLiveIcon, writer.uint32(162).fork()).join();
    }
    if (message.upgradeNeedConsume !== "0") {
      writer.uint32(168).int64(message.upgradeNeedConsume);
    }
    if (message.nextPrivileges !== "") {
      writer.uint32(178).string(message.nextPrivileges);
    }
    if (message.profileDialogBg !== undefined) {
      ImageDecoder.encode(message.profileDialogBg, writer.uint32(186).fork()).join();
    }
    if (message.profileDialogBackBg !== undefined) {
      ImageDecoder.encode(message.profileDialogBackBg, writer.uint32(194).fork()).join();
    }
    if (message.score !== "0") {
      writer.uint32(200).int64(message.score);
    }
    if (message.gradeBanner !== "") {
      writer.uint32(8010).string(message.gradeBanner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserHonor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserHonor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalDiamond = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diamondIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currentHonorName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currentHonorIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nextHonorName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nextHonorIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.currentDiamond = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.thisGradeMinDiamond = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.thisGradeMaxDiamond = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.gradeDescribe = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.gradeIconList.push(GradeIconDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.screenChatType = reader.int64().toString();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.imIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.imIconWithLevel = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.liveIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.newImIconWithLevel = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.newLiveIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.upgradeNeedConsume = reader.int64().toString();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.nextPrivileges = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.profileDialogBg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.profileDialogBackBg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.score = reader.int64().toString();
          continue;
        }
        case 1001: {
          if (tag !== 8010) {
            break;
          }

          message.gradeBanner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserHonor {
    return {
      totalDiamond: isSet(object.totalDiamond) ? globalThis.String(object.totalDiamond) : "0",
      diamondIcon: isSet(object.diamondIcon) ? Image.fromJSON(object.diamondIcon) : undefined,
      currentHonorName: isSet(object.currentHonorName) ? globalThis.String(object.currentHonorName) : "",
      currentHonorIcon: isSet(object.currentHonorIcon) ? Image.fromJSON(object.currentHonorIcon) : undefined,
      nextHonorName: isSet(object.nextHonorName) ? globalThis.String(object.nextHonorName) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      nextHonorIcon: isSet(object.nextHonorIcon) ? Image.fromJSON(object.nextHonorIcon) : undefined,
      currentDiamond: isSet(object.currentDiamond) ? globalThis.String(object.currentDiamond) : "0",
      thisGradeMinDiamond: isSet(object.thisGradeMinDiamond) ? globalThis.String(object.thisGradeMinDiamond) : "0",
      thisGradeMaxDiamond: isSet(object.thisGradeMaxDiamond) ? globalThis.String(object.thisGradeMaxDiamond) : "0",
      gradeDescribe: isSet(object.gradeDescribe) ? globalThis.String(object.gradeDescribe) : "",
      gradeIconList: globalThis.Array.isArray(object?.gradeIconList)
        ? object.gradeIconList.map((e: any) => GradeIcon.fromJSON(e))
        : [],
      screenChatType: isSet(object.screenChatType) ? globalThis.String(object.screenChatType) : "0",
      imIcon: isSet(object.imIcon) ? Image.fromJSON(object.imIcon) : undefined,
      imIconWithLevel: isSet(object.imIconWithLevel) ? Image.fromJSON(object.imIconWithLevel) : undefined,
      liveIcon: isSet(object.liveIcon) ? Image.fromJSON(object.liveIcon) : undefined,
      newImIconWithLevel: isSet(object.newImIconWithLevel) ? Image.fromJSON(object.newImIconWithLevel) : undefined,
      newLiveIcon: isSet(object.newLiveIcon) ? Image.fromJSON(object.newLiveIcon) : undefined,
      upgradeNeedConsume: isSet(object.upgradeNeedConsume) ? globalThis.String(object.upgradeNeedConsume) : "0",
      nextPrivileges: isSet(object.nextPrivileges) ? globalThis.String(object.nextPrivileges) : "",
      profileDialogBg: isSet(object.profileDialogBg) ? Image.fromJSON(object.profileDialogBg) : undefined,
      profileDialogBackBg: isSet(object.profileDialogBackBg) ? Image.fromJSON(object.profileDialogBackBg) : undefined,
      score: isSet(object.score) ? globalThis.String(object.score) : "0",
      gradeBanner: isSet(object.gradeBanner) ? globalThis.String(object.gradeBanner) : "",
    };
  },

  toJSON(message: UserHonor): unknown {
    const obj: any = {};
    if (message.totalDiamond !== "0") {
      obj.totalDiamond = message.totalDiamond;
    }
    if (message.diamondIcon !== undefined) {
      obj.diamondIcon = Image.toJSON(message.diamondIcon);
    }
    if (message.currentHonorName !== "") {
      obj.currentHonorName = message.currentHonorName;
    }
    if (message.currentHonorIcon !== undefined) {
      obj.currentHonorIcon = Image.toJSON(message.currentHonorIcon);
    }
    if (message.nextHonorName !== "") {
      obj.nextHonorName = message.nextHonorName;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.nextHonorIcon !== undefined) {
      obj.nextHonorIcon = Image.toJSON(message.nextHonorIcon);
    }
    if (message.currentDiamond !== "0") {
      obj.currentDiamond = message.currentDiamond;
    }
    if (message.thisGradeMinDiamond !== "0") {
      obj.thisGradeMinDiamond = message.thisGradeMinDiamond;
    }
    if (message.thisGradeMaxDiamond !== "0") {
      obj.thisGradeMaxDiamond = message.thisGradeMaxDiamond;
    }
    if (message.gradeDescribe !== "") {
      obj.gradeDescribe = message.gradeDescribe;
    }
    if (message.gradeIconList?.length) {
      obj.gradeIconList = message.gradeIconList.map((e) => GradeIcon.toJSON(e));
    }
    if (message.screenChatType !== "0") {
      obj.screenChatType = message.screenChatType;
    }
    if (message.imIcon !== undefined) {
      obj.imIcon = Image.toJSON(message.imIcon);
    }
    if (message.imIconWithLevel !== undefined) {
      obj.imIconWithLevel = Image.toJSON(message.imIconWithLevel);
    }
    if (message.liveIcon !== undefined) {
      obj.liveIcon = Image.toJSON(message.liveIcon);
    }
    if (message.newImIconWithLevel !== undefined) {
      obj.newImIconWithLevel = Image.toJSON(message.newImIconWithLevel);
    }
    if (message.newLiveIcon !== undefined) {
      obj.newLiveIcon = Image.toJSON(message.newLiveIcon);
    }
    if (message.upgradeNeedConsume !== "0") {
      obj.upgradeNeedConsume = message.upgradeNeedConsume;
    }
    if (message.nextPrivileges !== "") {
      obj.nextPrivileges = message.nextPrivileges;
    }
    if (message.profileDialogBg !== undefined) {
      obj.profileDialogBg = Image.toJSON(message.profileDialogBg);
    }
    if (message.profileDialogBackBg !== undefined) {
      obj.profileDialogBackBg = Image.toJSON(message.profileDialogBackBg);
    }
    if (message.score !== "0") {
      obj.score = message.score;
    }
    if (message.gradeBanner !== "") {
      obj.gradeBanner = message.gradeBanner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserHonor>, I>>(base?: I): UserHonor {
    return UserHonor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserHonor>, I>>(object: I): UserHonor {
    const message = createBaseUserHonor();
    message.totalDiamond = object.totalDiamond ?? "0";
    message.diamondIcon = (object.diamondIcon !== undefined && object.diamondIcon !== null)
      ? Image.fromPartial(object.diamondIcon)
      : undefined;
    message.currentHonorName = object.currentHonorName ?? "";
    message.currentHonorIcon = (object.currentHonorIcon !== undefined && object.currentHonorIcon !== null)
      ? Image.fromPartial(object.currentHonorIcon)
      : undefined;
    message.nextHonorName = object.nextHonorName ?? "";
    message.level = object.level ?? 0;
    message.nextHonorIcon = (object.nextHonorIcon !== undefined && object.nextHonorIcon !== null)
      ? Image.fromPartial(object.nextHonorIcon)
      : undefined;
    message.currentDiamond = object.currentDiamond ?? "0";
    message.thisGradeMinDiamond = object.thisGradeMinDiamond ?? "0";
    message.thisGradeMaxDiamond = object.thisGradeMaxDiamond ?? "0";
    message.gradeDescribe = object.gradeDescribe ?? "";
    message.gradeIconList = object.gradeIconList?.map((e) => GradeIcon.fromPartial(e)) || [];
    message.screenChatType = object.screenChatType ?? "0";
    message.imIcon = (object.imIcon !== undefined && object.imIcon !== null)
      ? Image.fromPartial(object.imIcon)
      : undefined;
    message.imIconWithLevel = (object.imIconWithLevel !== undefined && object.imIconWithLevel !== null)
      ? Image.fromPartial(object.imIconWithLevel)
      : undefined;
    message.liveIcon = (object.liveIcon !== undefined && object.liveIcon !== null)
      ? Image.fromPartial(object.liveIcon)
      : undefined;
    message.newImIconWithLevel = (object.newImIconWithLevel !== undefined && object.newImIconWithLevel !== null)
      ? Image.fromPartial(object.newImIconWithLevel)
      : undefined;
    message.newLiveIcon = (object.newLiveIcon !== undefined && object.newLiveIcon !== null)
      ? Image.fromPartial(object.newLiveIcon)
      : undefined;
    message.upgradeNeedConsume = object.upgradeNeedConsume ?? "0";
    message.nextPrivileges = object.nextPrivileges ?? "";
    message.profileDialogBg = (object.profileDialogBg !== undefined && object.profileDialogBg !== null)
      ? Image.fromPartial(object.profileDialogBg)
      : undefined;
    message.profileDialogBackBg = (object.profileDialogBackBg !== undefined && object.profileDialogBackBg !== null)
      ? Image.fromPartial(object.profileDialogBackBg)
      : undefined;
    message.score = object.score ?? "0";
    message.gradeBanner = object.gradeBanner ?? "";
    return message;
  },
};

function createBaseGradeIcon(): GradeIcon {
  return { icon: undefined, iconDiamond: "0", level: "0", levelStr: "" };
}

export const GradeIconDecoder: MessageFns<GradeIcon> = {
  encode(message: GradeIcon, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
    }
    if (message.iconDiamond !== "0") {
      writer.uint32(16).int64(message.iconDiamond);
    }
    if (message.level !== "0") {
      writer.uint32(24).int64(message.level);
    }
    if (message.levelStr !== "") {
      writer.uint32(34).string(message.levelStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GradeIcon {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGradeIcon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.iconDiamond = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.levelStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GradeIcon {
    return {
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      iconDiamond: isSet(object.iconDiamond) ? globalThis.String(object.iconDiamond) : "0",
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
      levelStr: isSet(object.levelStr) ? globalThis.String(object.levelStr) : "",
    };
  },

  toJSON(message: GradeIcon): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.iconDiamond !== "0") {
      obj.iconDiamond = message.iconDiamond;
    }
    if (message.level !== "0") {
      obj.level = message.level;
    }
    if (message.levelStr !== "") {
      obj.levelStr = message.levelStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GradeIcon>, I>>(base?: I): GradeIcon {
    return GradeIcon.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GradeIcon>, I>>(object: I): GradeIcon {
    const message = createBaseGradeIcon();
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.iconDiamond = object.iconDiamond ?? "0";
    message.level = object.level ?? "0";
    message.levelStr = object.levelStr ?? "";
    return message;
  },
};

function createBaseBorderInfo(): BorderInfo {
  return {
    icon: undefined,
    level: "0",
    source: "",
    profileDecorationRibbon: undefined,
    borderLogExtra: undefined,
    ribbonLogExtra: undefined,
    avatarBackgroundColor: "",
    avatarBackgroundBorderColor: "",
  };
}

export const BorderInfoDecoder: MessageFns<BorderInfo> = {
  encode(message: BorderInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
    }
    if (message.level !== "0") {
      writer.uint32(16).int64(message.level);
    }
    if (message.source !== "") {
      writer.uint32(26).string(message.source);
    }
    if (message.profileDecorationRibbon !== undefined) {
      ImageDecoder.encode(message.profileDecorationRibbon, writer.uint32(34).fork()).join();
    }
    if (message.borderLogExtra !== undefined) {
      PrivilegeLogExtraDecoder.encode(message.borderLogExtra, writer.uint32(42).fork()).join();
    }
    if (message.ribbonLogExtra !== undefined) {
      PrivilegeLogExtraDecoder.encode(message.ribbonLogExtra, writer.uint32(50).fork()).join();
    }
    if (message.avatarBackgroundColor !== "") {
      writer.uint32(58).string(message.avatarBackgroundColor);
    }
    if (message.avatarBackgroundBorderColor !== "") {
      writer.uint32(66).string(message.avatarBackgroundBorderColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BorderInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBorderInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.profileDecorationRibbon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.borderLogExtra = PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ribbonLogExtra = PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.avatarBackgroundColor = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.avatarBackgroundBorderColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BorderInfo {
    return {
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      profileDecorationRibbon: isSet(object.profileDecorationRibbon)
        ? Image.fromJSON(object.profileDecorationRibbon)
        : undefined,
      borderLogExtra: isSet(object.borderLogExtra) ? PrivilegeLogExtra.fromJSON(object.borderLogExtra) : undefined,
      ribbonLogExtra: isSet(object.ribbonLogExtra) ? PrivilegeLogExtra.fromJSON(object.ribbonLogExtra) : undefined,
      avatarBackgroundColor: isSet(object.avatarBackgroundColor) ? globalThis.String(object.avatarBackgroundColor) : "",
      avatarBackgroundBorderColor: isSet(object.avatarBackgroundBorderColor)
        ? globalThis.String(object.avatarBackgroundBorderColor)
        : "",
    };
  },

  toJSON(message: BorderInfo): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.level !== "0") {
      obj.level = message.level;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.profileDecorationRibbon !== undefined) {
      obj.profileDecorationRibbon = Image.toJSON(message.profileDecorationRibbon);
    }
    if (message.borderLogExtra !== undefined) {
      obj.borderLogExtra = PrivilegeLogExtra.toJSON(message.borderLogExtra);
    }
    if (message.ribbonLogExtra !== undefined) {
      obj.ribbonLogExtra = PrivilegeLogExtra.toJSON(message.ribbonLogExtra);
    }
    if (message.avatarBackgroundColor !== "") {
      obj.avatarBackgroundColor = message.avatarBackgroundColor;
    }
    if (message.avatarBackgroundBorderColor !== "") {
      obj.avatarBackgroundBorderColor = message.avatarBackgroundBorderColor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BorderInfo>, I>>(base?: I): BorderInfo {
    return BorderInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BorderInfo>, I>>(object: I): BorderInfo {
    const message = createBaseBorderInfo();
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.level = object.level ?? "0";
    message.source = object.source ?? "";
    message.profileDecorationRibbon =
      (object.profileDecorationRibbon !== undefined && object.profileDecorationRibbon !== null)
        ? Image.fromPartial(object.profileDecorationRibbon)
        : undefined;
    message.borderLogExtra = (object.borderLogExtra !== undefined && object.borderLogExtra !== null)
      ? PrivilegeLogExtra.fromPartial(object.borderLogExtra)
      : undefined;
    message.ribbonLogExtra = (object.ribbonLogExtra !== undefined && object.ribbonLogExtra !== null)
      ? PrivilegeLogExtra.fromPartial(object.ribbonLogExtra)
      : undefined;
    message.avatarBackgroundColor = object.avatarBackgroundColor ?? "";
    message.avatarBackgroundBorderColor = object.avatarBackgroundBorderColor ?? "";
    return message;
  },
};

function createBaseFansClubMember(): FansClubMember {
  return { data: undefined, preferData: {} };
}

export const FansClubMemberDecoder: MessageFns<FansClubMember> = {
  encode(message: FansClubMember, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      FansClubDataDecoder.encode(message.data, writer.uint32(10).fork()).join();
    }
    Object.entries(message.preferData).forEach(([key, value]) => {
      FansClubMember_PreferDataEntryDecoder.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FansClubMember {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFansClubMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = FansClubDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = FansClubMember_PreferDataEntryDecoder.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.preferData[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FansClubMember {
    return {
      data: isSet(object.data) ? FansClubData.fromJSON(object.data) : undefined,
      preferData: isObject(object.preferData)
        ? Object.entries(object.preferData).reduce<{ [key: number]: FansClubData }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = FansClubData.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: FansClubMember): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = FansClubData.toJSON(message.data);
    }
    if (message.preferData) {
      const entries = Object.entries(message.preferData);
      if (entries.length > 0) {
        obj.preferData = {};
        entries.forEach(([k, v]) => {
          obj.preferData[k] = FansClubData.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FansClubMember>, I>>(base?: I): FansClubMember {
    return FansClubMember.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FansClubMember>, I>>(object: I): FansClubMember {
    const message = createBaseFansClubMember();
    message.data = (object.data !== undefined && object.data !== null)
      ? FansClubData.fromPartial(object.data)
      : undefined;
    message.preferData = Object.entries(object.preferData ?? {}).reduce<{ [key: number]: FansClubData }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = FansClubData.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseFansClubMember_PreferDataEntry(): FansClubMember_PreferDataEntry {
  return { key: 0, value: undefined };
}

export const FansClubMember_PreferDataEntryDecoder: MessageFns<FansClubMember_PreferDataEntry> = {
  encode(message: FansClubMember_PreferDataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      FansClubDataDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FansClubMember_PreferDataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFansClubMember_PreferDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = FansClubDataDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FansClubMember_PreferDataEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? FansClubData.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: FansClubMember_PreferDataEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = FansClubData.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FansClubMember_PreferDataEntry>, I>>(base?: I): FansClubMember_PreferDataEntry {
    return FansClubMember_PreferDataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FansClubMember_PreferDataEntry>, I>>(
    object: I,
  ): FansClubMember_PreferDataEntry {
    const message = createBaseFansClubMember_PreferDataEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? FansClubData.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseFansClubData(): FansClubData {
  return { clubName: "", level: 0, userFansClubStatus: 0, badge: undefined, availableGiftIds: [], anchorId: "0" };
}

export const FansClubDataDecoder: MessageFns<FansClubData> = {
  encode(message: FansClubData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clubName !== "") {
      writer.uint32(10).string(message.clubName);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    if (message.userFansClubStatus !== 0) {
      writer.uint32(24).int32(message.userFansClubStatus);
    }
    if (message.badge !== undefined) {
      FansClubData_UserBadgeDecoder.encode(message.badge, writer.uint32(34).fork()).join();
    }
    writer.uint32(42).fork();
    for (const v of message.availableGiftIds) {
      writer.int64(v);
    }
    writer.join();
    if (message.anchorId !== "0") {
      writer.uint32(48).int64(message.anchorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FansClubData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFansClubData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clubName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userFansClubStatus = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.badge = FansClubData_UserBadgeDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.availableGiftIds.push(reader.int64().toString());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.availableGiftIds.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.anchorId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FansClubData {
    return {
      clubName: isSet(object.clubName) ? globalThis.String(object.clubName) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      userFansClubStatus: isSet(object.userFansClubStatus) ? globalThis.Number(object.userFansClubStatus) : 0,
      badge: isSet(object.badge) ? FansClubData_UserBadge.fromJSON(object.badge) : undefined,
      availableGiftIds: globalThis.Array.isArray(object?.availableGiftIds)
        ? object.availableGiftIds.map((e: any) => globalThis.String(e))
        : [],
      anchorId: isSet(object.anchorId) ? globalThis.String(object.anchorId) : "0",
    };
  },

  toJSON(message: FansClubData): unknown {
    const obj: any = {};
    if (message.clubName !== "") {
      obj.clubName = message.clubName;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.userFansClubStatus !== 0) {
      obj.userFansClubStatus = Math.round(message.userFansClubStatus);
    }
    if (message.badge !== undefined) {
      obj.badge = FansClubData_UserBadge.toJSON(message.badge);
    }
    if (message.availableGiftIds?.length) {
      obj.availableGiftIds = message.availableGiftIds;
    }
    if (message.anchorId !== "0") {
      obj.anchorId = message.anchorId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FansClubData>, I>>(base?: I): FansClubData {
    return FansClubData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FansClubData>, I>>(object: I): FansClubData {
    const message = createBaseFansClubData();
    message.clubName = object.clubName ?? "";
    message.level = object.level ?? 0;
    message.userFansClubStatus = object.userFansClubStatus ?? 0;
    message.badge = (object.badge !== undefined && object.badge !== null)
      ? FansClubData_UserBadge.fromPartial(object.badge)
      : undefined;
    message.availableGiftIds = object.availableGiftIds?.map((e) => e) || [];
    message.anchorId = object.anchorId ?? "0";
    return message;
  },
};

function createBaseFansClubData_UserBadge(): FansClubData_UserBadge {
  return { icons: {}, title: "" };
}

export const FansClubData_UserBadgeDecoder: MessageFns<FansClubData_UserBadge> = {
  encode(message: FansClubData_UserBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.icons).forEach(([key, value]) => {
      FansClubData_UserBadge_IconsEntryDecoder.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FansClubData_UserBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFansClubData_UserBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = FansClubData_UserBadge_IconsEntryDecoder.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.icons[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FansClubData_UserBadge {
    return {
      icons: isObject(object.icons)
        ? Object.entries(object.icons).reduce<{ [key: number]: Image }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Image.fromJSON(value);
          return acc;
        }, {})
        : {},
      title: isSet(object.title) ? globalThis.String(object.title) : "",
    };
  },

  toJSON(message: FansClubData_UserBadge): unknown {
    const obj: any = {};
    if (message.icons) {
      const entries = Object.entries(message.icons);
      if (entries.length > 0) {
        obj.icons = {};
        entries.forEach(([k, v]) => {
          obj.icons[k] = Image.toJSON(v);
        });
      }
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FansClubData_UserBadge>, I>>(base?: I): FansClubData_UserBadge {
    return FansClubData_UserBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FansClubData_UserBadge>, I>>(object: I): FansClubData_UserBadge {
    const message = createBaseFansClubData_UserBadge();
    message.icons = Object.entries(object.icons ?? {}).reduce<{ [key: number]: Image }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Image.fromPartial(value);
      }
      return acc;
    }, {});
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseFansClubData_UserBadge_IconsEntry(): FansClubData_UserBadge_IconsEntry {
  return { key: 0, value: undefined };
}

export const FansClubData_UserBadge_IconsEntryDecoder: MessageFns<FansClubData_UserBadge_IconsEntry> = {
  encode(message: FansClubData_UserBadge_IconsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      ImageDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FansClubData_UserBadge_IconsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFansClubData_UserBadge_IconsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FansClubData_UserBadge_IconsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Image.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: FansClubData_UserBadge_IconsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Image.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FansClubData_UserBadge_IconsEntry>, I>>(
    base?: I,
  ): FansClubData_UserBadge_IconsEntry {
    return FansClubData_UserBadge_IconsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FansClubData_UserBadge_IconsEntry>, I>>(
    object: I,
  ): FansClubData_UserBadge_IconsEntry {
    const message = createBaseFansClubData_UserBadge_IconsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null) ? Image.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseAuthor(): Author {
  return { videoTotalCount: "0", videoTotalPlayCount: "0", videoTotalFavoriteCount: "0" };
}

export const AuthorDecoder: MessageFns<Author> = {
  encode(message: Author, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoTotalCount !== "0") {
      writer.uint32(8).int64(message.videoTotalCount);
    }
    if (message.videoTotalPlayCount !== "0") {
      writer.uint32(16).int64(message.videoTotalPlayCount);
    }
    if (message.videoTotalFavoriteCount !== "0") {
      writer.uint32(48).int64(message.videoTotalFavoriteCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Author {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.videoTotalCount = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.videoTotalPlayCount = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.videoTotalFavoriteCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Author {
    return {
      videoTotalCount: isSet(object.videoTotalCount) ? globalThis.String(object.videoTotalCount) : "0",
      videoTotalPlayCount: isSet(object.videoTotalPlayCount) ? globalThis.String(object.videoTotalPlayCount) : "0",
      videoTotalFavoriteCount: isSet(object.videoTotalFavoriteCount)
        ? globalThis.String(object.videoTotalFavoriteCount)
        : "0",
    };
  },

  toJSON(message: Author): unknown {
    const obj: any = {};
    if (message.videoTotalCount !== "0") {
      obj.videoTotalCount = message.videoTotalCount;
    }
    if (message.videoTotalPlayCount !== "0") {
      obj.videoTotalPlayCount = message.videoTotalPlayCount;
    }
    if (message.videoTotalFavoriteCount !== "0") {
      obj.videoTotalFavoriteCount = message.videoTotalFavoriteCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Author>, I>>(base?: I): Author {
    return Author.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Author>, I>>(object: I): Author {
    const message = createBaseAuthor();
    message.videoTotalCount = object.videoTotalCount ?? "0";
    message.videoTotalPlayCount = object.videoTotalPlayCount ?? "0";
    message.videoTotalFavoriteCount = object.videoTotalFavoriteCount ?? "0";
    return message;
  },
};

function createBasePublicAreaCommon(): PublicAreaCommon {
  return { userLabel: undefined, userConsumeInRoom: "0" };
}

export const PublicAreaCommonDecoder: MessageFns<PublicAreaCommon> = {
  encode(message: PublicAreaCommon, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userLabel !== undefined) {
      ImageDecoder.encode(message.userLabel, writer.uint32(10).fork()).join();
    }
    if (message.userConsumeInRoom !== "0") {
      writer.uint32(16).int64(message.userConsumeInRoom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaCommon {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaCommon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userLabel = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userConsumeInRoom = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaCommon {
    return {
      userLabel: isSet(object.userLabel) ? Image.fromJSON(object.userLabel) : undefined,
      userConsumeInRoom: isSet(object.userConsumeInRoom) ? globalThis.String(object.userConsumeInRoom) : "0",
    };
  },

  toJSON(message: PublicAreaCommon): unknown {
    const obj: any = {};
    if (message.userLabel !== undefined) {
      obj.userLabel = Image.toJSON(message.userLabel);
    }
    if (message.userConsumeInRoom !== "0") {
      obj.userConsumeInRoom = message.userConsumeInRoom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaCommon>, I>>(base?: I): PublicAreaCommon {
    return PublicAreaCommon.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaCommon>, I>>(object: I): PublicAreaCommon {
    const message = createBasePublicAreaCommon();
    message.userLabel = (object.userLabel !== undefined && object.userLabel !== null)
      ? Image.fromPartial(object.userLabel)
      : undefined;
    message.userConsumeInRoom = object.userConsumeInRoom ?? "0";
    return message;
  },
};

function createBasePublicAreaMessageCommon(): PublicAreaMessageCommon {
  return {
    scrollGapCount: "0",
    anchorScrollGapCount: "0",
    releaseToScrollArea: false,
    anchorReleaseToScrollArea: false,
    isAnchorMarked: false,
    creatorSuccessInfo: undefined,
    portraitInfo: undefined,
    userInteractionInfo: undefined,
    adminFoldType: "0",
  };
}

export const PublicAreaMessageCommonDecoder: MessageFns<PublicAreaMessageCommon> = {
  encode(message: PublicAreaMessageCommon, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scrollGapCount !== "0") {
      writer.uint32(8).int64(message.scrollGapCount);
    }
    if (message.anchorScrollGapCount !== "0") {
      writer.uint32(16).int64(message.anchorScrollGapCount);
    }
    if (message.releaseToScrollArea !== false) {
      writer.uint32(24).bool(message.releaseToScrollArea);
    }
    if (message.anchorReleaseToScrollArea !== false) {
      writer.uint32(32).bool(message.anchorReleaseToScrollArea);
    }
    if (message.isAnchorMarked !== false) {
      writer.uint32(40).bool(message.isAnchorMarked);
    }
    if (message.creatorSuccessInfo !== undefined) {
      PublicAreaMessageCommon_CreatorSuccessInfoDecoder.encode(message.creatorSuccessInfo, writer.uint32(50).fork()).join();
    }
    if (message.portraitInfo !== undefined) {
      PublicAreaMessageCommon_PortraitInfoDecoder.encode(message.portraitInfo, writer.uint32(58).fork()).join();
    }
    if (message.userInteractionInfo !== undefined) {
      PublicAreaMessageCommon_UserInteractionInfoDecoder.encode(message.userInteractionInfo, writer.uint32(66).fork()).join();
    }
    if (message.adminFoldType !== "0") {
      writer.uint32(72).int64(message.adminFoldType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.scrollGapCount = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.anchorScrollGapCount = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.releaseToScrollArea = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.anchorReleaseToScrollArea = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isAnchorMarked = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creatorSuccessInfo = PublicAreaMessageCommon_CreatorSuccessInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.portraitInfo = PublicAreaMessageCommon_PortraitInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.userInteractionInfo = PublicAreaMessageCommon_UserInteractionInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.adminFoldType = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon {
    return {
      scrollGapCount: isSet(object.scrollGapCount) ? globalThis.String(object.scrollGapCount) : "0",
      anchorScrollGapCount: isSet(object.anchorScrollGapCount) ? globalThis.String(object.anchorScrollGapCount) : "0",
      releaseToScrollArea: isSet(object.releaseToScrollArea) ? globalThis.Boolean(object.releaseToScrollArea) : false,
      anchorReleaseToScrollArea: isSet(object.anchorReleaseToScrollArea)
        ? globalThis.Boolean(object.anchorReleaseToScrollArea)
        : false,
      isAnchorMarked: isSet(object.isAnchorMarked) ? globalThis.Boolean(object.isAnchorMarked) : false,
      creatorSuccessInfo: isSet(object.creatorSuccessInfo)
        ? PublicAreaMessageCommon_CreatorSuccessInfo.fromJSON(object.creatorSuccessInfo)
        : undefined,
      portraitInfo: isSet(object.portraitInfo)
        ? PublicAreaMessageCommon_PortraitInfo.fromJSON(object.portraitInfo)
        : undefined,
      userInteractionInfo: isSet(object.userInteractionInfo)
        ? PublicAreaMessageCommon_UserInteractionInfo.fromJSON(object.userInteractionInfo)
        : undefined,
      adminFoldType: isSet(object.adminFoldType) ? globalThis.String(object.adminFoldType) : "0",
    };
  },

  toJSON(message: PublicAreaMessageCommon): unknown {
    const obj: any = {};
    if (message.scrollGapCount !== "0") {
      obj.scrollGapCount = message.scrollGapCount;
    }
    if (message.anchorScrollGapCount !== "0") {
      obj.anchorScrollGapCount = message.anchorScrollGapCount;
    }
    if (message.releaseToScrollArea !== false) {
      obj.releaseToScrollArea = message.releaseToScrollArea;
    }
    if (message.anchorReleaseToScrollArea !== false) {
      obj.anchorReleaseToScrollArea = message.anchorReleaseToScrollArea;
    }
    if (message.isAnchorMarked !== false) {
      obj.isAnchorMarked = message.isAnchorMarked;
    }
    if (message.creatorSuccessInfo !== undefined) {
      obj.creatorSuccessInfo = PublicAreaMessageCommon_CreatorSuccessInfo.toJSON(message.creatorSuccessInfo);
    }
    if (message.portraitInfo !== undefined) {
      obj.portraitInfo = PublicAreaMessageCommon_PortraitInfo.toJSON(message.portraitInfo);
    }
    if (message.userInteractionInfo !== undefined) {
      obj.userInteractionInfo = PublicAreaMessageCommon_UserInteractionInfo.toJSON(message.userInteractionInfo);
    }
    if (message.adminFoldType !== "0") {
      obj.adminFoldType = message.adminFoldType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon>, I>>(base?: I): PublicAreaMessageCommon {
    return PublicAreaMessageCommon.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon>, I>>(object: I): PublicAreaMessageCommon {
    const message = createBasePublicAreaMessageCommon();
    message.scrollGapCount = object.scrollGapCount ?? "0";
    message.anchorScrollGapCount = object.anchorScrollGapCount ?? "0";
    message.releaseToScrollArea = object.releaseToScrollArea ?? false;
    message.anchorReleaseToScrollArea = object.anchorReleaseToScrollArea ?? false;
    message.isAnchorMarked = object.isAnchorMarked ?? false;
    message.creatorSuccessInfo = (object.creatorSuccessInfo !== undefined && object.creatorSuccessInfo !== null)
      ? PublicAreaMessageCommon_CreatorSuccessInfo.fromPartial(object.creatorSuccessInfo)
      : undefined;
    message.portraitInfo = (object.portraitInfo !== undefined && object.portraitInfo !== null)
      ? PublicAreaMessageCommon_PortraitInfo.fromPartial(object.portraitInfo)
      : undefined;
    message.userInteractionInfo = (object.userInteractionInfo !== undefined && object.userInteractionInfo !== null)
      ? PublicAreaMessageCommon_UserInteractionInfo.fromPartial(object.userInteractionInfo)
      : undefined;
    message.adminFoldType = object.adminFoldType ?? "0";
    return message;
  },
};

function createBasePublicAreaMessageCommon_TagItem(): PublicAreaMessageCommon_TagItem {
  return { tagType: 0, tagText: undefined };
}

export const PublicAreaMessageCommon_TagItemDecoder: MessageFns<PublicAreaMessageCommon_TagItem> = {
  encode(message: PublicAreaMessageCommon_TagItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagType !== 0) {
      writer.uint32(8).int32(message.tagType);
    }
    if (message.tagText !== undefined) {
      TextDecoder.encode(message.tagText, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon_TagItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon_TagItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tagType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tagText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon_TagItem {
    return {
      tagType: isSet(object.tagType) ? tagTypeFromJSON(object.tagType) : 0,
      tagText: isSet(object.tagText) ? Text.fromJSON(object.tagText) : undefined,
    };
  },

  toJSON(message: PublicAreaMessageCommon_TagItem): unknown {
    const obj: any = {};
    if (message.tagType !== 0) {
      obj.tagType = tagTypeToJSON(message.tagType);
    }
    if (message.tagText !== undefined) {
      obj.tagText = Text.toJSON(message.tagText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon_TagItem>, I>>(base?: I): PublicAreaMessageCommon_TagItem {
    return PublicAreaMessageCommon_TagItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon_TagItem>, I>>(
    object: I,
  ): PublicAreaMessageCommon_TagItem {
    const message = createBasePublicAreaMessageCommon_TagItem();
    message.tagType = object.tagType ?? 0;
    message.tagText = (object.tagText !== undefined && object.tagText !== null)
      ? Text.fromPartial(object.tagText)
      : undefined;
    return message;
  },
};

function createBasePublicAreaMessageCommon_Topic(): PublicAreaMessageCommon_Topic {
  return { topicActionType: 0, topicText: undefined, topicTips: undefined };
}

export const PublicAreaMessageCommon_TopicDecoder: MessageFns<PublicAreaMessageCommon_Topic> = {
  encode(message: PublicAreaMessageCommon_Topic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicActionType !== 0) {
      writer.uint32(8).int32(message.topicActionType);
    }
    if (message.topicText !== undefined) {
      TextDecoder.encode(message.topicText, writer.uint32(18).fork()).join();
    }
    if (message.topicTips !== undefined) {
      TextDecoder.encode(message.topicTips, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon_Topic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon_Topic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.topicActionType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.topicText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.topicTips = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon_Topic {
    return {
      topicActionType: isSet(object.topicActionType) ? topicActionTypeFromJSON(object.topicActionType) : 0,
      topicText: isSet(object.topicText) ? Text.fromJSON(object.topicText) : undefined,
      topicTips: isSet(object.topicTips) ? Text.fromJSON(object.topicTips) : undefined,
    };
  },

  toJSON(message: PublicAreaMessageCommon_Topic): unknown {
    const obj: any = {};
    if (message.topicActionType !== 0) {
      obj.topicActionType = topicActionTypeToJSON(message.topicActionType);
    }
    if (message.topicText !== undefined) {
      obj.topicText = Text.toJSON(message.topicText);
    }
    if (message.topicTips !== undefined) {
      obj.topicTips = Text.toJSON(message.topicTips);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon_Topic>, I>>(base?: I): PublicAreaMessageCommon_Topic {
    return PublicAreaMessageCommon_Topic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon_Topic>, I>>(
    object: I,
  ): PublicAreaMessageCommon_Topic {
    const message = createBasePublicAreaMessageCommon_Topic();
    message.topicActionType = object.topicActionType ?? 0;
    message.topicText = (object.topicText !== undefined && object.topicText !== null)
      ? Text.fromPartial(object.topicText)
      : undefined;
    message.topicTips = (object.topicTips !== undefined && object.topicTips !== null)
      ? Text.fromPartial(object.topicTips)
      : undefined;
    return message;
  },
};

function createBasePublicAreaMessageCommon_CreatorSuccessInfo(): PublicAreaMessageCommon_CreatorSuccessInfo {
  return { tags: [], topic: undefined };
}

export const PublicAreaMessageCommon_CreatorSuccessInfoDecoder: MessageFns<PublicAreaMessageCommon_CreatorSuccessInfo> = {
  encode(message: PublicAreaMessageCommon_CreatorSuccessInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tags) {
      PublicAreaMessageCommon_TagItemDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.topic !== undefined) {
      PublicAreaMessageCommon_TopicDecoder.encode(message.topic, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon_CreatorSuccessInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon_CreatorSuccessInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tags.push(PublicAreaMessageCommon_TagItemDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.topic = PublicAreaMessageCommon_TopicDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon_CreatorSuccessInfo {
    return {
      tags: globalThis.Array.isArray(object?.tags)
        ? object.tags.map((e: any) => PublicAreaMessageCommon_TagItem.fromJSON(e))
        : [],
      topic: isSet(object.topic) ? PublicAreaMessageCommon_Topic.fromJSON(object.topic) : undefined,
    };
  },

  toJSON(message: PublicAreaMessageCommon_CreatorSuccessInfo): unknown {
    const obj: any = {};
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => PublicAreaMessageCommon_TagItem.toJSON(e));
    }
    if (message.topic !== undefined) {
      obj.topic = PublicAreaMessageCommon_Topic.toJSON(message.topic);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon_CreatorSuccessInfo>, I>>(
    base?: I,
  ): PublicAreaMessageCommon_CreatorSuccessInfo {
    return PublicAreaMessageCommon_CreatorSuccessInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon_CreatorSuccessInfo>, I>>(
    object: I,
  ): PublicAreaMessageCommon_CreatorSuccessInfo {
    const message = createBasePublicAreaMessageCommon_CreatorSuccessInfo();
    message.tags = object.tags?.map((e) => PublicAreaMessageCommon_TagItem.fromPartial(e)) || [];
    message.topic = (object.topic !== undefined && object.topic !== null)
      ? PublicAreaMessageCommon_Topic.fromPartial(object.topic)
      : undefined;
    return message;
  },
};

function createBasePublicAreaMessageCommon_UserMetrics(): PublicAreaMessageCommon_UserMetrics {
  return { type: 0, metricsValue: "" };
}

export const PublicAreaMessageCommon_UserMetricsDecoder: MessageFns<PublicAreaMessageCommon_UserMetrics> = {
  encode(message: PublicAreaMessageCommon_UserMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.metricsValue !== "") {
      writer.uint32(18).string(message.metricsValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon_UserMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon_UserMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metricsValue = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon_UserMetrics {
    return {
      type: isSet(object.type) ? userMetricsTypeFromJSON(object.type) : 0,
      metricsValue: isSet(object.metricsValue) ? globalThis.String(object.metricsValue) : "",
    };
  },

  toJSON(message: PublicAreaMessageCommon_UserMetrics): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = userMetricsTypeToJSON(message.type);
    }
    if (message.metricsValue !== "") {
      obj.metricsValue = message.metricsValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon_UserMetrics>, I>>(
    base?: I,
  ): PublicAreaMessageCommon_UserMetrics {
    return PublicAreaMessageCommon_UserMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon_UserMetrics>, I>>(
    object: I,
  ): PublicAreaMessageCommon_UserMetrics {
    const message = createBasePublicAreaMessageCommon_UserMetrics();
    message.type = object.type ?? 0;
    message.metricsValue = object.metricsValue ?? "";
    return message;
  },
};

function createBasePublicAreaMessageCommon_PortraitTag(): PublicAreaMessageCommon_PortraitTag {
  return { tagId: "", priority: "0", showValue: "", showArgs: "" };
}

export const PublicAreaMessageCommon_PortraitTagDecoder: MessageFns<PublicAreaMessageCommon_PortraitTag> = {
  encode(message: PublicAreaMessageCommon_PortraitTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagId !== "") {
      writer.uint32(10).string(message.tagId);
    }
    if (message.priority !== "0") {
      writer.uint32(16).int64(message.priority);
    }
    if (message.showValue !== "") {
      writer.uint32(26).string(message.showValue);
    }
    if (message.showArgs !== "") {
      writer.uint32(34).string(message.showArgs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon_PortraitTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon_PortraitTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tagId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.priority = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.showValue = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.showArgs = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon_PortraitTag {
    return {
      tagId: isSet(object.tagId) ? globalThis.String(object.tagId) : "",
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "0",
      showValue: isSet(object.showValue) ? globalThis.String(object.showValue) : "",
      showArgs: isSet(object.showArgs) ? globalThis.String(object.showArgs) : "",
    };
  },

  toJSON(message: PublicAreaMessageCommon_PortraitTag): unknown {
    const obj: any = {};
    if (message.tagId !== "") {
      obj.tagId = message.tagId;
    }
    if (message.priority !== "0") {
      obj.priority = message.priority;
    }
    if (message.showValue !== "") {
      obj.showValue = message.showValue;
    }
    if (message.showArgs !== "") {
      obj.showArgs = message.showArgs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon_PortraitTag>, I>>(
    base?: I,
  ): PublicAreaMessageCommon_PortraitTag {
    return PublicAreaMessageCommon_PortraitTag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon_PortraitTag>, I>>(
    object: I,
  ): PublicAreaMessageCommon_PortraitTag {
    const message = createBasePublicAreaMessageCommon_PortraitTag();
    message.tagId = object.tagId ?? "";
    message.priority = object.priority ?? "0";
    message.showValue = object.showValue ?? "";
    message.showArgs = object.showArgs ?? "";
    return message;
  },
};

function createBasePublicAreaMessageCommon_PortraitInfo(): PublicAreaMessageCommon_PortraitInfo {
  return { userMetrics: [], portraitTag: [] };
}

export const PublicAreaMessageCommon_PortraitInfoDecoder: MessageFns<PublicAreaMessageCommon_PortraitInfo> = {
  encode(message: PublicAreaMessageCommon_PortraitInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userMetrics) {
      PublicAreaMessageCommon_UserMetricsDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.portraitTag) {
      PublicAreaMessageCommon_PortraitTagDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon_PortraitInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon_PortraitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userMetrics.push(PublicAreaMessageCommon_UserMetricsDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.portraitTag.push(PublicAreaMessageCommon_PortraitTagDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon_PortraitInfo {
    return {
      userMetrics: globalThis.Array.isArray(object?.userMetrics)
        ? object.userMetrics.map((e: any) => PublicAreaMessageCommon_UserMetrics.fromJSON(e))
        : [],
      portraitTag: globalThis.Array.isArray(object?.portraitTag)
        ? object.portraitTag.map((e: any) => PublicAreaMessageCommon_PortraitTag.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PublicAreaMessageCommon_PortraitInfo): unknown {
    const obj: any = {};
    if (message.userMetrics?.length) {
      obj.userMetrics = message.userMetrics.map((e) => PublicAreaMessageCommon_UserMetrics.toJSON(e));
    }
    if (message.portraitTag?.length) {
      obj.portraitTag = message.portraitTag.map((e) => PublicAreaMessageCommon_PortraitTag.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon_PortraitInfo>, I>>(
    base?: I,
  ): PublicAreaMessageCommon_PortraitInfo {
    return PublicAreaMessageCommon_PortraitInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon_PortraitInfo>, I>>(
    object: I,
  ): PublicAreaMessageCommon_PortraitInfo {
    const message = createBasePublicAreaMessageCommon_PortraitInfo();
    message.userMetrics = object.userMetrics?.map((e) => PublicAreaMessageCommon_UserMetrics.fromPartial(e)) || [];
    message.portraitTag = object.portraitTag?.map((e) => PublicAreaMessageCommon_PortraitTag.fromPartial(e)) || [];
    return message;
  },
};

function createBasePublicAreaMessageCommon_UserInteractionInfo(): PublicAreaMessageCommon_UserInteractionInfo {
  return { likeCnt: "0", commentCnt: "0", shareCnt: "0" };
}

export const PublicAreaMessageCommon_UserInteractionInfoDecoder: MessageFns<PublicAreaMessageCommon_UserInteractionInfo> = {
  encode(
    message: PublicAreaMessageCommon_UserInteractionInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.likeCnt !== "0") {
      writer.uint32(8).int64(message.likeCnt);
    }
    if (message.commentCnt !== "0") {
      writer.uint32(16).int64(message.commentCnt);
    }
    if (message.shareCnt !== "0") {
      writer.uint32(24).int64(message.shareCnt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAreaMessageCommon_UserInteractionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAreaMessageCommon_UserInteractionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.likeCnt = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.commentCnt = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.shareCnt = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAreaMessageCommon_UserInteractionInfo {
    return {
      likeCnt: isSet(object.likeCnt) ? globalThis.String(object.likeCnt) : "0",
      commentCnt: isSet(object.commentCnt) ? globalThis.String(object.commentCnt) : "0",
      shareCnt: isSet(object.shareCnt) ? globalThis.String(object.shareCnt) : "0",
    };
  },

  toJSON(message: PublicAreaMessageCommon_UserInteractionInfo): unknown {
    const obj: any = {};
    if (message.likeCnt !== "0") {
      obj.likeCnt = message.likeCnt;
    }
    if (message.commentCnt !== "0") {
      obj.commentCnt = message.commentCnt;
    }
    if (message.shareCnt !== "0") {
      obj.shareCnt = message.shareCnt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAreaMessageCommon_UserInteractionInfo>, I>>(
    base?: I,
  ): PublicAreaMessageCommon_UserInteractionInfo {
    return PublicAreaMessageCommon_UserInteractionInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAreaMessageCommon_UserInteractionInfo>, I>>(
    object: I,
  ): PublicAreaMessageCommon_UserInteractionInfo {
    const message = createBasePublicAreaMessageCommon_UserInteractionInfo();
    message.likeCnt = object.likeCnt ?? "0";
    message.commentCnt = object.commentCnt ?? "0";
    message.shareCnt = object.shareCnt ?? "0";
    return message;
  },
};

function createBaseGiftModeMeta(): GiftModeMeta {
  return { giftId: "0", giftNameKey: "", giftIconImage: undefined, giftModeDesc: undefined };
}

export const GiftModeMetaDecoder: MessageFns<GiftModeMeta> = {
  encode(message: GiftModeMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftId !== "0") {
      writer.uint32(8).int64(message.giftId);
    }
    if (message.giftNameKey !== "") {
      writer.uint32(18).string(message.giftNameKey);
    }
    if (message.giftIconImage !== undefined) {
      ImageDecoder.encode(message.giftIconImage, writer.uint32(26).fork()).join();
    }
    if (message.giftModeDesc !== undefined) {
      TextDecoder.encode(message.giftModeDesc, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GiftModeMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGiftModeMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.giftNameKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.giftIconImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.giftModeDesc = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GiftModeMeta {
    return {
      giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "0",
      giftNameKey: isSet(object.giftNameKey) ? globalThis.String(object.giftNameKey) : "",
      giftIconImage: isSet(object.giftIconImage) ? Image.fromJSON(object.giftIconImage) : undefined,
      giftModeDesc: isSet(object.giftModeDesc) ? Text.fromJSON(object.giftModeDesc) : undefined,
    };
  },

  toJSON(message: GiftModeMeta): unknown {
    const obj: any = {};
    if (message.giftId !== "0") {
      obj.giftId = message.giftId;
    }
    if (message.giftNameKey !== "") {
      obj.giftNameKey = message.giftNameKey;
    }
    if (message.giftIconImage !== undefined) {
      obj.giftIconImage = Image.toJSON(message.giftIconImage);
    }
    if (message.giftModeDesc !== undefined) {
      obj.giftModeDesc = Text.toJSON(message.giftModeDesc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GiftModeMeta>, I>>(base?: I): GiftModeMeta {
    return GiftModeMeta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GiftModeMeta>, I>>(object: I): GiftModeMeta {
    const message = createBaseGiftModeMeta();
    message.giftId = object.giftId ?? "0";
    message.giftNameKey = object.giftNameKey ?? "";
    message.giftIconImage = (object.giftIconImage !== undefined && object.giftIconImage !== null)
      ? Image.fromPartial(object.giftIconImage)
      : undefined;
    message.giftModeDesc = (object.giftModeDesc !== undefined && object.giftModeDesc !== null)
      ? Text.fromPartial(object.giftModeDesc)
      : undefined;
    return message;
  },
};

function createBaseBattleTeamUser(): BattleTeamUser {
  return { userId: "0", score: "0", userIdStr: "" };
}

export const BattleTeamUserDecoder: MessageFns<BattleTeamUser> = {
  encode(message: BattleTeamUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.score !== "0") {
      writer.uint32(16).int64(message.score);
    }
    if (message.userIdStr !== "") {
      writer.uint32(26).string(message.userIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleTeamUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleTeamUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleTeamUser {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      score: isSet(object.score) ? globalThis.String(object.score) : "0",
      userIdStr: isSet(object.userIdStr) ? globalThis.String(object.userIdStr) : "",
    };
  },

  toJSON(message: BattleTeamUser): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.score !== "0") {
      obj.score = message.score;
    }
    if (message.userIdStr !== "") {
      obj.userIdStr = message.userIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleTeamUser>, I>>(base?: I): BattleTeamUser {
    return BattleTeamUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleTeamUser>, I>>(object: I): BattleTeamUser {
    const message = createBaseBattleTeamUser();
    message.userId = object.userId ?? "0";
    message.score = object.score ?? "0";
    message.userIdStr = object.userIdStr ?? "";
    return message;
  },
};

function createBaseBattleSetting(): BattleSetting {
  return {
    battleId: "0",
    startTimeMs: "0",
    duration: 0,
    channelId: "0",
    status: 0,
    inviteType: 0,
    giftModeMeta: undefined,
    battleType: 0,
    extraDurationSecond: "0",
    endTimeMs: "0",
  };
}

export const BattleSettingDecoder: MessageFns<BattleSetting> = {
  encode(message: BattleSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.battleId !== "0") {
      writer.uint32(8).int64(message.battleId);
    }
    if (message.startTimeMs !== "0") {
      writer.uint32(16).int64(message.startTimeMs);
    }
    if (message.duration !== 0) {
      writer.uint32(24).int32(message.duration);
    }
    if (message.channelId !== "0") {
      writer.uint32(32).int64(message.channelId);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.inviteType !== 0) {
      writer.uint32(48).int32(message.inviteType);
    }
    if (message.giftModeMeta !== undefined) {
      GiftModeMetaDecoder.encode(message.giftModeMeta, writer.uint32(58).fork()).join();
    }
    if (message.battleType !== 0) {
      writer.uint32(64).int32(message.battleType);
    }
    if (message.extraDurationSecond !== "0") {
      writer.uint32(72).int64(message.extraDurationSecond);
    }
    if (message.endTimeMs !== "0") {
      writer.uint32(80).int64(message.endTimeMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.battleId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startTimeMs = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.channelId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.inviteType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.giftModeMeta = GiftModeMetaDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.battleType = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.extraDurationSecond = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.endTimeMs = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleSetting {
    return {
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "0",
      startTimeMs: isSet(object.startTimeMs) ? globalThis.String(object.startTimeMs) : "0",
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "0",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      inviteType: isSet(object.inviteType) ? battleInviteTypeFromJSON(object.inviteType) : 0,
      giftModeMeta: isSet(object.giftModeMeta) ? GiftModeMeta.fromJSON(object.giftModeMeta) : undefined,
      battleType: isSet(object.battleType) ? battleTypeFromJSON(object.battleType) : 0,
      extraDurationSecond: isSet(object.extraDurationSecond) ? globalThis.String(object.extraDurationSecond) : "0",
      endTimeMs: isSet(object.endTimeMs) ? globalThis.String(object.endTimeMs) : "0",
    };
  },

  toJSON(message: BattleSetting): unknown {
    const obj: any = {};
    if (message.battleId !== "0") {
      obj.battleId = message.battleId;
    }
    if (message.startTimeMs !== "0") {
      obj.startTimeMs = message.startTimeMs;
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.channelId !== "0") {
      obj.channelId = message.channelId;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.inviteType !== 0) {
      obj.inviteType = battleInviteTypeToJSON(message.inviteType);
    }
    if (message.giftModeMeta !== undefined) {
      obj.giftModeMeta = GiftModeMeta.toJSON(message.giftModeMeta);
    }
    if (message.battleType !== 0) {
      obj.battleType = battleTypeToJSON(message.battleType);
    }
    if (message.extraDurationSecond !== "0") {
      obj.extraDurationSecond = message.extraDurationSecond;
    }
    if (message.endTimeMs !== "0") {
      obj.endTimeMs = message.endTimeMs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleSetting>, I>>(base?: I): BattleSetting {
    return BattleSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleSetting>, I>>(object: I): BattleSetting {
    const message = createBaseBattleSetting();
    message.battleId = object.battleId ?? "0";
    message.startTimeMs = object.startTimeMs ?? "0";
    message.duration = object.duration ?? 0;
    message.channelId = object.channelId ?? "0";
    message.status = object.status ?? 0;
    message.inviteType = object.inviteType ?? 0;
    message.giftModeMeta = (object.giftModeMeta !== undefined && object.giftModeMeta !== null)
      ? GiftModeMeta.fromPartial(object.giftModeMeta)
      : undefined;
    message.battleType = object.battleType ?? 0;
    message.extraDurationSecond = object.extraDurationSecond ?? "0";
    message.endTimeMs = object.endTimeMs ?? "0";
    return message;
  },
};

function createBaseBattleTeamUserArmies(): BattleTeamUserArmies {
  return { teamId: "0", teamUsers: [], teamTotalScore: "0", userArmies: undefined, hostRank: "0" };
}

export const BattleTeamUserArmiesDecoder: MessageFns<BattleTeamUserArmies> = {
  encode(message: BattleTeamUserArmies, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "0") {
      writer.uint32(8).int64(message.teamId);
    }
    for (const v of message.teamUsers) {
      BattleTeamUserDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.teamTotalScore !== "0") {
      writer.uint32(24).int64(message.teamTotalScore);
    }
    if (message.userArmies !== undefined) {
      BattleUserArmiesDecoder.encode(message.userArmies, writer.uint32(34).fork()).join();
    }
    if (message.hostRank !== "0") {
      writer.uint32(40).int64(message.hostRank);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleTeamUserArmies {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleTeamUserArmies();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.teamId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.teamUsers.push(BattleTeamUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.teamTotalScore = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userArmies = BattleUserArmiesDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hostRank = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleTeamUserArmies {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "0",
      teamUsers: globalThis.Array.isArray(object?.teamUsers)
        ? object.teamUsers.map((e: any) => BattleTeamUser.fromJSON(e))
        : [],
      teamTotalScore: isSet(object.teamTotalScore) ? globalThis.String(object.teamTotalScore) : "0",
      userArmies: isSet(object.userArmies) ? BattleUserArmies.fromJSON(object.userArmies) : undefined,
      hostRank: isSet(object.hostRank) ? globalThis.String(object.hostRank) : "0",
    };
  },

  toJSON(message: BattleTeamUserArmies): unknown {
    const obj: any = {};
    if (message.teamId !== "0") {
      obj.teamId = message.teamId;
    }
    if (message.teamUsers?.length) {
      obj.teamUsers = message.teamUsers.map((e) => BattleTeamUser.toJSON(e));
    }
    if (message.teamTotalScore !== "0") {
      obj.teamTotalScore = message.teamTotalScore;
    }
    if (message.userArmies !== undefined) {
      obj.userArmies = BattleUserArmies.toJSON(message.userArmies);
    }
    if (message.hostRank !== "0") {
      obj.hostRank = message.hostRank;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleTeamUserArmies>, I>>(base?: I): BattleTeamUserArmies {
    return BattleTeamUserArmies.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleTeamUserArmies>, I>>(object: I): BattleTeamUserArmies {
    const message = createBaseBattleTeamUserArmies();
    message.teamId = object.teamId ?? "0";
    message.teamUsers = object.teamUsers?.map((e) => BattleTeamUser.fromPartial(e)) || [];
    message.teamTotalScore = object.teamTotalScore ?? "0";
    message.userArmies = (object.userArmies !== undefined && object.userArmies !== null)
      ? BattleUserArmies.fromPartial(object.userArmies)
      : undefined;
    message.hostRank = object.hostRank ?? "0";
    return message;
  },
};

function createBaseBattleUserArmies(): BattleUserArmies {
  return { userArmy: [], hostScore: "0", anchorIdStr: "" };
}

export const BattleUserArmiesDecoder: MessageFns<BattleUserArmies> = {
  encode(message: BattleUserArmies, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userArmy) {
      BattleUserArmyDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.hostScore !== "0") {
      writer.uint32(16).int64(message.hostScore);
    }
    if (message.anchorIdStr !== "") {
      writer.uint32(26).string(message.anchorIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleUserArmies {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleUserArmies();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userArmy.push(BattleUserArmyDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hostScore = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.anchorIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleUserArmies {
    return {
      userArmy: globalThis.Array.isArray(object?.userArmy)
        ? object.userArmy.map((e: any) => BattleUserArmy.fromJSON(e))
        : [],
      hostScore: isSet(object.hostScore) ? globalThis.String(object.hostScore) : "0",
      anchorIdStr: isSet(object.anchorIdStr) ? globalThis.String(object.anchorIdStr) : "",
    };
  },

  toJSON(message: BattleUserArmies): unknown {
    const obj: any = {};
    if (message.userArmy?.length) {
      obj.userArmy = message.userArmy.map((e) => BattleUserArmy.toJSON(e));
    }
    if (message.hostScore !== "0") {
      obj.hostScore = message.hostScore;
    }
    if (message.anchorIdStr !== "") {
      obj.anchorIdStr = message.anchorIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleUserArmies>, I>>(base?: I): BattleUserArmies {
    return BattleUserArmies.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleUserArmies>, I>>(object: I): BattleUserArmies {
    const message = createBaseBattleUserArmies();
    message.userArmy = object.userArmy?.map((e) => BattleUserArmy.fromPartial(e)) || [];
    message.hostScore = object.hostScore ?? "0";
    message.anchorIdStr = object.anchorIdStr ?? "";
    return message;
  },
};

function createBaseBattleUserArmy(): BattleUserArmy {
  return { userId: "0", score: "0", nickname: "", avatarThumb: undefined, diamondScore: "0", userIdStr: "" };
}

export const BattleUserArmyDecoder: MessageFns<BattleUserArmy> = {
  encode(message: BattleUserArmy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.score !== "0") {
      writer.uint32(16).int64(message.score);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.avatarThumb !== undefined) {
      ImageDecoder.encode(message.avatarThumb, writer.uint32(34).fork()).join();
    }
    if (message.diamondScore !== "0") {
      writer.uint32(40).int64(message.diamondScore);
    }
    if (message.userIdStr !== "") {
      writer.uint32(50).string(message.userIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleUserArmy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleUserArmy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.avatarThumb = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.diamondScore = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BattleUserArmy {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      score: isSet(object.score) ? globalThis.String(object.score) : "0",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      avatarThumb: isSet(object.avatarThumb) ? Image.fromJSON(object.avatarThumb) : undefined,
      diamondScore: isSet(object.diamondScore) ? globalThis.String(object.diamondScore) : "0",
      userIdStr: isSet(object.userIdStr) ? globalThis.String(object.userIdStr) : "",
    };
  },

  toJSON(message: BattleUserArmy): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.score !== "0") {
      obj.score = message.score;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.avatarThumb !== undefined) {
      obj.avatarThumb = Image.toJSON(message.avatarThumb);
    }
    if (message.diamondScore !== "0") {
      obj.diamondScore = message.diamondScore;
    }
    if (message.userIdStr !== "") {
      obj.userIdStr = message.userIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BattleUserArmy>, I>>(base?: I): BattleUserArmy {
    return BattleUserArmy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BattleUserArmy>, I>>(object: I): BattleUserArmy {
    const message = createBaseBattleUserArmy();
    message.userId = object.userId ?? "0";
    message.score = object.score ?? "0";
    message.nickname = object.nickname ?? "";
    message.avatarThumb = (object.avatarThumb !== undefined && object.avatarThumb !== null)
      ? Image.fromPartial(object.avatarThumb)
      : undefined;
    message.diamondScore = object.diamondScore ?? "0";
    message.userIdStr = object.userIdStr ?? "";
    return message;
  },
};

function createBaseHighScoreControlCfg(): HighScoreControlCfg {
  return { normalControlApplied: false, threshold: "0", originDisplayToUserList: [] };
}

export const HighScoreControlCfgDecoder: MessageFns<HighScoreControlCfg> = {
  encode(message: HighScoreControlCfg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.normalControlApplied !== false) {
      writer.uint32(8).bool(message.normalControlApplied);
    }
    if (message.threshold !== "0") {
      writer.uint32(16).int64(message.threshold);
    }
    writer.uint32(26).fork();
    for (const v of message.originDisplayToUserList) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HighScoreControlCfg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHighScoreControlCfg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.normalControlApplied = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.threshold = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.originDisplayToUserList.push(reader.int64().toString());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.originDisplayToUserList.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HighScoreControlCfg {
    return {
      normalControlApplied: isSet(object.normalControlApplied)
        ? globalThis.Boolean(object.normalControlApplied)
        : false,
      threshold: isSet(object.threshold) ? globalThis.String(object.threshold) : "0",
      originDisplayToUserList: globalThis.Array.isArray(object?.originDisplayToUserList)
        ? object.originDisplayToUserList.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: HighScoreControlCfg): unknown {
    const obj: any = {};
    if (message.normalControlApplied !== false) {
      obj.normalControlApplied = message.normalControlApplied;
    }
    if (message.threshold !== "0") {
      obj.threshold = message.threshold;
    }
    if (message.originDisplayToUserList?.length) {
      obj.originDisplayToUserList = message.originDisplayToUserList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HighScoreControlCfg>, I>>(base?: I): HighScoreControlCfg {
    return HighScoreControlCfg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HighScoreControlCfg>, I>>(object: I): HighScoreControlCfg {
    const message = createBaseHighScoreControlCfg();
    message.normalControlApplied = object.normalControlApplied ?? false;
    message.threshold = object.threshold ?? "0";
    message.originDisplayToUserList = object.originDisplayToUserList?.map((e) => e) || [];
    return message;
  },
};

function createBaseMessage(): Message {
  return { type: "", binary: new Uint8Array(0) };
}

export const MessageDecoder: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.binary.length !== 0) {
      writer.uint32(18).bytes(message.binary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.binary = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      binary: isSet(object.binary) ? bytesFromBase64(object.binary) : new Uint8Array(0),
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.binary.length !== 0) {
      obj.binary = base64FromBytes(message.binary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.type = object.type ?? "";
    message.binary = object.binary ?? new Uint8Array(0);
    return message;
  },
};

function createBaseWebsocketParam(): WebsocketParam {
  return { name: "", value: "" };
}

export const WebsocketParamDecoder: MessageFns<WebsocketParam> = {
  encode(message: WebsocketParam, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebsocketParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebsocketParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebsocketParam {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WebsocketParam): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebsocketParam>, I>>(base?: I): WebsocketParam {
    return WebsocketParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebsocketParam>, I>>(object: I): WebsocketParam {
    const message = createBaseWebsocketParam();
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseWebcastRoomUserSeqMessage(): WebcastRoomUserSeqMessage {
  return {
    common: undefined,
    viewerCount: 0,
    ranksList: [],
    popStr: "",
    seatsList: [],
    popularity: "0",
    totalUser: 0,
    anonymous: "0",
  };
}

export const WebcastRoomUserSeqMessageDecoder: MessageFns<WebcastRoomUserSeqMessage> = {
  encode(message: WebcastRoomUserSeqMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.viewerCount !== 0) {
      writer.uint32(24).int32(message.viewerCount);
    }
    for (const v of message.ranksList) {
      WebcastRoomUserSeqMessage_ContributorDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.popStr !== "") {
      writer.uint32(34).string(message.popStr);
    }
    for (const v of message.seatsList) {
      WebcastRoomUserSeqMessage_ContributorDecoder.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.popularity !== "0") {
      writer.uint32(48).int64(message.popularity);
    }
    if (message.totalUser !== 0) {
      writer.uint32(56).int32(message.totalUser);
    }
    if (message.anonymous !== "0") {
      writer.uint32(64).int64(message.anonymous);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRoomUserSeqMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRoomUserSeqMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.viewerCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ranksList.push(WebcastRoomUserSeqMessage_ContributorDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.popStr = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.seatsList.push(WebcastRoomUserSeqMessage_ContributorDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.popularity = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.totalUser = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.anonymous = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRoomUserSeqMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      viewerCount: isSet(object.viewerCount) ? globalThis.Number(object.viewerCount) : 0,
      ranksList: globalThis.Array.isArray(object?.ranksList)
        ? object.ranksList.map((e: any) => WebcastRoomUserSeqMessage_Contributor.fromJSON(e))
        : [],
      popStr: isSet(object.popStr) ? globalThis.String(object.popStr) : "",
      seatsList: globalThis.Array.isArray(object?.seatsList)
        ? object.seatsList.map((e: any) => WebcastRoomUserSeqMessage_Contributor.fromJSON(e))
        : [],
      popularity: isSet(object.popularity) ? globalThis.String(object.popularity) : "0",
      totalUser: isSet(object.totalUser) ? globalThis.Number(object.totalUser) : 0,
      anonymous: isSet(object.anonymous) ? globalThis.String(object.anonymous) : "0",
    };
  },

  toJSON(message: WebcastRoomUserSeqMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.viewerCount !== 0) {
      obj.viewerCount = Math.round(message.viewerCount);
    }
    if (message.ranksList?.length) {
      obj.ranksList = message.ranksList.map((e) => WebcastRoomUserSeqMessage_Contributor.toJSON(e));
    }
    if (message.popStr !== "") {
      obj.popStr = message.popStr;
    }
    if (message.seatsList?.length) {
      obj.seatsList = message.seatsList.map((e) => WebcastRoomUserSeqMessage_Contributor.toJSON(e));
    }
    if (message.popularity !== "0") {
      obj.popularity = message.popularity;
    }
    if (message.totalUser !== 0) {
      obj.totalUser = Math.round(message.totalUser);
    }
    if (message.anonymous !== "0") {
      obj.anonymous = message.anonymous;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRoomUserSeqMessage>, I>>(base?: I): WebcastRoomUserSeqMessage {
    return WebcastRoomUserSeqMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRoomUserSeqMessage>, I>>(object: I): WebcastRoomUserSeqMessage {
    const message = createBaseWebcastRoomUserSeqMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.viewerCount = object.viewerCount ?? 0;
    message.ranksList = object.ranksList?.map((e) => WebcastRoomUserSeqMessage_Contributor.fromPartial(e)) || [];
    message.popStr = object.popStr ?? "";
    message.seatsList = object.seatsList?.map((e) => WebcastRoomUserSeqMessage_Contributor.fromPartial(e)) || [];
    message.popularity = object.popularity ?? "0";
    message.totalUser = object.totalUser ?? 0;
    message.anonymous = object.anonymous ?? "0";
    return message;
  },
};

function createBaseWebcastRoomUserSeqMessage_Contributor(): WebcastRoomUserSeqMessage_Contributor {
  return { coinCount: 0, user: undefined, rank: 0, delta: "0" };
}

export const WebcastRoomUserSeqMessage_ContributorDecoder: MessageFns<WebcastRoomUserSeqMessage_Contributor> = {
  encode(message: WebcastRoomUserSeqMessage_Contributor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.coinCount !== 0) {
      writer.uint32(8).int32(message.coinCount);
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.rank !== 0) {
      writer.uint32(24).int32(message.rank);
    }
    if (message.delta !== "0") {
      writer.uint32(32).int64(message.delta);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRoomUserSeqMessage_Contributor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRoomUserSeqMessage_Contributor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.coinCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rank = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.delta = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRoomUserSeqMessage_Contributor {
    return {
      coinCount: isSet(object.coinCount) ? globalThis.Number(object.coinCount) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
      delta: isSet(object.delta) ? globalThis.String(object.delta) : "0",
    };
  },

  toJSON(message: WebcastRoomUserSeqMessage_Contributor): unknown {
    const obj: any = {};
    if (message.coinCount !== 0) {
      obj.coinCount = Math.round(message.coinCount);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.rank !== 0) {
      obj.rank = Math.round(message.rank);
    }
    if (message.delta !== "0") {
      obj.delta = message.delta;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRoomUserSeqMessage_Contributor>, I>>(
    base?: I,
  ): WebcastRoomUserSeqMessage_Contributor {
    return WebcastRoomUserSeqMessage_Contributor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRoomUserSeqMessage_Contributor>, I>>(
    object: I,
  ): WebcastRoomUserSeqMessage_Contributor {
    const message = createBaseWebcastRoomUserSeqMessage_Contributor();
    message.coinCount = object.coinCount ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.rank = object.rank ?? 0;
    message.delta = object.delta ?? "0";
    return message;
  },
};

function createBaseImageModel(): ImageModel {
  return {
    mUrls: [],
    mUri: "",
    height: 0,
    width: 0,
    avgColor: "",
    imageType: 0,
    schema: "",
    content: undefined,
    isAnimated: false,
  };
}

export const ImageModelDecoder: MessageFns<ImageModel> = {
  encode(message: ImageModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.mUrls) {
      writer.uint32(10).string(v!);
    }
    if (message.mUri !== "") {
      writer.uint32(18).string(message.mUri);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(32).int32(message.width);
    }
    if (message.avgColor !== "") {
      writer.uint32(42).string(message.avgColor);
    }
    if (message.imageType !== 0) {
      writer.uint32(48).int32(message.imageType);
    }
    if (message.schema !== "") {
      writer.uint32(58).string(message.schema);
    }
    if (message.content !== undefined) {
      ImageModel_ContentDecoder.encode(message.content, writer.uint32(66).fork()).join();
    }
    if (message.isAnimated !== false) {
      writer.uint32(72).bool(message.isAnimated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mUrls.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avgColor = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.imageType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.content = ImageModel_ContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isAnimated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageModel {
    return {
      mUrls: globalThis.Array.isArray(object?.mUrls) ? object.mUrls.map((e: any) => globalThis.String(e)) : [],
      mUri: isSet(object.mUri) ? globalThis.String(object.mUri) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      avgColor: isSet(object.avgColor) ? globalThis.String(object.avgColor) : "",
      imageType: isSet(object.imageType) ? globalThis.Number(object.imageType) : 0,
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      content: isSet(object.content) ? ImageModel_Content.fromJSON(object.content) : undefined,
      isAnimated: isSet(object.isAnimated) ? globalThis.Boolean(object.isAnimated) : false,
    };
  },

  toJSON(message: ImageModel): unknown {
    const obj: any = {};
    if (message.mUrls?.length) {
      obj.mUrls = message.mUrls;
    }
    if (message.mUri !== "") {
      obj.mUri = message.mUri;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.avgColor !== "") {
      obj.avgColor = message.avgColor;
    }
    if (message.imageType !== 0) {
      obj.imageType = Math.round(message.imageType);
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.content !== undefined) {
      obj.content = ImageModel_Content.toJSON(message.content);
    }
    if (message.isAnimated !== false) {
      obj.isAnimated = message.isAnimated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageModel>, I>>(base?: I): ImageModel {
    return ImageModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageModel>, I>>(object: I): ImageModel {
    const message = createBaseImageModel();
    message.mUrls = object.mUrls?.map((e) => e) || [];
    message.mUri = object.mUri ?? "";
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    message.avgColor = object.avgColor ?? "";
    message.imageType = object.imageType ?? 0;
    message.schema = object.schema ?? "";
    message.content = (object.content !== undefined && object.content !== null)
      ? ImageModel_Content.fromPartial(object.content)
      : undefined;
    message.isAnimated = object.isAnimated ?? false;
    return message;
  },
};

function createBaseImageModel_Content(): ImageModel_Content {
  return { name: "", fontColor: "", level: "0" };
}

export const ImageModel_ContentDecoder: MessageFns<ImageModel_Content> = {
  encode(message: ImageModel_Content, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.fontColor !== "") {
      writer.uint32(18).string(message.fontColor);
    }
    if (message.level !== "0") {
      writer.uint32(24).int64(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageModel_Content {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageModel_Content();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageModel_Content {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      fontColor: isSet(object.fontColor) ? globalThis.String(object.fontColor) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
    };
  },

  toJSON(message: ImageModel_Content): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.fontColor !== "") {
      obj.fontColor = message.fontColor;
    }
    if (message.level !== "0") {
      obj.level = message.level;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageModel_Content>, I>>(base?: I): ImageModel_Content {
    return ImageModel_Content.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageModel_Content>, I>>(object: I): ImageModel_Content {
    const message = createBaseImageModel_Content();
    message.name = object.name ?? "";
    message.fontColor = object.fontColor ?? "";
    message.level = object.level ?? "0";
    return message;
  },
};

function createBaseWebcastChatMessage(): WebcastChatMessage {
  return {
    common: undefined,
    user: undefined,
    comment: "",
    visibleToSender: false,
    background: undefined,
    fullScreenTextColor: "",
    backgroundImageV2: undefined,
    publicAreaCommon: undefined,
    giftImage: undefined,
    inputType: 0,
    atUser: undefined,
    emotes: [],
    contentLanguage: "",
    msgFilter: undefined,
    quickChatScene: 0,
    communityflaggedStatus: 0,
    commentQualityScores: [],
    userIdentity: undefined,
    commentTag: [],
    publicAreaMessageCommon: undefined,
    screenTime: "0",
    signature: "",
    signatureVersion: "",
    ecStreamerKey: "",
  };
}

export const WebcastChatMessageDecoder: MessageFns<WebcastChatMessage> = {
  encode(message: WebcastChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.comment !== "") {
      writer.uint32(26).string(message.comment);
    }
    if (message.visibleToSender !== false) {
      writer.uint32(32).bool(message.visibleToSender);
    }
    if (message.background !== undefined) {
      ImageModelDecoder.encode(message.background, writer.uint32(42).fork()).join();
    }
    if (message.fullScreenTextColor !== "") {
      writer.uint32(50).string(message.fullScreenTextColor);
    }
    if (message.backgroundImageV2 !== undefined) {
      ImageModelDecoder.encode(message.backgroundImageV2, writer.uint32(58).fork()).join();
    }
    if (message.publicAreaCommon !== undefined) {
      PublicAreaCommonDecoder.encode(message.publicAreaCommon, writer.uint32(74).fork()).join();
    }
    if (message.giftImage !== undefined) {
      ImageModelDecoder.encode(message.giftImage, writer.uint32(82).fork()).join();
    }
    if (message.inputType !== 0) {
      writer.uint32(88).int32(message.inputType);
    }
    if (message.atUser !== undefined) {
      UserDecoder.encode(message.atUser, writer.uint32(98).fork()).join();
    }
    for (const v of message.emotes) {
      WebcastSubEmoteDecoder.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.contentLanguage !== "") {
      writer.uint32(114).string(message.contentLanguage);
    }
    if (message.msgFilter !== undefined) {
      MsgFilterDecoder.encode(message.msgFilter, writer.uint32(122).fork()).join();
    }
    if (message.quickChatScene !== 0) {
      writer.uint32(128).int32(message.quickChatScene);
    }
    if (message.communityflaggedStatus !== 0) {
      writer.uint32(136).int32(message.communityflaggedStatus);
    }
    for (const v of message.commentQualityScores) {
      WebcastChatMessage_CommentQualityScoreDecoder.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.userIdentity !== undefined) {
      WebcastChatMessage_UserIdentityDecoder.encode(message.userIdentity, writer.uint32(146).fork()).join();
    }
    writer.uint32(162).fork();
    for (const v of message.commentTag) {
      writer.int32(v);
    }
    writer.join();
    if (message.publicAreaMessageCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(170).fork()).join();
    }
    if (message.screenTime !== "0") {
      writer.uint32(176).int64(message.screenTime);
    }
    if (message.signature !== "") {
      writer.uint32(186).string(message.signature);
    }
    if (message.signatureVersion !== "") {
      writer.uint32(194).string(message.signatureVersion);
    }
    if (message.ecStreamerKey !== "") {
      writer.uint32(202).string(message.ecStreamerKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.visibleToSender = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.background = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fullScreenTextColor = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.backgroundImageV2 = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.publicAreaCommon = PublicAreaCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.giftImage = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.inputType = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.atUser = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.emotes.push(WebcastSubEmoteDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.msgFilter = MsgFilterDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.quickChatScene = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.communityflaggedStatus = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.commentQualityScores.push(WebcastChatMessage_CommentQualityScoreDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.userIdentity = WebcastChatMessage_UserIdentityDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag === 160) {
            message.commentTag.push(reader.int32() as any);

            continue;
          }

          if (tag === 162) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.commentTag.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.publicAreaMessageCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.screenTime = reader.int64().toString();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.signatureVersion = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.ecStreamerKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastChatMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      visibleToSender: isSet(object.visibleToSender) ? globalThis.Boolean(object.visibleToSender) : false,
      background: isSet(object.background) ? ImageModel.fromJSON(object.background) : undefined,
      fullScreenTextColor: isSet(object.fullScreenTextColor) ? globalThis.String(object.fullScreenTextColor) : "",
      backgroundImageV2: isSet(object.backgroundImageV2) ? ImageModel.fromJSON(object.backgroundImageV2) : undefined,
      publicAreaCommon: isSet(object.publicAreaCommon) ? PublicAreaCommon.fromJSON(object.publicAreaCommon) : undefined,
      giftImage: isSet(object.giftImage) ? ImageModel.fromJSON(object.giftImage) : undefined,
      inputType: isSet(object.inputType) ? globalThis.Number(object.inputType) : 0,
      atUser: isSet(object.atUser) ? User.fromJSON(object.atUser) : undefined,
      emotes: globalThis.Array.isArray(object?.emotes)
        ? object.emotes.map((e: any) => WebcastSubEmote.fromJSON(e))
        : [],
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
      msgFilter: isSet(object.msgFilter) ? MsgFilter.fromJSON(object.msgFilter) : undefined,
      quickChatScene: isSet(object.quickChatScene) ? globalThis.Number(object.quickChatScene) : 0,
      communityflaggedStatus: isSet(object.communityflaggedStatus)
        ? globalThis.Number(object.communityflaggedStatus)
        : 0,
      commentQualityScores: globalThis.Array.isArray(object?.commentQualityScores)
        ? object.commentQualityScores.map((e: any) => WebcastChatMessage_CommentQualityScore.fromJSON(e))
        : [],
      userIdentity: isSet(object.userIdentity)
        ? WebcastChatMessage_UserIdentity.fromJSON(object.userIdentity)
        : undefined,
      commentTag: globalThis.Array.isArray(object?.commentTag)
        ? object.commentTag.map((e: any) => webcastChatMessage_CommentTagFromJSON(e))
        : [],
      publicAreaMessageCommon: isSet(object.publicAreaMessageCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaMessageCommon)
        : undefined,
      screenTime: isSet(object.screenTime) ? globalThis.String(object.screenTime) : "0",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      signatureVersion: isSet(object.signatureVersion) ? globalThis.String(object.signatureVersion) : "",
      ecStreamerKey: isSet(object.ecStreamerKey) ? globalThis.String(object.ecStreamerKey) : "",
    };
  },

  toJSON(message: WebcastChatMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.visibleToSender !== false) {
      obj.visibleToSender = message.visibleToSender;
    }
    if (message.background !== undefined) {
      obj.background = ImageModel.toJSON(message.background);
    }
    if (message.fullScreenTextColor !== "") {
      obj.fullScreenTextColor = message.fullScreenTextColor;
    }
    if (message.backgroundImageV2 !== undefined) {
      obj.backgroundImageV2 = ImageModel.toJSON(message.backgroundImageV2);
    }
    if (message.publicAreaCommon !== undefined) {
      obj.publicAreaCommon = PublicAreaCommon.toJSON(message.publicAreaCommon);
    }
    if (message.giftImage !== undefined) {
      obj.giftImage = ImageModel.toJSON(message.giftImage);
    }
    if (message.inputType !== 0) {
      obj.inputType = Math.round(message.inputType);
    }
    if (message.atUser !== undefined) {
      obj.atUser = User.toJSON(message.atUser);
    }
    if (message.emotes?.length) {
      obj.emotes = message.emotes.map((e) => WebcastSubEmote.toJSON(e));
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    if (message.msgFilter !== undefined) {
      obj.msgFilter = MsgFilter.toJSON(message.msgFilter);
    }
    if (message.quickChatScene !== 0) {
      obj.quickChatScene = Math.round(message.quickChatScene);
    }
    if (message.communityflaggedStatus !== 0) {
      obj.communityflaggedStatus = Math.round(message.communityflaggedStatus);
    }
    if (message.commentQualityScores?.length) {
      obj.commentQualityScores = message.commentQualityScores.map((e) =>
        WebcastChatMessage_CommentQualityScore.toJSON(e)
      );
    }
    if (message.userIdentity !== undefined) {
      obj.userIdentity = WebcastChatMessage_UserIdentity.toJSON(message.userIdentity);
    }
    if (message.commentTag?.length) {
      obj.commentTag = message.commentTag.map((e) => webcastChatMessage_CommentTagToJSON(e));
    }
    if (message.publicAreaMessageCommon !== undefined) {
      obj.publicAreaMessageCommon = PublicAreaMessageCommon.toJSON(message.publicAreaMessageCommon);
    }
    if (message.screenTime !== "0") {
      obj.screenTime = message.screenTime;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.signatureVersion !== "") {
      obj.signatureVersion = message.signatureVersion;
    }
    if (message.ecStreamerKey !== "") {
      obj.ecStreamerKey = message.ecStreamerKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastChatMessage>, I>>(base?: I): WebcastChatMessage {
    return WebcastChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastChatMessage>, I>>(object: I): WebcastChatMessage {
    const message = createBaseWebcastChatMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.comment = object.comment ?? "";
    message.visibleToSender = object.visibleToSender ?? false;
    message.background = (object.background !== undefined && object.background !== null)
      ? ImageModel.fromPartial(object.background)
      : undefined;
    message.fullScreenTextColor = object.fullScreenTextColor ?? "";
    message.backgroundImageV2 = (object.backgroundImageV2 !== undefined && object.backgroundImageV2 !== null)
      ? ImageModel.fromPartial(object.backgroundImageV2)
      : undefined;
    message.publicAreaCommon = (object.publicAreaCommon !== undefined && object.publicAreaCommon !== null)
      ? PublicAreaCommon.fromPartial(object.publicAreaCommon)
      : undefined;
    message.giftImage = (object.giftImage !== undefined && object.giftImage !== null)
      ? ImageModel.fromPartial(object.giftImage)
      : undefined;
    message.inputType = object.inputType ?? 0;
    message.atUser = (object.atUser !== undefined && object.atUser !== null)
      ? User.fromPartial(object.atUser)
      : undefined;
    message.emotes = object.emotes?.map((e) => WebcastSubEmote.fromPartial(e)) || [];
    message.contentLanguage = object.contentLanguage ?? "";
    message.msgFilter = (object.msgFilter !== undefined && object.msgFilter !== null)
      ? MsgFilter.fromPartial(object.msgFilter)
      : undefined;
    message.quickChatScene = object.quickChatScene ?? 0;
    message.communityflaggedStatus = object.communityflaggedStatus ?? 0;
    message.commentQualityScores =
      object.commentQualityScores?.map((e) => WebcastChatMessage_CommentQualityScore.fromPartial(e)) || [];
    message.userIdentity = (object.userIdentity !== undefined && object.userIdentity !== null)
      ? WebcastChatMessage_UserIdentity.fromPartial(object.userIdentity)
      : undefined;
    message.commentTag = object.commentTag?.map((e) => e) || [];
    message.publicAreaMessageCommon =
      (object.publicAreaMessageCommon !== undefined && object.publicAreaMessageCommon !== null)
        ? PublicAreaMessageCommon.fromPartial(object.publicAreaMessageCommon)
        : undefined;
    message.screenTime = object.screenTime ?? "0";
    message.signature = object.signature ?? "";
    message.signatureVersion = object.signatureVersion ?? "";
    message.ecStreamerKey = object.ecStreamerKey ?? "";
    return message;
  },
};

function createBaseWebcastChatMessage_UserIdentity(): WebcastChatMessage_UserIdentity {
  return {
    isGiftGiverOfAnchor: false,
    isSubscriberOfAnchor: false,
    isMutualFollowingWithAnchor: false,
    isFollowerOfAnchor: false,
    isModeratorOfAnchor: false,
    isAnchor: false,
  };
}

export const WebcastChatMessage_UserIdentityDecoder: MessageFns<WebcastChatMessage_UserIdentity> = {
  encode(message: WebcastChatMessage_UserIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isGiftGiverOfAnchor !== false) {
      writer.uint32(8).bool(message.isGiftGiverOfAnchor);
    }
    if (message.isSubscriberOfAnchor !== false) {
      writer.uint32(16).bool(message.isSubscriberOfAnchor);
    }
    if (message.isMutualFollowingWithAnchor !== false) {
      writer.uint32(24).bool(message.isMutualFollowingWithAnchor);
    }
    if (message.isFollowerOfAnchor !== false) {
      writer.uint32(32).bool(message.isFollowerOfAnchor);
    }
    if (message.isModeratorOfAnchor !== false) {
      writer.uint32(40).bool(message.isModeratorOfAnchor);
    }
    if (message.isAnchor !== false) {
      writer.uint32(48).bool(message.isAnchor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastChatMessage_UserIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastChatMessage_UserIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isGiftGiverOfAnchor = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isSubscriberOfAnchor = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isMutualFollowingWithAnchor = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isFollowerOfAnchor = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isModeratorOfAnchor = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isAnchor = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastChatMessage_UserIdentity {
    return {
      isGiftGiverOfAnchor: isSet(object.isGiftGiverOfAnchor) ? globalThis.Boolean(object.isGiftGiverOfAnchor) : false,
      isSubscriberOfAnchor: isSet(object.isSubscriberOfAnchor)
        ? globalThis.Boolean(object.isSubscriberOfAnchor)
        : false,
      isMutualFollowingWithAnchor: isSet(object.isMutualFollowingWithAnchor)
        ? globalThis.Boolean(object.isMutualFollowingWithAnchor)
        : false,
      isFollowerOfAnchor: isSet(object.isFollowerOfAnchor) ? globalThis.Boolean(object.isFollowerOfAnchor) : false,
      isModeratorOfAnchor: isSet(object.isModeratorOfAnchor) ? globalThis.Boolean(object.isModeratorOfAnchor) : false,
      isAnchor: isSet(object.isAnchor) ? globalThis.Boolean(object.isAnchor) : false,
    };
  },

  toJSON(message: WebcastChatMessage_UserIdentity): unknown {
    const obj: any = {};
    if (message.isGiftGiverOfAnchor !== false) {
      obj.isGiftGiverOfAnchor = message.isGiftGiverOfAnchor;
    }
    if (message.isSubscriberOfAnchor !== false) {
      obj.isSubscriberOfAnchor = message.isSubscriberOfAnchor;
    }
    if (message.isMutualFollowingWithAnchor !== false) {
      obj.isMutualFollowingWithAnchor = message.isMutualFollowingWithAnchor;
    }
    if (message.isFollowerOfAnchor !== false) {
      obj.isFollowerOfAnchor = message.isFollowerOfAnchor;
    }
    if (message.isModeratorOfAnchor !== false) {
      obj.isModeratorOfAnchor = message.isModeratorOfAnchor;
    }
    if (message.isAnchor !== false) {
      obj.isAnchor = message.isAnchor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastChatMessage_UserIdentity>, I>>(base?: I): WebcastChatMessage_UserIdentity {
    return WebcastChatMessage_UserIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastChatMessage_UserIdentity>, I>>(
    object: I,
  ): WebcastChatMessage_UserIdentity {
    const message = createBaseWebcastChatMessage_UserIdentity();
    message.isGiftGiverOfAnchor = object.isGiftGiverOfAnchor ?? false;
    message.isSubscriberOfAnchor = object.isSubscriberOfAnchor ?? false;
    message.isMutualFollowingWithAnchor = object.isMutualFollowingWithAnchor ?? false;
    message.isFollowerOfAnchor = object.isFollowerOfAnchor ?? false;
    message.isModeratorOfAnchor = object.isModeratorOfAnchor ?? false;
    message.isAnchor = object.isAnchor ?? false;
    return message;
  },
};

function createBaseWebcastChatMessage_CommentQualityScore(): WebcastChatMessage_CommentQualityScore {
  return { version: "", score: "0" };
}

export const WebcastChatMessage_CommentQualityScoreDecoder: MessageFns<WebcastChatMessage_CommentQualityScore> = {
  encode(message: WebcastChatMessage_CommentQualityScore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.score !== "0") {
      writer.uint32(16).int64(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastChatMessage_CommentQualityScore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastChatMessage_CommentQualityScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastChatMessage_CommentQualityScore {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      score: isSet(object.score) ? globalThis.String(object.score) : "0",
    };
  },

  toJSON(message: WebcastChatMessage_CommentQualityScore): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.score !== "0") {
      obj.score = message.score;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastChatMessage_CommentQualityScore>, I>>(
    base?: I,
  ): WebcastChatMessage_CommentQualityScore {
    return WebcastChatMessage_CommentQualityScore.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastChatMessage_CommentQualityScore>, I>>(
    object: I,
  ): WebcastChatMessage_CommentQualityScore {
    const message = createBaseWebcastChatMessage_CommentQualityScore();
    message.version = object.version ?? "";
    message.score = object.score ?? "0";
    return message;
  },
};

function createBaseEmoteUploadInfo(): EmoteUploadInfo {
  return { userId: "0", emoteUploadSource: undefined, userInfo: undefined, userIdStr: "" };
}

export const EmoteUploadInfoDecoder: MessageFns<EmoteUploadInfo> = {
  encode(message: EmoteUploadInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.emoteUploadSource !== undefined) {
      writer.uint32(16).int32(message.emoteUploadSource);
    }
    if (message.userInfo !== undefined) {
      UserDecoder.encode(message.userInfo, writer.uint32(26).fork()).join();
    }
    if (message.userIdStr !== "") {
      writer.uint32(34).string(message.userIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmoteUploadInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmoteUploadInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.emoteUploadSource = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userInfo = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmoteUploadInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      emoteUploadSource: isSet(object.emoteUploadSource)
        ? emoteUploadInfo_UserEmoteUploadSourceFromJSON(object.emoteUploadSource)
        : undefined,
      userInfo: isSet(object.userInfo) ? User.fromJSON(object.userInfo) : undefined,
      userIdStr: isSet(object.userIdStr) ? globalThis.String(object.userIdStr) : "",
    };
  },

  toJSON(message: EmoteUploadInfo): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.emoteUploadSource !== undefined) {
      obj.emoteUploadSource = emoteUploadInfo_UserEmoteUploadSourceToJSON(message.emoteUploadSource);
    }
    if (message.userInfo !== undefined) {
      obj.userInfo = User.toJSON(message.userInfo);
    }
    if (message.userIdStr !== "") {
      obj.userIdStr = message.userIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmoteUploadInfo>, I>>(base?: I): EmoteUploadInfo {
    return EmoteUploadInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmoteUploadInfo>, I>>(object: I): EmoteUploadInfo {
    const message = createBaseEmoteUploadInfo();
    message.userId = object.userId ?? "0";
    message.emoteUploadSource = object.emoteUploadSource ?? undefined;
    message.userInfo = (object.userInfo !== undefined && object.userInfo !== null)
      ? User.fromPartial(object.userInfo)
      : undefined;
    message.userIdStr = object.userIdStr ?? "";
    return message;
  },
};

function createBaseWebcastEmoteChatMessage(): WebcastEmoteChatMessage {
  return { common: undefined, user: undefined, emoteList: [], msgFilter: undefined, userIdentity: undefined };
}

export const WebcastEmoteChatMessageDecoder: MessageFns<WebcastEmoteChatMessage> = {
  encode(message: WebcastEmoteChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
    }
    for (const v of message.emoteList) {
      EmoteDecoder.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.msgFilter !== undefined) {
      MsgFilterDecoder.encode(message.msgFilter, writer.uint32(34).fork()).join();
    }
    if (message.userIdentity !== undefined) {
      UserIdentityDecoder.encode(message.userIdentity, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastEmoteChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastEmoteChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.emoteList.push(EmoteDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.msgFilter = MsgFilterDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userIdentity = UserIdentityDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastEmoteChatMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      emoteList: globalThis.Array.isArray(object?.emoteList) ? object.emoteList.map((e: any) => Emote.fromJSON(e)) : [],
      msgFilter: isSet(object.msgFilter) ? MsgFilter.fromJSON(object.msgFilter) : undefined,
      userIdentity: isSet(object.userIdentity) ? UserIdentity.fromJSON(object.userIdentity) : undefined,
    };
  },

  toJSON(message: WebcastEmoteChatMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.emoteList?.length) {
      obj.emoteList = message.emoteList.map((e) => Emote.toJSON(e));
    }
    if (message.msgFilter !== undefined) {
      obj.msgFilter = MsgFilter.toJSON(message.msgFilter);
    }
    if (message.userIdentity !== undefined) {
      obj.userIdentity = UserIdentity.toJSON(message.userIdentity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastEmoteChatMessage>, I>>(base?: I): WebcastEmoteChatMessage {
    return WebcastEmoteChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastEmoteChatMessage>, I>>(object: I): WebcastEmoteChatMessage {
    const message = createBaseWebcastEmoteChatMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.emoteList = object.emoteList?.map((e) => Emote.fromPartial(e)) || [];
    message.msgFilter = (object.msgFilter !== undefined && object.msgFilter !== null)
      ? MsgFilter.fromPartial(object.msgFilter)
      : undefined;
    message.userIdentity = (object.userIdentity !== undefined && object.userIdentity !== null)
      ? UserIdentity.fromPartial(object.userIdentity)
      : undefined;
    return message;
  },
};

function createBaseWebcastSubEmote(): WebcastSubEmote {
  return { placeInComment: 0, emote: undefined };
}

export const WebcastSubEmoteDecoder: MessageFns<WebcastSubEmote> = {
  encode(message: WebcastSubEmote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.placeInComment !== 0) {
      writer.uint32(8).int32(message.placeInComment);
    }
    if (message.emote !== undefined) {
      EmoteDetailsDecoder.encode(message.emote, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastSubEmote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastSubEmote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.placeInComment = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.emote = EmoteDetailsDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastSubEmote {
    return {
      placeInComment: isSet(object.placeInComment) ? globalThis.Number(object.placeInComment) : 0,
      emote: isSet(object.emote) ? EmoteDetails.fromJSON(object.emote) : undefined,
    };
  },

  toJSON(message: WebcastSubEmote): unknown {
    const obj: any = {};
    if (message.placeInComment !== 0) {
      obj.placeInComment = Math.round(message.placeInComment);
    }
    if (message.emote !== undefined) {
      obj.emote = EmoteDetails.toJSON(message.emote);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastSubEmote>, I>>(base?: I): WebcastSubEmote {
    return WebcastSubEmote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastSubEmote>, I>>(object: I): WebcastSubEmote {
    const message = createBaseWebcastSubEmote();
    message.placeInComment = object.placeInComment ?? 0;
    message.emote = (object.emote !== undefined && object.emote !== null)
      ? EmoteDetails.fromPartial(object.emote)
      : undefined;
    return message;
  },
};

function createBaseWebcastMemberMessage(): WebcastMemberMessage {
  return {
    common: undefined,
    user: undefined,
    action: 0,
    memberCount: 0,
    operator: undefined,
    isSetToAdmin: false,
    isTopUser: false,
    rankScore: "0",
    topUserNo: "0",
    enterType: "0",
    actionDescription: "",
    userId: "0",
    effectConfig: undefined,
    popStr: "",
    enterEffectConfig: undefined,
    backgroundImage: undefined,
    backgroundImageV2: undefined,
    anchorDisplayText: undefined,
    clientEnterSource: "",
    clientEnterType: "",
    clientLiveReason: "",
    actionDuration: "0",
    userShareType: "",
    displayStyle: 0,
    adminPermissions: {},
    kickSource: 0,
    allowPreviewTime: "0",
    lastSubscriptionAction: "0",
    publicAreaMessageCommon: undefined,
    liveSubOnlyTier: "0",
    liveSubOnlyMonth: "0",
    ecStreamerKey: "",
    showWave: "0",
    waveAlgorithmData: undefined,
    hitAbStatus: 0,
  };
}

export const WebcastMemberMessageDecoder: MessageFns<WebcastMemberMessage> = {
  encode(message: WebcastMemberMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.action !== 0) {
      writer.uint32(80).int32(message.action);
    }
    if (message.memberCount !== 0) {
      writer.uint32(24).int32(message.memberCount);
    }
    if (message.operator !== undefined) {
      UserDecoder.encode(message.operator, writer.uint32(34).fork()).join();
    }
    if (message.isSetToAdmin !== false) {
      writer.uint32(40).bool(message.isSetToAdmin);
    }
    if (message.isTopUser !== false) {
      writer.uint32(48).bool(message.isTopUser);
    }
    if (message.rankScore !== "0") {
      writer.uint32(56).int64(message.rankScore);
    }
    if (message.topUserNo !== "0") {
      writer.uint32(64).int64(message.topUserNo);
    }
    if (message.enterType !== "0") {
      writer.uint32(72).int64(message.enterType);
    }
    if (message.actionDescription !== "") {
      writer.uint32(90).string(message.actionDescription);
    }
    if (message.userId !== "0") {
      writer.uint32(96).int64(message.userId);
    }
    if (message.effectConfig !== undefined) {
      WebcastMemberMessage_EffectConfigDecoder.encode(message.effectConfig, writer.uint32(106).fork()).join();
    }
    if (message.popStr !== "") {
      writer.uint32(114).string(message.popStr);
    }
    if (message.enterEffectConfig !== undefined) {
      WebcastMemberMessage_EffectConfigDecoder.encode(message.enterEffectConfig, writer.uint32(122).fork()).join();
    }
    if (message.backgroundImage !== undefined) {
      ImageDecoder.encode(message.backgroundImage, writer.uint32(130).fork()).join();
    }
    if (message.backgroundImageV2 !== undefined) {
      ImageDecoder.encode(message.backgroundImageV2, writer.uint32(138).fork()).join();
    }
    if (message.anchorDisplayText !== undefined) {
      TextDecoder.encode(message.anchorDisplayText, writer.uint32(146).fork()).join();
    }
    if (message.clientEnterSource !== "") {
      writer.uint32(154).string(message.clientEnterSource);
    }
    if (message.clientEnterType !== "") {
      writer.uint32(162).string(message.clientEnterType);
    }
    if (message.clientLiveReason !== "") {
      writer.uint32(170).string(message.clientLiveReason);
    }
    if (message.actionDuration !== "0") {
      writer.uint32(176).int64(message.actionDuration);
    }
    if (message.userShareType !== "") {
      writer.uint32(186).string(message.userShareType);
    }
    if (message.displayStyle !== 0) {
      writer.uint32(192).int32(message.displayStyle);
    }
    Object.entries(message.adminPermissions).forEach(([key, value]) => {
      WebcastMemberMessage_AdminPermissionsEntryDecoder.encode({ key: key as any, value }, writer.uint32(202).fork()).join();
    });
    if (message.kickSource !== 0) {
      writer.uint32(208).int32(message.kickSource);
    }
    if (message.allowPreviewTime !== "0") {
      writer.uint32(216).int64(message.allowPreviewTime);
    }
    if (message.lastSubscriptionAction !== "0") {
      writer.uint32(224).int64(message.lastSubscriptionAction);
    }
    if (message.publicAreaMessageCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(234).fork()).join();
    }
    if (message.liveSubOnlyTier !== "0") {
      writer.uint32(240).int64(message.liveSubOnlyTier);
    }
    if (message.liveSubOnlyMonth !== "0") {
      writer.uint32(248).int64(message.liveSubOnlyMonth);
    }
    if (message.ecStreamerKey !== "") {
      writer.uint32(258).string(message.ecStreamerKey);
    }
    if (message.showWave !== "0") {
      writer.uint32(264).int64(message.showWave);
    }
    if (message.waveAlgorithmData !== undefined) {
      WebcastMemberMessage_WaveAlgorithmDataDecoder.encode(message.waveAlgorithmData, writer.uint32(274).fork()).join();
    }
    if (message.hitAbStatus !== 0) {
      writer.uint32(280).int32(message.hitAbStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMemberMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMemberMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.memberCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.operator = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isSetToAdmin = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isTopUser = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.rankScore = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.topUserNo = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.enterType = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.actionDescription = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.effectConfig = WebcastMemberMessage_EffectConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.popStr = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.enterEffectConfig = WebcastMemberMessage_EffectConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.backgroundImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.backgroundImageV2 = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.anchorDisplayText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.clientEnterSource = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.clientEnterType = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.clientLiveReason = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.actionDuration = reader.int64().toString();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.userShareType = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.displayStyle = reader.int32() as any;
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          const entry25 = WebcastMemberMessage_AdminPermissionsEntryDecoder.decode(reader, reader.uint32());
          if (entry25.value !== undefined) {
            message.adminPermissions[entry25.key] = entry25.value;
          }
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.kickSource = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.allowPreviewTime = reader.int64().toString();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.lastSubscriptionAction = reader.int64().toString();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.publicAreaMessageCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.liveSubOnlyTier = reader.int64().toString();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.liveSubOnlyMonth = reader.int64().toString();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.ecStreamerKey = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.showWave = reader.int64().toString();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.waveAlgorithmData = WebcastMemberMessage_WaveAlgorithmDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.hitAbStatus = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMemberMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      action: isSet(object.action) ? memberMessageActionFromJSON(object.action) : 0,
      memberCount: isSet(object.memberCount) ? globalThis.Number(object.memberCount) : 0,
      operator: isSet(object.operator) ? User.fromJSON(object.operator) : undefined,
      isSetToAdmin: isSet(object.isSetToAdmin) ? globalThis.Boolean(object.isSetToAdmin) : false,
      isTopUser: isSet(object.isTopUser) ? globalThis.Boolean(object.isTopUser) : false,
      rankScore: isSet(object.rankScore) ? globalThis.String(object.rankScore) : "0",
      topUserNo: isSet(object.topUserNo) ? globalThis.String(object.topUserNo) : "0",
      enterType: isSet(object.enterType) ? globalThis.String(object.enterType) : "0",
      actionDescription: isSet(object.actionDescription) ? globalThis.String(object.actionDescription) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      effectConfig: isSet(object.effectConfig)
        ? WebcastMemberMessage_EffectConfig.fromJSON(object.effectConfig)
        : undefined,
      popStr: isSet(object.popStr) ? globalThis.String(object.popStr) : "",
      enterEffectConfig: isSet(object.enterEffectConfig)
        ? WebcastMemberMessage_EffectConfig.fromJSON(object.enterEffectConfig)
        : undefined,
      backgroundImage: isSet(object.backgroundImage) ? Image.fromJSON(object.backgroundImage) : undefined,
      backgroundImageV2: isSet(object.backgroundImageV2) ? Image.fromJSON(object.backgroundImageV2) : undefined,
      anchorDisplayText: isSet(object.anchorDisplayText) ? Text.fromJSON(object.anchorDisplayText) : undefined,
      clientEnterSource: isSet(object.clientEnterSource) ? globalThis.String(object.clientEnterSource) : "",
      clientEnterType: isSet(object.clientEnterType) ? globalThis.String(object.clientEnterType) : "",
      clientLiveReason: isSet(object.clientLiveReason) ? globalThis.String(object.clientLiveReason) : "",
      actionDuration: isSet(object.actionDuration) ? globalThis.String(object.actionDuration) : "0",
      userShareType: isSet(object.userShareType) ? globalThis.String(object.userShareType) : "",
      displayStyle: isSet(object.displayStyle) ? webcastMemberMessage_DisplayStyleFromJSON(object.displayStyle) : 0,
      adminPermissions: isObject(object.adminPermissions)
        ? Object.entries(object.adminPermissions).reduce<{ [key: number]: number }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Number(value);
          return acc;
        }, {})
        : {},
      kickSource: isSet(object.kickSource) ? globalThis.Number(object.kickSource) : 0,
      allowPreviewTime: isSet(object.allowPreviewTime) ? globalThis.String(object.allowPreviewTime) : "0",
      lastSubscriptionAction: isSet(object.lastSubscriptionAction)
        ? globalThis.String(object.lastSubscriptionAction)
        : "0",
      publicAreaMessageCommon: isSet(object.publicAreaMessageCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaMessageCommon)
        : undefined,
      liveSubOnlyTier: isSet(object.liveSubOnlyTier) ? globalThis.String(object.liveSubOnlyTier) : "0",
      liveSubOnlyMonth: isSet(object.liveSubOnlyMonth) ? globalThis.String(object.liveSubOnlyMonth) : "0",
      ecStreamerKey: isSet(object.ecStreamerKey) ? globalThis.String(object.ecStreamerKey) : "",
      showWave: isSet(object.showWave) ? globalThis.String(object.showWave) : "0",
      waveAlgorithmData: isSet(object.waveAlgorithmData)
        ? WebcastMemberMessage_WaveAlgorithmData.fromJSON(object.waveAlgorithmData)
        : undefined,
      hitAbStatus: isSet(object.hitAbStatus) ? webcastMemberMessage_HitABStatusFromJSON(object.hitAbStatus) : 0,
    };
  },

  toJSON(message: WebcastMemberMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.action !== 0) {
      obj.action = memberMessageActionToJSON(message.action);
    }
    if (message.memberCount !== 0) {
      obj.memberCount = Math.round(message.memberCount);
    }
    if (message.operator !== undefined) {
      obj.operator = User.toJSON(message.operator);
    }
    if (message.isSetToAdmin !== false) {
      obj.isSetToAdmin = message.isSetToAdmin;
    }
    if (message.isTopUser !== false) {
      obj.isTopUser = message.isTopUser;
    }
    if (message.rankScore !== "0") {
      obj.rankScore = message.rankScore;
    }
    if (message.topUserNo !== "0") {
      obj.topUserNo = message.topUserNo;
    }
    if (message.enterType !== "0") {
      obj.enterType = message.enterType;
    }
    if (message.actionDescription !== "") {
      obj.actionDescription = message.actionDescription;
    }
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.effectConfig !== undefined) {
      obj.effectConfig = WebcastMemberMessage_EffectConfig.toJSON(message.effectConfig);
    }
    if (message.popStr !== "") {
      obj.popStr = message.popStr;
    }
    if (message.enterEffectConfig !== undefined) {
      obj.enterEffectConfig = WebcastMemberMessage_EffectConfig.toJSON(message.enterEffectConfig);
    }
    if (message.backgroundImage !== undefined) {
      obj.backgroundImage = Image.toJSON(message.backgroundImage);
    }
    if (message.backgroundImageV2 !== undefined) {
      obj.backgroundImageV2 = Image.toJSON(message.backgroundImageV2);
    }
    if (message.anchorDisplayText !== undefined) {
      obj.anchorDisplayText = Text.toJSON(message.anchorDisplayText);
    }
    if (message.clientEnterSource !== "") {
      obj.clientEnterSource = message.clientEnterSource;
    }
    if (message.clientEnterType !== "") {
      obj.clientEnterType = message.clientEnterType;
    }
    if (message.clientLiveReason !== "") {
      obj.clientLiveReason = message.clientLiveReason;
    }
    if (message.actionDuration !== "0") {
      obj.actionDuration = message.actionDuration;
    }
    if (message.userShareType !== "") {
      obj.userShareType = message.userShareType;
    }
    if (message.displayStyle !== 0) {
      obj.displayStyle = webcastMemberMessage_DisplayStyleToJSON(message.displayStyle);
    }
    if (message.adminPermissions) {
      const entries = Object.entries(message.adminPermissions);
      if (entries.length > 0) {
        obj.adminPermissions = {};
        entries.forEach(([k, v]) => {
          obj.adminPermissions[k] = Math.round(v);
        });
      }
    }
    if (message.kickSource !== 0) {
      obj.kickSource = Math.round(message.kickSource);
    }
    if (message.allowPreviewTime !== "0") {
      obj.allowPreviewTime = message.allowPreviewTime;
    }
    if (message.lastSubscriptionAction !== "0") {
      obj.lastSubscriptionAction = message.lastSubscriptionAction;
    }
    if (message.publicAreaMessageCommon !== undefined) {
      obj.publicAreaMessageCommon = PublicAreaMessageCommon.toJSON(message.publicAreaMessageCommon);
    }
    if (message.liveSubOnlyTier !== "0") {
      obj.liveSubOnlyTier = message.liveSubOnlyTier;
    }
    if (message.liveSubOnlyMonth !== "0") {
      obj.liveSubOnlyMonth = message.liveSubOnlyMonth;
    }
    if (message.ecStreamerKey !== "") {
      obj.ecStreamerKey = message.ecStreamerKey;
    }
    if (message.showWave !== "0") {
      obj.showWave = message.showWave;
    }
    if (message.waveAlgorithmData !== undefined) {
      obj.waveAlgorithmData = WebcastMemberMessage_WaveAlgorithmData.toJSON(message.waveAlgorithmData);
    }
    if (message.hitAbStatus !== 0) {
      obj.hitAbStatus = webcastMemberMessage_HitABStatusToJSON(message.hitAbStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMemberMessage>, I>>(base?: I): WebcastMemberMessage {
    return WebcastMemberMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMemberMessage>, I>>(object: I): WebcastMemberMessage {
    const message = createBaseWebcastMemberMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.action = object.action ?? 0;
    message.memberCount = object.memberCount ?? 0;
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? User.fromPartial(object.operator)
      : undefined;
    message.isSetToAdmin = object.isSetToAdmin ?? false;
    message.isTopUser = object.isTopUser ?? false;
    message.rankScore = object.rankScore ?? "0";
    message.topUserNo = object.topUserNo ?? "0";
    message.enterType = object.enterType ?? "0";
    message.actionDescription = object.actionDescription ?? "";
    message.userId = object.userId ?? "0";
    message.effectConfig = (object.effectConfig !== undefined && object.effectConfig !== null)
      ? WebcastMemberMessage_EffectConfig.fromPartial(object.effectConfig)
      : undefined;
    message.popStr = object.popStr ?? "";
    message.enterEffectConfig = (object.enterEffectConfig !== undefined && object.enterEffectConfig !== null)
      ? WebcastMemberMessage_EffectConfig.fromPartial(object.enterEffectConfig)
      : undefined;
    message.backgroundImage = (object.backgroundImage !== undefined && object.backgroundImage !== null)
      ? Image.fromPartial(object.backgroundImage)
      : undefined;
    message.backgroundImageV2 = (object.backgroundImageV2 !== undefined && object.backgroundImageV2 !== null)
      ? Image.fromPartial(object.backgroundImageV2)
      : undefined;
    message.anchorDisplayText = (object.anchorDisplayText !== undefined && object.anchorDisplayText !== null)
      ? Text.fromPartial(object.anchorDisplayText)
      : undefined;
    message.clientEnterSource = object.clientEnterSource ?? "";
    message.clientEnterType = object.clientEnterType ?? "";
    message.clientLiveReason = object.clientLiveReason ?? "";
    message.actionDuration = object.actionDuration ?? "0";
    message.userShareType = object.userShareType ?? "";
    message.displayStyle = object.displayStyle ?? 0;
    message.adminPermissions = Object.entries(object.adminPermissions ?? {}).reduce<{ [key: number]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.kickSource = object.kickSource ?? 0;
    message.allowPreviewTime = object.allowPreviewTime ?? "0";
    message.lastSubscriptionAction = object.lastSubscriptionAction ?? "0";
    message.publicAreaMessageCommon =
      (object.publicAreaMessageCommon !== undefined && object.publicAreaMessageCommon !== null)
        ? PublicAreaMessageCommon.fromPartial(object.publicAreaMessageCommon)
        : undefined;
    message.liveSubOnlyTier = object.liveSubOnlyTier ?? "0";
    message.liveSubOnlyMonth = object.liveSubOnlyMonth ?? "0";
    message.ecStreamerKey = object.ecStreamerKey ?? "";
    message.showWave = object.showWave ?? "0";
    message.waveAlgorithmData = (object.waveAlgorithmData !== undefined && object.waveAlgorithmData !== null)
      ? WebcastMemberMessage_WaveAlgorithmData.fromPartial(object.waveAlgorithmData)
      : undefined;
    message.hitAbStatus = object.hitAbStatus ?? 0;
    return message;
  },
};

function createBaseWebcastMemberMessage_AdminPermissionsEntry(): WebcastMemberMessage_AdminPermissionsEntry {
  return { key: 0, value: 0 };
}

export const WebcastMemberMessage_AdminPermissionsEntryDecoder: MessageFns<WebcastMemberMessage_AdminPermissionsEntry> = {
  encode(message: WebcastMemberMessage_AdminPermissionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMemberMessage_AdminPermissionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMemberMessage_AdminPermissionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMemberMessage_AdminPermissionsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: WebcastMemberMessage_AdminPermissionsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMemberMessage_AdminPermissionsEntry>, I>>(
    base?: I,
  ): WebcastMemberMessage_AdminPermissionsEntry {
    return WebcastMemberMessage_AdminPermissionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMemberMessage_AdminPermissionsEntry>, I>>(
    object: I,
  ): WebcastMemberMessage_AdminPermissionsEntry {
    const message = createBaseWebcastMemberMessage_AdminPermissionsEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseWebcastMemberMessage_EffectConfig(): WebcastMemberMessage_EffectConfig {
  return {
    type: "0",
    icon: undefined,
    avatarPos: "0",
    text: undefined,
    textIcon: undefined,
    stayTime: 0,
    animAssetId: "0",
    badge: undefined,
    flexSettingArrayList: [],
  };
}

export const WebcastMemberMessage_EffectConfigDecoder: MessageFns<WebcastMemberMessage_EffectConfig> = {
  encode(message: WebcastMemberMessage_EffectConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "0") {
      writer.uint32(8).int64(message.type);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
    }
    if (message.avatarPos !== "0") {
      writer.uint32(24).int64(message.avatarPos);
    }
    if (message.text !== undefined) {
      TextDecoder.encode(message.text, writer.uint32(34).fork()).join();
    }
    if (message.textIcon !== undefined) {
      ImageDecoder.encode(message.textIcon, writer.uint32(42).fork()).join();
    }
    if (message.stayTime !== 0) {
      writer.uint32(48).int32(message.stayTime);
    }
    if (message.animAssetId !== "0") {
      writer.uint32(56).int64(message.animAssetId);
    }
    if (message.badge !== undefined) {
      ImageDecoder.encode(message.badge, writer.uint32(66).fork()).join();
    }
    writer.uint32(74).fork();
    for (const v of message.flexSettingArrayList) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMemberMessage_EffectConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMemberMessage_EffectConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.avatarPos = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.text = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.textIcon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.stayTime = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.animAssetId = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.badge = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.flexSettingArrayList.push(reader.int64().toString());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.flexSettingArrayList.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMemberMessage_EffectConfig {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "0",
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      avatarPos: isSet(object.avatarPos) ? globalThis.String(object.avatarPos) : "0",
      text: isSet(object.text) ? Text.fromJSON(object.text) : undefined,
      textIcon: isSet(object.textIcon) ? Image.fromJSON(object.textIcon) : undefined,
      stayTime: isSet(object.stayTime) ? globalThis.Number(object.stayTime) : 0,
      animAssetId: isSet(object.animAssetId) ? globalThis.String(object.animAssetId) : "0",
      badge: isSet(object.badge) ? Image.fromJSON(object.badge) : undefined,
      flexSettingArrayList: globalThis.Array.isArray(object?.flexSettingArrayList)
        ? object.flexSettingArrayList.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: WebcastMemberMessage_EffectConfig): unknown {
    const obj: any = {};
    if (message.type !== "0") {
      obj.type = message.type;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.avatarPos !== "0") {
      obj.avatarPos = message.avatarPos;
    }
    if (message.text !== undefined) {
      obj.text = Text.toJSON(message.text);
    }
    if (message.textIcon !== undefined) {
      obj.textIcon = Image.toJSON(message.textIcon);
    }
    if (message.stayTime !== 0) {
      obj.stayTime = Math.round(message.stayTime);
    }
    if (message.animAssetId !== "0") {
      obj.animAssetId = message.animAssetId;
    }
    if (message.badge !== undefined) {
      obj.badge = Image.toJSON(message.badge);
    }
    if (message.flexSettingArrayList?.length) {
      obj.flexSettingArrayList = message.flexSettingArrayList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMemberMessage_EffectConfig>, I>>(
    base?: I,
  ): WebcastMemberMessage_EffectConfig {
    return WebcastMemberMessage_EffectConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMemberMessage_EffectConfig>, I>>(
    object: I,
  ): WebcastMemberMessage_EffectConfig {
    const message = createBaseWebcastMemberMessage_EffectConfig();
    message.type = object.type ?? "0";
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.avatarPos = object.avatarPos ?? "0";
    message.text = (object.text !== undefined && object.text !== null) ? Text.fromPartial(object.text) : undefined;
    message.textIcon = (object.textIcon !== undefined && object.textIcon !== null)
      ? Image.fromPartial(object.textIcon)
      : undefined;
    message.stayTime = object.stayTime ?? 0;
    message.animAssetId = object.animAssetId ?? "0";
    message.badge = (object.badge !== undefined && object.badge !== null) ? Image.fromPartial(object.badge) : undefined;
    message.flexSettingArrayList = object.flexSettingArrayList?.map((e) => e) || [];
    return message;
  },
};

function createBaseWebcastMemberMessage_WaveAlgorithmData(): WebcastMemberMessage_WaveAlgorithmData {
  return { algorithmVersion: "", isAlgHit: false, predictScore: "", isRewatch: false, isFollow: false };
}

export const WebcastMemberMessage_WaveAlgorithmDataDecoder: MessageFns<WebcastMemberMessage_WaveAlgorithmData> = {
  encode(message: WebcastMemberMessage_WaveAlgorithmData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.algorithmVersion !== "") {
      writer.uint32(10).string(message.algorithmVersion);
    }
    if (message.isAlgHit !== false) {
      writer.uint32(16).bool(message.isAlgHit);
    }
    if (message.predictScore !== "") {
      writer.uint32(26).string(message.predictScore);
    }
    if (message.isRewatch !== false) {
      writer.uint32(32).bool(message.isRewatch);
    }
    if (message.isFollow !== false) {
      writer.uint32(40).bool(message.isFollow);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMemberMessage_WaveAlgorithmData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMemberMessage_WaveAlgorithmData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.algorithmVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isAlgHit = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.predictScore = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isRewatch = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isFollow = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMemberMessage_WaveAlgorithmData {
    return {
      algorithmVersion: isSet(object.algorithmVersion) ? globalThis.String(object.algorithmVersion) : "",
      isAlgHit: isSet(object.isAlgHit) ? globalThis.Boolean(object.isAlgHit) : false,
      predictScore: isSet(object.predictScore) ? globalThis.String(object.predictScore) : "",
      isRewatch: isSet(object.isRewatch) ? globalThis.Boolean(object.isRewatch) : false,
      isFollow: isSet(object.isFollow) ? globalThis.Boolean(object.isFollow) : false,
    };
  },

  toJSON(message: WebcastMemberMessage_WaveAlgorithmData): unknown {
    const obj: any = {};
    if (message.algorithmVersion !== "") {
      obj.algorithmVersion = message.algorithmVersion;
    }
    if (message.isAlgHit !== false) {
      obj.isAlgHit = message.isAlgHit;
    }
    if (message.predictScore !== "") {
      obj.predictScore = message.predictScore;
    }
    if (message.isRewatch !== false) {
      obj.isRewatch = message.isRewatch;
    }
    if (message.isFollow !== false) {
      obj.isFollow = message.isFollow;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMemberMessage_WaveAlgorithmData>, I>>(
    base?: I,
  ): WebcastMemberMessage_WaveAlgorithmData {
    return WebcastMemberMessage_WaveAlgorithmData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMemberMessage_WaveAlgorithmData>, I>>(
    object: I,
  ): WebcastMemberMessage_WaveAlgorithmData {
    const message = createBaseWebcastMemberMessage_WaveAlgorithmData();
    message.algorithmVersion = object.algorithmVersion ?? "";
    message.isAlgHit = object.isAlgHit ?? false;
    message.predictScore = object.predictScore ?? "";
    message.isRewatch = object.isRewatch ?? false;
    message.isFollow = object.isFollow ?? false;
    return message;
  },
};

function createBaseWebcastMemberMessage_EffectConfigBean(): WebcastMemberMessage_EffectConfigBean {
  return { type: 0, icon: undefined, textKey: undefined, badge: undefined };
}

export const WebcastMemberMessage_EffectConfigBeanDecoder: MessageFns<WebcastMemberMessage_EffectConfigBean> = {
  encode(message: WebcastMemberMessage_EffectConfigBean, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.icon !== undefined) {
      ImageModelDecoder.encode(message.icon, writer.uint32(18).fork()).join();
    }
    if (message.textKey !== undefined) {
      TextDecoder.encode(message.textKey, writer.uint32(34).fork()).join();
    }
    if (message.badge !== undefined) {
      ImageModelDecoder.encode(message.badge, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMemberMessage_EffectConfigBean {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMemberMessage_EffectConfigBean();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.icon = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.textKey = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.badge = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMemberMessage_EffectConfigBean {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      icon: isSet(object.icon) ? ImageModel.fromJSON(object.icon) : undefined,
      textKey: isSet(object.textKey) ? Text.fromJSON(object.textKey) : undefined,
      badge: isSet(object.badge) ? ImageModel.fromJSON(object.badge) : undefined,
    };
  },

  toJSON(message: WebcastMemberMessage_EffectConfigBean): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.icon !== undefined) {
      obj.icon = ImageModel.toJSON(message.icon);
    }
    if (message.textKey !== undefined) {
      obj.textKey = Text.toJSON(message.textKey);
    }
    if (message.badge !== undefined) {
      obj.badge = ImageModel.toJSON(message.badge);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMemberMessage_EffectConfigBean>, I>>(
    base?: I,
  ): WebcastMemberMessage_EffectConfigBean {
    return WebcastMemberMessage_EffectConfigBean.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMemberMessage_EffectConfigBean>, I>>(
    object: I,
  ): WebcastMemberMessage_EffectConfigBean {
    const message = createBaseWebcastMemberMessage_EffectConfigBean();
    message.type = object.type ?? 0;
    message.icon = (object.icon !== undefined && object.icon !== null)
      ? ImageModel.fromPartial(object.icon)
      : undefined;
    message.textKey = (object.textKey !== undefined && object.textKey !== null)
      ? Text.fromPartial(object.textKey)
      : undefined;
    message.badge = (object.badge !== undefined && object.badge !== null)
      ? ImageModel.fromPartial(object.badge)
      : undefined;
    return message;
  },
};

function createBaseWebcastGiftMessage(): WebcastGiftMessage {
  return {
    common: undefined,
    giftId: 0,
    user: undefined,
    repeatEnd: 0,
    groupId: "0",
    giftDetails: undefined,
    monitorExtra: "",
    fanTicketCount: "0",
    groupCount: 0,
    repeatCount: 0,
    comboCount: 0,
    toUser: undefined,
    textEffect: undefined,
    incomeTaskgifts: "0",
    roomFanTicketCount: "0",
    priority: undefined,
    logId: "",
    sendType: "0",
    publicAreaCommon: undefined,
    trayDisplayText: undefined,
    bannedDisplayEffects: "0",
    mTrayInfo: undefined,
    giftExtra: undefined,
    colorId: "0",
    isFirstSent: false,
    displayTextForAnchor: undefined,
    displayTextForAudience: undefined,
    orderId: "",
    giftsInBox: undefined,
    msgFilter: undefined,
    lynxExtra: [],
    userIdentity: undefined,
    matchInfo: undefined,
    linkmicGiftExpressionStrategy: 0,
    flyingMicResources: undefined,
    disableGiftTracking: false,
    asset: undefined,
    version: 0,
    sponsorshipInfo: [],
    flyingMicResourcesV2: undefined,
    publicAreaMessageCommon: undefined,
    signature: "",
    signatureVersion: "",
    multiGenerateMessage: false,
    toMemberId: "",
    toMemberIdInt: "0",
    toMemberNickname: "",
    interactiveGiftInfo: undefined,
  };
}

export const WebcastGiftMessageDecoder: MessageFns<WebcastGiftMessage> = {
  encode(message: WebcastGiftMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.giftId !== 0) {
      writer.uint32(16).int32(message.giftId);
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(58).fork()).join();
    }
    if (message.repeatEnd !== 0) {
      writer.uint32(72).int32(message.repeatEnd);
    }
    if (message.groupId !== "0") {
      writer.uint32(88).uint64(message.groupId);
    }
    if (message.giftDetails !== undefined) {
      GiftDecoder.encode(message.giftDetails, writer.uint32(122).fork()).join();
    }
    if (message.monitorExtra !== "") {
      writer.uint32(178).string(message.monitorExtra);
    }
    if (message.fanTicketCount !== "0") {
      writer.uint32(24).int64(message.fanTicketCount);
    }
    if (message.groupCount !== 0) {
      writer.uint32(32).int32(message.groupCount);
    }
    if (message.repeatCount !== 0) {
      writer.uint32(40).int32(message.repeatCount);
    }
    if (message.comboCount !== 0) {
      writer.uint32(48).int32(message.comboCount);
    }
    if (message.toUser !== undefined) {
      UserDecoder.encode(message.toUser, writer.uint32(66).fork()).join();
    }
    if (message.textEffect !== undefined) {
      WebcastGiftMessage_TextEffectDecoder.encode(message.textEffect, writer.uint32(82).fork()).join();
    }
    if (message.incomeTaskgifts !== "0") {
      writer.uint32(96).int64(message.incomeTaskgifts);
    }
    if (message.roomFanTicketCount !== "0") {
      writer.uint32(104).int64(message.roomFanTicketCount);
    }
    if (message.priority !== undefined) {
      WebcastGiftMessage_GiftIMPriorityDecoder.encode(message.priority, writer.uint32(114).fork()).join();
    }
    if (message.logId !== "") {
      writer.uint32(130).string(message.logId);
    }
    if (message.sendType !== "0") {
      writer.uint32(136).int64(message.sendType);
    }
    if (message.publicAreaCommon !== undefined) {
      PublicAreaCommonDecoder.encode(message.publicAreaCommon, writer.uint32(146).fork()).join();
    }
    if (message.trayDisplayText !== undefined) {
      TextDecoder.encode(message.trayDisplayText, writer.uint32(154).fork()).join();
    }
    if (message.bannedDisplayEffects !== "0") {
      writer.uint32(160).int64(message.bannedDisplayEffects);
    }
    if (message.mTrayInfo !== undefined) {
      WebcastGiftMessage_GiftTrayInfoDecoder.encode(message.mTrayInfo, writer.uint32(170).fork()).join();
    }
    if (message.giftExtra !== undefined) {
      WebcastGiftMessage_GiftMonitorInfoDecoder.encode(message.giftExtra, writer.uint32(186).fork()).join();
    }
    if (message.colorId !== "0") {
      writer.uint32(192).int64(message.colorId);
    }
    if (message.isFirstSent !== false) {
      writer.uint32(200).bool(message.isFirstSent);
    }
    if (message.displayTextForAnchor !== undefined) {
      TextDecoder.encode(message.displayTextForAnchor, writer.uint32(210).fork()).join();
    }
    if (message.displayTextForAudience !== undefined) {
      TextDecoder.encode(message.displayTextForAudience, writer.uint32(218).fork()).join();
    }
    if (message.orderId !== "") {
      writer.uint32(226).string(message.orderId);
    }
    if (message.giftsInBox !== undefined) {
      WebcastGiftMessage_GiftsBoxInfoDecoder.encode(message.giftsInBox, writer.uint32(234).fork()).join();
    }
    if (message.msgFilter !== undefined) {
      MsgFilterDecoder.encode(message.msgFilter, writer.uint32(242).fork()).join();
    }
    for (const v of message.lynxExtra) {
      WebcastGiftMessage_LynxGiftExtraDecoder.encode(v!, writer.uint32(250).fork()).join();
    }
    if (message.userIdentity !== undefined) {
      UserIdentityDecoder.encode(message.userIdentity, writer.uint32(258).fork()).join();
    }
    if (message.matchInfo !== undefined) {
      WebcastGiftMessage_MatchInfoDecoder.encode(message.matchInfo, writer.uint32(266).fork()).join();
    }
    if (message.linkmicGiftExpressionStrategy !== 0) {
      writer.uint32(272).int32(message.linkmicGiftExpressionStrategy);
    }
    if (message.flyingMicResources !== undefined) {
      WebcastGiftMessage_FlyingMicResourcesDecoder.encode(message.flyingMicResources, writer.uint32(282).fork()).join();
    }
    if (message.disableGiftTracking !== false) {
      writer.uint32(288).bool(message.disableGiftTracking);
    }
    if (message.asset !== undefined) {
      WebcastGiftMessage_AssetsModelDecoder.encode(message.asset, writer.uint32(298).fork()).join();
    }
    if (message.version !== 0) {
      writer.uint32(304).int32(message.version);
    }
    for (const v of message.sponsorshipInfo) {
      WebcastGiftMessage_SponsorshipInfoDecoder.encode(v!, writer.uint32(314).fork()).join();
    }
    if (message.flyingMicResourcesV2 !== undefined) {
      WebcastGiftMessage_FlyingMicResourcesDecoder.encode(message.flyingMicResourcesV2, writer.uint32(322).fork()).join();
    }
    if (message.publicAreaMessageCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(330).fork()).join();
    }
    if (message.signature !== "") {
      writer.uint32(338).string(message.signature);
    }
    if (message.signatureVersion !== "") {
      writer.uint32(346).string(message.signatureVersion);
    }
    if (message.multiGenerateMessage !== false) {
      writer.uint32(352).bool(message.multiGenerateMessage);
    }
    if (message.toMemberId !== "") {
      writer.uint32(362).string(message.toMemberId);
    }
    if (message.toMemberIdInt !== "0") {
      writer.uint32(368).int64(message.toMemberIdInt);
    }
    if (message.toMemberNickname !== "") {
      writer.uint32(378).string(message.toMemberNickname);
    }
    if (message.interactiveGiftInfo !== undefined) {
      WebcastGiftMessage_InteractiveGiftInfoDecoder.encode(message.interactiveGiftInfo, writer.uint32(386).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.giftId = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.repeatEnd = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.groupId = reader.uint64().toString();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.giftDetails = GiftDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.monitorExtra = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fanTicketCount = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.groupCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.repeatCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.comboCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.toUser = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.textEffect = WebcastGiftMessage_TextEffectDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.incomeTaskgifts = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.roomFanTicketCount = reader.int64().toString();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.priority = WebcastGiftMessage_GiftIMPriorityDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.logId = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.sendType = reader.int64().toString();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.publicAreaCommon = PublicAreaCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.trayDisplayText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.bannedDisplayEffects = reader.int64().toString();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.mTrayInfo = WebcastGiftMessage_GiftTrayInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.giftExtra = WebcastGiftMessage_GiftMonitorInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.colorId = reader.int64().toString();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.isFirstSent = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.displayTextForAnchor = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.displayTextForAudience = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.giftsInBox = WebcastGiftMessage_GiftsBoxInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.msgFilter = MsgFilterDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.lynxExtra.push(WebcastGiftMessage_LynxGiftExtraDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.userIdentity = UserIdentityDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.matchInfo = WebcastGiftMessage_MatchInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.linkmicGiftExpressionStrategy = reader.int32() as any;
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.flyingMicResources = WebcastGiftMessage_FlyingMicResourcesDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.disableGiftTracking = reader.bool();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.asset = WebcastGiftMessage_AssetsModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.version = reader.int32() as any;
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.sponsorshipInfo.push(WebcastGiftMessage_SponsorshipInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.flyingMicResourcesV2 = WebcastGiftMessage_FlyingMicResourcesDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.publicAreaMessageCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.signatureVersion = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.multiGenerateMessage = reader.bool();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.toMemberId = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.toMemberIdInt = reader.int64().toString();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.toMemberNickname = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.interactiveGiftInfo = WebcastGiftMessage_InteractiveGiftInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      giftId: isSet(object.giftId) ? globalThis.Number(object.giftId) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      repeatEnd: isSet(object.repeatEnd) ? globalThis.Number(object.repeatEnd) : 0,
      groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : "0",
      giftDetails: isSet(object.giftDetails) ? Gift.fromJSON(object.giftDetails) : undefined,
      monitorExtra: isSet(object.monitorExtra) ? globalThis.String(object.monitorExtra) : "",
      fanTicketCount: isSet(object.fanTicketCount) ? globalThis.String(object.fanTicketCount) : "0",
      groupCount: isSet(object.groupCount) ? globalThis.Number(object.groupCount) : 0,
      repeatCount: isSet(object.repeatCount) ? globalThis.Number(object.repeatCount) : 0,
      comboCount: isSet(object.comboCount) ? globalThis.Number(object.comboCount) : 0,
      toUser: isSet(object.toUser) ? User.fromJSON(object.toUser) : undefined,
      textEffect: isSet(object.textEffect) ? WebcastGiftMessage_TextEffect.fromJSON(object.textEffect) : undefined,
      incomeTaskgifts: isSet(object.incomeTaskgifts) ? globalThis.String(object.incomeTaskgifts) : "0",
      roomFanTicketCount: isSet(object.roomFanTicketCount) ? globalThis.String(object.roomFanTicketCount) : "0",
      priority: isSet(object.priority) ? WebcastGiftMessage_GiftIMPriority.fromJSON(object.priority) : undefined,
      logId: isSet(object.logId) ? globalThis.String(object.logId) : "",
      sendType: isSet(object.sendType) ? globalThis.String(object.sendType) : "0",
      publicAreaCommon: isSet(object.publicAreaCommon) ? PublicAreaCommon.fromJSON(object.publicAreaCommon) : undefined,
      trayDisplayText: isSet(object.trayDisplayText) ? Text.fromJSON(object.trayDisplayText) : undefined,
      bannedDisplayEffects: isSet(object.bannedDisplayEffects) ? globalThis.String(object.bannedDisplayEffects) : "0",
      mTrayInfo: isSet(object.mTrayInfo) ? WebcastGiftMessage_GiftTrayInfo.fromJSON(object.mTrayInfo) : undefined,
      giftExtra: isSet(object.giftExtra) ? WebcastGiftMessage_GiftMonitorInfo.fromJSON(object.giftExtra) : undefined,
      colorId: isSet(object.colorId) ? globalThis.String(object.colorId) : "0",
      isFirstSent: isSet(object.isFirstSent) ? globalThis.Boolean(object.isFirstSent) : false,
      displayTextForAnchor: isSet(object.displayTextForAnchor) ? Text.fromJSON(object.displayTextForAnchor) : undefined,
      displayTextForAudience: isSet(object.displayTextForAudience)
        ? Text.fromJSON(object.displayTextForAudience)
        : undefined,
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      giftsInBox: isSet(object.giftsInBox) ? WebcastGiftMessage_GiftsBoxInfo.fromJSON(object.giftsInBox) : undefined,
      msgFilter: isSet(object.msgFilter) ? MsgFilter.fromJSON(object.msgFilter) : undefined,
      lynxExtra: globalThis.Array.isArray(object?.lynxExtra)
        ? object.lynxExtra.map((e: any) => WebcastGiftMessage_LynxGiftExtra.fromJSON(e))
        : [],
      userIdentity: isSet(object.userIdentity) ? UserIdentity.fromJSON(object.userIdentity) : undefined,
      matchInfo: isSet(object.matchInfo) ? WebcastGiftMessage_MatchInfo.fromJSON(object.matchInfo) : undefined,
      linkmicGiftExpressionStrategy: isSet(object.linkmicGiftExpressionStrategy)
        ? linkmicGiftExpressionStrategyFromJSON(object.linkmicGiftExpressionStrategy)
        : 0,
      flyingMicResources: isSet(object.flyingMicResources)
        ? WebcastGiftMessage_FlyingMicResources.fromJSON(object.flyingMicResources)
        : undefined,
      disableGiftTracking: isSet(object.disableGiftTracking) ? globalThis.Boolean(object.disableGiftTracking) : false,
      asset: isSet(object.asset) ? WebcastGiftMessage_AssetsModel.fromJSON(object.asset) : undefined,
      version: isSet(object.version) ? giftMessageVersionFromJSON(object.version) : 0,
      sponsorshipInfo: globalThis.Array.isArray(object?.sponsorshipInfo)
        ? object.sponsorshipInfo.map((e: any) => WebcastGiftMessage_SponsorshipInfo.fromJSON(e))
        : [],
      flyingMicResourcesV2: isSet(object.flyingMicResourcesV2)
        ? WebcastGiftMessage_FlyingMicResources.fromJSON(object.flyingMicResourcesV2)
        : undefined,
      publicAreaMessageCommon: isSet(object.publicAreaMessageCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaMessageCommon)
        : undefined,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      signatureVersion: isSet(object.signatureVersion) ? globalThis.String(object.signatureVersion) : "",
      multiGenerateMessage: isSet(object.multiGenerateMessage)
        ? globalThis.Boolean(object.multiGenerateMessage)
        : false,
      toMemberId: isSet(object.toMemberId) ? globalThis.String(object.toMemberId) : "",
      toMemberIdInt: isSet(object.toMemberIdInt) ? globalThis.String(object.toMemberIdInt) : "0",
      toMemberNickname: isSet(object.toMemberNickname) ? globalThis.String(object.toMemberNickname) : "",
      interactiveGiftInfo: isSet(object.interactiveGiftInfo)
        ? WebcastGiftMessage_InteractiveGiftInfo.fromJSON(object.interactiveGiftInfo)
        : undefined,
    };
  },

  toJSON(message: WebcastGiftMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.giftId !== 0) {
      obj.giftId = Math.round(message.giftId);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.repeatEnd !== 0) {
      obj.repeatEnd = Math.round(message.repeatEnd);
    }
    if (message.groupId !== "0") {
      obj.groupId = message.groupId;
    }
    if (message.giftDetails !== undefined) {
      obj.giftDetails = Gift.toJSON(message.giftDetails);
    }
    if (message.monitorExtra !== "") {
      obj.monitorExtra = message.monitorExtra;
    }
    if (message.fanTicketCount !== "0") {
      obj.fanTicketCount = message.fanTicketCount;
    }
    if (message.groupCount !== 0) {
      obj.groupCount = Math.round(message.groupCount);
    }
    if (message.repeatCount !== 0) {
      obj.repeatCount = Math.round(message.repeatCount);
    }
    if (message.comboCount !== 0) {
      obj.comboCount = Math.round(message.comboCount);
    }
    if (message.toUser !== undefined) {
      obj.toUser = User.toJSON(message.toUser);
    }
    if (message.textEffect !== undefined) {
      obj.textEffect = WebcastGiftMessage_TextEffect.toJSON(message.textEffect);
    }
    if (message.incomeTaskgifts !== "0") {
      obj.incomeTaskgifts = message.incomeTaskgifts;
    }
    if (message.roomFanTicketCount !== "0") {
      obj.roomFanTicketCount = message.roomFanTicketCount;
    }
    if (message.priority !== undefined) {
      obj.priority = WebcastGiftMessage_GiftIMPriority.toJSON(message.priority);
    }
    if (message.logId !== "") {
      obj.logId = message.logId;
    }
    if (message.sendType !== "0") {
      obj.sendType = message.sendType;
    }
    if (message.publicAreaCommon !== undefined) {
      obj.publicAreaCommon = PublicAreaCommon.toJSON(message.publicAreaCommon);
    }
    if (message.trayDisplayText !== undefined) {
      obj.trayDisplayText = Text.toJSON(message.trayDisplayText);
    }
    if (message.bannedDisplayEffects !== "0") {
      obj.bannedDisplayEffects = message.bannedDisplayEffects;
    }
    if (message.mTrayInfo !== undefined) {
      obj.mTrayInfo = WebcastGiftMessage_GiftTrayInfo.toJSON(message.mTrayInfo);
    }
    if (message.giftExtra !== undefined) {
      obj.giftExtra = WebcastGiftMessage_GiftMonitorInfo.toJSON(message.giftExtra);
    }
    if (message.colorId !== "0") {
      obj.colorId = message.colorId;
    }
    if (message.isFirstSent !== false) {
      obj.isFirstSent = message.isFirstSent;
    }
    if (message.displayTextForAnchor !== undefined) {
      obj.displayTextForAnchor = Text.toJSON(message.displayTextForAnchor);
    }
    if (message.displayTextForAudience !== undefined) {
      obj.displayTextForAudience = Text.toJSON(message.displayTextForAudience);
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.giftsInBox !== undefined) {
      obj.giftsInBox = WebcastGiftMessage_GiftsBoxInfo.toJSON(message.giftsInBox);
    }
    if (message.msgFilter !== undefined) {
      obj.msgFilter = MsgFilter.toJSON(message.msgFilter);
    }
    if (message.lynxExtra?.length) {
      obj.lynxExtra = message.lynxExtra.map((e) => WebcastGiftMessage_LynxGiftExtra.toJSON(e));
    }
    if (message.userIdentity !== undefined) {
      obj.userIdentity = UserIdentity.toJSON(message.userIdentity);
    }
    if (message.matchInfo !== undefined) {
      obj.matchInfo = WebcastGiftMessage_MatchInfo.toJSON(message.matchInfo);
    }
    if (message.linkmicGiftExpressionStrategy !== 0) {
      obj.linkmicGiftExpressionStrategy = linkmicGiftExpressionStrategyToJSON(message.linkmicGiftExpressionStrategy);
    }
    if (message.flyingMicResources !== undefined) {
      obj.flyingMicResources = WebcastGiftMessage_FlyingMicResources.toJSON(message.flyingMicResources);
    }
    if (message.disableGiftTracking !== false) {
      obj.disableGiftTracking = message.disableGiftTracking;
    }
    if (message.asset !== undefined) {
      obj.asset = WebcastGiftMessage_AssetsModel.toJSON(message.asset);
    }
    if (message.version !== 0) {
      obj.version = giftMessageVersionToJSON(message.version);
    }
    if (message.sponsorshipInfo?.length) {
      obj.sponsorshipInfo = message.sponsorshipInfo.map((e) => WebcastGiftMessage_SponsorshipInfo.toJSON(e));
    }
    if (message.flyingMicResourcesV2 !== undefined) {
      obj.flyingMicResourcesV2 = WebcastGiftMessage_FlyingMicResources.toJSON(message.flyingMicResourcesV2);
    }
    if (message.publicAreaMessageCommon !== undefined) {
      obj.publicAreaMessageCommon = PublicAreaMessageCommon.toJSON(message.publicAreaMessageCommon);
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.signatureVersion !== "") {
      obj.signatureVersion = message.signatureVersion;
    }
    if (message.multiGenerateMessage !== false) {
      obj.multiGenerateMessage = message.multiGenerateMessage;
    }
    if (message.toMemberId !== "") {
      obj.toMemberId = message.toMemberId;
    }
    if (message.toMemberIdInt !== "0") {
      obj.toMemberIdInt = message.toMemberIdInt;
    }
    if (message.toMemberNickname !== "") {
      obj.toMemberNickname = message.toMemberNickname;
    }
    if (message.interactiveGiftInfo !== undefined) {
      obj.interactiveGiftInfo = WebcastGiftMessage_InteractiveGiftInfo.toJSON(message.interactiveGiftInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage>, I>>(base?: I): WebcastGiftMessage {
    return WebcastGiftMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage>, I>>(object: I): WebcastGiftMessage {
    const message = createBaseWebcastGiftMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.giftId = object.giftId ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.repeatEnd = object.repeatEnd ?? 0;
    message.groupId = object.groupId ?? "0";
    message.giftDetails = (object.giftDetails !== undefined && object.giftDetails !== null)
      ? Gift.fromPartial(object.giftDetails)
      : undefined;
    message.monitorExtra = object.monitorExtra ?? "";
    message.fanTicketCount = object.fanTicketCount ?? "0";
    message.groupCount = object.groupCount ?? 0;
    message.repeatCount = object.repeatCount ?? 0;
    message.comboCount = object.comboCount ?? 0;
    message.toUser = (object.toUser !== undefined && object.toUser !== null)
      ? User.fromPartial(object.toUser)
      : undefined;
    message.textEffect = (object.textEffect !== undefined && object.textEffect !== null)
      ? WebcastGiftMessage_TextEffect.fromPartial(object.textEffect)
      : undefined;
    message.incomeTaskgifts = object.incomeTaskgifts ?? "0";
    message.roomFanTicketCount = object.roomFanTicketCount ?? "0";
    message.priority = (object.priority !== undefined && object.priority !== null)
      ? WebcastGiftMessage_GiftIMPriority.fromPartial(object.priority)
      : undefined;
    message.logId = object.logId ?? "";
    message.sendType = object.sendType ?? "0";
    message.publicAreaCommon = (object.publicAreaCommon !== undefined && object.publicAreaCommon !== null)
      ? PublicAreaCommon.fromPartial(object.publicAreaCommon)
      : undefined;
    message.trayDisplayText = (object.trayDisplayText !== undefined && object.trayDisplayText !== null)
      ? Text.fromPartial(object.trayDisplayText)
      : undefined;
    message.bannedDisplayEffects = object.bannedDisplayEffects ?? "0";
    message.mTrayInfo = (object.mTrayInfo !== undefined && object.mTrayInfo !== null)
      ? WebcastGiftMessage_GiftTrayInfo.fromPartial(object.mTrayInfo)
      : undefined;
    message.giftExtra = (object.giftExtra !== undefined && object.giftExtra !== null)
      ? WebcastGiftMessage_GiftMonitorInfo.fromPartial(object.giftExtra)
      : undefined;
    message.colorId = object.colorId ?? "0";
    message.isFirstSent = object.isFirstSent ?? false;
    message.displayTextForAnchor = (object.displayTextForAnchor !== undefined && object.displayTextForAnchor !== null)
      ? Text.fromPartial(object.displayTextForAnchor)
      : undefined;
    message.displayTextForAudience =
      (object.displayTextForAudience !== undefined && object.displayTextForAudience !== null)
        ? Text.fromPartial(object.displayTextForAudience)
        : undefined;
    message.orderId = object.orderId ?? "";
    message.giftsInBox = (object.giftsInBox !== undefined && object.giftsInBox !== null)
      ? WebcastGiftMessage_GiftsBoxInfo.fromPartial(object.giftsInBox)
      : undefined;
    message.msgFilter = (object.msgFilter !== undefined && object.msgFilter !== null)
      ? MsgFilter.fromPartial(object.msgFilter)
      : undefined;
    message.lynxExtra = object.lynxExtra?.map((e) => WebcastGiftMessage_LynxGiftExtra.fromPartial(e)) || [];
    message.userIdentity = (object.userIdentity !== undefined && object.userIdentity !== null)
      ? UserIdentity.fromPartial(object.userIdentity)
      : undefined;
    message.matchInfo = (object.matchInfo !== undefined && object.matchInfo !== null)
      ? WebcastGiftMessage_MatchInfo.fromPartial(object.matchInfo)
      : undefined;
    message.linkmicGiftExpressionStrategy = object.linkmicGiftExpressionStrategy ?? 0;
    message.flyingMicResources = (object.flyingMicResources !== undefined && object.flyingMicResources !== null)
      ? WebcastGiftMessage_FlyingMicResources.fromPartial(object.flyingMicResources)
      : undefined;
    message.disableGiftTracking = object.disableGiftTracking ?? false;
    message.asset = (object.asset !== undefined && object.asset !== null)
      ? WebcastGiftMessage_AssetsModel.fromPartial(object.asset)
      : undefined;
    message.version = object.version ?? 0;
    message.sponsorshipInfo = object.sponsorshipInfo?.map((e) => WebcastGiftMessage_SponsorshipInfo.fromPartial(e)) ||
      [];
    message.flyingMicResourcesV2 = (object.flyingMicResourcesV2 !== undefined && object.flyingMicResourcesV2 !== null)
      ? WebcastGiftMessage_FlyingMicResources.fromPartial(object.flyingMicResourcesV2)
      : undefined;
    message.publicAreaMessageCommon =
      (object.publicAreaMessageCommon !== undefined && object.publicAreaMessageCommon !== null)
        ? PublicAreaMessageCommon.fromPartial(object.publicAreaMessageCommon)
        : undefined;
    message.signature = object.signature ?? "";
    message.signatureVersion = object.signatureVersion ?? "";
    message.multiGenerateMessage = object.multiGenerateMessage ?? false;
    message.toMemberId = object.toMemberId ?? "";
    message.toMemberIdInt = object.toMemberIdInt ?? "0";
    message.toMemberNickname = object.toMemberNickname ?? "";
    message.interactiveGiftInfo = (object.interactiveGiftInfo !== undefined && object.interactiveGiftInfo !== null)
      ? WebcastGiftMessage_InteractiveGiftInfo.fromPartial(object.interactiveGiftInfo)
      : undefined;
    return message;
  },
};

function createBaseWebcastGiftMessage_InteractiveGiftInfo(): WebcastGiftMessage_InteractiveGiftInfo {
  return { crossScreenDelay: "0", crossScreenRole: "0", ignoreConfig: 0, uniqId: "0", toUserTeamId: "0" };
}

export const WebcastGiftMessage_InteractiveGiftInfoDecoder: MessageFns<WebcastGiftMessage_InteractiveGiftInfo> = {
  encode(message: WebcastGiftMessage_InteractiveGiftInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.crossScreenDelay !== "0") {
      writer.uint32(8).int64(message.crossScreenDelay);
    }
    if (message.crossScreenRole !== "0") {
      writer.uint32(16).int64(message.crossScreenRole);
    }
    if (message.ignoreConfig !== 0) {
      writer.uint32(24).int32(message.ignoreConfig);
    }
    if (message.uniqId !== "0") {
      writer.uint32(32).int64(message.uniqId);
    }
    if (message.toUserTeamId !== "0") {
      writer.uint32(40).int64(message.toUserTeamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_InteractiveGiftInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_InteractiveGiftInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.crossScreenDelay = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.crossScreenRole = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ignoreConfig = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uniqId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.toUserTeamId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_InteractiveGiftInfo {
    return {
      crossScreenDelay: isSet(object.crossScreenDelay) ? globalThis.String(object.crossScreenDelay) : "0",
      crossScreenRole: isSet(object.crossScreenRole) ? globalThis.String(object.crossScreenRole) : "0",
      ignoreConfig: isSet(object.ignoreConfig) ? giftMessageIgnoreConfigFromJSON(object.ignoreConfig) : 0,
      uniqId: isSet(object.uniqId) ? globalThis.String(object.uniqId) : "0",
      toUserTeamId: isSet(object.toUserTeamId) ? globalThis.String(object.toUserTeamId) : "0",
    };
  },

  toJSON(message: WebcastGiftMessage_InteractiveGiftInfo): unknown {
    const obj: any = {};
    if (message.crossScreenDelay !== "0") {
      obj.crossScreenDelay = message.crossScreenDelay;
    }
    if (message.crossScreenRole !== "0") {
      obj.crossScreenRole = message.crossScreenRole;
    }
    if (message.ignoreConfig !== 0) {
      obj.ignoreConfig = giftMessageIgnoreConfigToJSON(message.ignoreConfig);
    }
    if (message.uniqId !== "0") {
      obj.uniqId = message.uniqId;
    }
    if (message.toUserTeamId !== "0") {
      obj.toUserTeamId = message.toUserTeamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_InteractiveGiftInfo>, I>>(
    base?: I,
  ): WebcastGiftMessage_InteractiveGiftInfo {
    return WebcastGiftMessage_InteractiveGiftInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_InteractiveGiftInfo>, I>>(
    object: I,
  ): WebcastGiftMessage_InteractiveGiftInfo {
    const message = createBaseWebcastGiftMessage_InteractiveGiftInfo();
    message.crossScreenDelay = object.crossScreenDelay ?? "0";
    message.crossScreenRole = object.crossScreenRole ?? "0";
    message.ignoreConfig = object.ignoreConfig ?? 0;
    message.uniqId = object.uniqId ?? "0";
    message.toUserTeamId = object.toUserTeamId ?? "0";
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftIMPriority(): WebcastGiftMessage_GiftIMPriority {
  return { queueSizesList: [], selfQueuePriority: "0", priority: "0" };
}

export const WebcastGiftMessage_GiftIMPriorityDecoder: MessageFns<WebcastGiftMessage_GiftIMPriority> = {
  encode(message: WebcastGiftMessage_GiftIMPriority, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.queueSizesList) {
      writer.int64(v);
    }
    writer.join();
    if (message.selfQueuePriority !== "0") {
      writer.uint32(16).int64(message.selfQueuePriority);
    }
    if (message.priority !== "0") {
      writer.uint32(24).int64(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_GiftIMPriority {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftIMPriority();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.queueSizesList.push(reader.int64().toString());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.queueSizesList.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.selfQueuePriority = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.priority = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftIMPriority {
    return {
      queueSizesList: globalThis.Array.isArray(object?.queueSizesList)
        ? object.queueSizesList.map((e: any) => globalThis.String(e))
        : [],
      selfQueuePriority: isSet(object.selfQueuePriority) ? globalThis.String(object.selfQueuePriority) : "0",
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "0",
    };
  },

  toJSON(message: WebcastGiftMessage_GiftIMPriority): unknown {
    const obj: any = {};
    if (message.queueSizesList?.length) {
      obj.queueSizesList = message.queueSizesList;
    }
    if (message.selfQueuePriority !== "0") {
      obj.selfQueuePriority = message.selfQueuePriority;
    }
    if (message.priority !== "0") {
      obj.priority = message.priority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftIMPriority>, I>>(
    base?: I,
  ): WebcastGiftMessage_GiftIMPriority {
    return WebcastGiftMessage_GiftIMPriority.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftIMPriority>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftIMPriority {
    const message = createBaseWebcastGiftMessage_GiftIMPriority();
    message.queueSizesList = object.queueSizesList?.map((e) => e) || [];
    message.selfQueuePriority = object.selfQueuePriority ?? "0";
    message.priority = object.priority ?? "0";
    return message;
  },
};

function createBaseWebcastGiftMessage_TextEffect(): WebcastGiftMessage_TextEffect {
  return { portraitDetail: undefined, landscapeDetail: undefined };
}

export const WebcastGiftMessage_TextEffectDecoder: MessageFns<WebcastGiftMessage_TextEffect> = {
  encode(message: WebcastGiftMessage_TextEffect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.portraitDetail !== undefined) {
      WebcastGiftMessage_TextEffect_DetailDecoder.encode(message.portraitDetail, writer.uint32(10).fork()).join();
    }
    if (message.landscapeDetail !== undefined) {
      WebcastGiftMessage_TextEffect_DetailDecoder.encode(message.landscapeDetail, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_TextEffect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_TextEffect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.portraitDetail = WebcastGiftMessage_TextEffect_DetailDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.landscapeDetail = WebcastGiftMessage_TextEffect_DetailDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_TextEffect {
    return {
      portraitDetail: isSet(object.portraitDetail)
        ? WebcastGiftMessage_TextEffect_Detail.fromJSON(object.portraitDetail)
        : undefined,
      landscapeDetail: isSet(object.landscapeDetail)
        ? WebcastGiftMessage_TextEffect_Detail.fromJSON(object.landscapeDetail)
        : undefined,
    };
  },

  toJSON(message: WebcastGiftMessage_TextEffect): unknown {
    const obj: any = {};
    if (message.portraitDetail !== undefined) {
      obj.portraitDetail = WebcastGiftMessage_TextEffect_Detail.toJSON(message.portraitDetail);
    }
    if (message.landscapeDetail !== undefined) {
      obj.landscapeDetail = WebcastGiftMessage_TextEffect_Detail.toJSON(message.landscapeDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_TextEffect>, I>>(base?: I): WebcastGiftMessage_TextEffect {
    return WebcastGiftMessage_TextEffect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_TextEffect>, I>>(
    object: I,
  ): WebcastGiftMessage_TextEffect {
    const message = createBaseWebcastGiftMessage_TextEffect();
    message.portraitDetail = (object.portraitDetail !== undefined && object.portraitDetail !== null)
      ? WebcastGiftMessage_TextEffect_Detail.fromPartial(object.portraitDetail)
      : undefined;
    message.landscapeDetail = (object.landscapeDetail !== undefined && object.landscapeDetail !== null)
      ? WebcastGiftMessage_TextEffect_Detail.fromPartial(object.landscapeDetail)
      : undefined;
    return message;
  },
};

function createBaseWebcastGiftMessage_TextEffect_Detail(): WebcastGiftMessage_TextEffect_Detail {
  return {
    text: undefined,
    textFontSize: 0,
    background: undefined,
    start: "0",
    duration: "0",
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    shadowDx: 0,
    shadowDy: 0,
    shadowRadius: 0,
    shadowColor: "",
    strokeColor: "",
    strokeWidth: 0,
  };
}

export const WebcastGiftMessage_TextEffect_DetailDecoder: MessageFns<WebcastGiftMessage_TextEffect_Detail> = {
  encode(message: WebcastGiftMessage_TextEffect_Detail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      TextDecoder.encode(message.text, writer.uint32(10).fork()).join();
    }
    if (message.textFontSize !== 0) {
      writer.uint32(16).int32(message.textFontSize);
    }
    if (message.background !== undefined) {
      ImageDecoder.encode(message.background, writer.uint32(26).fork()).join();
    }
    if (message.start !== "0") {
      writer.uint32(32).int64(message.start);
    }
    if (message.duration !== "0") {
      writer.uint32(40).int64(message.duration);
    }
    if (message.x !== 0) {
      writer.uint32(48).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(56).int32(message.y);
    }
    if (message.width !== 0) {
      writer.uint32(64).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(72).int32(message.height);
    }
    if (message.shadowDx !== 0) {
      writer.uint32(80).int32(message.shadowDx);
    }
    if (message.shadowDy !== 0) {
      writer.uint32(88).int32(message.shadowDy);
    }
    if (message.shadowRadius !== 0) {
      writer.uint32(96).int32(message.shadowRadius);
    }
    if (message.shadowColor !== "") {
      writer.uint32(106).string(message.shadowColor);
    }
    if (message.strokeColor !== "") {
      writer.uint32(114).string(message.strokeColor);
    }
    if (message.strokeWidth !== 0) {
      writer.uint32(120).int32(message.strokeWidth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_TextEffect_Detail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_TextEffect_Detail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.textFontSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.background = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.start = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.shadowDx = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.shadowDy = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.shadowRadius = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.shadowColor = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.strokeColor = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.strokeWidth = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_TextEffect_Detail {
    return {
      text: isSet(object.text) ? Text.fromJSON(object.text) : undefined,
      textFontSize: isSet(object.textFontSize) ? globalThis.Number(object.textFontSize) : 0,
      background: isSet(object.background) ? Image.fromJSON(object.background) : undefined,
      start: isSet(object.start) ? globalThis.String(object.start) : "0",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      shadowDx: isSet(object.shadowDx) ? globalThis.Number(object.shadowDx) : 0,
      shadowDy: isSet(object.shadowDy) ? globalThis.Number(object.shadowDy) : 0,
      shadowRadius: isSet(object.shadowRadius) ? globalThis.Number(object.shadowRadius) : 0,
      shadowColor: isSet(object.shadowColor) ? globalThis.String(object.shadowColor) : "",
      strokeColor: isSet(object.strokeColor) ? globalThis.String(object.strokeColor) : "",
      strokeWidth: isSet(object.strokeWidth) ? globalThis.Number(object.strokeWidth) : 0,
    };
  },

  toJSON(message: WebcastGiftMessage_TextEffect_Detail): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = Text.toJSON(message.text);
    }
    if (message.textFontSize !== 0) {
      obj.textFontSize = Math.round(message.textFontSize);
    }
    if (message.background !== undefined) {
      obj.background = Image.toJSON(message.background);
    }
    if (message.start !== "0") {
      obj.start = message.start;
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.shadowDx !== 0) {
      obj.shadowDx = Math.round(message.shadowDx);
    }
    if (message.shadowDy !== 0) {
      obj.shadowDy = Math.round(message.shadowDy);
    }
    if (message.shadowRadius !== 0) {
      obj.shadowRadius = Math.round(message.shadowRadius);
    }
    if (message.shadowColor !== "") {
      obj.shadowColor = message.shadowColor;
    }
    if (message.strokeColor !== "") {
      obj.strokeColor = message.strokeColor;
    }
    if (message.strokeWidth !== 0) {
      obj.strokeWidth = Math.round(message.strokeWidth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_TextEffect_Detail>, I>>(
    base?: I,
  ): WebcastGiftMessage_TextEffect_Detail {
    return WebcastGiftMessage_TextEffect_Detail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_TextEffect_Detail>, I>>(
    object: I,
  ): WebcastGiftMessage_TextEffect_Detail {
    const message = createBaseWebcastGiftMessage_TextEffect_Detail();
    message.text = (object.text !== undefined && object.text !== null) ? Text.fromPartial(object.text) : undefined;
    message.textFontSize = object.textFontSize ?? 0;
    message.background = (object.background !== undefined && object.background !== null)
      ? Image.fromPartial(object.background)
      : undefined;
    message.start = object.start ?? "0";
    message.duration = object.duration ?? "0";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.shadowDx = object.shadowDx ?? 0;
    message.shadowDy = object.shadowDy ?? 0;
    message.shadowRadius = object.shadowRadius ?? 0;
    message.shadowColor = object.shadowColor ?? "";
    message.strokeColor = object.strokeColor ?? "";
    message.strokeWidth = object.strokeWidth ?? 0;
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftTrayInfo(): WebcastGiftMessage_GiftTrayInfo {
  return {
    mDynamicImg: undefined,
    canMirror: false,
    trayNormalBgImg: undefined,
    trayNormalBgColor: [],
    traySmallBgImg: undefined,
    traySmallBgColor: [],
    rightTagText: undefined,
    rightTagBgImg: undefined,
    rightTagBgColor: [],
    trayNameTextColor: "",
    trayDescTextColor: "",
    rightTagJumpSchema: "",
  };
}

export const WebcastGiftMessage_GiftTrayInfoDecoder: MessageFns<WebcastGiftMessage_GiftTrayInfo> = {
  encode(message: WebcastGiftMessage_GiftTrayInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mDynamicImg !== undefined) {
      ImageDecoder.encode(message.mDynamicImg, writer.uint32(10).fork()).join();
    }
    if (message.canMirror !== false) {
      writer.uint32(16).bool(message.canMirror);
    }
    if (message.trayNormalBgImg !== undefined) {
      ImageDecoder.encode(message.trayNormalBgImg, writer.uint32(26).fork()).join();
    }
    for (const v of message.trayNormalBgColor) {
      writer.uint32(34).string(v!);
    }
    if (message.traySmallBgImg !== undefined) {
      ImageDecoder.encode(message.traySmallBgImg, writer.uint32(42).fork()).join();
    }
    for (const v of message.traySmallBgColor) {
      writer.uint32(50).string(v!);
    }
    if (message.rightTagText !== undefined) {
      TextDecoder.encode(message.rightTagText, writer.uint32(58).fork()).join();
    }
    if (message.rightTagBgImg !== undefined) {
      ImageDecoder.encode(message.rightTagBgImg, writer.uint32(66).fork()).join();
    }
    for (const v of message.rightTagBgColor) {
      writer.uint32(74).string(v!);
    }
    if (message.trayNameTextColor !== "") {
      writer.uint32(82).string(message.trayNameTextColor);
    }
    if (message.trayDescTextColor !== "") {
      writer.uint32(90).string(message.trayDescTextColor);
    }
    if (message.rightTagJumpSchema !== "") {
      writer.uint32(98).string(message.rightTagJumpSchema);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_GiftTrayInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftTrayInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mDynamicImg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.canMirror = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.trayNormalBgImg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.trayNormalBgColor.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.traySmallBgImg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.traySmallBgColor.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rightTagText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rightTagBgImg = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.rightTagBgColor.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.trayNameTextColor = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.trayDescTextColor = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.rightTagJumpSchema = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftTrayInfo {
    return {
      mDynamicImg: isSet(object.mDynamicImg) ? Image.fromJSON(object.mDynamicImg) : undefined,
      canMirror: isSet(object.canMirror) ? globalThis.Boolean(object.canMirror) : false,
      trayNormalBgImg: isSet(object.trayNormalBgImg) ? Image.fromJSON(object.trayNormalBgImg) : undefined,
      trayNormalBgColor: globalThis.Array.isArray(object?.trayNormalBgColor)
        ? object.trayNormalBgColor.map((e: any) => globalThis.String(e))
        : [],
      traySmallBgImg: isSet(object.traySmallBgImg) ? Image.fromJSON(object.traySmallBgImg) : undefined,
      traySmallBgColor: globalThis.Array.isArray(object?.traySmallBgColor)
        ? object.traySmallBgColor.map((e: any) => globalThis.String(e))
        : [],
      rightTagText: isSet(object.rightTagText) ? Text.fromJSON(object.rightTagText) : undefined,
      rightTagBgImg: isSet(object.rightTagBgImg) ? Image.fromJSON(object.rightTagBgImg) : undefined,
      rightTagBgColor: globalThis.Array.isArray(object?.rightTagBgColor)
        ? object.rightTagBgColor.map((e: any) => globalThis.String(e))
        : [],
      trayNameTextColor: isSet(object.trayNameTextColor) ? globalThis.String(object.trayNameTextColor) : "",
      trayDescTextColor: isSet(object.trayDescTextColor) ? globalThis.String(object.trayDescTextColor) : "",
      rightTagJumpSchema: isSet(object.rightTagJumpSchema) ? globalThis.String(object.rightTagJumpSchema) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_GiftTrayInfo): unknown {
    const obj: any = {};
    if (message.mDynamicImg !== undefined) {
      obj.mDynamicImg = Image.toJSON(message.mDynamicImg);
    }
    if (message.canMirror !== false) {
      obj.canMirror = message.canMirror;
    }
    if (message.trayNormalBgImg !== undefined) {
      obj.trayNormalBgImg = Image.toJSON(message.trayNormalBgImg);
    }
    if (message.trayNormalBgColor?.length) {
      obj.trayNormalBgColor = message.trayNormalBgColor;
    }
    if (message.traySmallBgImg !== undefined) {
      obj.traySmallBgImg = Image.toJSON(message.traySmallBgImg);
    }
    if (message.traySmallBgColor?.length) {
      obj.traySmallBgColor = message.traySmallBgColor;
    }
    if (message.rightTagText !== undefined) {
      obj.rightTagText = Text.toJSON(message.rightTagText);
    }
    if (message.rightTagBgImg !== undefined) {
      obj.rightTagBgImg = Image.toJSON(message.rightTagBgImg);
    }
    if (message.rightTagBgColor?.length) {
      obj.rightTagBgColor = message.rightTagBgColor;
    }
    if (message.trayNameTextColor !== "") {
      obj.trayNameTextColor = message.trayNameTextColor;
    }
    if (message.trayDescTextColor !== "") {
      obj.trayDescTextColor = message.trayDescTextColor;
    }
    if (message.rightTagJumpSchema !== "") {
      obj.rightTagJumpSchema = message.rightTagJumpSchema;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftTrayInfo>, I>>(base?: I): WebcastGiftMessage_GiftTrayInfo {
    return WebcastGiftMessage_GiftTrayInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftTrayInfo>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftTrayInfo {
    const message = createBaseWebcastGiftMessage_GiftTrayInfo();
    message.mDynamicImg = (object.mDynamicImg !== undefined && object.mDynamicImg !== null)
      ? Image.fromPartial(object.mDynamicImg)
      : undefined;
    message.canMirror = object.canMirror ?? false;
    message.trayNormalBgImg = (object.trayNormalBgImg !== undefined && object.trayNormalBgImg !== null)
      ? Image.fromPartial(object.trayNormalBgImg)
      : undefined;
    message.trayNormalBgColor = object.trayNormalBgColor?.map((e) => e) || [];
    message.traySmallBgImg = (object.traySmallBgImg !== undefined && object.traySmallBgImg !== null)
      ? Image.fromPartial(object.traySmallBgImg)
      : undefined;
    message.traySmallBgColor = object.traySmallBgColor?.map((e) => e) || [];
    message.rightTagText = (object.rightTagText !== undefined && object.rightTagText !== null)
      ? Text.fromPartial(object.rightTagText)
      : undefined;
    message.rightTagBgImg = (object.rightTagBgImg !== undefined && object.rightTagBgImg !== null)
      ? Image.fromPartial(object.rightTagBgImg)
      : undefined;
    message.rightTagBgColor = object.rightTagBgColor?.map((e) => e) || [];
    message.trayNameTextColor = object.trayNameTextColor ?? "";
    message.trayDescTextColor = object.trayDescTextColor ?? "";
    message.rightTagJumpSchema = object.rightTagJumpSchema ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftMonitorInfo(): WebcastGiftMessage_GiftMonitorInfo {
  return {
    anchorId: "0",
    profitApiMessageDur: "0",
    sendGiftProfitApiStartMs: "0",
    sendGiftProfitCoreStartMs: "0",
    sendGiftReqStartMs: "0",
    sendGiftSendMessageSuccessMs: "0",
    sendProfitApiDur: "0",
    toUserId: "0",
    sendGiftStartClientLocalMs: "0",
    fromPlatform: "",
    fromVersion: "",
  };
}

export const WebcastGiftMessage_GiftMonitorInfoDecoder: MessageFns<WebcastGiftMessage_GiftMonitorInfo> = {
  encode(message: WebcastGiftMessage_GiftMonitorInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.anchorId !== "0") {
      writer.uint32(8).int64(message.anchorId);
    }
    if (message.profitApiMessageDur !== "0") {
      writer.uint32(16).int64(message.profitApiMessageDur);
    }
    if (message.sendGiftProfitApiStartMs !== "0") {
      writer.uint32(24).int64(message.sendGiftProfitApiStartMs);
    }
    if (message.sendGiftProfitCoreStartMs !== "0") {
      writer.uint32(32).int64(message.sendGiftProfitCoreStartMs);
    }
    if (message.sendGiftReqStartMs !== "0") {
      writer.uint32(40).int64(message.sendGiftReqStartMs);
    }
    if (message.sendGiftSendMessageSuccessMs !== "0") {
      writer.uint32(48).int64(message.sendGiftSendMessageSuccessMs);
    }
    if (message.sendProfitApiDur !== "0") {
      writer.uint32(56).int64(message.sendProfitApiDur);
    }
    if (message.toUserId !== "0") {
      writer.uint32(64).int64(message.toUserId);
    }
    if (message.sendGiftStartClientLocalMs !== "0") {
      writer.uint32(72).int64(message.sendGiftStartClientLocalMs);
    }
    if (message.fromPlatform !== "") {
      writer.uint32(82).string(message.fromPlatform);
    }
    if (message.fromVersion !== "") {
      writer.uint32(90).string(message.fromVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_GiftMonitorInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftMonitorInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.anchorId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.profitApiMessageDur = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sendGiftProfitApiStartMs = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sendGiftProfitCoreStartMs = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sendGiftReqStartMs = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sendGiftSendMessageSuccessMs = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.sendProfitApiDur = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.sendGiftStartClientLocalMs = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.fromPlatform = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fromVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftMonitorInfo {
    return {
      anchorId: isSet(object.anchorId) ? globalThis.String(object.anchorId) : "0",
      profitApiMessageDur: isSet(object.profitApiMessageDur) ? globalThis.String(object.profitApiMessageDur) : "0",
      sendGiftProfitApiStartMs: isSet(object.sendGiftProfitApiStartMs)
        ? globalThis.String(object.sendGiftProfitApiStartMs)
        : "0",
      sendGiftProfitCoreStartMs: isSet(object.sendGiftProfitCoreStartMs)
        ? globalThis.String(object.sendGiftProfitCoreStartMs)
        : "0",
      sendGiftReqStartMs: isSet(object.sendGiftReqStartMs) ? globalThis.String(object.sendGiftReqStartMs) : "0",
      sendGiftSendMessageSuccessMs: isSet(object.sendGiftSendMessageSuccessMs)
        ? globalThis.String(object.sendGiftSendMessageSuccessMs)
        : "0",
      sendProfitApiDur: isSet(object.sendProfitApiDur) ? globalThis.String(object.sendProfitApiDur) : "0",
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
      sendGiftStartClientLocalMs: isSet(object.sendGiftStartClientLocalMs)
        ? globalThis.String(object.sendGiftStartClientLocalMs)
        : "0",
      fromPlatform: isSet(object.fromPlatform) ? globalThis.String(object.fromPlatform) : "",
      fromVersion: isSet(object.fromVersion) ? globalThis.String(object.fromVersion) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_GiftMonitorInfo): unknown {
    const obj: any = {};
    if (message.anchorId !== "0") {
      obj.anchorId = message.anchorId;
    }
    if (message.profitApiMessageDur !== "0") {
      obj.profitApiMessageDur = message.profitApiMessageDur;
    }
    if (message.sendGiftProfitApiStartMs !== "0") {
      obj.sendGiftProfitApiStartMs = message.sendGiftProfitApiStartMs;
    }
    if (message.sendGiftProfitCoreStartMs !== "0") {
      obj.sendGiftProfitCoreStartMs = message.sendGiftProfitCoreStartMs;
    }
    if (message.sendGiftReqStartMs !== "0") {
      obj.sendGiftReqStartMs = message.sendGiftReqStartMs;
    }
    if (message.sendGiftSendMessageSuccessMs !== "0") {
      obj.sendGiftSendMessageSuccessMs = message.sendGiftSendMessageSuccessMs;
    }
    if (message.sendProfitApiDur !== "0") {
      obj.sendProfitApiDur = message.sendProfitApiDur;
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    if (message.sendGiftStartClientLocalMs !== "0") {
      obj.sendGiftStartClientLocalMs = message.sendGiftStartClientLocalMs;
    }
    if (message.fromPlatform !== "") {
      obj.fromPlatform = message.fromPlatform;
    }
    if (message.fromVersion !== "") {
      obj.fromVersion = message.fromVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftMonitorInfo>, I>>(
    base?: I,
  ): WebcastGiftMessage_GiftMonitorInfo {
    return WebcastGiftMessage_GiftMonitorInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftMonitorInfo>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftMonitorInfo {
    const message = createBaseWebcastGiftMessage_GiftMonitorInfo();
    message.anchorId = object.anchorId ?? "0";
    message.profitApiMessageDur = object.profitApiMessageDur ?? "0";
    message.sendGiftProfitApiStartMs = object.sendGiftProfitApiStartMs ?? "0";
    message.sendGiftProfitCoreStartMs = object.sendGiftProfitCoreStartMs ?? "0";
    message.sendGiftReqStartMs = object.sendGiftReqStartMs ?? "0";
    message.sendGiftSendMessageSuccessMs = object.sendGiftSendMessageSuccessMs ?? "0";
    message.sendProfitApiDur = object.sendProfitApiDur ?? "0";
    message.toUserId = object.toUserId ?? "0";
    message.sendGiftStartClientLocalMs = object.sendGiftStartClientLocalMs ?? "0";
    message.fromPlatform = object.fromPlatform ?? "";
    message.fromVersion = object.fromVersion ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_MatchInfo(): WebcastGiftMessage_MatchInfo {
  return { critical: "0", effectCardInUse: false, multiplierType: 0, multiplierValue: "0" };
}

export const WebcastGiftMessage_MatchInfoDecoder: MessageFns<WebcastGiftMessage_MatchInfo> = {
  encode(message: WebcastGiftMessage_MatchInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.critical !== "0") {
      writer.uint32(8).int64(message.critical);
    }
    if (message.effectCardInUse !== false) {
      writer.uint32(16).bool(message.effectCardInUse);
    }
    if (message.multiplierType !== 0) {
      writer.uint32(24).int32(message.multiplierType);
    }
    if (message.multiplierValue !== "0") {
      writer.uint32(32).int64(message.multiplierValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_MatchInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_MatchInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.critical = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.effectCardInUse = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.multiplierType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.multiplierValue = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_MatchInfo {
    return {
      critical: isSet(object.critical) ? globalThis.String(object.critical) : "0",
      effectCardInUse: isSet(object.effectCardInUse) ? globalThis.Boolean(object.effectCardInUse) : false,
      multiplierType: isSet(object.multiplierType) ? multiplierTypeFromJSON(object.multiplierType) : 0,
      multiplierValue: isSet(object.multiplierValue) ? globalThis.String(object.multiplierValue) : "0",
    };
  },

  toJSON(message: WebcastGiftMessage_MatchInfo): unknown {
    const obj: any = {};
    if (message.critical !== "0") {
      obj.critical = message.critical;
    }
    if (message.effectCardInUse !== false) {
      obj.effectCardInUse = message.effectCardInUse;
    }
    if (message.multiplierType !== 0) {
      obj.multiplierType = multiplierTypeToJSON(message.multiplierType);
    }
    if (message.multiplierValue !== "0") {
      obj.multiplierValue = message.multiplierValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_MatchInfo>, I>>(base?: I): WebcastGiftMessage_MatchInfo {
    return WebcastGiftMessage_MatchInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_MatchInfo>, I>>(object: I): WebcastGiftMessage_MatchInfo {
    const message = createBaseWebcastGiftMessage_MatchInfo();
    message.critical = object.critical ?? "0";
    message.effectCardInUse = object.effectCardInUse ?? false;
    message.multiplierType = object.multiplierType ?? 0;
    message.multiplierValue = object.multiplierValue ?? "0";
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo(): WebcastGiftMessage_GiftsBoxInfo {
  return { gifts: [] };
}

export const WebcastGiftMessage_GiftsBoxInfoDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo> = {
  encode(message: WebcastGiftMessage_GiftsBoxInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gifts) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBoxDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_GiftsBoxInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gifts.push(WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBoxDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo {
    return {
      gifts: globalThis.Array.isArray(object?.gifts)
        ? object.gifts.map((e: any) => WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebcastGiftMessage_GiftsBoxInfo): unknown {
    const obj: any = {};
    if (message.gifts?.length) {
      obj.gifts = message.gifts.map((e) => WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo>, I>>(base?: I): WebcastGiftMessage_GiftsBoxInfo {
    return WebcastGiftMessage_GiftsBoxInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftsBoxInfo {
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo();
    message.gifts = object.gifts?.map((e) => WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox {
  return { giftId: "0", effectId: "0", colorId: "0", remainTimes: 0, asset: undefined };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBoxDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox> =
  {
    encode(
      message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.giftId !== "0") {
        writer.uint32(8).int64(message.giftId);
      }
      if (message.effectId !== "0") {
        writer.uint32(16).int64(message.effectId);
      }
      if (message.colorId !== "0") {
        writer.uint32(24).int64(message.colorId);
      }
      if (message.remainTimes !== 0) {
        writer.uint32(32).int32(message.remainTimes);
      }
      if (message.asset !== undefined) {
        WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.encode(message.asset, writer.uint32(42).fork())
          .join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.giftId = reader.int64().toString();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.effectId = reader.int64().toString();
            continue;
          }
          case 3: {
            if (tag !== 24) {
              break;
            }

            message.colorId = reader.int64().toString();
            continue;
          }
          case 4: {
            if (tag !== 32) {
              break;
            }

            message.remainTimes = reader.int32();
            continue;
          }
          case 5: {
            if (tag !== 42) {
              break;
            }

            message.asset = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox {
      return {
        giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "0",
        effectId: isSet(object.effectId) ? globalThis.String(object.effectId) : "0",
        colorId: isSet(object.colorId) ? globalThis.String(object.colorId) : "0",
        remainTimes: isSet(object.remainTimes) ? globalThis.Number(object.remainTimes) : 0,
        asset: isSet(object.asset)
          ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.fromJSON(object.asset)
          : undefined,
      };
    },

    toJSON(message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox): unknown {
      const obj: any = {};
      if (message.giftId !== "0") {
        obj.giftId = message.giftId;
      }
      if (message.effectId !== "0") {
        obj.effectId = message.effectId;
      }
      if (message.colorId !== "0") {
        obj.colorId = message.colorId;
      }
      if (message.remainTimes !== 0) {
        obj.remainTimes = Math.round(message.remainTimes);
      }
      if (message.asset !== undefined) {
        obj.asset = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.toJSON(message.asset);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox>, I>>(
      base?: I,
    ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox {
      return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox>, I>>(
      object: I,
    ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox {
      const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox();
      message.giftId = object.giftId ?? "0";
      message.effectId = object.effectId ?? "0";
      message.colorId = object.colorId ?? "0";
      message.remainTimes = object.remainTimes ?? 0;
      message.asset = (object.asset !== undefined && object.asset !== null)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.fromPartial(object.asset)
        : undefined;
      return message;
    },
  };

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel {
  return {
    name: "",
    resourceUri: "",
    resourceModel: undefined,
    describe: "",
    id: "0",
    resourceType: 0,
    md5: "",
    size: "0",
    lokiExtraContent: undefined,
    downloadType: 0,
    resourceByteVC1Model: undefined,
    bytevc1Md5: "",
    videoResourceList: [],
    faceRecognitionArchiveMeta: undefined,
    lynxUrlSettingsKey: "",
    downgradeResourceType: 0,
    assetExtra: undefined,
    stickerAssetVariant: 0,
    immediateDownload: false,
    stickerAssetVariantReason: 0,
  };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel: MessageFns<
  WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel> = {
  encode(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.resourceUri !== "") {
      writer.uint32(18).string(message.resourceUri);
    }
    if (message.resourceModel !== undefined) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.encode(
        message.resourceModel,
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.id !== "0") {
      writer.uint32(48).int64(message.id);
    }
    if (message.resourceType !== 0) {
      writer.uint32(56).int32(message.resourceType);
    }
    if (message.md5 !== "") {
      writer.uint32(66).string(message.md5);
    }
    if (message.size !== "0") {
      writer.uint32(72).int64(message.size);
    }
    if (message.lokiExtraContent !== undefined) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContentDecoder.encode(
        message.lokiExtraContent,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.downloadType !== 0) {
      writer.uint32(208).int32(message.downloadType);
    }
    if (message.resourceByteVC1Model !== undefined) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.encode(
        message.resourceByteVC1Model,
        writer.uint32(226).fork(),
      ).join();
    }
    if (message.bytevc1Md5 !== "") {
      writer.uint32(234).string(message.bytevc1Md5);
    }
    for (const v of message.videoResourceList) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResourceDecoder.encode(v!, writer.uint32(242).fork())
        .join();
    }
    if (message.faceRecognitionArchiveMeta !== undefined) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMetaDecoder.encode(
        message.faceRecognitionArchiveMeta,
        writer.uint32(250).fork(),
      ).join();
    }
    if (message.lynxUrlSettingsKey !== "") {
      writer.uint32(258).string(message.lynxUrlSettingsKey);
    }
    if (message.downgradeResourceType !== 0) {
      writer.uint32(264).int32(message.downgradeResourceType);
    }
    if (message.assetExtra !== undefined) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtraDecoder.encode(
        message.assetExtra,
        writer.uint32(274).fork(),
      ).join();
    }
    if (message.stickerAssetVariant !== 0) {
      writer.uint32(280).int32(message.stickerAssetVariant);
    }
    if (message.immediateDownload !== false) {
      writer.uint32(288).bool(message.immediateDownload);
    }
    if (message.stickerAssetVariantReason !== 0) {
      writer.uint32(296).int32(message.stickerAssetVariantReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resourceUri = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resourceModel = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.resourceType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.md5 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.lokiExtraContent = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContentDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.downloadType = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.resourceByteVC1Model = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.bytevc1Md5 = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.videoResourceList.push(
            WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResourceDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.faceRecognitionArchiveMeta =
            WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMetaDecoder.decode(
              reader,
              reader.uint32(),
            );
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.lynxUrlSettingsKey = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.downgradeResourceType = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.assetExtra = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtraDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.stickerAssetVariant = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.immediateDownload = reader.bool();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.stickerAssetVariantReason = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      resourceUri: isSet(object.resourceUri) ? globalThis.String(object.resourceUri) : "",
      resourceModel: isSet(object.resourceModel)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.fromJSON(object.resourceModel)
        : undefined,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      resourceType: isSet(object.resourceType) ? globalThis.Number(object.resourceType) : 0,
      md5: isSet(object.md5) ? globalThis.String(object.md5) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      lokiExtraContent: isSet(object.lokiExtraContent)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent.fromJSON(object.lokiExtraContent)
        : undefined,
      downloadType: isSet(object.downloadType) ? globalThis.Number(object.downloadType) : 0,
      resourceByteVC1Model: isSet(object.resourceByteVC1Model)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.fromJSON(object.resourceByteVC1Model)
        : undefined,
      bytevc1Md5: isSet(object.bytevc1Md5) ? globalThis.String(object.bytevc1Md5) : "",
      videoResourceList: globalThis.Array.isArray(object?.videoResourceList)
        ? object.videoResourceList.map((e: any) =>
          WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource.fromJSON(e)
        )
        : [],
      faceRecognitionArchiveMeta: isSet(object.faceRecognitionArchiveMeta)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta.fromJSON(
          object.faceRecognitionArchiveMeta,
        )
        : undefined,
      lynxUrlSettingsKey: isSet(object.lynxUrlSettingsKey) ? globalThis.String(object.lynxUrlSettingsKey) : "",
      downgradeResourceType: isSet(object.downgradeResourceType) ? globalThis.Number(object.downgradeResourceType) : 0,
      assetExtra: isSet(object.assetExtra)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra.fromJSON(object.assetExtra)
        : undefined,
      stickerAssetVariant: isSet(object.stickerAssetVariant) ? globalThis.Number(object.stickerAssetVariant) : 0,
      immediateDownload: isSet(object.immediateDownload) ? globalThis.Boolean(object.immediateDownload) : false,
      stickerAssetVariantReason: isSet(object.stickerAssetVariantReason)
        ? globalThis.Number(object.stickerAssetVariantReason)
        : 0,
    };
  },

  toJSON(message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.resourceUri !== "") {
      obj.resourceUri = message.resourceUri;
    }
    if (message.resourceModel !== undefined) {
      obj.resourceModel = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.toJSON(
        message.resourceModel,
      );
    }
    if (message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.resourceType !== 0) {
      obj.resourceType = Math.round(message.resourceType);
    }
    if (message.md5 !== "") {
      obj.md5 = message.md5;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.lokiExtraContent !== undefined) {
      obj.lokiExtraContent = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent.toJSON(
        message.lokiExtraContent,
      );
    }
    if (message.downloadType !== 0) {
      obj.downloadType = Math.round(message.downloadType);
    }
    if (message.resourceByteVC1Model !== undefined) {
      obj.resourceByteVC1Model = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.toJSON(
        message.resourceByteVC1Model,
      );
    }
    if (message.bytevc1Md5 !== "") {
      obj.bytevc1Md5 = message.bytevc1Md5;
    }
    if (message.videoResourceList?.length) {
      obj.videoResourceList = message.videoResourceList.map((e) =>
        WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource.toJSON(e)
      );
    }
    if (message.faceRecognitionArchiveMeta !== undefined) {
      obj.faceRecognitionArchiveMeta = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta
        .toJSON(message.faceRecognitionArchiveMeta);
    }
    if (message.lynxUrlSettingsKey !== "") {
      obj.lynxUrlSettingsKey = message.lynxUrlSettingsKey;
    }
    if (message.downgradeResourceType !== 0) {
      obj.downgradeResourceType = Math.round(message.downgradeResourceType);
    }
    if (message.assetExtra !== undefined) {
      obj.assetExtra = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra.toJSON(message.assetExtra);
    }
    if (message.stickerAssetVariant !== 0) {
      obj.stickerAssetVariant = Math.round(message.stickerAssetVariant);
    }
    if (message.immediateDownload !== false) {
      obj.immediateDownload = message.immediateDownload;
    }
    if (message.stickerAssetVariantReason !== 0) {
      obj.stickerAssetVariantReason = Math.round(message.stickerAssetVariantReason);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel>, I>>(
    base?: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel {
    return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel {
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel();
    message.name = object.name ?? "";
    message.resourceUri = object.resourceUri ?? "";
    message.resourceModel = (object.resourceModel !== undefined && object.resourceModel !== null)
      ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.fromPartial(object.resourceModel)
      : undefined;
    message.describe = object.describe ?? "";
    message.id = object.id ?? "0";
    message.resourceType = object.resourceType ?? 0;
    message.md5 = object.md5 ?? "";
    message.size = object.size ?? "0";
    message.lokiExtraContent = (object.lokiExtraContent !== undefined && object.lokiExtraContent !== null)
      ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent.fromPartial(object.lokiExtraContent)
      : undefined;
    message.downloadType = object.downloadType ?? 0;
    message.resourceByteVC1Model = (object.resourceByteVC1Model !== undefined && object.resourceByteVC1Model !== null)
      ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.fromPartial(object.resourceByteVC1Model)
      : undefined;
    message.bytevc1Md5 = object.bytevc1Md5 ?? "";
    message.videoResourceList =
      object.videoResourceList?.map((e) =>
        WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource.fromPartial(e)
      ) || [];
    message.faceRecognitionArchiveMeta =
      (object.faceRecognitionArchiveMeta !== undefined && object.faceRecognitionArchiveMeta !== null)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta.fromPartial(
          object.faceRecognitionArchiveMeta,
        )
        : undefined;
    message.lynxUrlSettingsKey = object.lynxUrlSettingsKey ?? "";
    message.downgradeResourceType = object.downgradeResourceType ?? 0;
    message.assetExtra = (object.assetExtra !== undefined && object.assetExtra !== null)
      ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra.fromPartial(object.assetExtra)
      : undefined;
    message.stickerAssetVariant = object.stickerAssetVariant ?? 0;
    message.immediateDownload = object.immediateDownload ?? false;
    message.stickerAssetVariantReason = object.stickerAssetVariantReason ?? 0;
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra {
  return { effectStarlingKey: "" };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtraDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra> = {
  encode(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.effectStarlingKey !== "") {
      writer.uint32(10).string(message.effectStarlingKey);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.effectStarlingKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra {
    return { effectStarlingKey: isSet(object.effectStarlingKey) ? globalThis.String(object.effectStarlingKey) : "" };
  },

  toJSON(message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra): unknown {
    const obj: any = {};
    if (message.effectStarlingKey !== "") {
      obj.effectStarlingKey = message.effectStarlingKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra>, I>>(
    base?: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra {
    return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra {
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra();
    message.effectStarlingKey = object.effectStarlingKey ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel {
  return { urlList: [], uri: "" };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel> = {
  encode(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.urlList) {
      writer.uint32(10).string(v!);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.urlList.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel {
    return {
      urlList: globalThis.Array.isArray(object?.urlList) ? object.urlList.map((e: any) => globalThis.String(e)) : [],
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel): unknown {
    const obj: any = {};
    if (message.urlList?.length) {
      obj.urlList = message.urlList;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel>, I>>(
    base?: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel {
    return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel {
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel();
    message.urlList = object.urlList?.map((e) => e) || [];
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent {
  return {
    giftType: "",
    giftDuration: "0",
    needScreenShot: false,
    ismultiFrame: false,
    viewOverlay: "",
    befViewRenderSize: undefined,
    befViewRenderFPS: 0,
    befViewFitMode: 0,
    modelNames: "",
    requirements: [],
  };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContentDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent> = {
  encode(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.giftType !== "") {
      writer.uint32(10).string(message.giftType);
    }
    if (message.giftDuration !== "0") {
      writer.uint32(16).int64(message.giftDuration);
    }
    if (message.needScreenShot !== false) {
      writer.uint32(24).bool(message.needScreenShot);
    }
    if (message.ismultiFrame !== false) {
      writer.uint32(32).bool(message.ismultiFrame);
    }
    if (message.viewOverlay !== "") {
      writer.uint32(42).string(message.viewOverlay);
    }
    if (message.befViewRenderSize !== undefined) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.encode(
        message.befViewRenderSize,
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.befViewRenderFPS !== 0) {
      writer.uint32(56).int32(message.befViewRenderFPS);
    }
    if (message.befViewFitMode !== 0) {
      writer.uint32(64).int32(message.befViewFitMode);
    }
    if (message.modelNames !== "") {
      writer.uint32(74).string(message.modelNames);
    }
    for (const v of message.requirements) {
      writer.uint32(82).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.giftType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.giftDuration = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.needScreenShot = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ismultiFrame = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.viewOverlay = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.befViewRenderSize =
            WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.decode(
              reader,
              reader.uint32(),
            );
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.befViewRenderFPS = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.befViewFitMode = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.modelNames = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.requirements.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent {
    return {
      giftType: isSet(object.giftType) ? globalThis.String(object.giftType) : "",
      giftDuration: isSet(object.giftDuration) ? globalThis.String(object.giftDuration) : "0",
      needScreenShot: isSet(object.needScreenShot) ? globalThis.Boolean(object.needScreenShot) : false,
      ismultiFrame: isSet(object.ismultiFrame) ? globalThis.Boolean(object.ismultiFrame) : false,
      viewOverlay: isSet(object.viewOverlay) ? globalThis.String(object.viewOverlay) : "",
      befViewRenderSize: isSet(object.befViewRenderSize)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize.fromJSON(
          object.befViewRenderSize,
        )
        : undefined,
      befViewRenderFPS: isSet(object.befViewRenderFPS) ? globalThis.Number(object.befViewRenderFPS) : 0,
      befViewFitMode: isSet(object.befViewFitMode) ? globalThis.Number(object.befViewFitMode) : 0,
      modelNames: isSet(object.modelNames) ? globalThis.String(object.modelNames) : "",
      requirements: globalThis.Array.isArray(object?.requirements)
        ? object.requirements.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent): unknown {
    const obj: any = {};
    if (message.giftType !== "") {
      obj.giftType = message.giftType;
    }
    if (message.giftDuration !== "0") {
      obj.giftDuration = message.giftDuration;
    }
    if (message.needScreenShot !== false) {
      obj.needScreenShot = message.needScreenShot;
    }
    if (message.ismultiFrame !== false) {
      obj.ismultiFrame = message.ismultiFrame;
    }
    if (message.viewOverlay !== "") {
      obj.viewOverlay = message.viewOverlay;
    }
    if (message.befViewRenderSize !== undefined) {
      obj.befViewRenderSize =
        WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize.toJSON(
          message.befViewRenderSize,
        );
    }
    if (message.befViewRenderFPS !== 0) {
      obj.befViewRenderFPS = Math.round(message.befViewRenderFPS);
    }
    if (message.befViewFitMode !== 0) {
      obj.befViewFitMode = Math.round(message.befViewFitMode);
    }
    if (message.modelNames !== "") {
      obj.modelNames = message.modelNames;
    }
    if (message.requirements?.length) {
      obj.requirements = message.requirements;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent>, I>>(
    base?: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent {
    return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent>, I>,
  >(object: I): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent {
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent();
    message.giftType = object.giftType ?? "";
    message.giftDuration = object.giftDuration ?? "0";
    message.needScreenShot = object.needScreenShot ?? false;
    message.ismultiFrame = object.ismultiFrame ?? false;
    message.viewOverlay = object.viewOverlay ?? "";
    message.befViewRenderSize = (object.befViewRenderSize !== undefined && object.befViewRenderSize !== null)
      ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize.fromPartial(
        object.befViewRenderSize,
      )
      : undefined;
    message.befViewRenderFPS = object.befViewRenderFPS ?? 0;
    message.befViewFitMode = object.befViewFitMode ?? 0;
    message.modelNames = object.modelNames ?? "";
    message.requirements = object.requirements?.map((e) => e) || [];
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize {
  return { with: 0, height: 0 };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize> = {
  encode(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.with !== 0) {
      writer.uint32(8).int32(message.with);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.with = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    return {
      with: isSet(object.with) ? globalThis.Number(object.with) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize,
  ): unknown {
    const obj: any = {};
    if (message.with !== 0) {
      obj.with = Math.round(message.with);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize>,
      I
    >,
  >(base?: I): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize>,
      I
    >,
  >(object: I): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    const message =
      createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize();
    message.with = object.with ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource {
  return { videoTypeName: "", videoUrl: undefined, videoMd5: "" };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResourceDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource> = {
  encode(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.videoTypeName !== "") {
      writer.uint32(10).string(message.videoTypeName);
    }
    if (message.videoUrl !== undefined) {
      WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.encode(
        message.videoUrl,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.videoMd5 !== "") {
      writer.uint32(26).string(message.videoMd5);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoTypeName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.videoUrl = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.videoMd5 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource {
    return {
      videoTypeName: isSet(object.videoTypeName) ? globalThis.String(object.videoTypeName) : "",
      videoUrl: isSet(object.videoUrl)
        ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.fromJSON(object.videoUrl)
        : undefined,
      videoMd5: isSet(object.videoMd5) ? globalThis.String(object.videoMd5) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource): unknown {
    const obj: any = {};
    if (message.videoTypeName !== "") {
      obj.videoTypeName = message.videoTypeName;
    }
    if (message.videoUrl !== undefined) {
      obj.videoUrl = WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.toJSON(message.videoUrl);
    }
    if (message.videoMd5 !== "") {
      obj.videoMd5 = message.videoMd5;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource>, I>>(
    base?: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource {
    return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource>, I>>(
    object: I,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource {
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource();
    message.videoTypeName = object.videoTypeName ?? "";
    message.videoUrl = (object.videoUrl !== undefined && object.videoUrl !== null)
      ? WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.fromPartial(object.videoUrl)
      : undefined;
    message.videoMd5 = object.videoMd5 ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta(): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta {
  return { version: "", requirements: [], modelNames: "", sdkExtra: "" };
}

export const WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMetaDecoder: MessageFns<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta> = {
  encode(
    message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    for (const v of message.requirements) {
      writer.uint32(18).string(v!);
    }
    if (message.modelNames !== "") {
      writer.uint32(26).string(message.modelNames);
    }
    if (message.sdkExtra !== "") {
      writer.uint32(34).string(message.sdkExtra);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requirements.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.modelNames = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sdkExtra = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      requirements: globalThis.Array.isArray(object?.requirements)
        ? object.requirements.map((e: any) => globalThis.String(e))
        : [],
      modelNames: isSet(object.modelNames) ? globalThis.String(object.modelNames) : "",
      sdkExtra: isSet(object.sdkExtra) ? globalThis.String(object.sdkExtra) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.requirements?.length) {
      obj.requirements = message.requirements;
    }
    if (message.modelNames !== "") {
      obj.modelNames = message.modelNames;
    }
    if (message.sdkExtra !== "") {
      obj.sdkExtra = message.sdkExtra;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta>, I>,
  >(base?: I): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta {
    return WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta>, I>,
  >(object: I): WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta {
    const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta();
    message.version = object.version ?? "";
    message.requirements = object.requirements?.map((e) => e) || [];
    message.modelNames = object.modelNames ?? "";
    message.sdkExtra = object.sdkExtra ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_AssetsModel(): WebcastGiftMessage_AssetsModel {
  return {
    name: "",
    resourceUri: "",
    resourceModel: undefined,
    describe: "",
    id: "0",
    resourceType: 0,
    md5: "",
    size: "0",
    lokiExtraContent: undefined,
    downloadType: 0,
    resourceByteVC1Model: undefined,
    bytevc1Md5: "",
    videoResourceList: [],
    faceRecognitionArchiveMeta: undefined,
    lynxUrlSettingsKey: "",
    downgradeResourceType: 0,
    assetExtra: undefined,
    stickerAssetVariant: 0,
    immediateDownload: false,
    stickerAssetVariantReason: 0,
  };
}

export const WebcastGiftMessage_AssetsModelDecoder: MessageFns<WebcastGiftMessage_AssetsModel> = {
  encode(message: WebcastGiftMessage_AssetsModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.resourceUri !== "") {
      writer.uint32(18).string(message.resourceUri);
    }
    if (message.resourceModel !== undefined) {
      WebcastGiftMessage_AssetsModel_ResourceModelDecoder.encode(message.resourceModel, writer.uint32(34).fork()).join();
    }
    if (message.describe !== "") {
      writer.uint32(42).string(message.describe);
    }
    if (message.id !== "0") {
      writer.uint32(48).int64(message.id);
    }
    if (message.resourceType !== 0) {
      writer.uint32(56).int32(message.resourceType);
    }
    if (message.md5 !== "") {
      writer.uint32(66).string(message.md5);
    }
    if (message.size !== "0") {
      writer.uint32(72).int64(message.size);
    }
    if (message.lokiExtraContent !== undefined) {
      WebcastGiftMessage_AssetsModel_LokiExtraContentDecoder.encode(message.lokiExtraContent, writer.uint32(82).fork()).join();
    }
    if (message.downloadType !== 0) {
      writer.uint32(208).int32(message.downloadType);
    }
    if (message.resourceByteVC1Model !== undefined) {
      WebcastGiftMessage_AssetsModel_ResourceModelDecoder.encode(message.resourceByteVC1Model, writer.uint32(226).fork())
        .join();
    }
    if (message.bytevc1Md5 !== "") {
      writer.uint32(234).string(message.bytevc1Md5);
    }
    for (const v of message.videoResourceList) {
      WebcastGiftMessage_AssetsModel_VideoResourceDecoder.encode(v!, writer.uint32(242).fork()).join();
    }
    if (message.faceRecognitionArchiveMeta !== undefined) {
      WebcastGiftMessage_AssetsModel_FaceRecognitionMetaDecoder.encode(
        message.faceRecognitionArchiveMeta,
        writer.uint32(250).fork(),
      ).join();
    }
    if (message.lynxUrlSettingsKey !== "") {
      writer.uint32(258).string(message.lynxUrlSettingsKey);
    }
    if (message.downgradeResourceType !== 0) {
      writer.uint32(264).int32(message.downgradeResourceType);
    }
    if (message.assetExtra !== undefined) {
      WebcastGiftMessage_AssetsModel_AssetExtraDecoder.encode(message.assetExtra, writer.uint32(274).fork()).join();
    }
    if (message.stickerAssetVariant !== 0) {
      writer.uint32(280).int32(message.stickerAssetVariant);
    }
    if (message.immediateDownload !== false) {
      writer.uint32(288).bool(message.immediateDownload);
    }
    if (message.stickerAssetVariantReason !== 0) {
      writer.uint32(296).int32(message.stickerAssetVariantReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_AssetsModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_AssetsModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resourceUri = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resourceModel = WebcastGiftMessage_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.describe = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.resourceType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.md5 = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.lokiExtraContent = WebcastGiftMessage_AssetsModel_LokiExtraContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.downloadType = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.resourceByteVC1Model = WebcastGiftMessage_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.bytevc1Md5 = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.videoResourceList.push(WebcastGiftMessage_AssetsModel_VideoResourceDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.faceRecognitionArchiveMeta = WebcastGiftMessage_AssetsModel_FaceRecognitionMetaDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.lynxUrlSettingsKey = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.downgradeResourceType = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.assetExtra = WebcastGiftMessage_AssetsModel_AssetExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.stickerAssetVariant = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.immediateDownload = reader.bool();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.stickerAssetVariantReason = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_AssetsModel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      resourceUri: isSet(object.resourceUri) ? globalThis.String(object.resourceUri) : "",
      resourceModel: isSet(object.resourceModel)
        ? WebcastGiftMessage_AssetsModel_ResourceModel.fromJSON(object.resourceModel)
        : undefined,
      describe: isSet(object.describe) ? globalThis.String(object.describe) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      resourceType: isSet(object.resourceType) ? globalThis.Number(object.resourceType) : 0,
      md5: isSet(object.md5) ? globalThis.String(object.md5) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      lokiExtraContent: isSet(object.lokiExtraContent)
        ? WebcastGiftMessage_AssetsModel_LokiExtraContent.fromJSON(object.lokiExtraContent)
        : undefined,
      downloadType: isSet(object.downloadType) ? globalThis.Number(object.downloadType) : 0,
      resourceByteVC1Model: isSet(object.resourceByteVC1Model)
        ? WebcastGiftMessage_AssetsModel_ResourceModel.fromJSON(object.resourceByteVC1Model)
        : undefined,
      bytevc1Md5: isSet(object.bytevc1Md5) ? globalThis.String(object.bytevc1Md5) : "",
      videoResourceList: globalThis.Array.isArray(object?.videoResourceList)
        ? object.videoResourceList.map((e: any) => WebcastGiftMessage_AssetsModel_VideoResource.fromJSON(e))
        : [],
      faceRecognitionArchiveMeta: isSet(object.faceRecognitionArchiveMeta)
        ? WebcastGiftMessage_AssetsModel_FaceRecognitionMeta.fromJSON(object.faceRecognitionArchiveMeta)
        : undefined,
      lynxUrlSettingsKey: isSet(object.lynxUrlSettingsKey) ? globalThis.String(object.lynxUrlSettingsKey) : "",
      downgradeResourceType: isSet(object.downgradeResourceType) ? globalThis.Number(object.downgradeResourceType) : 0,
      assetExtra: isSet(object.assetExtra)
        ? WebcastGiftMessage_AssetsModel_AssetExtra.fromJSON(object.assetExtra)
        : undefined,
      stickerAssetVariant: isSet(object.stickerAssetVariant) ? globalThis.Number(object.stickerAssetVariant) : 0,
      immediateDownload: isSet(object.immediateDownload) ? globalThis.Boolean(object.immediateDownload) : false,
      stickerAssetVariantReason: isSet(object.stickerAssetVariantReason)
        ? globalThis.Number(object.stickerAssetVariantReason)
        : 0,
    };
  },

  toJSON(message: WebcastGiftMessage_AssetsModel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.resourceUri !== "") {
      obj.resourceUri = message.resourceUri;
    }
    if (message.resourceModel !== undefined) {
      obj.resourceModel = WebcastGiftMessage_AssetsModel_ResourceModel.toJSON(message.resourceModel);
    }
    if (message.describe !== "") {
      obj.describe = message.describe;
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.resourceType !== 0) {
      obj.resourceType = Math.round(message.resourceType);
    }
    if (message.md5 !== "") {
      obj.md5 = message.md5;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.lokiExtraContent !== undefined) {
      obj.lokiExtraContent = WebcastGiftMessage_AssetsModel_LokiExtraContent.toJSON(message.lokiExtraContent);
    }
    if (message.downloadType !== 0) {
      obj.downloadType = Math.round(message.downloadType);
    }
    if (message.resourceByteVC1Model !== undefined) {
      obj.resourceByteVC1Model = WebcastGiftMessage_AssetsModel_ResourceModel.toJSON(message.resourceByteVC1Model);
    }
    if (message.bytevc1Md5 !== "") {
      obj.bytevc1Md5 = message.bytevc1Md5;
    }
    if (message.videoResourceList?.length) {
      obj.videoResourceList = message.videoResourceList.map((e) =>
        WebcastGiftMessage_AssetsModel_VideoResource.toJSON(e)
      );
    }
    if (message.faceRecognitionArchiveMeta !== undefined) {
      obj.faceRecognitionArchiveMeta = WebcastGiftMessage_AssetsModel_FaceRecognitionMeta.toJSON(
        message.faceRecognitionArchiveMeta,
      );
    }
    if (message.lynxUrlSettingsKey !== "") {
      obj.lynxUrlSettingsKey = message.lynxUrlSettingsKey;
    }
    if (message.downgradeResourceType !== 0) {
      obj.downgradeResourceType = Math.round(message.downgradeResourceType);
    }
    if (message.assetExtra !== undefined) {
      obj.assetExtra = WebcastGiftMessage_AssetsModel_AssetExtra.toJSON(message.assetExtra);
    }
    if (message.stickerAssetVariant !== 0) {
      obj.stickerAssetVariant = Math.round(message.stickerAssetVariant);
    }
    if (message.immediateDownload !== false) {
      obj.immediateDownload = message.immediateDownload;
    }
    if (message.stickerAssetVariantReason !== 0) {
      obj.stickerAssetVariantReason = Math.round(message.stickerAssetVariantReason);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel>, I>>(base?: I): WebcastGiftMessage_AssetsModel {
    return WebcastGiftMessage_AssetsModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel>, I>>(
    object: I,
  ): WebcastGiftMessage_AssetsModel {
    const message = createBaseWebcastGiftMessage_AssetsModel();
    message.name = object.name ?? "";
    message.resourceUri = object.resourceUri ?? "";
    message.resourceModel = (object.resourceModel !== undefined && object.resourceModel !== null)
      ? WebcastGiftMessage_AssetsModel_ResourceModel.fromPartial(object.resourceModel)
      : undefined;
    message.describe = object.describe ?? "";
    message.id = object.id ?? "0";
    message.resourceType = object.resourceType ?? 0;
    message.md5 = object.md5 ?? "";
    message.size = object.size ?? "0";
    message.lokiExtraContent = (object.lokiExtraContent !== undefined && object.lokiExtraContent !== null)
      ? WebcastGiftMessage_AssetsModel_LokiExtraContent.fromPartial(object.lokiExtraContent)
      : undefined;
    message.downloadType = object.downloadType ?? 0;
    message.resourceByteVC1Model = (object.resourceByteVC1Model !== undefined && object.resourceByteVC1Model !== null)
      ? WebcastGiftMessage_AssetsModel_ResourceModel.fromPartial(object.resourceByteVC1Model)
      : undefined;
    message.bytevc1Md5 = object.bytevc1Md5 ?? "";
    message.videoResourceList =
      object.videoResourceList?.map((e) => WebcastGiftMessage_AssetsModel_VideoResource.fromPartial(e)) || [];
    message.faceRecognitionArchiveMeta =
      (object.faceRecognitionArchiveMeta !== undefined && object.faceRecognitionArchiveMeta !== null)
        ? WebcastGiftMessage_AssetsModel_FaceRecognitionMeta.fromPartial(object.faceRecognitionArchiveMeta)
        : undefined;
    message.lynxUrlSettingsKey = object.lynxUrlSettingsKey ?? "";
    message.downgradeResourceType = object.downgradeResourceType ?? 0;
    message.assetExtra = (object.assetExtra !== undefined && object.assetExtra !== null)
      ? WebcastGiftMessage_AssetsModel_AssetExtra.fromPartial(object.assetExtra)
      : undefined;
    message.stickerAssetVariant = object.stickerAssetVariant ?? 0;
    message.immediateDownload = object.immediateDownload ?? false;
    message.stickerAssetVariantReason = object.stickerAssetVariantReason ?? 0;
    return message;
  },
};

function createBaseWebcastGiftMessage_AssetsModel_AssetExtra(): WebcastGiftMessage_AssetsModel_AssetExtra {
  return { effectStarlingKey: "" };
}

export const WebcastGiftMessage_AssetsModel_AssetExtraDecoder: MessageFns<WebcastGiftMessage_AssetsModel_AssetExtra> = {
  encode(message: WebcastGiftMessage_AssetsModel_AssetExtra, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.effectStarlingKey !== "") {
      writer.uint32(10).string(message.effectStarlingKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_AssetsModel_AssetExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_AssetsModel_AssetExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.effectStarlingKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_AssetsModel_AssetExtra {
    return { effectStarlingKey: isSet(object.effectStarlingKey) ? globalThis.String(object.effectStarlingKey) : "" };
  },

  toJSON(message: WebcastGiftMessage_AssetsModel_AssetExtra): unknown {
    const obj: any = {};
    if (message.effectStarlingKey !== "") {
      obj.effectStarlingKey = message.effectStarlingKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_AssetExtra>, I>>(
    base?: I,
  ): WebcastGiftMessage_AssetsModel_AssetExtra {
    return WebcastGiftMessage_AssetsModel_AssetExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_AssetExtra>, I>>(
    object: I,
  ): WebcastGiftMessage_AssetsModel_AssetExtra {
    const message = createBaseWebcastGiftMessage_AssetsModel_AssetExtra();
    message.effectStarlingKey = object.effectStarlingKey ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_AssetsModel_ResourceModel(): WebcastGiftMessage_AssetsModel_ResourceModel {
  return { urlList: [], uri: "" };
}

export const WebcastGiftMessage_AssetsModel_ResourceModelDecoder: MessageFns<WebcastGiftMessage_AssetsModel_ResourceModel> = {
  encode(
    message: WebcastGiftMessage_AssetsModel_ResourceModel,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.urlList) {
      writer.uint32(10).string(v!);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_AssetsModel_ResourceModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_AssetsModel_ResourceModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.urlList.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_AssetsModel_ResourceModel {
    return {
      urlList: globalThis.Array.isArray(object?.urlList) ? object.urlList.map((e: any) => globalThis.String(e)) : [],
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_AssetsModel_ResourceModel): unknown {
    const obj: any = {};
    if (message.urlList?.length) {
      obj.urlList = message.urlList;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_ResourceModel>, I>>(
    base?: I,
  ): WebcastGiftMessage_AssetsModel_ResourceModel {
    return WebcastGiftMessage_AssetsModel_ResourceModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_ResourceModel>, I>>(
    object: I,
  ): WebcastGiftMessage_AssetsModel_ResourceModel {
    const message = createBaseWebcastGiftMessage_AssetsModel_ResourceModel();
    message.urlList = object.urlList?.map((e) => e) || [];
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent(): WebcastGiftMessage_AssetsModel_LokiExtraContent {
  return {
    giftType: "",
    giftDuration: "0",
    needScreenShot: false,
    ismultiFrame: false,
    viewOverlay: "",
    befViewRenderSize: undefined,
    befViewRenderFPS: 0,
    befViewFitMode: 0,
    modelNames: "",
    requirements: [],
  };
}

export const WebcastGiftMessage_AssetsModel_LokiExtraContentDecoder: MessageFns<WebcastGiftMessage_AssetsModel_LokiExtraContent> = {
  encode(
    message: WebcastGiftMessage_AssetsModel_LokiExtraContent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.giftType !== "") {
      writer.uint32(10).string(message.giftType);
    }
    if (message.giftDuration !== "0") {
      writer.uint32(16).int64(message.giftDuration);
    }
    if (message.needScreenShot !== false) {
      writer.uint32(24).bool(message.needScreenShot);
    }
    if (message.ismultiFrame !== false) {
      writer.uint32(32).bool(message.ismultiFrame);
    }
    if (message.viewOverlay !== "") {
      writer.uint32(42).string(message.viewOverlay);
    }
    if (message.befViewRenderSize !== undefined) {
      WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.encode(
        message.befViewRenderSize,
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.befViewRenderFPS !== 0) {
      writer.uint32(56).int32(message.befViewRenderFPS);
    }
    if (message.befViewFitMode !== 0) {
      writer.uint32(64).int32(message.befViewFitMode);
    }
    if (message.modelNames !== "") {
      writer.uint32(74).string(message.modelNames);
    }
    for (const v of message.requirements) {
      writer.uint32(82).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_AssetsModel_LokiExtraContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.giftType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.giftDuration = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.needScreenShot = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ismultiFrame = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.viewOverlay = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.befViewRenderSize = WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.befViewRenderFPS = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.befViewFitMode = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.modelNames = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.requirements.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_AssetsModel_LokiExtraContent {
    return {
      giftType: isSet(object.giftType) ? globalThis.String(object.giftType) : "",
      giftDuration: isSet(object.giftDuration) ? globalThis.String(object.giftDuration) : "0",
      needScreenShot: isSet(object.needScreenShot) ? globalThis.Boolean(object.needScreenShot) : false,
      ismultiFrame: isSet(object.ismultiFrame) ? globalThis.Boolean(object.ismultiFrame) : false,
      viewOverlay: isSet(object.viewOverlay) ? globalThis.String(object.viewOverlay) : "",
      befViewRenderSize: isSet(object.befViewRenderSize)
        ? WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize.fromJSON(object.befViewRenderSize)
        : undefined,
      befViewRenderFPS: isSet(object.befViewRenderFPS) ? globalThis.Number(object.befViewRenderFPS) : 0,
      befViewFitMode: isSet(object.befViewFitMode) ? globalThis.Number(object.befViewFitMode) : 0,
      modelNames: isSet(object.modelNames) ? globalThis.String(object.modelNames) : "",
      requirements: globalThis.Array.isArray(object?.requirements)
        ? object.requirements.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: WebcastGiftMessage_AssetsModel_LokiExtraContent): unknown {
    const obj: any = {};
    if (message.giftType !== "") {
      obj.giftType = message.giftType;
    }
    if (message.giftDuration !== "0") {
      obj.giftDuration = message.giftDuration;
    }
    if (message.needScreenShot !== false) {
      obj.needScreenShot = message.needScreenShot;
    }
    if (message.ismultiFrame !== false) {
      obj.ismultiFrame = message.ismultiFrame;
    }
    if (message.viewOverlay !== "") {
      obj.viewOverlay = message.viewOverlay;
    }
    if (message.befViewRenderSize !== undefined) {
      obj.befViewRenderSize = WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize.toJSON(
        message.befViewRenderSize,
      );
    }
    if (message.befViewRenderFPS !== 0) {
      obj.befViewRenderFPS = Math.round(message.befViewRenderFPS);
    }
    if (message.befViewFitMode !== 0) {
      obj.befViewFitMode = Math.round(message.befViewFitMode);
    }
    if (message.modelNames !== "") {
      obj.modelNames = message.modelNames;
    }
    if (message.requirements?.length) {
      obj.requirements = message.requirements;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_LokiExtraContent>, I>>(
    base?: I,
  ): WebcastGiftMessage_AssetsModel_LokiExtraContent {
    return WebcastGiftMessage_AssetsModel_LokiExtraContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_LokiExtraContent>, I>>(
    object: I,
  ): WebcastGiftMessage_AssetsModel_LokiExtraContent {
    const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent();
    message.giftType = object.giftType ?? "";
    message.giftDuration = object.giftDuration ?? "0";
    message.needScreenShot = object.needScreenShot ?? false;
    message.ismultiFrame = object.ismultiFrame ?? false;
    message.viewOverlay = object.viewOverlay ?? "";
    message.befViewRenderSize = (object.befViewRenderSize !== undefined && object.befViewRenderSize !== null)
      ? WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize.fromPartial(object.befViewRenderSize)
      : undefined;
    message.befViewRenderFPS = object.befViewRenderFPS ?? 0;
    message.befViewFitMode = object.befViewFitMode ?? 0;
    message.modelNames = object.modelNames ?? "";
    message.requirements = object.requirements?.map((e) => e) || [];
    return message;
  },
};

function createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize(): WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize {
  return { with: 0, height: 0 };
}

export const WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder: MessageFns<WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize> = {
  encode(
    message: WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.with !== 0) {
      writer.uint32(8).int32(message.with);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.with = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    return {
      with: isSet(object.with) ? globalThis.Number(object.with) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize): unknown {
    const obj: any = {};
    if (message.with !== 0) {
      obj.with = Math.round(message.with);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize>, I>>(
    base?: I,
  ): WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    return WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize>, I>>(
    object: I,
  ): WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize {
    const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize();
    message.with = object.with ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseWebcastGiftMessage_AssetsModel_VideoResource(): WebcastGiftMessage_AssetsModel_VideoResource {
  return { videoTypeName: "", videoUrl: undefined, videoMd5: "" };
}

export const WebcastGiftMessage_AssetsModel_VideoResourceDecoder: MessageFns<WebcastGiftMessage_AssetsModel_VideoResource> = {
  encode(
    message: WebcastGiftMessage_AssetsModel_VideoResource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.videoTypeName !== "") {
      writer.uint32(10).string(message.videoTypeName);
    }
    if (message.videoUrl !== undefined) {
      WebcastGiftMessage_AssetsModel_ResourceModelDecoder.encode(message.videoUrl, writer.uint32(18).fork()).join();
    }
    if (message.videoMd5 !== "") {
      writer.uint32(26).string(message.videoMd5);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_AssetsModel_VideoResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_AssetsModel_VideoResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoTypeName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.videoUrl = WebcastGiftMessage_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.videoMd5 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_AssetsModel_VideoResource {
    return {
      videoTypeName: isSet(object.videoTypeName) ? globalThis.String(object.videoTypeName) : "",
      videoUrl: isSet(object.videoUrl)
        ? WebcastGiftMessage_AssetsModel_ResourceModel.fromJSON(object.videoUrl)
        : undefined,
      videoMd5: isSet(object.videoMd5) ? globalThis.String(object.videoMd5) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_AssetsModel_VideoResource): unknown {
    const obj: any = {};
    if (message.videoTypeName !== "") {
      obj.videoTypeName = message.videoTypeName;
    }
    if (message.videoUrl !== undefined) {
      obj.videoUrl = WebcastGiftMessage_AssetsModel_ResourceModel.toJSON(message.videoUrl);
    }
    if (message.videoMd5 !== "") {
      obj.videoMd5 = message.videoMd5;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_VideoResource>, I>>(
    base?: I,
  ): WebcastGiftMessage_AssetsModel_VideoResource {
    return WebcastGiftMessage_AssetsModel_VideoResource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_VideoResource>, I>>(
    object: I,
  ): WebcastGiftMessage_AssetsModel_VideoResource {
    const message = createBaseWebcastGiftMessage_AssetsModel_VideoResource();
    message.videoTypeName = object.videoTypeName ?? "";
    message.videoUrl = (object.videoUrl !== undefined && object.videoUrl !== null)
      ? WebcastGiftMessage_AssetsModel_ResourceModel.fromPartial(object.videoUrl)
      : undefined;
    message.videoMd5 = object.videoMd5 ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_AssetsModel_FaceRecognitionMeta(): WebcastGiftMessage_AssetsModel_FaceRecognitionMeta {
  return { version: "", requirements: [], modelNames: "", sdkExtra: "" };
}

export const WebcastGiftMessage_AssetsModel_FaceRecognitionMetaDecoder: MessageFns<WebcastGiftMessage_AssetsModel_FaceRecognitionMeta> = {
  encode(
    message: WebcastGiftMessage_AssetsModel_FaceRecognitionMeta,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    for (const v of message.requirements) {
      writer.uint32(18).string(v!);
    }
    if (message.modelNames !== "") {
      writer.uint32(26).string(message.modelNames);
    }
    if (message.sdkExtra !== "") {
      writer.uint32(34).string(message.sdkExtra);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_AssetsModel_FaceRecognitionMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_AssetsModel_FaceRecognitionMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requirements.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.modelNames = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sdkExtra = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_AssetsModel_FaceRecognitionMeta {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      requirements: globalThis.Array.isArray(object?.requirements)
        ? object.requirements.map((e: any) => globalThis.String(e))
        : [],
      modelNames: isSet(object.modelNames) ? globalThis.String(object.modelNames) : "",
      sdkExtra: isSet(object.sdkExtra) ? globalThis.String(object.sdkExtra) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_AssetsModel_FaceRecognitionMeta): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.requirements?.length) {
      obj.requirements = message.requirements;
    }
    if (message.modelNames !== "") {
      obj.modelNames = message.modelNames;
    }
    if (message.sdkExtra !== "") {
      obj.sdkExtra = message.sdkExtra;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_FaceRecognitionMeta>, I>>(
    base?: I,
  ): WebcastGiftMessage_AssetsModel_FaceRecognitionMeta {
    return WebcastGiftMessage_AssetsModel_FaceRecognitionMeta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_AssetsModel_FaceRecognitionMeta>, I>>(
    object: I,
  ): WebcastGiftMessage_AssetsModel_FaceRecognitionMeta {
    const message = createBaseWebcastGiftMessage_AssetsModel_FaceRecognitionMeta();
    message.version = object.version ?? "";
    message.requirements = object.requirements?.map((e) => e) || [];
    message.modelNames = object.modelNames ?? "";
    message.sdkExtra = object.sdkExtra ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_LynxGiftExtra(): WebcastGiftMessage_LynxGiftExtra {
  return { id: "0", code: "0", type: "0", params: [], extra: "" };
}

export const WebcastGiftMessage_LynxGiftExtraDecoder: MessageFns<WebcastGiftMessage_LynxGiftExtra> = {
  encode(message: WebcastGiftMessage_LynxGiftExtra, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.code !== "0") {
      writer.uint32(16).int64(message.code);
    }
    if (message.type !== "0") {
      writer.uint32(24).int64(message.type);
    }
    for (const v of message.params) {
      writer.uint32(34).string(v!);
    }
    if (message.extra !== "") {
      writer.uint32(42).string(message.extra);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_LynxGiftExtra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_LynxGiftExtra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.code = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.params.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extra = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_LynxGiftExtra {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      code: isSet(object.code) ? globalThis.String(object.code) : "0",
      type: isSet(object.type) ? globalThis.String(object.type) : "0",
      params: globalThis.Array.isArray(object?.params) ? object.params.map((e: any) => globalThis.String(e)) : [],
      extra: isSet(object.extra) ? globalThis.String(object.extra) : "",
    };
  },

  toJSON(message: WebcastGiftMessage_LynxGiftExtra): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.code !== "0") {
      obj.code = message.code;
    }
    if (message.type !== "0") {
      obj.type = message.type;
    }
    if (message.params?.length) {
      obj.params = message.params;
    }
    if (message.extra !== "") {
      obj.extra = message.extra;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_LynxGiftExtra>, I>>(
    base?: I,
  ): WebcastGiftMessage_LynxGiftExtra {
    return WebcastGiftMessage_LynxGiftExtra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_LynxGiftExtra>, I>>(
    object: I,
  ): WebcastGiftMessage_LynxGiftExtra {
    const message = createBaseWebcastGiftMessage_LynxGiftExtra();
    message.id = object.id ?? "0";
    message.code = object.code ?? "0";
    message.type = object.type ?? "0";
    message.params = object.params?.map((e) => e) || [];
    message.extra = object.extra ?? "";
    return message;
  },
};

function createBaseWebcastGiftMessage_FlyingMicResources(): WebcastGiftMessage_FlyingMicResources {
  return { pathImage: undefined, micImage: undefined, transitionConfigs: [] };
}

export const WebcastGiftMessage_FlyingMicResourcesDecoder: MessageFns<WebcastGiftMessage_FlyingMicResources> = {
  encode(message: WebcastGiftMessage_FlyingMicResources, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pathImage !== undefined) {
      ImageDecoder.encode(message.pathImage, writer.uint32(10).fork()).join();
    }
    if (message.micImage !== undefined) {
      ImageDecoder.encode(message.micImage, writer.uint32(18).fork()).join();
    }
    for (const v of message.transitionConfigs) {
      WebcastGiftMessage_FlyingMicResources_TransitionConfigDecoder.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_FlyingMicResources {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_FlyingMicResources();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pathImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.micImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transitionConfigs.push(
            WebcastGiftMessage_FlyingMicResources_TransitionConfigDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_FlyingMicResources {
    return {
      pathImage: isSet(object.pathImage) ? Image.fromJSON(object.pathImage) : undefined,
      micImage: isSet(object.micImage) ? Image.fromJSON(object.micImage) : undefined,
      transitionConfigs: globalThis.Array.isArray(object?.transitionConfigs)
        ? object.transitionConfigs.map((e: any) => WebcastGiftMessage_FlyingMicResources_TransitionConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebcastGiftMessage_FlyingMicResources): unknown {
    const obj: any = {};
    if (message.pathImage !== undefined) {
      obj.pathImage = Image.toJSON(message.pathImage);
    }
    if (message.micImage !== undefined) {
      obj.micImage = Image.toJSON(message.micImage);
    }
    if (message.transitionConfigs?.length) {
      obj.transitionConfigs = message.transitionConfigs.map((e) =>
        WebcastGiftMessage_FlyingMicResources_TransitionConfig.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_FlyingMicResources>, I>>(
    base?: I,
  ): WebcastGiftMessage_FlyingMicResources {
    return WebcastGiftMessage_FlyingMicResources.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_FlyingMicResources>, I>>(
    object: I,
  ): WebcastGiftMessage_FlyingMicResources {
    const message = createBaseWebcastGiftMessage_FlyingMicResources();
    message.pathImage = (object.pathImage !== undefined && object.pathImage !== null)
      ? Image.fromPartial(object.pathImage)
      : undefined;
    message.micImage = (object.micImage !== undefined && object.micImage !== null)
      ? Image.fromPartial(object.micImage)
      : undefined;
    message.transitionConfigs =
      object.transitionConfigs?.map((e) => WebcastGiftMessage_FlyingMicResources_TransitionConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebcastGiftMessage_FlyingMicResources_TransitionConfig(): WebcastGiftMessage_FlyingMicResources_TransitionConfig {
  return { configId: "0", resourceImage: undefined };
}

export const WebcastGiftMessage_FlyingMicResources_TransitionConfigDecoder: MessageFns<WebcastGiftMessage_FlyingMicResources_TransitionConfig> = {
  encode(
    message: WebcastGiftMessage_FlyingMicResources_TransitionConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.configId !== "0") {
      writer.uint32(8).int64(message.configId);
    }
    if (message.resourceImage !== undefined) {
      ImageDecoder.encode(message.resourceImage, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_FlyingMicResources_TransitionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_FlyingMicResources_TransitionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.configId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resourceImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_FlyingMicResources_TransitionConfig {
    return {
      configId: isSet(object.configId) ? globalThis.String(object.configId) : "0",
      resourceImage: isSet(object.resourceImage) ? Image.fromJSON(object.resourceImage) : undefined,
    };
  },

  toJSON(message: WebcastGiftMessage_FlyingMicResources_TransitionConfig): unknown {
    const obj: any = {};
    if (message.configId !== "0") {
      obj.configId = message.configId;
    }
    if (message.resourceImage !== undefined) {
      obj.resourceImage = Image.toJSON(message.resourceImage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_FlyingMicResources_TransitionConfig>, I>>(
    base?: I,
  ): WebcastGiftMessage_FlyingMicResources_TransitionConfig {
    return WebcastGiftMessage_FlyingMicResources_TransitionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_FlyingMicResources_TransitionConfig>, I>>(
    object: I,
  ): WebcastGiftMessage_FlyingMicResources_TransitionConfig {
    const message = createBaseWebcastGiftMessage_FlyingMicResources_TransitionConfig();
    message.configId = object.configId ?? "0";
    message.resourceImage = (object.resourceImage !== undefined && object.resourceImage !== null)
      ? Image.fromPartial(object.resourceImage)
      : undefined;
    return message;
  },
};

function createBaseWebcastGiftMessage_SponsorshipInfo(): WebcastGiftMessage_SponsorshipInfo {
  return {
    giftId: "0",
    sponsorId: "0",
    lightGiftUp: false,
    unlightedGiftIcon: "",
    giftGalleryDetailPageSchemeUrl: "",
    giftGalleryClickSponsor: false,
    becomeAllSponsored: false,
  };
}

export const WebcastGiftMessage_SponsorshipInfoDecoder: MessageFns<WebcastGiftMessage_SponsorshipInfo> = {
  encode(message: WebcastGiftMessage_SponsorshipInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftId !== "0") {
      writer.uint32(8).int64(message.giftId);
    }
    if (message.sponsorId !== "0") {
      writer.uint32(16).int64(message.sponsorId);
    }
    if (message.lightGiftUp !== false) {
      writer.uint32(24).bool(message.lightGiftUp);
    }
    if (message.unlightedGiftIcon !== "") {
      writer.uint32(34).string(message.unlightedGiftIcon);
    }
    if (message.giftGalleryDetailPageSchemeUrl !== "") {
      writer.uint32(42).string(message.giftGalleryDetailPageSchemeUrl);
    }
    if (message.giftGalleryClickSponsor !== false) {
      writer.uint32(48).bool(message.giftGalleryClickSponsor);
    }
    if (message.becomeAllSponsored !== false) {
      writer.uint32(168).bool(message.becomeAllSponsored);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGiftMessage_SponsorshipInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGiftMessage_SponsorshipInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sponsorId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lightGiftUp = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.unlightedGiftIcon = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.giftGalleryDetailPageSchemeUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.giftGalleryClickSponsor = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.becomeAllSponsored = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGiftMessage_SponsorshipInfo {
    return {
      giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "0",
      sponsorId: isSet(object.sponsorId) ? globalThis.String(object.sponsorId) : "0",
      lightGiftUp: isSet(object.lightGiftUp) ? globalThis.Boolean(object.lightGiftUp) : false,
      unlightedGiftIcon: isSet(object.unlightedGiftIcon) ? globalThis.String(object.unlightedGiftIcon) : "",
      giftGalleryDetailPageSchemeUrl: isSet(object.giftGalleryDetailPageSchemeUrl)
        ? globalThis.String(object.giftGalleryDetailPageSchemeUrl)
        : "",
      giftGalleryClickSponsor: isSet(object.giftGalleryClickSponsor)
        ? globalThis.Boolean(object.giftGalleryClickSponsor)
        : false,
      becomeAllSponsored: isSet(object.becomeAllSponsored) ? globalThis.Boolean(object.becomeAllSponsored) : false,
    };
  },

  toJSON(message: WebcastGiftMessage_SponsorshipInfo): unknown {
    const obj: any = {};
    if (message.giftId !== "0") {
      obj.giftId = message.giftId;
    }
    if (message.sponsorId !== "0") {
      obj.sponsorId = message.sponsorId;
    }
    if (message.lightGiftUp !== false) {
      obj.lightGiftUp = message.lightGiftUp;
    }
    if (message.unlightedGiftIcon !== "") {
      obj.unlightedGiftIcon = message.unlightedGiftIcon;
    }
    if (message.giftGalleryDetailPageSchemeUrl !== "") {
      obj.giftGalleryDetailPageSchemeUrl = message.giftGalleryDetailPageSchemeUrl;
    }
    if (message.giftGalleryClickSponsor !== false) {
      obj.giftGalleryClickSponsor = message.giftGalleryClickSponsor;
    }
    if (message.becomeAllSponsored !== false) {
      obj.becomeAllSponsored = message.becomeAllSponsored;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGiftMessage_SponsorshipInfo>, I>>(
    base?: I,
  ): WebcastGiftMessage_SponsorshipInfo {
    return WebcastGiftMessage_SponsorshipInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGiftMessage_SponsorshipInfo>, I>>(
    object: I,
  ): WebcastGiftMessage_SponsorshipInfo {
    const message = createBaseWebcastGiftMessage_SponsorshipInfo();
    message.giftId = object.giftId ?? "0";
    message.sponsorId = object.sponsorId ?? "0";
    message.lightGiftUp = object.lightGiftUp ?? false;
    message.unlightedGiftIcon = object.unlightedGiftIcon ?? "";
    message.giftGalleryDetailPageSchemeUrl = object.giftGalleryDetailPageSchemeUrl ?? "";
    message.giftGalleryClickSponsor = object.giftGalleryClickSponsor ?? false;
    message.becomeAllSponsored = object.becomeAllSponsored ?? false;
    return message;
  },
};

function createBaseWebcastLinkMicBattle(): WebcastLinkMicBattle {
  return {
    common: undefined,
    battleId: "0",
    battleSetting: undefined,
    action: 0,
    battleResult: {},
    mBattleDisplayConfig: undefined,
    inviteeGiftPermissionType: 0,
    armies: {},
    anchorInfo: {},
    bubbleText: "",
    supportedActions: [],
    battleCombos: {},
    teamUsers: [],
    inviteeGiftPermissionTypes: [],
    actionByUserId: "0",
    teamBattleResult: [],
    teamArmies: [],
    abtestSettings: [],
    teamMatchCampaign: undefined,
    fuzzyDisplayConfigV2: undefined,
  };
}

export const WebcastLinkMicBattleDecoder: MessageFns<WebcastLinkMicBattle> = {
  encode(message: WebcastLinkMicBattle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.battleId !== "0") {
      writer.uint32(16).int64(message.battleId);
    }
    if (message.battleSetting !== undefined) {
      BattleSettingDecoder.encode(message.battleSetting, writer.uint32(26).fork()).join();
    }
    if (message.action !== 0) {
      writer.uint32(32).int32(message.action);
    }
    Object.entries(message.battleResult).forEach(([key, value]) => {
      WebcastLinkMicBattle_BattleResultEntryDecoder.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.mBattleDisplayConfig !== undefined) {
      WebcastLinkMicBattle_BattleDisplayConfigDecoder.encode(message.mBattleDisplayConfig, writer.uint32(50).fork()).join();
    }
    if (message.inviteeGiftPermissionType !== 0) {
      writer.uint32(64).int32(message.inviteeGiftPermissionType);
    }
    Object.entries(message.armies).forEach(([key, value]) => {
      WebcastLinkMicBattle_ArmiesEntryDecoder.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    Object.entries(message.anchorInfo).forEach(([key, value]) => {
      WebcastLinkMicBattle_AnchorInfoEntryDecoder.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.bubbleText !== "") {
      writer.uint32(90).string(message.bubbleText);
    }
    for (const v of message.supportedActions) {
      WebcastLinkMicBattle_SupportedActionsWrapperDecoder.encode(v!, writer.uint32(98).fork()).join();
    }
    Object.entries(message.battleCombos).forEach(([key, value]) => {
      WebcastLinkMicBattle_BattleCombosEntryDecoder.encode({ key: key as any, value }, writer.uint32(106).fork()).join();
    });
    for (const v of message.teamUsers) {
      WebcastLinkMicBattle_TeamUsersInfoDecoder.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.inviteeGiftPermissionTypes) {
      WebcastLinkMicBattle_BattleInviteeGiftPermissionDecoder.encode(v!, writer.uint32(122).fork()).join();
    }
    if (message.actionByUserId !== "0") {
      writer.uint32(128).int64(message.actionByUserId);
    }
    for (const v of message.teamBattleResult) {
      WebcastLinkMicBattle_BattleTeamResultDecoder.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.teamArmies) {
      BattleTeamUserArmiesDecoder.encode(v!, writer.uint32(146).fork()).join();
    }
    for (const v of message.abtestSettings) {
      WebcastLinkMicBattle_BattleABTestSettingDecoder.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.teamMatchCampaign !== undefined) {
      WebcastLinkMicBattle_TeamMatchCampaignDecoder.encode(message.teamMatchCampaign, writer.uint32(162).fork()).join();
    }
    if (message.fuzzyDisplayConfigV2 !== undefined) {
      HighScoreControlCfgDecoder.encode(message.fuzzyDisplayConfigV2, writer.uint32(170).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.battleId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.battleSetting = BattleSettingDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = WebcastLinkMicBattle_BattleResultEntryDecoder.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.battleResult[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mBattleDisplayConfig = WebcastLinkMicBattle_BattleDisplayConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.inviteeGiftPermissionType = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = WebcastLinkMicBattle_ArmiesEntryDecoder.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.armies[entry9.key] = entry9.value;
          }
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = WebcastLinkMicBattle_AnchorInfoEntryDecoder.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.anchorInfo[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.bubbleText = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.supportedActions.push(WebcastLinkMicBattle_SupportedActionsWrapperDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          const entry13 = WebcastLinkMicBattle_BattleCombosEntryDecoder.decode(reader, reader.uint32());
          if (entry13.value !== undefined) {
            message.battleCombos[entry13.key] = entry13.value;
          }
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.teamUsers.push(WebcastLinkMicBattle_TeamUsersInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.inviteeGiftPermissionTypes.push(
            WebcastLinkMicBattle_BattleInviteeGiftPermissionDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.actionByUserId = reader.int64().toString();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.teamBattleResult.push(WebcastLinkMicBattle_BattleTeamResultDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.teamArmies.push(BattleTeamUserArmiesDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.abtestSettings.push(WebcastLinkMicBattle_BattleABTestSettingDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.teamMatchCampaign = WebcastLinkMicBattle_TeamMatchCampaignDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.fuzzyDisplayConfigV2 = HighScoreControlCfgDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "0",
      battleSetting: isSet(object.battleSetting) ? BattleSetting.fromJSON(object.battleSetting) : undefined,
      action: isSet(object.action) ? battleActionFromJSON(object.action) : 0,
      battleResult: isObject(object.battleResult)
        ? Object.entries(object.battleResult).reduce<{ [key: string]: WebcastLinkMicBattle_BattleResult }>(
          (acc, [key, value]) => {
            acc[key] = WebcastLinkMicBattle_BattleResult.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      mBattleDisplayConfig: isSet(object.mBattleDisplayConfig)
        ? WebcastLinkMicBattle_BattleDisplayConfig.fromJSON(object.mBattleDisplayConfig)
        : undefined,
      inviteeGiftPermissionType: isSet(object.inviteeGiftPermissionType)
        ? giftPermissionTypeFromJSON(object.inviteeGiftPermissionType)
        : 0,
      armies: isObject(object.armies)
        ? Object.entries(object.armies).reduce<{ [key: string]: BattleUserArmies }>((acc, [key, value]) => {
          acc[key] = BattleUserArmies.fromJSON(value);
          return acc;
        }, {})
        : {},
      anchorInfo: isObject(object.anchorInfo)
        ? Object.entries(object.anchorInfo).reduce<{ [key: string]: WebcastLinkMicBattle_BattleUserInfo }>(
          (acc, [key, value]) => {
            acc[key] = WebcastLinkMicBattle_BattleUserInfo.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      bubbleText: isSet(object.bubbleText) ? globalThis.String(object.bubbleText) : "",
      supportedActions: globalThis.Array.isArray(object?.supportedActions)
        ? object.supportedActions.map((e: any) => WebcastLinkMicBattle_SupportedActionsWrapper.fromJSON(e))
        : [],
      battleCombos: isObject(object.battleCombos)
        ? Object.entries(object.battleCombos).reduce<{ [key: string]: WebcastLinkMicBattle_BattleComboInfo }>(
          (acc, [key, value]) => {
            acc[key] = WebcastLinkMicBattle_BattleComboInfo.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      teamUsers: globalThis.Array.isArray(object?.teamUsers)
        ? object.teamUsers.map((e: any) => WebcastLinkMicBattle_TeamUsersInfo.fromJSON(e))
        : [],
      inviteeGiftPermissionTypes: globalThis.Array.isArray(object?.inviteeGiftPermissionTypes)
        ? object.inviteeGiftPermissionTypes.map((e: any) =>
          WebcastLinkMicBattle_BattleInviteeGiftPermission.fromJSON(e)
        )
        : [],
      actionByUserId: isSet(object.actionByUserId) ? globalThis.String(object.actionByUserId) : "0",
      teamBattleResult: globalThis.Array.isArray(object?.teamBattleResult)
        ? object.teamBattleResult.map((e: any) => WebcastLinkMicBattle_BattleTeamResult.fromJSON(e))
        : [],
      teamArmies: globalThis.Array.isArray(object?.teamArmies)
        ? object.teamArmies.map((e: any) => BattleTeamUserArmies.fromJSON(e))
        : [],
      abtestSettings: globalThis.Array.isArray(object?.abtestSettings)
        ? object.abtestSettings.map((e: any) => WebcastLinkMicBattle_BattleABTestSetting.fromJSON(e))
        : [],
      teamMatchCampaign: isSet(object.teamMatchCampaign)
        ? WebcastLinkMicBattle_TeamMatchCampaign.fromJSON(object.teamMatchCampaign)
        : undefined,
      fuzzyDisplayConfigV2: isSet(object.fuzzyDisplayConfigV2)
        ? HighScoreControlCfg.fromJSON(object.fuzzyDisplayConfigV2)
        : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattle): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.battleId !== "0") {
      obj.battleId = message.battleId;
    }
    if (message.battleSetting !== undefined) {
      obj.battleSetting = BattleSetting.toJSON(message.battleSetting);
    }
    if (message.action !== 0) {
      obj.action = battleActionToJSON(message.action);
    }
    if (message.battleResult) {
      const entries = Object.entries(message.battleResult);
      if (entries.length > 0) {
        obj.battleResult = {};
        entries.forEach(([k, v]) => {
          obj.battleResult[k] = WebcastLinkMicBattle_BattleResult.toJSON(v);
        });
      }
    }
    if (message.mBattleDisplayConfig !== undefined) {
      obj.mBattleDisplayConfig = WebcastLinkMicBattle_BattleDisplayConfig.toJSON(message.mBattleDisplayConfig);
    }
    if (message.inviteeGiftPermissionType !== 0) {
      obj.inviteeGiftPermissionType = giftPermissionTypeToJSON(message.inviteeGiftPermissionType);
    }
    if (message.armies) {
      const entries = Object.entries(message.armies);
      if (entries.length > 0) {
        obj.armies = {};
        entries.forEach(([k, v]) => {
          obj.armies[k] = BattleUserArmies.toJSON(v);
        });
      }
    }
    if (message.anchorInfo) {
      const entries = Object.entries(message.anchorInfo);
      if (entries.length > 0) {
        obj.anchorInfo = {};
        entries.forEach(([k, v]) => {
          obj.anchorInfo[k] = WebcastLinkMicBattle_BattleUserInfo.toJSON(v);
        });
      }
    }
    if (message.bubbleText !== "") {
      obj.bubbleText = message.bubbleText;
    }
    if (message.supportedActions?.length) {
      obj.supportedActions = message.supportedActions.map((e) =>
        WebcastLinkMicBattle_SupportedActionsWrapper.toJSON(e)
      );
    }
    if (message.battleCombos) {
      const entries = Object.entries(message.battleCombos);
      if (entries.length > 0) {
        obj.battleCombos = {};
        entries.forEach(([k, v]) => {
          obj.battleCombos[k] = WebcastLinkMicBattle_BattleComboInfo.toJSON(v);
        });
      }
    }
    if (message.teamUsers?.length) {
      obj.teamUsers = message.teamUsers.map((e) => WebcastLinkMicBattle_TeamUsersInfo.toJSON(e));
    }
    if (message.inviteeGiftPermissionTypes?.length) {
      obj.inviteeGiftPermissionTypes = message.inviteeGiftPermissionTypes.map((e) =>
        WebcastLinkMicBattle_BattleInviteeGiftPermission.toJSON(e)
      );
    }
    if (message.actionByUserId !== "0") {
      obj.actionByUserId = message.actionByUserId;
    }
    if (message.teamBattleResult?.length) {
      obj.teamBattleResult = message.teamBattleResult.map((e) => WebcastLinkMicBattle_BattleTeamResult.toJSON(e));
    }
    if (message.teamArmies?.length) {
      obj.teamArmies = message.teamArmies.map((e) => BattleTeamUserArmies.toJSON(e));
    }
    if (message.abtestSettings?.length) {
      obj.abtestSettings = message.abtestSettings.map((e) => WebcastLinkMicBattle_BattleABTestSetting.toJSON(e));
    }
    if (message.teamMatchCampaign !== undefined) {
      obj.teamMatchCampaign = WebcastLinkMicBattle_TeamMatchCampaign.toJSON(message.teamMatchCampaign);
    }
    if (message.fuzzyDisplayConfigV2 !== undefined) {
      obj.fuzzyDisplayConfigV2 = HighScoreControlCfg.toJSON(message.fuzzyDisplayConfigV2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle>, I>>(base?: I): WebcastLinkMicBattle {
    return WebcastLinkMicBattle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle>, I>>(object: I): WebcastLinkMicBattle {
    const message = createBaseWebcastLinkMicBattle();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.battleId = object.battleId ?? "0";
    message.battleSetting = (object.battleSetting !== undefined && object.battleSetting !== null)
      ? BattleSetting.fromPartial(object.battleSetting)
      : undefined;
    message.action = object.action ?? 0;
    message.battleResult = Object.entries(object.battleResult ?? {}).reduce<
      { [key: string]: WebcastLinkMicBattle_BattleResult }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = WebcastLinkMicBattle_BattleResult.fromPartial(value);
      }
      return acc;
    }, {});
    message.mBattleDisplayConfig = (object.mBattleDisplayConfig !== undefined && object.mBattleDisplayConfig !== null)
      ? WebcastLinkMicBattle_BattleDisplayConfig.fromPartial(object.mBattleDisplayConfig)
      : undefined;
    message.inviteeGiftPermissionType = object.inviteeGiftPermissionType ?? 0;
    message.armies = Object.entries(object.armies ?? {}).reduce<{ [key: string]: BattleUserArmies }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = BattleUserArmies.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.anchorInfo = Object.entries(object.anchorInfo ?? {}).reduce<
      { [key: string]: WebcastLinkMicBattle_BattleUserInfo }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = WebcastLinkMicBattle_BattleUserInfo.fromPartial(value);
      }
      return acc;
    }, {});
    message.bubbleText = object.bubbleText ?? "";
    message.supportedActions =
      object.supportedActions?.map((e) => WebcastLinkMicBattle_SupportedActionsWrapper.fromPartial(e)) || [];
    message.battleCombos = Object.entries(object.battleCombos ?? {}).reduce<
      { [key: string]: WebcastLinkMicBattle_BattleComboInfo }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = WebcastLinkMicBattle_BattleComboInfo.fromPartial(value);
      }
      return acc;
    }, {});
    message.teamUsers = object.teamUsers?.map((e) => WebcastLinkMicBattle_TeamUsersInfo.fromPartial(e)) || [];
    message.inviteeGiftPermissionTypes =
      object.inviteeGiftPermissionTypes?.map((e) => WebcastLinkMicBattle_BattleInviteeGiftPermission.fromPartial(e)) ||
      [];
    message.actionByUserId = object.actionByUserId ?? "0";
    message.teamBattleResult =
      object.teamBattleResult?.map((e) => WebcastLinkMicBattle_BattleTeamResult.fromPartial(e)) || [];
    message.teamArmies = object.teamArmies?.map((e) => BattleTeamUserArmies.fromPartial(e)) || [];
    message.abtestSettings =
      object.abtestSettings?.map((e) => WebcastLinkMicBattle_BattleABTestSetting.fromPartial(e)) || [];
    message.teamMatchCampaign = (object.teamMatchCampaign !== undefined && object.teamMatchCampaign !== null)
      ? WebcastLinkMicBattle_TeamMatchCampaign.fromPartial(object.teamMatchCampaign)
      : undefined;
    message.fuzzyDisplayConfigV2 = (object.fuzzyDisplayConfigV2 !== undefined && object.fuzzyDisplayConfigV2 !== null)
      ? HighScoreControlCfg.fromPartial(object.fuzzyDisplayConfigV2)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleResultEntry(): WebcastLinkMicBattle_BattleResultEntry {
  return { key: "0", value: undefined };
}

export const WebcastLinkMicBattle_BattleResultEntryDecoder: MessageFns<WebcastLinkMicBattle_BattleResultEntry> = {
  encode(message: WebcastLinkMicBattle_BattleResultEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      WebcastLinkMicBattle_BattleResultDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleResultEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleResultEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = WebcastLinkMicBattle_BattleResultDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleResultEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? WebcastLinkMicBattle_BattleResult.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleResultEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = WebcastLinkMicBattle_BattleResult.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleResultEntry>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleResultEntry {
    return WebcastLinkMicBattle_BattleResultEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleResultEntry>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleResultEntry {
    const message = createBaseWebcastLinkMicBattle_BattleResultEntry();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? WebcastLinkMicBattle_BattleResult.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_ArmiesEntry(): WebcastLinkMicBattle_ArmiesEntry {
  return { key: "0", value: undefined };
}

export const WebcastLinkMicBattle_ArmiesEntryDecoder: MessageFns<WebcastLinkMicBattle_ArmiesEntry> = {
  encode(message: WebcastLinkMicBattle_ArmiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      BattleUserArmiesDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_ArmiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_ArmiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = BattleUserArmiesDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_ArmiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? BattleUserArmies.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattle_ArmiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = BattleUserArmies.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_ArmiesEntry>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_ArmiesEntry {
    return WebcastLinkMicBattle_ArmiesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_ArmiesEntry>, I>>(
    object: I,
  ): WebcastLinkMicBattle_ArmiesEntry {
    const message = createBaseWebcastLinkMicBattle_ArmiesEntry();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? BattleUserArmies.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_AnchorInfoEntry(): WebcastLinkMicBattle_AnchorInfoEntry {
  return { key: "0", value: undefined };
}

export const WebcastLinkMicBattle_AnchorInfoEntryDecoder: MessageFns<WebcastLinkMicBattle_AnchorInfoEntry> = {
  encode(message: WebcastLinkMicBattle_AnchorInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      WebcastLinkMicBattle_BattleUserInfoDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_AnchorInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_AnchorInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = WebcastLinkMicBattle_BattleUserInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_AnchorInfoEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? WebcastLinkMicBattle_BattleUserInfo.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattle_AnchorInfoEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = WebcastLinkMicBattle_BattleUserInfo.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_AnchorInfoEntry>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_AnchorInfoEntry {
    return WebcastLinkMicBattle_AnchorInfoEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_AnchorInfoEntry>, I>>(
    object: I,
  ): WebcastLinkMicBattle_AnchorInfoEntry {
    const message = createBaseWebcastLinkMicBattle_AnchorInfoEntry();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? WebcastLinkMicBattle_BattleUserInfo.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleCombosEntry(): WebcastLinkMicBattle_BattleCombosEntry {
  return { key: "0", value: undefined };
}

export const WebcastLinkMicBattle_BattleCombosEntryDecoder: MessageFns<WebcastLinkMicBattle_BattleCombosEntry> = {
  encode(message: WebcastLinkMicBattle_BattleCombosEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      WebcastLinkMicBattle_BattleComboInfoDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleCombosEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleCombosEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = WebcastLinkMicBattle_BattleComboInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleCombosEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? WebcastLinkMicBattle_BattleComboInfo.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleCombosEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = WebcastLinkMicBattle_BattleComboInfo.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleCombosEntry>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleCombosEntry {
    return WebcastLinkMicBattle_BattleCombosEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleCombosEntry>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleCombosEntry {
    const message = createBaseWebcastLinkMicBattle_BattleCombosEntry();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? WebcastLinkMicBattle_BattleComboInfo.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_TeamMatchCampaign(): WebcastLinkMicBattle_TeamMatchCampaign {
  return { bestTeammateRelation: [], startSfxTeamId: [], hasTeamMatchMvpSfx: false };
}

export const WebcastLinkMicBattle_TeamMatchCampaignDecoder: MessageFns<WebcastLinkMicBattle_TeamMatchCampaign> = {
  encode(message: WebcastLinkMicBattle_TeamMatchCampaign, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bestTeammateRelation) {
      WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelationDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.startSfxTeamId) {
      writer.int64(v);
    }
    writer.join();
    if (message.hasTeamMatchMvpSfx !== false) {
      writer.uint32(24).bool(message.hasTeamMatchMvpSfx);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_TeamMatchCampaign {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bestTeammateRelation.push(
            WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelationDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.startSfxTeamId.push(reader.int64().toString());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.startSfxTeamId.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasTeamMatchMvpSfx = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_TeamMatchCampaign {
    return {
      bestTeammateRelation: globalThis.Array.isArray(object?.bestTeammateRelation)
        ? object.bestTeammateRelation.map((e: any) =>
          WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation.fromJSON(e)
        )
        : [],
      startSfxTeamId: globalThis.Array.isArray(object?.startSfxTeamId)
        ? object.startSfxTeamId.map((e: any) => globalThis.String(e))
        : [],
      hasTeamMatchMvpSfx: isSet(object.hasTeamMatchMvpSfx) ? globalThis.Boolean(object.hasTeamMatchMvpSfx) : false,
    };
  },

  toJSON(message: WebcastLinkMicBattle_TeamMatchCampaign): unknown {
    const obj: any = {};
    if (message.bestTeammateRelation?.length) {
      obj.bestTeammateRelation = message.bestTeammateRelation.map((e) =>
        WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation.toJSON(e)
      );
    }
    if (message.startSfxTeamId?.length) {
      obj.startSfxTeamId = message.startSfxTeamId;
    }
    if (message.hasTeamMatchMvpSfx !== false) {
      obj.hasTeamMatchMvpSfx = message.hasTeamMatchMvpSfx;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_TeamMatchCampaign>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_TeamMatchCampaign {
    return WebcastLinkMicBattle_TeamMatchCampaign.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_TeamMatchCampaign>, I>>(
    object: I,
  ): WebcastLinkMicBattle_TeamMatchCampaign {
    const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign();
    message.bestTeammateRelation =
      object.bestTeammateRelation?.map((e) =>
        WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation.fromPartial(e)
      ) || [];
    message.startSfxTeamId = object.startSfxTeamId?.map((e) => e) || [];
    message.hasTeamMatchMvpSfx = object.hasTeamMatchMvpSfx ?? false;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation(): WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation {
  return { userId: "0", bestTeammateId: "0" };
}

export const WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelationDecoder: MessageFns<WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation> = {
  encode(
    message: WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.bestTeammateId !== "0") {
      writer.uint32(16).int64(message.bestTeammateId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.bestTeammateId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      bestTeammateId: isSet(object.bestTeammateId) ? globalThis.String(object.bestTeammateId) : "0",
    };
  },

  toJSON(message: WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.bestTeammateId !== "0") {
      obj.bestTeammateId = message.bestTeammateId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation {
    return WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation>, I>>(
    object: I,
  ): WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation {
    const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation();
    message.userId = object.userId ?? "0";
    message.bestTeammateId = object.bestTeammateId ?? "0";
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleTeamResult(): WebcastLinkMicBattle_BattleTeamResult {
  return { teamId: "0", teamUsers: [], result: 0, totalScore: "0" };
}

export const WebcastLinkMicBattle_BattleTeamResultDecoder: MessageFns<WebcastLinkMicBattle_BattleTeamResult> = {
  encode(message: WebcastLinkMicBattle_BattleTeamResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "0") {
      writer.uint32(8).int64(message.teamId);
    }
    for (const v of message.teamUsers) {
      BattleTeamUserDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.result !== 0) {
      writer.uint32(24).int32(message.result);
    }
    if (message.totalScore !== "0") {
      writer.uint32(32).int64(message.totalScore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleTeamResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleTeamResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.teamId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.teamUsers.push(BattleTeamUserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.result = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalScore = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleTeamResult {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "0",
      teamUsers: globalThis.Array.isArray(object?.teamUsers)
        ? object.teamUsers.map((e: any) => BattleTeamUser.fromJSON(e))
        : [],
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
      totalScore: isSet(object.totalScore) ? globalThis.String(object.totalScore) : "0",
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleTeamResult): unknown {
    const obj: any = {};
    if (message.teamId !== "0") {
      obj.teamId = message.teamId;
    }
    if (message.teamUsers?.length) {
      obj.teamUsers = message.teamUsers.map((e) => BattleTeamUser.toJSON(e));
    }
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    if (message.totalScore !== "0") {
      obj.totalScore = message.totalScore;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleTeamResult>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleTeamResult {
    return WebcastLinkMicBattle_BattleTeamResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleTeamResult>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleTeamResult {
    const message = createBaseWebcastLinkMicBattle_BattleTeamResult();
    message.teamId = object.teamId ?? "0";
    message.teamUsers = object.teamUsers?.map((e) => BattleTeamUser.fromPartial(e)) || [];
    message.result = object.result ?? 0;
    message.totalScore = object.totalScore ?? "0";
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleInviteeGiftPermission(): WebcastLinkMicBattle_BattleInviteeGiftPermission {
  return { userId: "0", giftPermissionType: 0 };
}

export const WebcastLinkMicBattle_BattleInviteeGiftPermissionDecoder: MessageFns<WebcastLinkMicBattle_BattleInviteeGiftPermission> = {
  encode(
    message: WebcastLinkMicBattle_BattleInviteeGiftPermission,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.giftPermissionType !== 0) {
      writer.uint32(16).int32(message.giftPermissionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleInviteeGiftPermission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleInviteeGiftPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.giftPermissionType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleInviteeGiftPermission {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      giftPermissionType: isSet(object.giftPermissionType) ? globalThis.Number(object.giftPermissionType) : 0,
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleInviteeGiftPermission): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.giftPermissionType !== 0) {
      obj.giftPermissionType = Math.round(message.giftPermissionType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleInviteeGiftPermission>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleInviteeGiftPermission {
    return WebcastLinkMicBattle_BattleInviteeGiftPermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleInviteeGiftPermission>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleInviteeGiftPermission {
    const message = createBaseWebcastLinkMicBattle_BattleInviteeGiftPermission();
    message.userId = object.userId ?? "0";
    message.giftPermissionType = object.giftPermissionType ?? 0;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_SupportedActionsWrapper(): WebcastLinkMicBattle_SupportedActionsWrapper {
  return { actionType: "0" };
}

export const WebcastLinkMicBattle_SupportedActionsWrapperDecoder: MessageFns<WebcastLinkMicBattle_SupportedActionsWrapper> = {
  encode(
    message: WebcastLinkMicBattle_SupportedActionsWrapper,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.actionType !== "0") {
      writer.uint32(8).int64(message.actionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_SupportedActionsWrapper {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_SupportedActionsWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.actionType = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_SupportedActionsWrapper {
    return { actionType: isSet(object.actionType) ? globalThis.String(object.actionType) : "0" };
  },

  toJSON(message: WebcastLinkMicBattle_SupportedActionsWrapper): unknown {
    const obj: any = {};
    if (message.actionType !== "0") {
      obj.actionType = message.actionType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_SupportedActionsWrapper>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_SupportedActionsWrapper {
    return WebcastLinkMicBattle_SupportedActionsWrapper.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_SupportedActionsWrapper>, I>>(
    object: I,
  ): WebcastLinkMicBattle_SupportedActionsWrapper {
    const message = createBaseWebcastLinkMicBattle_SupportedActionsWrapper();
    message.actionType = object.actionType ?? "0";
    return message;
  },
};

function createBaseWebcastLinkMicBattle_TeamUsersInfo(): WebcastLinkMicBattle_TeamUsersInfo {
  return { teamId: "0", userIds: [] };
}

export const WebcastLinkMicBattle_TeamUsersInfoDecoder: MessageFns<WebcastLinkMicBattle_TeamUsersInfo> = {
  encode(message: WebcastLinkMicBattle_TeamUsersInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "0") {
      writer.uint32(8).int64(message.teamId);
    }
    writer.uint32(18).fork();
    for (const v of message.userIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_TeamUsersInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_TeamUsersInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.teamId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.userIds.push(reader.int64().toString());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userIds.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_TeamUsersInfo {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "0",
      userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: WebcastLinkMicBattle_TeamUsersInfo): unknown {
    const obj: any = {};
    if (message.teamId !== "0") {
      obj.teamId = message.teamId;
    }
    if (message.userIds?.length) {
      obj.userIds = message.userIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_TeamUsersInfo>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_TeamUsersInfo {
    return WebcastLinkMicBattle_TeamUsersInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_TeamUsersInfo>, I>>(
    object: I,
  ): WebcastLinkMicBattle_TeamUsersInfo {
    const message = createBaseWebcastLinkMicBattle_TeamUsersInfo();
    message.teamId = object.teamId ?? "0";
    message.userIds = object.userIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleComboInfo(): WebcastLinkMicBattle_BattleComboInfo {
  return { userId: "0", comboStatus: "0", comboCount: "0", comboIconUrl: "", comboType: 0, comboRuleGuideSchema: "" };
}

export const WebcastLinkMicBattle_BattleComboInfoDecoder: MessageFns<WebcastLinkMicBattle_BattleComboInfo> = {
  encode(message: WebcastLinkMicBattle_BattleComboInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.comboStatus !== "0") {
      writer.uint32(16).int64(message.comboStatus);
    }
    if (message.comboCount !== "0") {
      writer.uint32(24).int64(message.comboCount);
    }
    if (message.comboIconUrl !== "") {
      writer.uint32(34).string(message.comboIconUrl);
    }
    if (message.comboType !== 0) {
      writer.uint32(40).int32(message.comboType);
    }
    if (message.comboRuleGuideSchema !== "") {
      writer.uint32(50).string(message.comboRuleGuideSchema);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleComboInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleComboInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.comboStatus = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.comboCount = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.comboIconUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.comboType = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.comboRuleGuideSchema = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleComboInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      comboStatus: isSet(object.comboStatus) ? globalThis.String(object.comboStatus) : "0",
      comboCount: isSet(object.comboCount) ? globalThis.String(object.comboCount) : "0",
      comboIconUrl: isSet(object.comboIconUrl) ? globalThis.String(object.comboIconUrl) : "",
      comboType: isSet(object.comboType) ? globalThis.Number(object.comboType) : 0,
      comboRuleGuideSchema: isSet(object.comboRuleGuideSchema) ? globalThis.String(object.comboRuleGuideSchema) : "",
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleComboInfo): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.comboStatus !== "0") {
      obj.comboStatus = message.comboStatus;
    }
    if (message.comboCount !== "0") {
      obj.comboCount = message.comboCount;
    }
    if (message.comboIconUrl !== "") {
      obj.comboIconUrl = message.comboIconUrl;
    }
    if (message.comboType !== 0) {
      obj.comboType = Math.round(message.comboType);
    }
    if (message.comboRuleGuideSchema !== "") {
      obj.comboRuleGuideSchema = message.comboRuleGuideSchema;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleComboInfo>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleComboInfo {
    return WebcastLinkMicBattle_BattleComboInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleComboInfo>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleComboInfo {
    const message = createBaseWebcastLinkMicBattle_BattleComboInfo();
    message.userId = object.userId ?? "0";
    message.comboStatus = object.comboStatus ?? "0";
    message.comboCount = object.comboCount ?? "0";
    message.comboIconUrl = object.comboIconUrl ?? "";
    message.comboType = object.comboType ?? 0;
    message.comboRuleGuideSchema = object.comboRuleGuideSchema ?? "";
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleResult(): WebcastLinkMicBattle_BattleResult {
  return { userId: "0", result: 0, score: "0" };
}

export const WebcastLinkMicBattle_BattleResultDecoder: MessageFns<WebcastLinkMicBattle_BattleResult> = {
  encode(message: WebcastLinkMicBattle_BattleResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.result !== 0) {
      writer.uint32(16).int32(message.result);
    }
    if (message.score !== "0") {
      writer.uint32(24).int64(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.score = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleResult {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      result: isSet(object.result) ? resultFromJSON(object.result) : 0,
      score: isSet(object.score) ? globalThis.String(object.score) : "0",
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleResult): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.result !== 0) {
      obj.result = resultToJSON(message.result);
    }
    if (message.score !== "0") {
      obj.score = message.score;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleResult>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleResult {
    return WebcastLinkMicBattle_BattleResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleResult>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleResult {
    const message = createBaseWebcastLinkMicBattle_BattleResult();
    message.userId = object.userId ?? "0";
    message.result = object.result ?? 0;
    message.score = object.score ?? "0";
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleDisplayConfig(): WebcastLinkMicBattle_BattleDisplayConfig {
  return { threshold: 0, text: "", diffThreshold: 0, diffText: "", exemptStrategy: undefined };
}

export const WebcastLinkMicBattle_BattleDisplayConfigDecoder: MessageFns<WebcastLinkMicBattle_BattleDisplayConfig> = {
  encode(message: WebcastLinkMicBattle_BattleDisplayConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threshold !== 0) {
      writer.uint32(8).int32(message.threshold);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.diffThreshold !== 0) {
      writer.uint32(24).int32(message.diffThreshold);
    }
    if (message.diffText !== "") {
      writer.uint32(34).string(message.diffText);
    }
    if (message.exemptStrategy !== undefined) {
      WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategyDecoder.encode(message.exemptStrategy, writer.uint32(42).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleDisplayConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.threshold = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.diffThreshold = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.diffText = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.exemptStrategy = WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategyDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleDisplayConfig {
    return {
      threshold: isSet(object.threshold) ? globalThis.Number(object.threshold) : 0,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      diffThreshold: isSet(object.diffThreshold) ? globalThis.Number(object.diffThreshold) : 0,
      diffText: isSet(object.diffText) ? globalThis.String(object.diffText) : "",
      exemptStrategy: isSet(object.exemptStrategy)
        ? WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy.fromJSON(object.exemptStrategy)
        : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleDisplayConfig): unknown {
    const obj: any = {};
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.diffThreshold !== 0) {
      obj.diffThreshold = Math.round(message.diffThreshold);
    }
    if (message.diffText !== "") {
      obj.diffText = message.diffText;
    }
    if (message.exemptStrategy !== undefined) {
      obj.exemptStrategy = WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy.toJSON(message.exemptStrategy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleDisplayConfig>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleDisplayConfig {
    return WebcastLinkMicBattle_BattleDisplayConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleDisplayConfig>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleDisplayConfig {
    const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig();
    message.threshold = object.threshold ?? 0;
    message.text = object.text ?? "";
    message.diffThreshold = object.diffThreshold ?? 0;
    message.diffText = object.diffText ?? "";
    message.exemptStrategy = (object.exemptStrategy !== undefined && object.exemptStrategy !== null)
      ? WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy.fromPartial(object.exemptStrategy)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy(): WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy {
  return { exemptBothHost: false, exemptAudienceTop: 0 };
}

export const WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategyDecoder: MessageFns<WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy> = {
  encode(
    message: WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.exemptBothHost !== false) {
      writer.uint32(8).bool(message.exemptBothHost);
    }
    if (message.exemptAudienceTop !== 0) {
      writer.uint32(16).int32(message.exemptAudienceTop);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.exemptBothHost = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.exemptAudienceTop = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy {
    return {
      exemptBothHost: isSet(object.exemptBothHost) ? globalThis.Boolean(object.exemptBothHost) : false,
      exemptAudienceTop: isSet(object.exemptAudienceTop) ? globalThis.Number(object.exemptAudienceTop) : 0,
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy): unknown {
    const obj: any = {};
    if (message.exemptBothHost !== false) {
      obj.exemptBothHost = message.exemptBothHost;
    }
    if (message.exemptAudienceTop !== 0) {
      obj.exemptAudienceTop = Math.round(message.exemptAudienceTop);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy {
    return WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy {
    const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy();
    message.exemptBothHost = object.exemptBothHost ?? false;
    message.exemptAudienceTop = object.exemptAudienceTop ?? 0;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleUserInfo(): WebcastLinkMicBattle_BattleUserInfo {
  return { user: undefined, tags: [] };
}

export const WebcastLinkMicBattle_BattleUserInfoDecoder: MessageFns<WebcastLinkMicBattle_BattleUserInfo> = {
  encode(message: WebcastLinkMicBattle_BattleUserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfoDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    for (const v of message.tags) {
      WebcastLinkMicBattle_BattleUserInfo_BattleRivalTagDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tags.push(WebcastLinkMicBattle_BattleUserInfo_BattleRivalTagDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleUserInfo {
    return {
      user: isSet(object.user)
        ? WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo.fromJSON(object.user)
        : undefined,
      tags: globalThis.Array.isArray(object?.tags)
        ? object.tags.map((e: any) => WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleUserInfo): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo.toJSON(message.user);
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleUserInfo>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleUserInfo {
    return WebcastLinkMicBattle_BattleUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleUserInfo>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleUserInfo {
    const message = createBaseWebcastLinkMicBattle_BattleUserInfo();
    message.user = (object.user !== undefined && object.user !== null)
      ? WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo.fromPartial(object.user)
      : undefined;
    message.tags = object.tags?.map((e) => WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo(): WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo {
  return { userId: "0", nickName: "", avatarThumb: undefined, displayId: "" };
}

export const WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfoDecoder: MessageFns<WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo> = {
  encode(
    message: WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.nickName !== "") {
      writer.uint32(18).string(message.nickName);
    }
    if (message.avatarThumb !== undefined) {
      ImageDecoder.encode(message.avatarThumb, writer.uint32(26).fork()).join();
    }
    if (message.displayId !== "") {
      writer.uint32(34).string(message.displayId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatarThumb = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      avatarThumb: isSet(object.avatarThumb) ? Image.fromJSON(object.avatarThumb) : undefined,
      displayId: isSet(object.displayId) ? globalThis.String(object.displayId) : "",
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.avatarThumb !== undefined) {
      obj.avatarThumb = Image.toJSON(message.avatarThumb);
    }
    if (message.displayId !== "") {
      obj.displayId = message.displayId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo {
    return WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo {
    const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo();
    message.userId = object.userId ?? "0";
    message.nickName = object.nickName ?? "";
    message.avatarThumb = (object.avatarThumb !== undefined && object.avatarThumb !== null)
      ? Image.fromPartial(object.avatarThumb)
      : undefined;
    message.displayId = object.displayId ?? "";
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleUserInfo_BattleRivalTag(): WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag {
  return { bgImage: undefined, iconImage: undefined, content: "" };
}

export const WebcastLinkMicBattle_BattleUserInfo_BattleRivalTagDecoder: MessageFns<WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag> = {
  encode(
    message: WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.bgImage !== undefined) {
      ImageDecoder.encode(message.bgImage, writer.uint32(10).fork()).join();
    }
    if (message.iconImage !== undefined) {
      ImageDecoder.encode(message.iconImage, writer.uint32(18).fork()).join();
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleRivalTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bgImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.iconImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag {
    return {
      bgImage: isSet(object.bgImage) ? Image.fromJSON(object.bgImage) : undefined,
      iconImage: isSet(object.iconImage) ? Image.fromJSON(object.iconImage) : undefined,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag): unknown {
    const obj: any = {};
    if (message.bgImage !== undefined) {
      obj.bgImage = Image.toJSON(message.bgImage);
    }
    if (message.iconImage !== undefined) {
      obj.iconImage = Image.toJSON(message.iconImage);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag {
    return WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag {
    const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleRivalTag();
    message.bgImage = (object.bgImage !== undefined && object.bgImage !== null)
      ? Image.fromPartial(object.bgImage)
      : undefined;
    message.iconImage = (object.iconImage !== undefined && object.iconImage !== null)
      ? Image.fromPartial(object.iconImage)
      : undefined;
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleABTestSetting(): WebcastLinkMicBattle_BattleABTestSetting {
  return { uid: "0", abTestList: undefined };
}

export const WebcastLinkMicBattle_BattleABTestSettingDecoder: MessageFns<WebcastLinkMicBattle_BattleABTestSetting> = {
  encode(message: WebcastLinkMicBattle_BattleABTestSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "0") {
      writer.uint32(8).int64(message.uid);
    }
    if (message.abTestList !== undefined) {
      WebcastLinkMicBattle_BattleABTestSetting_BattleABTestListDecoder.encode(message.abTestList, writer.uint32(18).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleABTestSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleABTestSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uid = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.abTestList = WebcastLinkMicBattle_BattleABTestSetting_BattleABTestListDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleABTestSetting {
    return {
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "0",
      abTestList: isSet(object.abTestList)
        ? WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList.fromJSON(object.abTestList)
        : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleABTestSetting): unknown {
    const obj: any = {};
    if (message.uid !== "0") {
      obj.uid = message.uid;
    }
    if (message.abTestList !== undefined) {
      obj.abTestList = WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList.toJSON(message.abTestList);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleABTestSetting>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleABTestSetting {
    return WebcastLinkMicBattle_BattleABTestSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleABTestSetting>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleABTestSetting {
    const message = createBaseWebcastLinkMicBattle_BattleABTestSetting();
    message.uid = object.uid ?? "0";
    message.abTestList = (object.abTestList !== undefined && object.abTestList !== null)
      ? WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList.fromPartial(object.abTestList)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList(): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList {
  return { abTestList: [] };
}

export const WebcastLinkMicBattle_BattleABTestSetting_BattleABTestListDecoder: MessageFns<WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList> = {
  encode(
    message: WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.abTestList) {
      WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTestDecoder.encode(v!, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.abTestList.push(
            WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTestDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList {
    return {
      abTestList: globalThis.Array.isArray(object?.abTestList)
        ? object.abTestList.map((e: any) =>
          WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList): unknown {
    const obj: any = {};
    if (message.abTestList?.length) {
      obj.abTestList = message.abTestList.map((e) =>
        WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList {
    return WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList {
    const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList();
    message.abTestList =
      object.abTestList?.map((e) =>
        WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest(): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest {
  return { abTestType: 0, group: 0 };
}

export const WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTestDecoder: MessageFns<WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest> = {
  encode(
    message: WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.abTestType !== 0) {
      writer.uint32(8).int32(message.abTestType);
    }
    if (message.group !== 0) {
      writer.uint32(16).int32(message.group);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.abTestType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.group = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest {
    return {
      abTestType: isSet(object.abTestType) ? battleABTestTypeFromJSON(object.abTestType) : 0,
      group: isSet(object.group) ? globalThis.Number(object.group) : 0,
    };
  },

  toJSON(message: WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest): unknown {
    const obj: any = {};
    if (message.abTestType !== 0) {
      obj.abTestType = battleABTestTypeToJSON(message.abTestType);
    }
    if (message.group !== 0) {
      obj.group = Math.round(message.group);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest>, I>>(
    base?: I,
  ): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest {
    return WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest>, I>>(
    object: I,
  ): WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest {
    const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest();
    message.abTestType = object.abTestType ?? 0;
    message.group = object.group ?? 0;
    return message;
  },
};

function createBaseWebcastLinkMicArmies(): WebcastLinkMicArmies {
  return {
    common: undefined,
    battleId: "0",
    battleItems: {},
    channelId: "0",
    giftSentTime: "0",
    scoreUpdateTime: "0",
    battleStatus: 0,
    fromUserId: "0",
    giftId: "0",
    giftCount: 0,
    gifIconImage: undefined,
    totalDiamondCount: 0,
    repeatCount: 0,
    teamArmies: [],
    triggerCriticalStrike: false,
    hasTeamMatchMvpSfx: false,
    logId: "",
    battleSettings: undefined,
    fuzzyDisplayConfigV2: undefined,
  };
}

export const WebcastLinkMicArmiesDecoder: MessageFns<WebcastLinkMicArmies> = {
  encode(message: WebcastLinkMicArmies, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.battleId !== "0") {
      writer.uint32(16).int64(message.battleId);
    }
    Object.entries(message.battleItems).forEach(([key, value]) => {
      WebcastLinkMicArmies_BattleItemsEntryDecoder.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.channelId !== "0") {
      writer.uint32(32).int64(message.channelId);
    }
    if (message.giftSentTime !== "0") {
      writer.uint32(40).int64(message.giftSentTime);
    }
    if (message.scoreUpdateTime !== "0") {
      writer.uint32(48).int64(message.scoreUpdateTime);
    }
    if (message.battleStatus !== 0) {
      writer.uint32(56).int32(message.battleStatus);
    }
    if (message.fromUserId !== "0") {
      writer.uint32(64).int64(message.fromUserId);
    }
    if (message.giftId !== "0") {
      writer.uint32(72).int64(message.giftId);
    }
    if (message.giftCount !== 0) {
      writer.uint32(80).int32(message.giftCount);
    }
    if (message.gifIconImage !== undefined) {
      ImageDecoder.encode(message.gifIconImage, writer.uint32(90).fork()).join();
    }
    if (message.totalDiamondCount !== 0) {
      writer.uint32(96).int32(message.totalDiamondCount);
    }
    if (message.repeatCount !== 0) {
      writer.uint32(104).int32(message.repeatCount);
    }
    for (const v of message.teamArmies) {
      BattleTeamUserArmiesDecoder.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.triggerCriticalStrike !== false) {
      writer.uint32(120).bool(message.triggerCriticalStrike);
    }
    if (message.hasTeamMatchMvpSfx !== false) {
      writer.uint32(128).bool(message.hasTeamMatchMvpSfx);
    }
    if (message.logId !== "") {
      writer.uint32(138).string(message.logId);
    }
    if (message.battleSettings !== undefined) {
      BattleSettingDecoder.encode(message.battleSettings, writer.uint32(146).fork()).join();
    }
    if (message.fuzzyDisplayConfigV2 !== undefined) {
      HighScoreControlCfgDecoder.encode(message.fuzzyDisplayConfigV2, writer.uint32(154).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicArmies {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicArmies();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.battleId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = WebcastLinkMicArmies_BattleItemsEntryDecoder.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.battleItems[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.channelId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.giftSentTime = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.scoreUpdateTime = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.battleStatus = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.giftId = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.giftCount = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.gifIconImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.totalDiamondCount = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.repeatCount = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.teamArmies.push(BattleTeamUserArmiesDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.triggerCriticalStrike = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.hasTeamMatchMvpSfx = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.logId = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.battleSettings = BattleSettingDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.fuzzyDisplayConfigV2 = HighScoreControlCfgDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicArmies {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "0",
      battleItems: isObject(object.battleItems)
        ? Object.entries(object.battleItems).reduce<{ [key: string]: BattleUserArmies }>((acc, [key, value]) => {
          acc[key] = BattleUserArmies.fromJSON(value);
          return acc;
        }, {})
        : {},
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "0",
      giftSentTime: isSet(object.giftSentTime) ? globalThis.String(object.giftSentTime) : "0",
      scoreUpdateTime: isSet(object.scoreUpdateTime) ? globalThis.String(object.scoreUpdateTime) : "0",
      battleStatus: isSet(object.battleStatus) ? triggerReasonFromJSON(object.battleStatus) : 0,
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "0",
      giftCount: isSet(object.giftCount) ? globalThis.Number(object.giftCount) : 0,
      gifIconImage: isSet(object.gifIconImage) ? Image.fromJSON(object.gifIconImage) : undefined,
      totalDiamondCount: isSet(object.totalDiamondCount) ? globalThis.Number(object.totalDiamondCount) : 0,
      repeatCount: isSet(object.repeatCount) ? globalThis.Number(object.repeatCount) : 0,
      teamArmies: globalThis.Array.isArray(object?.teamArmies)
        ? object.teamArmies.map((e: any) => BattleTeamUserArmies.fromJSON(e))
        : [],
      triggerCriticalStrike: isSet(object.triggerCriticalStrike)
        ? globalThis.Boolean(object.triggerCriticalStrike)
        : false,
      hasTeamMatchMvpSfx: isSet(object.hasTeamMatchMvpSfx) ? globalThis.Boolean(object.hasTeamMatchMvpSfx) : false,
      logId: isSet(object.logId) ? globalThis.String(object.logId) : "",
      battleSettings: isSet(object.battleSettings) ? BattleSetting.fromJSON(object.battleSettings) : undefined,
      fuzzyDisplayConfigV2: isSet(object.fuzzyDisplayConfigV2)
        ? HighScoreControlCfg.fromJSON(object.fuzzyDisplayConfigV2)
        : undefined,
    };
  },

  toJSON(message: WebcastLinkMicArmies): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.battleId !== "0") {
      obj.battleId = message.battleId;
    }
    if (message.battleItems) {
      const entries = Object.entries(message.battleItems);
      if (entries.length > 0) {
        obj.battleItems = {};
        entries.forEach(([k, v]) => {
          obj.battleItems[k] = BattleUserArmies.toJSON(v);
        });
      }
    }
    if (message.channelId !== "0") {
      obj.channelId = message.channelId;
    }
    if (message.giftSentTime !== "0") {
      obj.giftSentTime = message.giftSentTime;
    }
    if (message.scoreUpdateTime !== "0") {
      obj.scoreUpdateTime = message.scoreUpdateTime;
    }
    if (message.battleStatus !== 0) {
      obj.battleStatus = triggerReasonToJSON(message.battleStatus);
    }
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.giftId !== "0") {
      obj.giftId = message.giftId;
    }
    if (message.giftCount !== 0) {
      obj.giftCount = Math.round(message.giftCount);
    }
    if (message.gifIconImage !== undefined) {
      obj.gifIconImage = Image.toJSON(message.gifIconImage);
    }
    if (message.totalDiamondCount !== 0) {
      obj.totalDiamondCount = Math.round(message.totalDiamondCount);
    }
    if (message.repeatCount !== 0) {
      obj.repeatCount = Math.round(message.repeatCount);
    }
    if (message.teamArmies?.length) {
      obj.teamArmies = message.teamArmies.map((e) => BattleTeamUserArmies.toJSON(e));
    }
    if (message.triggerCriticalStrike !== false) {
      obj.triggerCriticalStrike = message.triggerCriticalStrike;
    }
    if (message.hasTeamMatchMvpSfx !== false) {
      obj.hasTeamMatchMvpSfx = message.hasTeamMatchMvpSfx;
    }
    if (message.logId !== "") {
      obj.logId = message.logId;
    }
    if (message.battleSettings !== undefined) {
      obj.battleSettings = BattleSetting.toJSON(message.battleSettings);
    }
    if (message.fuzzyDisplayConfigV2 !== undefined) {
      obj.fuzzyDisplayConfigV2 = HighScoreControlCfg.toJSON(message.fuzzyDisplayConfigV2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicArmies>, I>>(base?: I): WebcastLinkMicArmies {
    return WebcastLinkMicArmies.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicArmies>, I>>(object: I): WebcastLinkMicArmies {
    const message = createBaseWebcastLinkMicArmies();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.battleId = object.battleId ?? "0";
    message.battleItems = Object.entries(object.battleItems ?? {}).reduce<{ [key: string]: BattleUserArmies }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = BattleUserArmies.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.channelId = object.channelId ?? "0";
    message.giftSentTime = object.giftSentTime ?? "0";
    message.scoreUpdateTime = object.scoreUpdateTime ?? "0";
    message.battleStatus = object.battleStatus ?? 0;
    message.fromUserId = object.fromUserId ?? "0";
    message.giftId = object.giftId ?? "0";
    message.giftCount = object.giftCount ?? 0;
    message.gifIconImage = (object.gifIconImage !== undefined && object.gifIconImage !== null)
      ? Image.fromPartial(object.gifIconImage)
      : undefined;
    message.totalDiamondCount = object.totalDiamondCount ?? 0;
    message.repeatCount = object.repeatCount ?? 0;
    message.teamArmies = object.teamArmies?.map((e) => BattleTeamUserArmies.fromPartial(e)) || [];
    message.triggerCriticalStrike = object.triggerCriticalStrike ?? false;
    message.hasTeamMatchMvpSfx = object.hasTeamMatchMvpSfx ?? false;
    message.logId = object.logId ?? "";
    message.battleSettings = (object.battleSettings !== undefined && object.battleSettings !== null)
      ? BattleSetting.fromPartial(object.battleSettings)
      : undefined;
    message.fuzzyDisplayConfigV2 = (object.fuzzyDisplayConfigV2 !== undefined && object.fuzzyDisplayConfigV2 !== null)
      ? HighScoreControlCfg.fromPartial(object.fuzzyDisplayConfigV2)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicArmies_BattleItemsEntry(): WebcastLinkMicArmies_BattleItemsEntry {
  return { key: "0", value: undefined };
}

export const WebcastLinkMicArmies_BattleItemsEntryDecoder: MessageFns<WebcastLinkMicArmies_BattleItemsEntry> = {
  encode(message: WebcastLinkMicArmies_BattleItemsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      BattleUserArmiesDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicArmies_BattleItemsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicArmies_BattleItemsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = BattleUserArmiesDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicArmies_BattleItemsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value) ? BattleUserArmies.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WebcastLinkMicArmies_BattleItemsEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = BattleUserArmies.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicArmies_BattleItemsEntry>, I>>(
    base?: I,
  ): WebcastLinkMicArmies_BattleItemsEntry {
    return WebcastLinkMicArmies_BattleItemsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicArmies_BattleItemsEntry>, I>>(
    object: I,
  ): WebcastLinkMicArmies_BattleItemsEntry {
    const message = createBaseWebcastLinkMicArmies_BattleItemsEntry();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? BattleUserArmies.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicArmiesItems(): WebcastLinkMicArmiesItems {
  return { hostUserId: "0", battleGroups: [] };
}

export const WebcastLinkMicArmiesItemsDecoder: MessageFns<WebcastLinkMicArmiesItems> = {
  encode(message: WebcastLinkMicArmiesItems, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hostUserId !== "0") {
      writer.uint32(8).uint64(message.hostUserId);
    }
    for (const v of message.battleGroups) {
      WebcastLinkMicArmiesGroupDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicArmiesItems {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicArmiesItems();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hostUserId = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.battleGroups.push(WebcastLinkMicArmiesGroupDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicArmiesItems {
    return {
      hostUserId: isSet(object.hostUserId) ? globalThis.String(object.hostUserId) : "0",
      battleGroups: globalThis.Array.isArray(object?.battleGroups)
        ? object.battleGroups.map((e: any) => WebcastLinkMicArmiesGroup.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebcastLinkMicArmiesItems): unknown {
    const obj: any = {};
    if (message.hostUserId !== "0") {
      obj.hostUserId = message.hostUserId;
    }
    if (message.battleGroups?.length) {
      obj.battleGroups = message.battleGroups.map((e) => WebcastLinkMicArmiesGroup.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicArmiesItems>, I>>(base?: I): WebcastLinkMicArmiesItems {
    return WebcastLinkMicArmiesItems.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicArmiesItems>, I>>(object: I): WebcastLinkMicArmiesItems {
    const message = createBaseWebcastLinkMicArmiesItems();
    message.hostUserId = object.hostUserId ?? "0";
    message.battleGroups = object.battleGroups?.map((e) => WebcastLinkMicArmiesGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebcastLinkMicArmiesGroup(): WebcastLinkMicArmiesGroup {
  return { users: [], points: 0 };
}

export const WebcastLinkMicArmiesGroupDecoder: MessageFns<WebcastLinkMicArmiesGroup> = {
  encode(message: WebcastLinkMicArmiesGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      UserDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.points !== 0) {
      writer.uint32(16).int32(message.points);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicArmiesGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicArmiesGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(UserDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.points = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicArmiesGroup {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      points: isSet(object.points) ? globalThis.Number(object.points) : 0,
    };
  },

  toJSON(message: WebcastLinkMicArmiesGroup): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.points !== 0) {
      obj.points = Math.round(message.points);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicArmiesGroup>, I>>(base?: I): WebcastLinkMicArmiesGroup {
    return WebcastLinkMicArmiesGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicArmiesGroup>, I>>(object: I): WebcastLinkMicArmiesGroup {
    const message = createBaseWebcastLinkMicArmiesGroup();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.points = object.points ?? 0;
    return message;
  },
};

function createBaseWebcastSocialMessage(): WebcastSocialMessage {
  return {
    common: undefined,
    user: undefined,
    shareType: "0",
    action: "0",
    shareTarget: "",
    followCount: 0,
    shareDisplayStyle: "0",
    shareCount: 0,
    publicAreaMessageCommon: undefined,
    signature: "",
    signatureVersion: "",
    showDurationMs: "0",
  };
}

export const WebcastSocialMessageDecoder: MessageFns<WebcastSocialMessage> = {
  encode(message: WebcastSocialMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.shareType !== "0") {
      writer.uint32(24).int64(message.shareType);
    }
    if (message.action !== "0") {
      writer.uint32(32).int64(message.action);
    }
    if (message.shareTarget !== "") {
      writer.uint32(42).string(message.shareTarget);
    }
    if (message.followCount !== 0) {
      writer.uint32(48).int32(message.followCount);
    }
    if (message.shareDisplayStyle !== "0") {
      writer.uint32(56).int64(message.shareDisplayStyle);
    }
    if (message.shareCount !== 0) {
      writer.uint32(64).int32(message.shareCount);
    }
    if (message.publicAreaMessageCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(74).fork()).join();
    }
    if (message.signature !== "") {
      writer.uint32(82).string(message.signature);
    }
    if (message.signatureVersion !== "") {
      writer.uint32(90).string(message.signatureVersion);
    }
    if (message.showDurationMs !== "0") {
      writer.uint32(96).int64(message.showDurationMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastSocialMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastSocialMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.shareType = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.action = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shareTarget = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.followCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.shareDisplayStyle = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.shareCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.publicAreaMessageCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.signatureVersion = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.showDurationMs = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastSocialMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      shareType: isSet(object.shareType) ? globalThis.String(object.shareType) : "0",
      action: isSet(object.action) ? globalThis.String(object.action) : "0",
      shareTarget: isSet(object.shareTarget) ? globalThis.String(object.shareTarget) : "",
      followCount: isSet(object.followCount) ? globalThis.Number(object.followCount) : 0,
      shareDisplayStyle: isSet(object.shareDisplayStyle) ? globalThis.String(object.shareDisplayStyle) : "0",
      shareCount: isSet(object.shareCount) ? globalThis.Number(object.shareCount) : 0,
      publicAreaMessageCommon: isSet(object.publicAreaMessageCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaMessageCommon)
        : undefined,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      signatureVersion: isSet(object.signatureVersion) ? globalThis.String(object.signatureVersion) : "",
      showDurationMs: isSet(object.showDurationMs) ? globalThis.String(object.showDurationMs) : "0",
    };
  },

  toJSON(message: WebcastSocialMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.shareType !== "0") {
      obj.shareType = message.shareType;
    }
    if (message.action !== "0") {
      obj.action = message.action;
    }
    if (message.shareTarget !== "") {
      obj.shareTarget = message.shareTarget;
    }
    if (message.followCount !== 0) {
      obj.followCount = Math.round(message.followCount);
    }
    if (message.shareDisplayStyle !== "0") {
      obj.shareDisplayStyle = message.shareDisplayStyle;
    }
    if (message.shareCount !== 0) {
      obj.shareCount = Math.round(message.shareCount);
    }
    if (message.publicAreaMessageCommon !== undefined) {
      obj.publicAreaMessageCommon = PublicAreaMessageCommon.toJSON(message.publicAreaMessageCommon);
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.signatureVersion !== "") {
      obj.signatureVersion = message.signatureVersion;
    }
    if (message.showDurationMs !== "0") {
      obj.showDurationMs = message.showDurationMs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastSocialMessage>, I>>(base?: I): WebcastSocialMessage {
    return WebcastSocialMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastSocialMessage>, I>>(object: I): WebcastSocialMessage {
    const message = createBaseWebcastSocialMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.shareType = object.shareType ?? "0";
    message.action = object.action ?? "0";
    message.shareTarget = object.shareTarget ?? "";
    message.followCount = object.followCount ?? 0;
    message.shareDisplayStyle = object.shareDisplayStyle ?? "0";
    message.shareCount = object.shareCount ?? 0;
    message.publicAreaMessageCommon =
      (object.publicAreaMessageCommon !== undefined && object.publicAreaMessageCommon !== null)
        ? PublicAreaMessageCommon.fromPartial(object.publicAreaMessageCommon)
        : undefined;
    message.signature = object.signature ?? "";
    message.signatureVersion = object.signatureVersion ?? "";
    message.showDurationMs = object.showDurationMs ?? "0";
    return message;
  },
};

function createBaseWebcastLikeMessage(): WebcastLikeMessage {
  return {
    common: undefined,
    likeCount: 0,
    totalLikeCount: 0,
    color: 0,
    user: undefined,
    icon: "",
    icons: [],
    specifiedDisplayText: [],
    effectCnt: "0",
    likeEffect: [],
    publicAreaMessageCommon: undefined,
    roomMessageHeatLevel: "0",
  };
}

export const WebcastLikeMessageDecoder: MessageFns<WebcastLikeMessage> = {
  encode(message: WebcastLikeMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.likeCount !== 0) {
      writer.uint32(16).int32(message.likeCount);
    }
    if (message.totalLikeCount !== 0) {
      writer.uint32(24).int32(message.totalLikeCount);
    }
    if (message.color !== 0) {
      writer.uint32(32).int32(message.color);
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(42).fork()).join();
    }
    if (message.icon !== "") {
      writer.uint32(50).string(message.icon);
    }
    for (const v of message.icons) {
      ImageDecoder.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.specifiedDisplayText) {
      SpecifiedDisplayTextDecoder.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.effectCnt !== "0") {
      writer.uint32(72).int64(message.effectCnt);
    }
    for (const v of message.likeEffect) {
      LikeEffectDecoder.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.publicAreaMessageCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(90).fork()).join();
    }
    if (message.roomMessageHeatLevel !== "0") {
      writer.uint32(96).int64(message.roomMessageHeatLevel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLikeMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLikeMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.likeCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalLikeCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.color = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icons.push(ImageDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.specifiedDisplayText.push(SpecifiedDisplayTextDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.effectCnt = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.likeEffect.push(LikeEffectDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.publicAreaMessageCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.roomMessageHeatLevel = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLikeMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      likeCount: isSet(object.likeCount) ? globalThis.Number(object.likeCount) : 0,
      totalLikeCount: isSet(object.totalLikeCount) ? globalThis.Number(object.totalLikeCount) : 0,
      color: isSet(object.color) ? globalThis.Number(object.color) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      icons: globalThis.Array.isArray(object?.icons) ? object.icons.map((e: any) => Image.fromJSON(e)) : [],
      specifiedDisplayText: globalThis.Array.isArray(object?.specifiedDisplayText)
        ? object.specifiedDisplayText.map((e: any) => SpecifiedDisplayText.fromJSON(e))
        : [],
      effectCnt: isSet(object.effectCnt) ? globalThis.String(object.effectCnt) : "0",
      likeEffect: globalThis.Array.isArray(object?.likeEffect)
        ? object.likeEffect.map((e: any) => LikeEffect.fromJSON(e))
        : [],
      publicAreaMessageCommon: isSet(object.publicAreaMessageCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaMessageCommon)
        : undefined,
      roomMessageHeatLevel: isSet(object.roomMessageHeatLevel) ? globalThis.String(object.roomMessageHeatLevel) : "0",
    };
  },

  toJSON(message: WebcastLikeMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.likeCount !== 0) {
      obj.likeCount = Math.round(message.likeCount);
    }
    if (message.totalLikeCount !== 0) {
      obj.totalLikeCount = Math.round(message.totalLikeCount);
    }
    if (message.color !== 0) {
      obj.color = Math.round(message.color);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.icons?.length) {
      obj.icons = message.icons.map((e) => Image.toJSON(e));
    }
    if (message.specifiedDisplayText?.length) {
      obj.specifiedDisplayText = message.specifiedDisplayText.map((e) => SpecifiedDisplayText.toJSON(e));
    }
    if (message.effectCnt !== "0") {
      obj.effectCnt = message.effectCnt;
    }
    if (message.likeEffect?.length) {
      obj.likeEffect = message.likeEffect.map((e) => LikeEffect.toJSON(e));
    }
    if (message.publicAreaMessageCommon !== undefined) {
      obj.publicAreaMessageCommon = PublicAreaMessageCommon.toJSON(message.publicAreaMessageCommon);
    }
    if (message.roomMessageHeatLevel !== "0") {
      obj.roomMessageHeatLevel = message.roomMessageHeatLevel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLikeMessage>, I>>(base?: I): WebcastLikeMessage {
    return WebcastLikeMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLikeMessage>, I>>(object: I): WebcastLikeMessage {
    const message = createBaseWebcastLikeMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.likeCount = object.likeCount ?? 0;
    message.totalLikeCount = object.totalLikeCount ?? 0;
    message.color = object.color ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.icon = object.icon ?? "";
    message.icons = object.icons?.map((e) => Image.fromPartial(e)) || [];
    message.specifiedDisplayText = object.specifiedDisplayText?.map((e) => SpecifiedDisplayText.fromPartial(e)) || [];
    message.effectCnt = object.effectCnt ?? "0";
    message.likeEffect = object.likeEffect?.map((e) => LikeEffect.fromPartial(e)) || [];
    message.publicAreaMessageCommon =
      (object.publicAreaMessageCommon !== undefined && object.publicAreaMessageCommon !== null)
        ? PublicAreaMessageCommon.fromPartial(object.publicAreaMessageCommon)
        : undefined;
    message.roomMessageHeatLevel = object.roomMessageHeatLevel ?? "0";
    return message;
  },
};

function createBaseSpecifiedDisplayText(): SpecifiedDisplayText {
  return { uid: "0", displayText: undefined };
}

export const SpecifiedDisplayTextDecoder: MessageFns<SpecifiedDisplayText> = {
  encode(message: SpecifiedDisplayText, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "0") {
      writer.uint32(8).int64(message.uid);
    }
    if (message.displayText !== undefined) {
      TextDecoder.encode(message.displayText, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpecifiedDisplayText {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpecifiedDisplayText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uid = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpecifiedDisplayText {
    return {
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "0",
      displayText: isSet(object.displayText) ? Text.fromJSON(object.displayText) : undefined,
    };
  },

  toJSON(message: SpecifiedDisplayText): unknown {
    const obj: any = {};
    if (message.uid !== "0") {
      obj.uid = message.uid;
    }
    if (message.displayText !== undefined) {
      obj.displayText = Text.toJSON(message.displayText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpecifiedDisplayText>, I>>(base?: I): SpecifiedDisplayText {
    return SpecifiedDisplayText.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpecifiedDisplayText>, I>>(object: I): SpecifiedDisplayText {
    const message = createBaseSpecifiedDisplayText();
    message.uid = object.uid ?? "0";
    message.displayText = (object.displayText !== undefined && object.displayText !== null)
      ? Text.fromPartial(object.displayText)
      : undefined;
    return message;
  },
};

function createBaseLikeEffect(): LikeEffect {
  return { version: "0", effectCnt: "0", effectIntervalMs: "0", level: "0" };
}

export const LikeEffectDecoder: MessageFns<LikeEffect> = {
  encode(message: LikeEffect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "0") {
      writer.uint32(8).int64(message.version);
    }
    if (message.effectCnt !== "0") {
      writer.uint32(16).int64(message.effectCnt);
    }
    if (message.effectIntervalMs !== "0") {
      writer.uint32(24).int64(message.effectIntervalMs);
    }
    if (message.level !== "0") {
      writer.uint32(32).int64(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LikeEffect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLikeEffect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.effectCnt = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.effectIntervalMs = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.level = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LikeEffect {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "0",
      effectCnt: isSet(object.effectCnt) ? globalThis.String(object.effectCnt) : "0",
      effectIntervalMs: isSet(object.effectIntervalMs) ? globalThis.String(object.effectIntervalMs) : "0",
      level: isSet(object.level) ? globalThis.String(object.level) : "0",
    };
  },

  toJSON(message: LikeEffect): unknown {
    const obj: any = {};
    if (message.version !== "0") {
      obj.version = message.version;
    }
    if (message.effectCnt !== "0") {
      obj.effectCnt = message.effectCnt;
    }
    if (message.effectIntervalMs !== "0") {
      obj.effectIntervalMs = message.effectIntervalMs;
    }
    if (message.level !== "0") {
      obj.level = message.level;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LikeEffect>, I>>(base?: I): LikeEffect {
    return LikeEffect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LikeEffect>, I>>(object: I): LikeEffect {
    const message = createBaseLikeEffect();
    message.version = object.version ?? "0";
    message.effectCnt = object.effectCnt ?? "0";
    message.effectIntervalMs = object.effectIntervalMs ?? "0";
    message.level = object.level ?? "0";
    return message;
  },
};

function createBaseWebcastQuestionNewMessage(): WebcastQuestionNewMessage {
  return { common: undefined, details: undefined };
}

export const WebcastQuestionNewMessageDecoder: MessageFns<WebcastQuestionNewMessage> = {
  encode(message: WebcastQuestionNewMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.details !== undefined) {
      WebcastQuestionNewMessage_QuestionDecoder.encode(message.details, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastQuestionNewMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastQuestionNewMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.details = WebcastQuestionNewMessage_QuestionDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastQuestionNewMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      details: isSet(object.details) ? WebcastQuestionNewMessage_Question.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: WebcastQuestionNewMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.details !== undefined) {
      obj.details = WebcastQuestionNewMessage_Question.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastQuestionNewMessage>, I>>(base?: I): WebcastQuestionNewMessage {
    return WebcastQuestionNewMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastQuestionNewMessage>, I>>(object: I): WebcastQuestionNewMessage {
    const message = createBaseWebcastQuestionNewMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.details = (object.details !== undefined && object.details !== null)
      ? WebcastQuestionNewMessage_Question.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseWebcastQuestionNewMessage_Question(): WebcastQuestionNewMessage_Question {
  return {
    questionId: "0",
    questionText: "",
    answerStatus: 0,
    createTime: "0",
    user: undefined,
    createFrom: 0,
    answerFrom: 0,
  };
}

export const WebcastQuestionNewMessage_QuestionDecoder: MessageFns<WebcastQuestionNewMessage_Question> = {
  encode(message: WebcastQuestionNewMessage_Question, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.questionId !== "0") {
      writer.uint32(8).int64(message.questionId);
    }
    if (message.questionText !== "") {
      writer.uint32(18).string(message.questionText);
    }
    if (message.answerStatus !== 0) {
      writer.uint32(24).int32(message.answerStatus);
    }
    if (message.createTime !== "0") {
      writer.uint32(32).int64(message.createTime);
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(42).fork()).join();
    }
    if (message.createFrom !== 0) {
      writer.uint32(160).int32(message.createFrom);
    }
    if (message.answerFrom !== 0) {
      writer.uint32(168).int32(message.answerFrom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastQuestionNewMessage_Question {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastQuestionNewMessage_Question();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.questionId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.questionText = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.answerStatus = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.createTime = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.createFrom = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.answerFrom = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastQuestionNewMessage_Question {
    return {
      questionId: isSet(object.questionId) ? globalThis.String(object.questionId) : "0",
      questionText: isSet(object.questionText) ? globalThis.String(object.questionText) : "",
      answerStatus: isSet(object.answerStatus) ? globalThis.Number(object.answerStatus) : 0,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "0",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      createFrom: isSet(object.createFrom) ? globalThis.Number(object.createFrom) : 0,
      answerFrom: isSet(object.answerFrom) ? globalThis.Number(object.answerFrom) : 0,
    };
  },

  toJSON(message: WebcastQuestionNewMessage_Question): unknown {
    const obj: any = {};
    if (message.questionId !== "0") {
      obj.questionId = message.questionId;
    }
    if (message.questionText !== "") {
      obj.questionText = message.questionText;
    }
    if (message.answerStatus !== 0) {
      obj.answerStatus = Math.round(message.answerStatus);
    }
    if (message.createTime !== "0") {
      obj.createTime = message.createTime;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.createFrom !== 0) {
      obj.createFrom = Math.round(message.createFrom);
    }
    if (message.answerFrom !== 0) {
      obj.answerFrom = Math.round(message.answerFrom);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastQuestionNewMessage_Question>, I>>(
    base?: I,
  ): WebcastQuestionNewMessage_Question {
    return WebcastQuestionNewMessage_Question.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastQuestionNewMessage_Question>, I>>(
    object: I,
  ): WebcastQuestionNewMessage_Question {
    const message = createBaseWebcastQuestionNewMessage_Question();
    message.questionId = object.questionId ?? "0";
    message.questionText = object.questionText ?? "";
    message.answerStatus = object.answerStatus ?? 0;
    message.createTime = object.createTime ?? "0";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.createFrom = object.createFrom ?? 0;
    message.answerFrom = object.answerFrom ?? 0;
    return message;
  },
};

function createBaseWebcastMessageEventDetails(): WebcastMessageEventDetails {
  return { displayType: "", label: "" };
}

export const WebcastMessageEventDetailsDecoder: MessageFns<WebcastMessageEventDetails> = {
  encode(message: WebcastMessageEventDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayType !== "") {
      writer.uint32(10).string(message.displayType);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMessageEventDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMessageEventDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMessageEventDetails {
    return {
      displayType: isSet(object.displayType) ? globalThis.String(object.displayType) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
    };
  },

  toJSON(message: WebcastMessageEventDetails): unknown {
    const obj: any = {};
    if (message.displayType !== "") {
      obj.displayType = message.displayType;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMessageEventDetails>, I>>(base?: I): WebcastMessageEventDetails {
    return WebcastMessageEventDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMessageEventDetails>, I>>(object: I): WebcastMessageEventDetails {
    const message = createBaseWebcastMessageEventDetails();
    message.displayType = object.displayType ?? "";
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseWebcastLiveIntroMessage(): WebcastLiveIntroMessage {
  return {
    common: undefined,
    roomId: "0",
    auditStatus: 0,
    description: "",
    host: undefined,
    introMode: 0,
    badges: [],
    language: "",
  };
}

export const WebcastLiveIntroMessageDecoder: MessageFns<WebcastLiveIntroMessage> = {
  encode(message: WebcastLiveIntroMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.roomId !== "0") {
      writer.uint32(16).int64(message.roomId);
    }
    if (message.auditStatus !== 0) {
      writer.uint32(24).int32(message.auditStatus);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.host !== undefined) {
      UserDecoder.encode(message.host, writer.uint32(42).fork()).join();
    }
    if (message.introMode !== 0) {
      writer.uint32(48).int32(message.introMode);
    }
    for (const v of message.badges) {
      BadgeStructDecoder.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.language !== "") {
      writer.uint32(66).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLiveIntroMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLiveIntroMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.roomId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.auditStatus = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.host = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.introMode = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.badges.push(BadgeStructDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLiveIntroMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      auditStatus: isSet(object.auditStatus) ? auditStatusFromJSON(object.auditStatus) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      host: isSet(object.host) ? User.fromJSON(object.host) : undefined,
      introMode: isSet(object.introMode) ? globalThis.Number(object.introMode) : 0,
      badges: globalThis.Array.isArray(object?.badges) ? object.badges.map((e: any) => BadgeStruct.fromJSON(e)) : [],
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: WebcastLiveIntroMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.auditStatus !== 0) {
      obj.auditStatus = auditStatusToJSON(message.auditStatus);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.host !== undefined) {
      obj.host = User.toJSON(message.host);
    }
    if (message.introMode !== 0) {
      obj.introMode = Math.round(message.introMode);
    }
    if (message.badges?.length) {
      obj.badges = message.badges.map((e) => BadgeStruct.toJSON(e));
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLiveIntroMessage>, I>>(base?: I): WebcastLiveIntroMessage {
    return WebcastLiveIntroMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLiveIntroMessage>, I>>(object: I): WebcastLiveIntroMessage {
    const message = createBaseWebcastLiveIntroMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.roomId = object.roomId ?? "0";
    message.auditStatus = object.auditStatus ?? 0;
    message.description = object.description ?? "";
    message.host = (object.host !== undefined && object.host !== null) ? User.fromPartial(object.host) : undefined;
    message.introMode = object.introMode ?? 0;
    message.badges = object.badges?.map((e) => BadgeStruct.fromPartial(e)) || [];
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseSystemMessage(): SystemMessage {
  return { description: "" };
}

export const SystemMessageDecoder: MessageFns<SystemMessage> = {
  encode(message: SystemMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemMessage {
    return { description: isSet(object.description) ? globalThis.String(object.description) : "" };
  },

  toJSON(message: SystemMessage): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SystemMessage>, I>>(base?: I): SystemMessage {
    return SystemMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SystemMessage>, I>>(object: I): SystemMessage {
    const message = createBaseSystemMessage();
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseRankItem(): RankItem {
  return { colour: "", id: "0" };
}

export const RankItemDecoder: MessageFns<RankItem> = {
  encode(message: RankItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colour !== "") {
      writer.uint32(10).string(message.colour);
    }
    if (message.id !== "0") {
      writer.uint32(32).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.colour = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.id = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RankItem {
    return {
      colour: isSet(object.colour) ? globalThis.String(object.colour) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
    };
  },

  toJSON(message: RankItem): unknown {
    const obj: any = {};
    if (message.colour !== "") {
      obj.colour = message.colour;
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RankItem>, I>>(base?: I): RankItem {
    return RankItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RankItem>, I>>(object: I): RankItem {
    const message = createBaseRankItem();
    message.colour = object.colour ?? "";
    message.id = object.id ?? "0";
    return message;
  },
};

function createBaseWebcastHourlyRankMessage(): WebcastHourlyRankMessage {
  return { data: undefined, common: undefined, data2: 0 };
}

export const WebcastHourlyRankMessageDecoder: MessageFns<WebcastHourlyRankMessage> = {
  encode(message: WebcastHourlyRankMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      WebcastHourlyRankMessage_RankContainerDecoder.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.data2 !== 0) {
      writer.uint32(24).uint32(message.data2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastHourlyRankMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastHourlyRankMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = WebcastHourlyRankMessage_RankContainerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.data2 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastHourlyRankMessage {
    return {
      data: isSet(object.data) ? WebcastHourlyRankMessage_RankContainer.fromJSON(object.data) : undefined,
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      data2: isSet(object.data2) ? globalThis.Number(object.data2) : 0,
    };
  },

  toJSON(message: WebcastHourlyRankMessage): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = WebcastHourlyRankMessage_RankContainer.toJSON(message.data);
    }
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.data2 !== 0) {
      obj.data2 = Math.round(message.data2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastHourlyRankMessage>, I>>(base?: I): WebcastHourlyRankMessage {
    return WebcastHourlyRankMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastHourlyRankMessage>, I>>(object: I): WebcastHourlyRankMessage {
    const message = createBaseWebcastHourlyRankMessage();
    message.data = (object.data !== undefined && object.data !== null)
      ? WebcastHourlyRankMessage_RankContainer.fromPartial(object.data)
      : undefined;
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.data2 = object.data2 ?? 0;
    return message;
  },
};

function createBaseWebcastHourlyRankMessage_RankContainer(): WebcastHourlyRankMessage_RankContainer {
  return {
    data1: 0,
    rankingData: undefined,
    data2: 0,
    rankings: undefined,
    rankingData2: undefined,
    data3: 0,
    data4: 0,
  };
}

export const WebcastHourlyRankMessage_RankContainerDecoder: MessageFns<WebcastHourlyRankMessage_RankContainer> = {
  encode(message: WebcastHourlyRankMessage_RankContainer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data1 !== 0) {
      writer.uint32(8).uint32(message.data1);
    }
    if (message.rankingData !== undefined) {
      WebcastHourlyRankMessage_RankContainer_RankingDataDecoder.encode(message.rankingData, writer.uint32(18).fork()).join();
    }
    if (message.data2 !== 0) {
      writer.uint32(24).uint32(message.data2);
    }
    if (message.rankings !== undefined) {
      RankingDecoder.encode(message.rankings, writer.uint32(34).fork()).join();
    }
    if (message.rankingData2 !== undefined) {
      WebcastHourlyRankMessage_RankContainer_RankingData2Decoder.encode(message.rankingData2, writer.uint32(42).fork()).join();
    }
    if (message.data3 !== 0) {
      writer.uint32(48).uint32(message.data3);
    }
    if (message.data4 !== 0) {
      writer.uint32(56).uint32(message.data4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastHourlyRankMessage_RankContainer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastHourlyRankMessage_RankContainer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.data1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rankingData = WebcastHourlyRankMessage_RankContainer_RankingDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.data2 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rankings = RankingDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rankingData2 = WebcastHourlyRankMessage_RankContainer_RankingData2Decoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.data3 = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.data4 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastHourlyRankMessage_RankContainer {
    return {
      data1: isSet(object.data1) ? globalThis.Number(object.data1) : 0,
      rankingData: isSet(object.rankingData)
        ? WebcastHourlyRankMessage_RankContainer_RankingData.fromJSON(object.rankingData)
        : undefined,
      data2: isSet(object.data2) ? globalThis.Number(object.data2) : 0,
      rankings: isSet(object.rankings) ? Ranking.fromJSON(object.rankings) : undefined,
      rankingData2: isSet(object.rankingData2)
        ? WebcastHourlyRankMessage_RankContainer_RankingData2.fromJSON(object.rankingData2)
        : undefined,
      data3: isSet(object.data3) ? globalThis.Number(object.data3) : 0,
      data4: isSet(object.data4) ? globalThis.Number(object.data4) : 0,
    };
  },

  toJSON(message: WebcastHourlyRankMessage_RankContainer): unknown {
    const obj: any = {};
    if (message.data1 !== 0) {
      obj.data1 = Math.round(message.data1);
    }
    if (message.rankingData !== undefined) {
      obj.rankingData = WebcastHourlyRankMessage_RankContainer_RankingData.toJSON(message.rankingData);
    }
    if (message.data2 !== 0) {
      obj.data2 = Math.round(message.data2);
    }
    if (message.rankings !== undefined) {
      obj.rankings = Ranking.toJSON(message.rankings);
    }
    if (message.rankingData2 !== undefined) {
      obj.rankingData2 = WebcastHourlyRankMessage_RankContainer_RankingData2.toJSON(message.rankingData2);
    }
    if (message.data3 !== 0) {
      obj.data3 = Math.round(message.data3);
    }
    if (message.data4 !== 0) {
      obj.data4 = Math.round(message.data4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastHourlyRankMessage_RankContainer>, I>>(
    base?: I,
  ): WebcastHourlyRankMessage_RankContainer {
    return WebcastHourlyRankMessage_RankContainer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastHourlyRankMessage_RankContainer>, I>>(
    object: I,
  ): WebcastHourlyRankMessage_RankContainer {
    const message = createBaseWebcastHourlyRankMessage_RankContainer();
    message.data1 = object.data1 ?? 0;
    message.rankingData = (object.rankingData !== undefined && object.rankingData !== null)
      ? WebcastHourlyRankMessage_RankContainer_RankingData.fromPartial(object.rankingData)
      : undefined;
    message.data2 = object.data2 ?? 0;
    message.rankings = (object.rankings !== undefined && object.rankings !== null)
      ? Ranking.fromPartial(object.rankings)
      : undefined;
    message.rankingData2 = (object.rankingData2 !== undefined && object.rankingData2 !== null)
      ? WebcastHourlyRankMessage_RankContainer_RankingData2.fromPartial(object.rankingData2)
      : undefined;
    message.data3 = object.data3 ?? 0;
    message.data4 = object.data4 ?? 0;
    return message;
  },
};

function createBaseWebcastHourlyRankMessage_RankContainer_RankingData(): WebcastHourlyRankMessage_RankContainer_RankingData {
  return { data1: 0, rankdata: undefined, data2: "" };
}

export const WebcastHourlyRankMessage_RankContainer_RankingDataDecoder: MessageFns<WebcastHourlyRankMessage_RankContainer_RankingData> = {
  encode(
    message: WebcastHourlyRankMessage_RankContainer_RankingData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.data1 !== 0) {
      writer.uint32(8).uint32(message.data1);
    }
    if (message.rankdata !== undefined) {
      RankingDecoder.encode(message.rankdata, writer.uint32(18).fork()).join();
    }
    if (message.data2 !== "") {
      writer.uint32(26).string(message.data2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastHourlyRankMessage_RankContainer_RankingData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.data1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rankdata = RankingDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data2 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastHourlyRankMessage_RankContainer_RankingData {
    return {
      data1: isSet(object.data1) ? globalThis.Number(object.data1) : 0,
      rankdata: isSet(object.rankdata) ? Ranking.fromJSON(object.rankdata) : undefined,
      data2: isSet(object.data2) ? globalThis.String(object.data2) : "",
    };
  },

  toJSON(message: WebcastHourlyRankMessage_RankContainer_RankingData): unknown {
    const obj: any = {};
    if (message.data1 !== 0) {
      obj.data1 = Math.round(message.data1);
    }
    if (message.rankdata !== undefined) {
      obj.rankdata = Ranking.toJSON(message.rankdata);
    }
    if (message.data2 !== "") {
      obj.data2 = message.data2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastHourlyRankMessage_RankContainer_RankingData>, I>>(
    base?: I,
  ): WebcastHourlyRankMessage_RankContainer_RankingData {
    return WebcastHourlyRankMessage_RankContainer_RankingData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastHourlyRankMessage_RankContainer_RankingData>, I>>(
    object: I,
  ): WebcastHourlyRankMessage_RankContainer_RankingData {
    const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData();
    message.data1 = object.data1 ?? 0;
    message.rankdata = (object.rankdata !== undefined && object.rankdata !== null)
      ? Ranking.fromPartial(object.rankdata)
      : undefined;
    message.data2 = object.data2 ?? "";
    return message;
  },
};

function createBaseWebcastHourlyRankMessage_RankContainer_RankingData2(): WebcastHourlyRankMessage_RankContainer_RankingData2 {
  return { data1: 0, data2: 0, rankdata: undefined, data3: "", data4: 0, data5: 0 };
}

export const WebcastHourlyRankMessage_RankContainer_RankingData2Decoder: MessageFns<WebcastHourlyRankMessage_RankContainer_RankingData2> = {
  encode(
    message: WebcastHourlyRankMessage_RankContainer_RankingData2,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.data1 !== 0) {
      writer.uint32(8).uint32(message.data1);
    }
    if (message.data2 !== 0) {
      writer.uint32(16).uint32(message.data2);
    }
    if (message.rankdata !== undefined) {
      RankingDecoder.encode(message.rankdata, writer.uint32(26).fork()).join();
    }
    if (message.data3 !== "") {
      writer.uint32(34).string(message.data3);
    }
    if (message.data4 !== 0) {
      writer.uint32(40).uint32(message.data4);
    }
    if (message.data5 !== 0) {
      writer.uint32(48).uint32(message.data5);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastHourlyRankMessage_RankContainer_RankingData2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.data1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.data2 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rankdata = RankingDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data3 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.data4 = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.data5 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastHourlyRankMessage_RankContainer_RankingData2 {
    return {
      data1: isSet(object.data1) ? globalThis.Number(object.data1) : 0,
      data2: isSet(object.data2) ? globalThis.Number(object.data2) : 0,
      rankdata: isSet(object.rankdata) ? Ranking.fromJSON(object.rankdata) : undefined,
      data3: isSet(object.data3) ? globalThis.String(object.data3) : "",
      data4: isSet(object.data4) ? globalThis.Number(object.data4) : 0,
      data5: isSet(object.data5) ? globalThis.Number(object.data5) : 0,
    };
  },

  toJSON(message: WebcastHourlyRankMessage_RankContainer_RankingData2): unknown {
    const obj: any = {};
    if (message.data1 !== 0) {
      obj.data1 = Math.round(message.data1);
    }
    if (message.data2 !== 0) {
      obj.data2 = Math.round(message.data2);
    }
    if (message.rankdata !== undefined) {
      obj.rankdata = Ranking.toJSON(message.rankdata);
    }
    if (message.data3 !== "") {
      obj.data3 = message.data3;
    }
    if (message.data4 !== 0) {
      obj.data4 = Math.round(message.data4);
    }
    if (message.data5 !== 0) {
      obj.data5 = Math.round(message.data5);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastHourlyRankMessage_RankContainer_RankingData2>, I>>(
    base?: I,
  ): WebcastHourlyRankMessage_RankContainer_RankingData2 {
    return WebcastHourlyRankMessage_RankContainer_RankingData2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastHourlyRankMessage_RankContainer_RankingData2>, I>>(
    object: I,
  ): WebcastHourlyRankMessage_RankContainer_RankingData2 {
    const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData2();
    message.data1 = object.data1 ?? 0;
    message.data2 = object.data2 ?? 0;
    message.rankdata = (object.rankdata !== undefined && object.rankdata !== null)
      ? Ranking.fromPartial(object.rankdata)
      : undefined;
    message.data3 = object.data3 ?? "";
    message.data4 = object.data4 ?? 0;
    message.data5 = object.data5 ?? 0;
    return message;
  },
};

function createBaseEmoteDetails(): EmoteDetails {
  return { emoteId: "", image: undefined };
}

export const EmoteDetailsDecoder: MessageFns<EmoteDetails> = {
  encode(message: EmoteDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emoteId !== "") {
      writer.uint32(10).string(message.emoteId);
    }
    if (message.image !== undefined) {
      EmoteImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmoteDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmoteDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emoteId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.image = EmoteImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmoteDetails {
    return {
      emoteId: isSet(object.emoteId) ? globalThis.String(object.emoteId) : "",
      image: isSet(object.image) ? EmoteImage.fromJSON(object.image) : undefined,
    };
  },

  toJSON(message: EmoteDetails): unknown {
    const obj: any = {};
    if (message.emoteId !== "") {
      obj.emoteId = message.emoteId;
    }
    if (message.image !== undefined) {
      obj.image = EmoteImage.toJSON(message.image);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmoteDetails>, I>>(base?: I): EmoteDetails {
    return EmoteDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmoteDetails>, I>>(object: I): EmoteDetails {
    const message = createBaseEmoteDetails();
    message.emoteId = object.emoteId ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? EmoteImage.fromPartial(object.image)
      : undefined;
    return message;
  },
};

function createBaseEmoteImage(): EmoteImage {
  return { imageUrl: "" };
}

export const EmoteImageDecoder: MessageFns<EmoteImage> = {
  encode(message: EmoteImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageUrl !== "") {
      writer.uint32(10).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmoteImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmoteImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmoteImage {
    return { imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "" };
  },

  toJSON(message: EmoteImage): unknown {
    const obj: any = {};
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmoteImage>, I>>(base?: I): EmoteImage {
    return EmoteImage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmoteImage>, I>>(object: I): EmoteImage {
    const message = createBaseEmoteImage();
    message.imageUrl = object.imageUrl ?? "";
    return message;
  },
};

function createBaseWebcastEnvelopeMessage(): WebcastEnvelopeMessage {
  return { common: undefined, envelopeInfo: undefined, display: 0 };
}

export const WebcastEnvelopeMessageDecoder: MessageFns<WebcastEnvelopeMessage> = {
  encode(message: WebcastEnvelopeMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.envelopeInfo !== undefined) {
      WebcastEnvelopeMessage_EnvelopeInfoDecoder.encode(message.envelopeInfo, writer.uint32(18).fork()).join();
    }
    if (message.display !== 0) {
      writer.uint32(24).int32(message.display);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastEnvelopeMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastEnvelopeMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.envelopeInfo = WebcastEnvelopeMessage_EnvelopeInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.display = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastEnvelopeMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      envelopeInfo: isSet(object.envelopeInfo)
        ? WebcastEnvelopeMessage_EnvelopeInfo.fromJSON(object.envelopeInfo)
        : undefined,
      display: isSet(object.display) ? envelopeDisplayFromJSON(object.display) : 0,
    };
  },

  toJSON(message: WebcastEnvelopeMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.envelopeInfo !== undefined) {
      obj.envelopeInfo = WebcastEnvelopeMessage_EnvelopeInfo.toJSON(message.envelopeInfo);
    }
    if (message.display !== 0) {
      obj.display = envelopeDisplayToJSON(message.display);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastEnvelopeMessage>, I>>(base?: I): WebcastEnvelopeMessage {
    return WebcastEnvelopeMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastEnvelopeMessage>, I>>(object: I): WebcastEnvelopeMessage {
    const message = createBaseWebcastEnvelopeMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.envelopeInfo = (object.envelopeInfo !== undefined && object.envelopeInfo !== null)
      ? WebcastEnvelopeMessage_EnvelopeInfo.fromPartial(object.envelopeInfo)
      : undefined;
    message.display = object.display ?? 0;
    return message;
  },
};

function createBaseWebcastEnvelopeMessage_EnvelopeInfo(): WebcastEnvelopeMessage_EnvelopeInfo {
  return {
    envelopeId: "",
    businessType: 0,
    envelopeIdc: "",
    sendUserName: "",
    diamondCount: 0,
    peopleCount: 0,
    unpackAt: 0,
    sendUserId: "",
    sendUserAvatar: undefined,
    createAt: "",
    roomId: "",
    followShowStatus: 0,
    skinId: 0,
  };
}

export const WebcastEnvelopeMessage_EnvelopeInfoDecoder: MessageFns<WebcastEnvelopeMessage_EnvelopeInfo> = {
  encode(message: WebcastEnvelopeMessage_EnvelopeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.envelopeId !== "") {
      writer.uint32(10).string(message.envelopeId);
    }
    if (message.businessType !== 0) {
      writer.uint32(16).int32(message.businessType);
    }
    if (message.envelopeIdc !== "") {
      writer.uint32(26).string(message.envelopeIdc);
    }
    if (message.sendUserName !== "") {
      writer.uint32(34).string(message.sendUserName);
    }
    if (message.diamondCount !== 0) {
      writer.uint32(40).int32(message.diamondCount);
    }
    if (message.peopleCount !== 0) {
      writer.uint32(48).int32(message.peopleCount);
    }
    if (message.unpackAt !== 0) {
      writer.uint32(56).int32(message.unpackAt);
    }
    if (message.sendUserId !== "") {
      writer.uint32(66).string(message.sendUserId);
    }
    if (message.sendUserAvatar !== undefined) {
      ImageDecoder.encode(message.sendUserAvatar, writer.uint32(74).fork()).join();
    }
    if (message.createAt !== "") {
      writer.uint32(82).string(message.createAt);
    }
    if (message.roomId !== "") {
      writer.uint32(90).string(message.roomId);
    }
    if (message.followShowStatus !== 0) {
      writer.uint32(96).int32(message.followShowStatus);
    }
    if (message.skinId !== 0) {
      writer.uint32(104).int32(message.skinId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastEnvelopeMessage_EnvelopeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastEnvelopeMessage_EnvelopeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.envelopeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.businessType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.envelopeIdc = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sendUserName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.diamondCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.peopleCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.unpackAt = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.sendUserId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.sendUserAvatar = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.followShowStatus = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.skinId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastEnvelopeMessage_EnvelopeInfo {
    return {
      envelopeId: isSet(object.envelopeId) ? globalThis.String(object.envelopeId) : "",
      businessType: isSet(object.businessType) ? envelopeBusinessTypeFromJSON(object.businessType) : 0,
      envelopeIdc: isSet(object.envelopeIdc) ? globalThis.String(object.envelopeIdc) : "",
      sendUserName: isSet(object.sendUserName) ? globalThis.String(object.sendUserName) : "",
      diamondCount: isSet(object.diamondCount) ? globalThis.Number(object.diamondCount) : 0,
      peopleCount: isSet(object.peopleCount) ? globalThis.Number(object.peopleCount) : 0,
      unpackAt: isSet(object.unpackAt) ? globalThis.Number(object.unpackAt) : 0,
      sendUserId: isSet(object.sendUserId) ? globalThis.String(object.sendUserId) : "",
      sendUserAvatar: isSet(object.sendUserAvatar) ? Image.fromJSON(object.sendUserAvatar) : undefined,
      createAt: isSet(object.createAt) ? globalThis.String(object.createAt) : "",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      followShowStatus: isSet(object.followShowStatus) ? envelopeFollowShowStatusFromJSON(object.followShowStatus) : 0,
      skinId: isSet(object.skinId) ? globalThis.Number(object.skinId) : 0,
    };
  },

  toJSON(message: WebcastEnvelopeMessage_EnvelopeInfo): unknown {
    const obj: any = {};
    if (message.envelopeId !== "") {
      obj.envelopeId = message.envelopeId;
    }
    if (message.businessType !== 0) {
      obj.businessType = envelopeBusinessTypeToJSON(message.businessType);
    }
    if (message.envelopeIdc !== "") {
      obj.envelopeIdc = message.envelopeIdc;
    }
    if (message.sendUserName !== "") {
      obj.sendUserName = message.sendUserName;
    }
    if (message.diamondCount !== 0) {
      obj.diamondCount = Math.round(message.diamondCount);
    }
    if (message.peopleCount !== 0) {
      obj.peopleCount = Math.round(message.peopleCount);
    }
    if (message.unpackAt !== 0) {
      obj.unpackAt = Math.round(message.unpackAt);
    }
    if (message.sendUserId !== "") {
      obj.sendUserId = message.sendUserId;
    }
    if (message.sendUserAvatar !== undefined) {
      obj.sendUserAvatar = Image.toJSON(message.sendUserAvatar);
    }
    if (message.createAt !== "") {
      obj.createAt = message.createAt;
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.followShowStatus !== 0) {
      obj.followShowStatus = envelopeFollowShowStatusToJSON(message.followShowStatus);
    }
    if (message.skinId !== 0) {
      obj.skinId = Math.round(message.skinId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastEnvelopeMessage_EnvelopeInfo>, I>>(
    base?: I,
  ): WebcastEnvelopeMessage_EnvelopeInfo {
    return WebcastEnvelopeMessage_EnvelopeInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastEnvelopeMessage_EnvelopeInfo>, I>>(
    object: I,
  ): WebcastEnvelopeMessage_EnvelopeInfo {
    const message = createBaseWebcastEnvelopeMessage_EnvelopeInfo();
    message.envelopeId = object.envelopeId ?? "";
    message.businessType = object.businessType ?? 0;
    message.envelopeIdc = object.envelopeIdc ?? "";
    message.sendUserName = object.sendUserName ?? "";
    message.diamondCount = object.diamondCount ?? 0;
    message.peopleCount = object.peopleCount ?? 0;
    message.unpackAt = object.unpackAt ?? 0;
    message.sendUserId = object.sendUserId ?? "";
    message.sendUserAvatar = (object.sendUserAvatar !== undefined && object.sendUserAvatar !== null)
      ? Image.fromPartial(object.sendUserAvatar)
      : undefined;
    message.createAt = object.createAt ?? "";
    message.roomId = object.roomId ?? "";
    message.followShowStatus = object.followShowStatus ?? 0;
    message.skinId = object.skinId ?? 0;
    return message;
  },
};

function createBaseTreasureBoxData(): TreasureBoxData {
  return { coins: 0, canOpen: 0, timestamp: "0" };
}

export const TreasureBoxDataDecoder: MessageFns<TreasureBoxData> = {
  encode(message: TreasureBoxData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.coins !== 0) {
      writer.uint32(40).uint32(message.coins);
    }
    if (message.canOpen !== 0) {
      writer.uint32(48).uint32(message.canOpen);
    }
    if (message.timestamp !== "0") {
      writer.uint32(56).uint64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TreasureBoxData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreasureBoxData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.coins = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.canOpen = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TreasureBoxData {
    return {
      coins: isSet(object.coins) ? globalThis.Number(object.coins) : 0,
      canOpen: isSet(object.canOpen) ? globalThis.Number(object.canOpen) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
    };
  },

  toJSON(message: TreasureBoxData): unknown {
    const obj: any = {};
    if (message.coins !== 0) {
      obj.coins = Math.round(message.coins);
    }
    if (message.canOpen !== 0) {
      obj.canOpen = Math.round(message.canOpen);
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TreasureBoxData>, I>>(base?: I): TreasureBoxData {
    return TreasureBoxData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TreasureBoxData>, I>>(object: I): TreasureBoxData {
    const message = createBaseTreasureBoxData();
    message.coins = object.coins ?? 0;
    message.canOpen = object.canOpen ?? 0;
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseWebcastSubNotifyMessage(): WebcastSubNotifyMessage {
  return {
    common: undefined,
    user: undefined,
    exhibitionType: 0,
    subMonth: "0",
    subscribeType: 0,
    oldSubscribeStatus: 0,
    subscribeMessageType: undefined,
    subscribingStatus: 0,
    isSend: false,
    isCustom: false,
    giftSource: 0,
    messageDisplayStyle: 0,
    publicAreaMessageCommon: undefined,
    packageId: "",
    eventTracking: undefined,
  };
}

export const WebcastSubNotifyMessageDecoder: MessageFns<WebcastSubNotifyMessage> = {
  encode(message: WebcastSubNotifyMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.exhibitionType !== 0) {
      writer.uint32(24).int32(message.exhibitionType);
    }
    if (message.subMonth !== "0") {
      writer.uint32(32).int64(message.subMonth);
    }
    if (message.subscribeType !== 0) {
      writer.uint32(40).int32(message.subscribeType);
    }
    if (message.oldSubscribeStatus !== 0) {
      writer.uint32(48).int32(message.oldSubscribeStatus);
    }
    if (message.subscribeMessageType !== undefined) {
      writer.uint32(56).int32(message.subscribeMessageType);
    }
    if (message.subscribingStatus !== 0) {
      writer.uint32(64).int32(message.subscribingStatus);
    }
    if (message.isSend !== false) {
      writer.uint32(72).bool(message.isSend);
    }
    if (message.isCustom !== false) {
      writer.uint32(80).bool(message.isCustom);
    }
    if (message.giftSource !== 0) {
      writer.uint32(88).int32(message.giftSource);
    }
    if (message.messageDisplayStyle !== 0) {
      writer.uint32(96).int32(message.messageDisplayStyle);
    }
    if (message.publicAreaMessageCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(106).fork()).join();
    }
    if (message.packageId !== "") {
      writer.uint32(114).string(message.packageId);
    }
    if (message.eventTracking !== undefined) {
      WebcastSubNotifyMessage_EventTrackingDecoder.encode(message.eventTracking, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastSubNotifyMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastSubNotifyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.exhibitionType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.subMonth = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.subscribeType = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.oldSubscribeStatus = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.subscribeMessageType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.subscribingStatus = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isSend = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isCustom = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.giftSource = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.messageDisplayStyle = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.publicAreaMessageCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.packageId = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.eventTracking = WebcastSubNotifyMessage_EventTrackingDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastSubNotifyMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      exhibitionType: isSet(object.exhibitionType) ? exhibitionTypeFromJSON(object.exhibitionType) : 0,
      subMonth: isSet(object.subMonth) ? globalThis.String(object.subMonth) : "0",
      subscribeType: isSet(object.subscribeType) ? subscribeTypeFromJSON(object.subscribeType) : 0,
      oldSubscribeStatus: isSet(object.oldSubscribeStatus) ? oldSubscribeStatusFromJSON(object.oldSubscribeStatus) : 0,
      subscribeMessageType: isSet(object.subscribeMessageType)
        ? messageTypeFromJSON(object.subscribeMessageType)
        : undefined,
      subscribingStatus: isSet(object.subscribingStatus) ? subscribingStatusFromJSON(object.subscribingStatus) : 0,
      isSend: isSet(object.isSend) ? globalThis.Boolean(object.isSend) : false,
      isCustom: isSet(object.isCustom) ? globalThis.Boolean(object.isCustom) : false,
      giftSource: isSet(object.giftSource) ? giftSourceFromJSON(object.giftSource) : 0,
      messageDisplayStyle: isSet(object.messageDisplayStyle)
        ? messageDisplayStyleFromJSON(object.messageDisplayStyle)
        : 0,
      publicAreaMessageCommon: isSet(object.publicAreaMessageCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaMessageCommon)
        : undefined,
      packageId: isSet(object.packageId) ? globalThis.String(object.packageId) : "",
      eventTracking: isSet(object.eventTracking)
        ? WebcastSubNotifyMessage_EventTracking.fromJSON(object.eventTracking)
        : undefined,
    };
  },

  toJSON(message: WebcastSubNotifyMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.exhibitionType !== 0) {
      obj.exhibitionType = exhibitionTypeToJSON(message.exhibitionType);
    }
    if (message.subMonth !== "0") {
      obj.subMonth = message.subMonth;
    }
    if (message.subscribeType !== 0) {
      obj.subscribeType = subscribeTypeToJSON(message.subscribeType);
    }
    if (message.oldSubscribeStatus !== 0) {
      obj.oldSubscribeStatus = oldSubscribeStatusToJSON(message.oldSubscribeStatus);
    }
    if (message.subscribeMessageType !== undefined) {
      obj.subscribeMessageType = messageTypeToJSON(message.subscribeMessageType);
    }
    if (message.subscribingStatus !== 0) {
      obj.subscribingStatus = subscribingStatusToJSON(message.subscribingStatus);
    }
    if (message.isSend !== false) {
      obj.isSend = message.isSend;
    }
    if (message.isCustom !== false) {
      obj.isCustom = message.isCustom;
    }
    if (message.giftSource !== 0) {
      obj.giftSource = giftSourceToJSON(message.giftSource);
    }
    if (message.messageDisplayStyle !== 0) {
      obj.messageDisplayStyle = messageDisplayStyleToJSON(message.messageDisplayStyle);
    }
    if (message.publicAreaMessageCommon !== undefined) {
      obj.publicAreaMessageCommon = PublicAreaMessageCommon.toJSON(message.publicAreaMessageCommon);
    }
    if (message.packageId !== "") {
      obj.packageId = message.packageId;
    }
    if (message.eventTracking !== undefined) {
      obj.eventTracking = WebcastSubNotifyMessage_EventTracking.toJSON(message.eventTracking);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastSubNotifyMessage>, I>>(base?: I): WebcastSubNotifyMessage {
    return WebcastSubNotifyMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastSubNotifyMessage>, I>>(object: I): WebcastSubNotifyMessage {
    const message = createBaseWebcastSubNotifyMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.exhibitionType = object.exhibitionType ?? 0;
    message.subMonth = object.subMonth ?? "0";
    message.subscribeType = object.subscribeType ?? 0;
    message.oldSubscribeStatus = object.oldSubscribeStatus ?? 0;
    message.subscribeMessageType = object.subscribeMessageType ?? undefined;
    message.subscribingStatus = object.subscribingStatus ?? 0;
    message.isSend = object.isSend ?? false;
    message.isCustom = object.isCustom ?? false;
    message.giftSource = object.giftSource ?? 0;
    message.messageDisplayStyle = object.messageDisplayStyle ?? 0;
    message.publicAreaMessageCommon =
      (object.publicAreaMessageCommon !== undefined && object.publicAreaMessageCommon !== null)
        ? PublicAreaMessageCommon.fromPartial(object.publicAreaMessageCommon)
        : undefined;
    message.packageId = object.packageId ?? "";
    message.eventTracking = (object.eventTracking !== undefined && object.eventTracking !== null)
      ? WebcastSubNotifyMessage_EventTracking.fromPartial(object.eventTracking)
      : undefined;
    return message;
  },
};

function createBaseWebcastSubNotifyMessage_EventTracking(): WebcastSubNotifyMessage_EventTracking {
  return { giftSubSenderId: "0", giftSubReceiverId: "0", anchorId: "0", giftSubOrderCreateTime: "0" };
}

export const WebcastSubNotifyMessage_EventTrackingDecoder: MessageFns<WebcastSubNotifyMessage_EventTracking> = {
  encode(message: WebcastSubNotifyMessage_EventTracking, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftSubSenderId !== "0") {
      writer.uint32(8).int64(message.giftSubSenderId);
    }
    if (message.giftSubReceiverId !== "0") {
      writer.uint32(16).int64(message.giftSubReceiverId);
    }
    if (message.anchorId !== "0") {
      writer.uint32(24).int64(message.anchorId);
    }
    if (message.giftSubOrderCreateTime !== "0") {
      writer.uint32(32).int64(message.giftSubOrderCreateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastSubNotifyMessage_EventTracking {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastSubNotifyMessage_EventTracking();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftSubSenderId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.giftSubReceiverId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.anchorId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.giftSubOrderCreateTime = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastSubNotifyMessage_EventTracking {
    return {
      giftSubSenderId: isSet(object.giftSubSenderId) ? globalThis.String(object.giftSubSenderId) : "0",
      giftSubReceiverId: isSet(object.giftSubReceiverId) ? globalThis.String(object.giftSubReceiverId) : "0",
      anchorId: isSet(object.anchorId) ? globalThis.String(object.anchorId) : "0",
      giftSubOrderCreateTime: isSet(object.giftSubOrderCreateTime)
        ? globalThis.String(object.giftSubOrderCreateTime)
        : "0",
    };
  },

  toJSON(message: WebcastSubNotifyMessage_EventTracking): unknown {
    const obj: any = {};
    if (message.giftSubSenderId !== "0") {
      obj.giftSubSenderId = message.giftSubSenderId;
    }
    if (message.giftSubReceiverId !== "0") {
      obj.giftSubReceiverId = message.giftSubReceiverId;
    }
    if (message.anchorId !== "0") {
      obj.anchorId = message.anchorId;
    }
    if (message.giftSubOrderCreateTime !== "0") {
      obj.giftSubOrderCreateTime = message.giftSubOrderCreateTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastSubNotifyMessage_EventTracking>, I>>(
    base?: I,
  ): WebcastSubNotifyMessage_EventTracking {
    return WebcastSubNotifyMessage_EventTracking.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastSubNotifyMessage_EventTracking>, I>>(
    object: I,
  ): WebcastSubNotifyMessage_EventTracking {
    const message = createBaseWebcastSubNotifyMessage_EventTracking();
    message.giftSubSenderId = object.giftSubSenderId ?? "0";
    message.giftSubReceiverId = object.giftSubReceiverId ?? "0";
    message.anchorId = object.anchorId ?? "0";
    message.giftSubOrderCreateTime = object.giftSubOrderCreateTime ?? "0";
    return message;
  },
};

function createBaseFollowInfo(): FollowInfo {
  return { followingCount: 0, followerCount: 0, followStatus: 0, pushStatus: 0 };
}

export const FollowInfoDecoder: MessageFns<FollowInfo> = {
  encode(message: FollowInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.followingCount !== 0) {
      writer.uint32(8).int32(message.followingCount);
    }
    if (message.followerCount !== 0) {
      writer.uint32(16).int32(message.followerCount);
    }
    if (message.followStatus !== 0) {
      writer.uint32(24).int32(message.followStatus);
    }
    if (message.pushStatus !== 0) {
      writer.uint32(32).int32(message.pushStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FollowInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.followingCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.followerCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.followStatus = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pushStatus = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FollowInfo {
    return {
      followingCount: isSet(object.followingCount) ? globalThis.Number(object.followingCount) : 0,
      followerCount: isSet(object.followerCount) ? globalThis.Number(object.followerCount) : 0,
      followStatus: isSet(object.followStatus) ? globalThis.Number(object.followStatus) : 0,
      pushStatus: isSet(object.pushStatus) ? globalThis.Number(object.pushStatus) : 0,
    };
  },

  toJSON(message: FollowInfo): unknown {
    const obj: any = {};
    if (message.followingCount !== 0) {
      obj.followingCount = Math.round(message.followingCount);
    }
    if (message.followerCount !== 0) {
      obj.followerCount = Math.round(message.followerCount);
    }
    if (message.followStatus !== 0) {
      obj.followStatus = Math.round(message.followStatus);
    }
    if (message.pushStatus !== 0) {
      obj.pushStatus = Math.round(message.pushStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowInfo>, I>>(base?: I): FollowInfo {
    return FollowInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowInfo>, I>>(object: I): FollowInfo {
    const message = createBaseFollowInfo();
    message.followingCount = object.followingCount ?? 0;
    message.followerCount = object.followerCount ?? 0;
    message.followStatus = object.followStatus ?? 0;
    message.pushStatus = object.pushStatus ?? 0;
    return message;
  },
};

function createBaseProfilePicture(): ProfilePicture {
  return { urls: [] };
}

export const ProfilePictureDecoder: MessageFns<ProfilePicture> = {
  encode(message: ProfilePicture, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.urls) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfilePicture {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfilePicture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.urls.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfilePicture {
    return { urls: globalThis.Array.isArray(object?.urls) ? object.urls.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: ProfilePicture): unknown {
    const obj: any = {};
    if (message.urls?.length) {
      obj.urls = message.urls;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfilePicture>, I>>(base?: I): ProfilePicture {
    return ProfilePicture.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfilePicture>, I>>(object: I): ProfilePicture {
    const message = createBaseProfilePicture();
    message.urls = object.urls?.map((e) => e) || [];
    return message;
  },
};

function createBaseUserBadgesAttributes(): UserBadgesAttributes {
  return { badgeSceneType: 0, imageBadges: [], badges: [], privilegeLogExtra: undefined };
}

export const UserBadgesAttributesDecoder: MessageFns<UserBadgesAttributes> = {
  encode(message: UserBadgesAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.badgeSceneType !== 0) {
      writer.uint32(24).int32(message.badgeSceneType);
    }
    for (const v of message.imageBadges) {
      UserImageBadgeDecoder.encode(v!, writer.uint32(162).fork()).join();
    }
    for (const v of message.badges) {
      UserBadgeDecoder.encode(v!, writer.uint32(170).fork()).join();
    }
    if (message.privilegeLogExtra !== undefined) {
      PrivilegeLogExtraDecoder.encode(message.privilegeLogExtra, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserBadgesAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserBadgesAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.badgeSceneType = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.imageBadges.push(UserImageBadgeDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.badges.push(UserBadgeDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.privilegeLogExtra = PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserBadgesAttributes {
    return {
      badgeSceneType: isSet(object.badgeSceneType) ? globalThis.Number(object.badgeSceneType) : 0,
      imageBadges: globalThis.Array.isArray(object?.imageBadges)
        ? object.imageBadges.map((e: any) => UserImageBadge.fromJSON(e))
        : [],
      badges: globalThis.Array.isArray(object?.badges) ? object.badges.map((e: any) => UserBadge.fromJSON(e)) : [],
      privilegeLogExtra: isSet(object.privilegeLogExtra)
        ? PrivilegeLogExtra.fromJSON(object.privilegeLogExtra)
        : undefined,
    };
  },

  toJSON(message: UserBadgesAttributes): unknown {
    const obj: any = {};
    if (message.badgeSceneType !== 0) {
      obj.badgeSceneType = Math.round(message.badgeSceneType);
    }
    if (message.imageBadges?.length) {
      obj.imageBadges = message.imageBadges.map((e) => UserImageBadge.toJSON(e));
    }
    if (message.badges?.length) {
      obj.badges = message.badges.map((e) => UserBadge.toJSON(e));
    }
    if (message.privilegeLogExtra !== undefined) {
      obj.privilegeLogExtra = PrivilegeLogExtra.toJSON(message.privilegeLogExtra);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserBadgesAttributes>, I>>(base?: I): UserBadgesAttributes {
    return UserBadgesAttributes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserBadgesAttributes>, I>>(object: I): UserBadgesAttributes {
    const message = createBaseUserBadgesAttributes();
    message.badgeSceneType = object.badgeSceneType ?? 0;
    message.imageBadges = object.imageBadges?.map((e) => UserImageBadge.fromPartial(e)) || [];
    message.badges = object.badges?.map((e) => UserBadge.fromPartial(e)) || [];
    message.privilegeLogExtra = (object.privilegeLogExtra !== undefined && object.privilegeLogExtra !== null)
      ? PrivilegeLogExtra.fromPartial(object.privilegeLogExtra)
      : undefined;
    return message;
  },
};

function createBaseUserBadge(): UserBadge {
  return { type: "", name: "" };
}

export const UserBadgeDecoder: MessageFns<UserBadge> = {
  encode(message: UserBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserBadge {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: UserBadge): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserBadge>, I>>(base?: I): UserBadge {
    return UserBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserBadge>, I>>(object: I): UserBadge {
    const message = createBaseUserBadge();
    message.type = object.type ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUserImageBadge(): UserImageBadge {
  return { displayType: 0, image: undefined };
}

export const UserImageBadgeDecoder: MessageFns<UserImageBadge> = {
  encode(message: UserImageBadge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayType !== 0) {
      writer.uint32(8).int32(message.displayType);
    }
    if (message.image !== undefined) {
      UserImageBadgeImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserImageBadge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserImageBadge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.displayType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.image = UserImageBadgeImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserImageBadge {
    return {
      displayType: isSet(object.displayType) ? globalThis.Number(object.displayType) : 0,
      image: isSet(object.image) ? UserImageBadgeImage.fromJSON(object.image) : undefined,
    };
  },

  toJSON(message: UserImageBadge): unknown {
    const obj: any = {};
    if (message.displayType !== 0) {
      obj.displayType = Math.round(message.displayType);
    }
    if (message.image !== undefined) {
      obj.image = UserImageBadgeImage.toJSON(message.image);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserImageBadge>, I>>(base?: I): UserImageBadge {
    return UserImageBadge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserImageBadge>, I>>(object: I): UserImageBadge {
    const message = createBaseUserImageBadge();
    message.displayType = object.displayType ?? 0;
    message.image = (object.image !== undefined && object.image !== null)
      ? UserImageBadgeImage.fromPartial(object.image)
      : undefined;
    return message;
  },
};

function createBaseUserImageBadgeImage(): UserImageBadgeImage {
  return { url: "" };
}

export const UserImageBadgeImageDecoder: MessageFns<UserImageBadgeImage> = {
  encode(message: UserImageBadgeImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserImageBadgeImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserImageBadgeImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserImageBadgeImage {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: UserImageBadgeImage): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserImageBadgeImage>, I>>(base?: I): UserImageBadgeImage {
    return UserImageBadgeImage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserImageBadgeImage>, I>>(object: I): UserImageBadgeImage {
    const message = createBaseUserImageBadgeImage();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseWebSocketAckMessage(): WebSocketAckMessage {
  return { id: "0", type: "" };
}

export const WebSocketAckMessageDecoder: MessageFns<WebSocketAckMessage> = {
  encode(message: WebSocketAckMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(16).uint64(message.id);
    }
    if (message.type !== "") {
      writer.uint32(58).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebSocketAckMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebSocketAckMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebSocketAckMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: WebSocketAckMessage): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebSocketAckMessage>, I>>(base?: I): WebSocketAckMessage {
    return WebSocketAckMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebSocketAckMessage>, I>>(object: I): WebSocketAckMessage {
    const message = createBaseWebSocketAckMessage();
    message.id = object.id ?? "0";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseHeartbeatFrameRoomInfo(): HeartbeatFrameRoomInfo {
  return { roomId: "0" };
}

export const HeartbeatFrameRoomInfoDecoder: MessageFns<HeartbeatFrameRoomInfo> = {
  encode(message: HeartbeatFrameRoomInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== "0") {
      writer.uint32(8).uint64(message.roomId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeartbeatFrameRoomInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeartbeatFrameRoomInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeartbeatFrameRoomInfo {
    return { roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0" };
  },

  toJSON(message: HeartbeatFrameRoomInfo): unknown {
    const obj: any = {};
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeartbeatFrameRoomInfo>, I>>(base?: I): HeartbeatFrameRoomInfo {
    return HeartbeatFrameRoomInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeartbeatFrameRoomInfo>, I>>(object: I): HeartbeatFrameRoomInfo {
    const message = createBaseHeartbeatFrameRoomInfo();
    message.roomId = object.roomId ?? "0";
    return message;
  },
};

function createBaseHeartbeatFrameMetadataField6(): HeartbeatFrameMetadataField6 {
  return { unknown1: 0 };
}

export const HeartbeatFrameMetadataField6Decoder: MessageFns<HeartbeatFrameMetadataField6> = {
  encode(message: HeartbeatFrameMetadataField6, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unknown1 !== 0) {
      writer.uint32(112).uint32(message.unknown1);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeartbeatFrameMetadataField6 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeartbeatFrameMetadataField6();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.unknown1 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeartbeatFrameMetadataField6 {
    return { unknown1: isSet(object.unknown1) ? globalThis.Number(object.unknown1) : 0 };
  },

  toJSON(message: HeartbeatFrameMetadataField6): unknown {
    const obj: any = {};
    if (message.unknown1 !== 0) {
      obj.unknown1 = Math.round(message.unknown1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeartbeatFrameMetadataField6>, I>>(base?: I): HeartbeatFrameMetadataField6 {
    return HeartbeatFrameMetadataField6.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeartbeatFrameMetadataField6>, I>>(object: I): HeartbeatFrameMetadataField6 {
    const message = createBaseHeartbeatFrameMetadataField6();
    message.unknown1 = object.unknown1 ?? 0;
    return message;
  },
};

function createBaseHeartbeatFrameMetadataField7(): HeartbeatFrameMetadataField7 {
  return { unknown1: 0 };
}

export const HeartbeatFrameMetadataField7Decoder: MessageFns<HeartbeatFrameMetadataField7> = {
  encode(message: HeartbeatFrameMetadataField7, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unknown1 !== 0) {
      writer.uint32(104).uint32(message.unknown1);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeartbeatFrameMetadataField7 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeartbeatFrameMetadataField7();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.unknown1 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeartbeatFrameMetadataField7 {
    return { unknown1: isSet(object.unknown1) ? globalThis.Number(object.unknown1) : 0 };
  },

  toJSON(message: HeartbeatFrameMetadataField7): unknown {
    const obj: any = {};
    if (message.unknown1 !== 0) {
      obj.unknown1 = Math.round(message.unknown1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeartbeatFrameMetadataField7>, I>>(base?: I): HeartbeatFrameMetadataField7 {
    return HeartbeatFrameMetadataField7.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeartbeatFrameMetadataField7>, I>>(object: I): HeartbeatFrameMetadataField7 {
    const message = createBaseHeartbeatFrameMetadataField7();
    message.unknown1 = object.unknown1 ?? 0;
    return message;
  },
};

function createBaseHeartbeatFrame(): HeartbeatFrame {
  return { metadataField6: undefined, metadataField7: undefined, roomInfo: undefined };
}

export const HeartbeatFrameDecoder: MessageFns<HeartbeatFrame> = {
  encode(message: HeartbeatFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadataField6 !== undefined) {
      HeartbeatFrameMetadataField6Decoder.encode(message.metadataField6, writer.uint32(50).fork()).join();
    }
    if (message.metadataField7 !== undefined) {
      HeartbeatFrameMetadataField7Decoder.encode(message.metadataField7, writer.uint32(58).fork()).join();
    }
    if (message.roomInfo !== undefined) {
      HeartbeatFrameRoomInfoDecoder.encode(message.roomInfo, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeartbeatFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeartbeatFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadataField6 = HeartbeatFrameMetadataField6Decoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.metadataField7 = HeartbeatFrameMetadataField7Decoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.roomInfo = HeartbeatFrameRoomInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeartbeatFrame {
    return {
      metadataField6: isSet(object.metadataField6)
        ? HeartbeatFrameMetadataField6.fromJSON(object.metadataField6)
        : undefined,
      metadataField7: isSet(object.metadataField7)
        ? HeartbeatFrameMetadataField7.fromJSON(object.metadataField7)
        : undefined,
      roomInfo: isSet(object.roomInfo) ? HeartbeatFrameRoomInfo.fromJSON(object.roomInfo) : undefined,
    };
  },

  toJSON(message: HeartbeatFrame): unknown {
    const obj: any = {};
    if (message.metadataField6 !== undefined) {
      obj.metadataField6 = HeartbeatFrameMetadataField6.toJSON(message.metadataField6);
    }
    if (message.metadataField7 !== undefined) {
      obj.metadataField7 = HeartbeatFrameMetadataField7.toJSON(message.metadataField7);
    }
    if (message.roomInfo !== undefined) {
      obj.roomInfo = HeartbeatFrameRoomInfo.toJSON(message.roomInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeartbeatFrame>, I>>(base?: I): HeartbeatFrame {
    return HeartbeatFrame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeartbeatFrame>, I>>(object: I): HeartbeatFrame {
    const message = createBaseHeartbeatFrame();
    message.metadataField6 = (object.metadataField6 !== undefined && object.metadataField6 !== null)
      ? HeartbeatFrameMetadataField6.fromPartial(object.metadataField6)
      : undefined;
    message.metadataField7 = (object.metadataField7 !== undefined && object.metadataField7 !== null)
      ? HeartbeatFrameMetadataField7.fromPartial(object.metadataField7)
      : undefined;
    message.roomInfo = (object.roomInfo !== undefined && object.roomInfo !== null)
      ? HeartbeatFrameRoomInfo.fromPartial(object.roomInfo)
      : undefined;
    return message;
  },
};

function createBaseImEnterRoomMessagePushFrame(): ImEnterRoomMessagePushFrame {
  return { metadata: undefined, payloadType: "", payload: undefined };
}

export const ImEnterRoomMessagePushFrameDecoder: MessageFns<ImEnterRoomMessagePushFrame> = {
  encode(message: ImEnterRoomMessagePushFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      ImEnterRoomMessagePushFrame_MetadataDecoder.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    if (message.payloadType !== "") {
      writer.uint32(58).string(message.payloadType);
    }
    if (message.payload !== undefined) {
      ImEnterRoomMessagePushFrame_ImEnterRoomMessageDecoder.encode(message.payload, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImEnterRoomMessagePushFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImEnterRoomMessagePushFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = ImEnterRoomMessagePushFrame_MetadataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.payloadType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.payload = ImEnterRoomMessagePushFrame_ImEnterRoomMessageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImEnterRoomMessagePushFrame {
    return {
      metadata: isSet(object.metadata) ? ImEnterRoomMessagePushFrame_Metadata.fromJSON(object.metadata) : undefined,
      payloadType: isSet(object.payloadType) ? globalThis.String(object.payloadType) : "",
      payload: isSet(object.payload)
        ? ImEnterRoomMessagePushFrame_ImEnterRoomMessage.fromJSON(object.payload)
        : undefined,
    };
  },

  toJSON(message: ImEnterRoomMessagePushFrame): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = ImEnterRoomMessagePushFrame_Metadata.toJSON(message.metadata);
    }
    if (message.payloadType !== "") {
      obj.payloadType = message.payloadType;
    }
    if (message.payload !== undefined) {
      obj.payload = ImEnterRoomMessagePushFrame_ImEnterRoomMessage.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImEnterRoomMessagePushFrame>, I>>(base?: I): ImEnterRoomMessagePushFrame {
    return ImEnterRoomMessagePushFrame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImEnterRoomMessagePushFrame>, I>>(object: I): ImEnterRoomMessagePushFrame {
    const message = createBaseImEnterRoomMessagePushFrame();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ImEnterRoomMessagePushFrame_Metadata.fromPartial(object.metadata)
      : undefined;
    message.payloadType = object.payloadType ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ImEnterRoomMessagePushFrame_ImEnterRoomMessage.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseImEnterRoomMessagePushFrame_Metadata(): ImEnterRoomMessagePushFrame_Metadata {
  return { unknown1: 0 };
}

export const ImEnterRoomMessagePushFrame_MetadataDecoder: MessageFns<ImEnterRoomMessagePushFrame_Metadata> = {
  encode(message: ImEnterRoomMessagePushFrame_Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unknown1 !== 0) {
      writer.uint32(112).uint32(message.unknown1);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImEnterRoomMessagePushFrame_Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImEnterRoomMessagePushFrame_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.unknown1 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImEnterRoomMessagePushFrame_Metadata {
    return { unknown1: isSet(object.unknown1) ? globalThis.Number(object.unknown1) : 0 };
  },

  toJSON(message: ImEnterRoomMessagePushFrame_Metadata): unknown {
    const obj: any = {};
    if (message.unknown1 !== 0) {
      obj.unknown1 = Math.round(message.unknown1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImEnterRoomMessagePushFrame_Metadata>, I>>(
    base?: I,
  ): ImEnterRoomMessagePushFrame_Metadata {
    return ImEnterRoomMessagePushFrame_Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImEnterRoomMessagePushFrame_Metadata>, I>>(
    object: I,
  ): ImEnterRoomMessagePushFrame_Metadata {
    const message = createBaseImEnterRoomMessagePushFrame_Metadata();
    message.unknown1 = object.unknown1 ?? 0;
    return message;
  },
};

function createBaseImEnterRoomMessagePushFrame_ImEnterRoomMessage(): ImEnterRoomMessagePushFrame_ImEnterRoomMessage {
  return { roomId: "0", unknown1: 0, role: "", cursor: "", unknown2: undefined, unknown3: "", unknown4: undefined };
}

export const ImEnterRoomMessagePushFrame_ImEnterRoomMessageDecoder: MessageFns<ImEnterRoomMessagePushFrame_ImEnterRoomMessage> = {
  encode(
    message: ImEnterRoomMessagePushFrame_ImEnterRoomMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.roomId !== "0") {
      writer.uint32(8).uint64(message.roomId);
    }
    if (message.unknown1 !== 0) {
      writer.uint32(32).uint32(message.unknown1);
    }
    if (message.role !== "") {
      writer.uint32(42).string(message.role);
    }
    if (message.cursor !== "") {
      writer.uint32(50).string(message.cursor);
    }
    if (message.unknown2 !== undefined) {
      writer.uint32(56).int32(message.unknown2);
    }
    if (message.unknown3 !== "") {
      writer.uint32(74).string(message.unknown3);
    }
    if (message.unknown4 !== undefined) {
      writer.uint32(80).int32(message.unknown4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImEnterRoomMessagePushFrame_ImEnterRoomMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImEnterRoomMessagePushFrame_ImEnterRoomMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomId = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.unknown1 = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.unknown2 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.unknown3 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.unknown4 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImEnterRoomMessagePushFrame_ImEnterRoomMessage {
    return {
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "0",
      unknown1: isSet(object.unknown1) ? globalThis.Number(object.unknown1) : 0,
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
      unknown2: isSet(object.unknown2) ? globalThis.Number(object.unknown2) : undefined,
      unknown3: isSet(object.unknown3) ? globalThis.String(object.unknown3) : "",
      unknown4: isSet(object.unknown4) ? globalThis.Number(object.unknown4) : undefined,
    };
  },

  toJSON(message: ImEnterRoomMessagePushFrame_ImEnterRoomMessage): unknown {
    const obj: any = {};
    if (message.roomId !== "0") {
      obj.roomId = message.roomId;
    }
    if (message.unknown1 !== 0) {
      obj.unknown1 = Math.round(message.unknown1);
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    if (message.unknown2 !== undefined) {
      obj.unknown2 = Math.round(message.unknown2);
    }
    if (message.unknown3 !== "") {
      obj.unknown3 = message.unknown3;
    }
    if (message.unknown4 !== undefined) {
      obj.unknown4 = Math.round(message.unknown4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImEnterRoomMessagePushFrame_ImEnterRoomMessage>, I>>(
    base?: I,
  ): ImEnterRoomMessagePushFrame_ImEnterRoomMessage {
    return ImEnterRoomMessagePushFrame_ImEnterRoomMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImEnterRoomMessagePushFrame_ImEnterRoomMessage>, I>>(
    object: I,
  ): ImEnterRoomMessagePushFrame_ImEnterRoomMessage {
    const message = createBaseImEnterRoomMessagePushFrame_ImEnterRoomMessage();
    message.roomId = object.roomId ?? "0";
    message.unknown1 = object.unknown1 ?? 0;
    message.role = object.role ?? "";
    message.cursor = object.cursor ?? "";
    message.unknown2 = object.unknown2 ?? undefined;
    message.unknown3 = object.unknown3 ?? "";
    message.unknown4 = object.unknown4 ?? undefined;
    return message;
  },
};

function createBaseWebcastBarrageMessage(): WebcastBarrageMessage {
  return {
    common: undefined,
    event: undefined,
    msgType: undefined,
    icon: undefined,
    duration: "0",
    backGround: undefined,
    rightIcon: undefined,
    displayConfig: 0,
    galleryGiftId: "0",
    useMarquee: false,
    showType: undefined,
    renderType: undefined,
    leftIconDisplayType: undefined,
    ribbonAnimation: undefined,
    hybridUrl: "",
    schema: "",
    subType: "",
    privilegeLogExtra: undefined,
    content: undefined,
    scene: 0,
    control: undefined,
    rightLabel: undefined,
    badge: undefined,
    animationData: undefined,
    commonBarrageContent: undefined,
    userGradeParam: undefined,
    fansLevelParam: undefined,
    subscribeGiftParam: undefined,
    giftGalleryParams: undefined,
  };
}

export const WebcastBarrageMessageDecoder: MessageFns<WebcastBarrageMessage> = {
  encode(message: WebcastBarrageMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.event !== undefined) {
      WebcastBarrageMessage_BarrageEventDecoder.encode(message.event, writer.uint32(18).fork()).join();
    }
    if (message.msgType !== undefined) {
      writer.uint32(24).int32(message.msgType);
    }
    if (message.icon !== undefined) {
      ImageModelDecoder.encode(message.icon, writer.uint32(34).fork()).join();
    }
    if (message.duration !== "0") {
      writer.uint32(48).int64(message.duration);
    }
    if (message.backGround !== undefined) {
      ImageModelDecoder.encode(message.backGround, writer.uint32(58).fork()).join();
    }
    if (message.rightIcon !== undefined) {
      ImageModelDecoder.encode(message.rightIcon, writer.uint32(66).fork()).join();
    }
    if (message.displayConfig !== 0) {
      writer.uint32(72).int32(message.displayConfig);
    }
    if (message.galleryGiftId !== "0") {
      writer.uint32(80).int64(message.galleryGiftId);
    }
    if (message.useMarquee !== false) {
      writer.uint32(112).bool(message.useMarquee);
    }
    if (message.showType !== undefined) {
      writer.uint32(120).int32(message.showType);
    }
    if (message.renderType !== undefined) {
      writer.uint32(136).int32(message.renderType);
    }
    if (message.leftIconDisplayType !== undefined) {
      writer.uint32(144).int32(message.leftIconDisplayType);
    }
    if (message.ribbonAnimation !== undefined) {
      ImageModelDecoder.encode(message.ribbonAnimation, writer.uint32(154).fork()).join();
    }
    if (message.hybridUrl !== "") {
      writer.uint32(170).string(message.hybridUrl);
    }
    if (message.schema !== "") {
      writer.uint32(178).string(message.schema);
    }
    if (message.subType !== "") {
      writer.uint32(186).string(message.subType);
    }
    if (message.privilegeLogExtra !== undefined) {
      PrivilegeLogExtraDecoder.encode(message.privilegeLogExtra, writer.uint32(826).fork()).join();
    }
    if (message.content !== undefined) {
      TextDecoder.encode(message.content, writer.uint32(42).fork()).join();
    }
    if (message.scene !== 0) {
      writer.uint32(88).int32(message.scene);
    }
    if (message.control !== undefined) {
      WebcastBarrageMessage_DisplayControlDecoder.encode(message.control, writer.uint32(98).fork()).join();
    }
    if (message.rightLabel !== undefined) {
      WebcastBarrageMessage_RightLabelDecoder.encode(message.rightLabel, writer.uint32(106).fork()).join();
    }
    if (message.badge !== undefined) {
      BadgeStructDecoder.encode(message.badge, writer.uint32(130).fork()).join();
    }
    if (message.animationData !== undefined) {
      WebcastBarrageMessage_AnimationDataDecoder.encode(message.animationData, writer.uint32(162).fork()).join();
    }
    if (message.commonBarrageContent !== undefined) {
      TextDecoder.encode(message.commonBarrageContent, writer.uint32(194).fork()).join();
    }
    if (message.userGradeParam !== undefined) {
      WebcastBarrageMessage_BarrageTypeUserGradeParamDecoder.encode(message.userGradeParam, writer.uint32(802).fork()).join();
    }
    if (message.fansLevelParam !== undefined) {
      WebcastBarrageMessage_BarrageTypeFansLevelParamDecoder.encode(message.fansLevelParam, writer.uint32(810).fork()).join();
    }
    if (message.subscribeGiftParam !== undefined) {
      WebcastBarrageMessage_BarrageTypeSubscribeGiftParamDecoder.encode(message.subscribeGiftParam, writer.uint32(818).fork())
        .join();
    }
    if (message.giftGalleryParams !== undefined) {
      WebcastBarrageMessage_BarrageTypeGiftGalleryParamDecoder.encode(message.giftGalleryParams, writer.uint32(834).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event = WebcastBarrageMessage_BarrageEventDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.msgType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.backGround = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rightIcon = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.displayConfig = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.galleryGiftId = reader.int64().toString();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.useMarquee = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.showType = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.renderType = reader.int32() as any;
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.leftIconDisplayType = reader.int32() as any;
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.ribbonAnimation = ImageModelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.hybridUrl = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.subType = reader.string();
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.privilegeLogExtra = PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.content = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.scene = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.control = WebcastBarrageMessage_DisplayControlDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.rightLabel = WebcastBarrageMessage_RightLabelDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.badge = BadgeStructDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.animationData = WebcastBarrageMessage_AnimationDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.commonBarrageContent = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.userGradeParam = WebcastBarrageMessage_BarrageTypeUserGradeParamDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.fansLevelParam = WebcastBarrageMessage_BarrageTypeFansLevelParamDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.subscribeGiftParam = WebcastBarrageMessage_BarrageTypeSubscribeGiftParamDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.giftGalleryParams = WebcastBarrageMessage_BarrageTypeGiftGalleryParamDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      event: isSet(object.event) ? WebcastBarrageMessage_BarrageEvent.fromJSON(object.event) : undefined,
      msgType: isSet(object.msgType) ? webcastBarrageMessage_BarrageTypeFromJSON(object.msgType) : undefined,
      icon: isSet(object.icon) ? ImageModel.fromJSON(object.icon) : undefined,
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      backGround: isSet(object.backGround) ? ImageModel.fromJSON(object.backGround) : undefined,
      rightIcon: isSet(object.rightIcon) ? ImageModel.fromJSON(object.rightIcon) : undefined,
      displayConfig: isSet(object.displayConfig) ? globalThis.Number(object.displayConfig) : 0,
      galleryGiftId: isSet(object.galleryGiftId) ? globalThis.String(object.galleryGiftId) : "0",
      useMarquee: isSet(object.useMarquee) ? globalThis.Boolean(object.useMarquee) : false,
      showType: isSet(object.showType) ? webcastBarrageMessage_ShowTypeFromJSON(object.showType) : undefined,
      renderType: isSet(object.renderType) ? webcastBarrageMessage_RenderTypeFromJSON(object.renderType) : undefined,
      leftIconDisplayType: isSet(object.leftIconDisplayType)
        ? webcastBarrageMessage_IconDisplayTypeFromJSON(object.leftIconDisplayType)
        : undefined,
      ribbonAnimation: isSet(object.ribbonAnimation) ? ImageModel.fromJSON(object.ribbonAnimation) : undefined,
      hybridUrl: isSet(object.hybridUrl) ? globalThis.String(object.hybridUrl) : "",
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      subType: isSet(object.subType) ? globalThis.String(object.subType) : "",
      privilegeLogExtra: isSet(object.privilegeLogExtra)
        ? PrivilegeLogExtra.fromJSON(object.privilegeLogExtra)
        : undefined,
      content: isSet(object.content) ? Text.fromJSON(object.content) : undefined,
      scene: isSet(object.scene) ? sceneFromJSON(object.scene) : 0,
      control: isSet(object.control) ? WebcastBarrageMessage_DisplayControl.fromJSON(object.control) : undefined,
      rightLabel: isSet(object.rightLabel) ? WebcastBarrageMessage_RightLabel.fromJSON(object.rightLabel) : undefined,
      badge: isSet(object.badge) ? BadgeStruct.fromJSON(object.badge) : undefined,
      animationData: isSet(object.animationData)
        ? WebcastBarrageMessage_AnimationData.fromJSON(object.animationData)
        : undefined,
      commonBarrageContent: isSet(object.commonBarrageContent) ? Text.fromJSON(object.commonBarrageContent) : undefined,
      userGradeParam: isSet(object.userGradeParam)
        ? WebcastBarrageMessage_BarrageTypeUserGradeParam.fromJSON(object.userGradeParam)
        : undefined,
      fansLevelParam: isSet(object.fansLevelParam)
        ? WebcastBarrageMessage_BarrageTypeFansLevelParam.fromJSON(object.fansLevelParam)
        : undefined,
      subscribeGiftParam: isSet(object.subscribeGiftParam)
        ? WebcastBarrageMessage_BarrageTypeSubscribeGiftParam.fromJSON(object.subscribeGiftParam)
        : undefined,
      giftGalleryParams: isSet(object.giftGalleryParams)
        ? WebcastBarrageMessage_BarrageTypeGiftGalleryParam.fromJSON(object.giftGalleryParams)
        : undefined,
    };
  },

  toJSON(message: WebcastBarrageMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.event !== undefined) {
      obj.event = WebcastBarrageMessage_BarrageEvent.toJSON(message.event);
    }
    if (message.msgType !== undefined) {
      obj.msgType = webcastBarrageMessage_BarrageTypeToJSON(message.msgType);
    }
    if (message.icon !== undefined) {
      obj.icon = ImageModel.toJSON(message.icon);
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.backGround !== undefined) {
      obj.backGround = ImageModel.toJSON(message.backGround);
    }
    if (message.rightIcon !== undefined) {
      obj.rightIcon = ImageModel.toJSON(message.rightIcon);
    }
    if (message.displayConfig !== 0) {
      obj.displayConfig = Math.round(message.displayConfig);
    }
    if (message.galleryGiftId !== "0") {
      obj.galleryGiftId = message.galleryGiftId;
    }
    if (message.useMarquee !== false) {
      obj.useMarquee = message.useMarquee;
    }
    if (message.showType !== undefined) {
      obj.showType = webcastBarrageMessage_ShowTypeToJSON(message.showType);
    }
    if (message.renderType !== undefined) {
      obj.renderType = webcastBarrageMessage_RenderTypeToJSON(message.renderType);
    }
    if (message.leftIconDisplayType !== undefined) {
      obj.leftIconDisplayType = webcastBarrageMessage_IconDisplayTypeToJSON(message.leftIconDisplayType);
    }
    if (message.ribbonAnimation !== undefined) {
      obj.ribbonAnimation = ImageModel.toJSON(message.ribbonAnimation);
    }
    if (message.hybridUrl !== "") {
      obj.hybridUrl = message.hybridUrl;
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.subType !== "") {
      obj.subType = message.subType;
    }
    if (message.privilegeLogExtra !== undefined) {
      obj.privilegeLogExtra = PrivilegeLogExtra.toJSON(message.privilegeLogExtra);
    }
    if (message.content !== undefined) {
      obj.content = Text.toJSON(message.content);
    }
    if (message.scene !== 0) {
      obj.scene = sceneToJSON(message.scene);
    }
    if (message.control !== undefined) {
      obj.control = WebcastBarrageMessage_DisplayControl.toJSON(message.control);
    }
    if (message.rightLabel !== undefined) {
      obj.rightLabel = WebcastBarrageMessage_RightLabel.toJSON(message.rightLabel);
    }
    if (message.badge !== undefined) {
      obj.badge = BadgeStruct.toJSON(message.badge);
    }
    if (message.animationData !== undefined) {
      obj.animationData = WebcastBarrageMessage_AnimationData.toJSON(message.animationData);
    }
    if (message.commonBarrageContent !== undefined) {
      obj.commonBarrageContent = Text.toJSON(message.commonBarrageContent);
    }
    if (message.userGradeParam !== undefined) {
      obj.userGradeParam = WebcastBarrageMessage_BarrageTypeUserGradeParam.toJSON(message.userGradeParam);
    }
    if (message.fansLevelParam !== undefined) {
      obj.fansLevelParam = WebcastBarrageMessage_BarrageTypeFansLevelParam.toJSON(message.fansLevelParam);
    }
    if (message.subscribeGiftParam !== undefined) {
      obj.subscribeGiftParam = WebcastBarrageMessage_BarrageTypeSubscribeGiftParam.toJSON(message.subscribeGiftParam);
    }
    if (message.giftGalleryParams !== undefined) {
      obj.giftGalleryParams = WebcastBarrageMessage_BarrageTypeGiftGalleryParam.toJSON(message.giftGalleryParams);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage>, I>>(base?: I): WebcastBarrageMessage {
    return WebcastBarrageMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage>, I>>(object: I): WebcastBarrageMessage {
    const message = createBaseWebcastBarrageMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.event = (object.event !== undefined && object.event !== null)
      ? WebcastBarrageMessage_BarrageEvent.fromPartial(object.event)
      : undefined;
    message.msgType = object.msgType ?? undefined;
    message.icon = (object.icon !== undefined && object.icon !== null)
      ? ImageModel.fromPartial(object.icon)
      : undefined;
    message.duration = object.duration ?? "0";
    message.backGround = (object.backGround !== undefined && object.backGround !== null)
      ? ImageModel.fromPartial(object.backGround)
      : undefined;
    message.rightIcon = (object.rightIcon !== undefined && object.rightIcon !== null)
      ? ImageModel.fromPartial(object.rightIcon)
      : undefined;
    message.displayConfig = object.displayConfig ?? 0;
    message.galleryGiftId = object.galleryGiftId ?? "0";
    message.useMarquee = object.useMarquee ?? false;
    message.showType = object.showType ?? undefined;
    message.renderType = object.renderType ?? undefined;
    message.leftIconDisplayType = object.leftIconDisplayType ?? undefined;
    message.ribbonAnimation = (object.ribbonAnimation !== undefined && object.ribbonAnimation !== null)
      ? ImageModel.fromPartial(object.ribbonAnimation)
      : undefined;
    message.hybridUrl = object.hybridUrl ?? "";
    message.schema = object.schema ?? "";
    message.subType = object.subType ?? "";
    message.privilegeLogExtra = (object.privilegeLogExtra !== undefined && object.privilegeLogExtra !== null)
      ? PrivilegeLogExtra.fromPartial(object.privilegeLogExtra)
      : undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? Text.fromPartial(object.content)
      : undefined;
    message.scene = object.scene ?? 0;
    message.control = (object.control !== undefined && object.control !== null)
      ? WebcastBarrageMessage_DisplayControl.fromPartial(object.control)
      : undefined;
    message.rightLabel = (object.rightLabel !== undefined && object.rightLabel !== null)
      ? WebcastBarrageMessage_RightLabel.fromPartial(object.rightLabel)
      : undefined;
    message.badge = (object.badge !== undefined && object.badge !== null)
      ? BadgeStruct.fromPartial(object.badge)
      : undefined;
    message.animationData = (object.animationData !== undefined && object.animationData !== null)
      ? WebcastBarrageMessage_AnimationData.fromPartial(object.animationData)
      : undefined;
    message.commonBarrageContent = (object.commonBarrageContent !== undefined && object.commonBarrageContent !== null)
      ? Text.fromPartial(object.commonBarrageContent)
      : undefined;
    message.userGradeParam = (object.userGradeParam !== undefined && object.userGradeParam !== null)
      ? WebcastBarrageMessage_BarrageTypeUserGradeParam.fromPartial(object.userGradeParam)
      : undefined;
    message.fansLevelParam = (object.fansLevelParam !== undefined && object.fansLevelParam !== null)
      ? WebcastBarrageMessage_BarrageTypeFansLevelParam.fromPartial(object.fansLevelParam)
      : undefined;
    message.subscribeGiftParam = (object.subscribeGiftParam !== undefined && object.subscribeGiftParam !== null)
      ? WebcastBarrageMessage_BarrageTypeSubscribeGiftParam.fromPartial(object.subscribeGiftParam)
      : undefined;
    message.giftGalleryParams = (object.giftGalleryParams !== undefined && object.giftGalleryParams !== null)
      ? WebcastBarrageMessage_BarrageTypeGiftGalleryParam.fromPartial(object.giftGalleryParams)
      : undefined;
    return message;
  },
};

function createBaseWebcastBarrageMessage_BarrageEvent(): WebcastBarrageMessage_BarrageEvent {
  return { eventName: "", params: {} };
}

export const WebcastBarrageMessage_BarrageEventDecoder: MessageFns<WebcastBarrageMessage_BarrageEvent> = {
  encode(message: WebcastBarrageMessage_BarrageEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventName !== "") {
      writer.uint32(10).string(message.eventName);
    }
    Object.entries(message.params).forEach(([key, value]) => {
      WebcastBarrageMessage_BarrageEvent_ParamsEntryDecoder.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_BarrageEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_BarrageEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = WebcastBarrageMessage_BarrageEvent_ParamsEntryDecoder.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.params[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_BarrageEvent {
    return {
      eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: WebcastBarrageMessage_BarrageEvent): unknown {
    const obj: any = {};
    if (message.eventName !== "") {
      obj.eventName = message.eventName;
    }
    if (message.params) {
      const entries = Object.entries(message.params);
      if (entries.length > 0) {
        obj.params = {};
        entries.forEach(([k, v]) => {
          obj.params[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageEvent>, I>>(
    base?: I,
  ): WebcastBarrageMessage_BarrageEvent {
    return WebcastBarrageMessage_BarrageEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageEvent>, I>>(
    object: I,
  ): WebcastBarrageMessage_BarrageEvent {
    const message = createBaseWebcastBarrageMessage_BarrageEvent();
    message.eventName = object.eventName ?? "";
    message.params = Object.entries(object.params ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseWebcastBarrageMessage_BarrageEvent_ParamsEntry(): WebcastBarrageMessage_BarrageEvent_ParamsEntry {
  return { key: "", value: "" };
}

export const WebcastBarrageMessage_BarrageEvent_ParamsEntryDecoder: MessageFns<WebcastBarrageMessage_BarrageEvent_ParamsEntry> = {
  encode(
    message: WebcastBarrageMessage_BarrageEvent_ParamsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_BarrageEvent_ParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_BarrageEvent_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_BarrageEvent_ParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WebcastBarrageMessage_BarrageEvent_ParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageEvent_ParamsEntry>, I>>(
    base?: I,
  ): WebcastBarrageMessage_BarrageEvent_ParamsEntry {
    return WebcastBarrageMessage_BarrageEvent_ParamsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageEvent_ParamsEntry>, I>>(
    object: I,
  ): WebcastBarrageMessage_BarrageEvent_ParamsEntry {
    const message = createBaseWebcastBarrageMessage_BarrageEvent_ParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseWebcastBarrageMessage_BarrageTypeUserGradeParam(): WebcastBarrageMessage_BarrageTypeUserGradeParam {
  return { currentGrade: 0, displayConfig: 0, userId: "", user: undefined };
}

export const WebcastBarrageMessage_BarrageTypeUserGradeParamDecoder: MessageFns<WebcastBarrageMessage_BarrageTypeUserGradeParam> = {
  encode(
    message: WebcastBarrageMessage_BarrageTypeUserGradeParam,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.currentGrade !== 0) {
      writer.uint32(8).int32(message.currentGrade);
    }
    if (message.displayConfig !== 0) {
      writer.uint32(16).int32(message.displayConfig);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_BarrageTypeUserGradeParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_BarrageTypeUserGradeParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.currentGrade = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.displayConfig = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_BarrageTypeUserGradeParam {
    return {
      currentGrade: isSet(object.currentGrade) ? globalThis.Number(object.currentGrade) : 0,
      displayConfig: isSet(object.displayConfig) ? globalThis.Number(object.displayConfig) : 0,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: WebcastBarrageMessage_BarrageTypeUserGradeParam): unknown {
    const obj: any = {};
    if (message.currentGrade !== 0) {
      obj.currentGrade = Math.round(message.currentGrade);
    }
    if (message.displayConfig !== 0) {
      obj.displayConfig = Math.round(message.displayConfig);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeUserGradeParam>, I>>(
    base?: I,
  ): WebcastBarrageMessage_BarrageTypeUserGradeParam {
    return WebcastBarrageMessage_BarrageTypeUserGradeParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeUserGradeParam>, I>>(
    object: I,
  ): WebcastBarrageMessage_BarrageTypeUserGradeParam {
    const message = createBaseWebcastBarrageMessage_BarrageTypeUserGradeParam();
    message.currentGrade = object.currentGrade ?? 0;
    message.displayConfig = object.displayConfig ?? 0;
    message.userId = object.userId ?? "";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseWebcastBarrageMessage_BarrageTypeFansLevelParam(): WebcastBarrageMessage_BarrageTypeFansLevelParam {
  return { currentGrade: 0, displayConfig: 0, user: undefined };
}

export const WebcastBarrageMessage_BarrageTypeFansLevelParamDecoder: MessageFns<WebcastBarrageMessage_BarrageTypeFansLevelParam> = {
  encode(
    message: WebcastBarrageMessage_BarrageTypeFansLevelParam,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.currentGrade !== 0) {
      writer.uint32(8).int32(message.currentGrade);
    }
    if (message.displayConfig !== 0) {
      writer.uint32(16).int32(message.displayConfig);
    }
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_BarrageTypeFansLevelParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_BarrageTypeFansLevelParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.currentGrade = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.displayConfig = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_BarrageTypeFansLevelParam {
    return {
      currentGrade: isSet(object.currentGrade) ? globalThis.Number(object.currentGrade) : 0,
      displayConfig: isSet(object.displayConfig) ? globalThis.Number(object.displayConfig) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: WebcastBarrageMessage_BarrageTypeFansLevelParam): unknown {
    const obj: any = {};
    if (message.currentGrade !== 0) {
      obj.currentGrade = Math.round(message.currentGrade);
    }
    if (message.displayConfig !== 0) {
      obj.displayConfig = Math.round(message.displayConfig);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeFansLevelParam>, I>>(
    base?: I,
  ): WebcastBarrageMessage_BarrageTypeFansLevelParam {
    return WebcastBarrageMessage_BarrageTypeFansLevelParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeFansLevelParam>, I>>(
    object: I,
  ): WebcastBarrageMessage_BarrageTypeFansLevelParam {
    const message = createBaseWebcastBarrageMessage_BarrageTypeFansLevelParam();
    message.currentGrade = object.currentGrade ?? 0;
    message.displayConfig = object.displayConfig ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseWebcastBarrageMessage_BarrageTypeSubscribeGiftParam(): WebcastBarrageMessage_BarrageTypeSubscribeGiftParam {
  return { giftSubCount: "0", showGiftSubCount: false };
}

export const WebcastBarrageMessage_BarrageTypeSubscribeGiftParamDecoder: MessageFns<WebcastBarrageMessage_BarrageTypeSubscribeGiftParam> = {
  encode(
    message: WebcastBarrageMessage_BarrageTypeSubscribeGiftParam,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.giftSubCount !== "0") {
      writer.uint32(8).int64(message.giftSubCount);
    }
    if (message.showGiftSubCount !== false) {
      writer.uint32(16).bool(message.showGiftSubCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_BarrageTypeSubscribeGiftParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_BarrageTypeSubscribeGiftParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.giftSubCount = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.showGiftSubCount = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_BarrageTypeSubscribeGiftParam {
    return {
      giftSubCount: isSet(object.giftSubCount) ? globalThis.String(object.giftSubCount) : "0",
      showGiftSubCount: isSet(object.showGiftSubCount) ? globalThis.Boolean(object.showGiftSubCount) : false,
    };
  },

  toJSON(message: WebcastBarrageMessage_BarrageTypeSubscribeGiftParam): unknown {
    const obj: any = {};
    if (message.giftSubCount !== "0") {
      obj.giftSubCount = message.giftSubCount;
    }
    if (message.showGiftSubCount !== false) {
      obj.showGiftSubCount = message.showGiftSubCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeSubscribeGiftParam>, I>>(
    base?: I,
  ): WebcastBarrageMessage_BarrageTypeSubscribeGiftParam {
    return WebcastBarrageMessage_BarrageTypeSubscribeGiftParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeSubscribeGiftParam>, I>>(
    object: I,
  ): WebcastBarrageMessage_BarrageTypeSubscribeGiftParam {
    const message = createBaseWebcastBarrageMessage_BarrageTypeSubscribeGiftParam();
    message.giftSubCount = object.giftSubCount ?? "0";
    message.showGiftSubCount = object.showGiftSubCount ?? false;
    return message;
  },
};

function createBaseWebcastBarrageMessage_AnimationData(): WebcastBarrageMessage_AnimationData {
  return { geckoChannelName: "", fileName: "", height: "0", width: "0", rightOffset: "0" };
}

export const WebcastBarrageMessage_AnimationDataDecoder: MessageFns<WebcastBarrageMessage_AnimationData> = {
  encode(message: WebcastBarrageMessage_AnimationData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.geckoChannelName !== "") {
      writer.uint32(10).string(message.geckoChannelName);
    }
    if (message.fileName !== "") {
      writer.uint32(18).string(message.fileName);
    }
    if (message.height !== "0") {
      writer.uint32(24).int64(message.height);
    }
    if (message.width !== "0") {
      writer.uint32(32).int64(message.width);
    }
    if (message.rightOffset !== "0") {
      writer.uint32(40).int64(message.rightOffset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_AnimationData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_AnimationData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.geckoChannelName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.width = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rightOffset = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_AnimationData {
    return {
      geckoChannelName: isSet(object.geckoChannelName) ? globalThis.String(object.geckoChannelName) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      width: isSet(object.width) ? globalThis.String(object.width) : "0",
      rightOffset: isSet(object.rightOffset) ? globalThis.String(object.rightOffset) : "0",
    };
  },

  toJSON(message: WebcastBarrageMessage_AnimationData): unknown {
    const obj: any = {};
    if (message.geckoChannelName !== "") {
      obj.geckoChannelName = message.geckoChannelName;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.height !== "0") {
      obj.height = message.height;
    }
    if (message.width !== "0") {
      obj.width = message.width;
    }
    if (message.rightOffset !== "0") {
      obj.rightOffset = message.rightOffset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_AnimationData>, I>>(
    base?: I,
  ): WebcastBarrageMessage_AnimationData {
    return WebcastBarrageMessage_AnimationData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_AnimationData>, I>>(
    object: I,
  ): WebcastBarrageMessage_AnimationData {
    const message = createBaseWebcastBarrageMessage_AnimationData();
    message.geckoChannelName = object.geckoChannelName ?? "";
    message.fileName = object.fileName ?? "";
    message.height = object.height ?? "0";
    message.width = object.width ?? "0";
    message.rightOffset = object.rightOffset ?? "0";
    return message;
  },
};

function createBaseWebcastBarrageMessage_BarrageTypeGiftGalleryParam(): WebcastBarrageMessage_BarrageTypeGiftGalleryParam {
  return { fromUserId: "0", toUserId: "0" };
}

export const WebcastBarrageMessage_BarrageTypeGiftGalleryParamDecoder: MessageFns<WebcastBarrageMessage_BarrageTypeGiftGalleryParam> = {
  encode(
    message: WebcastBarrageMessage_BarrageTypeGiftGalleryParam,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fromUserId !== "0") {
      writer.uint32(8).int64(message.fromUserId);
    }
    if (message.toUserId !== "0") {
      writer.uint32(16).int64(message.toUserId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_BarrageTypeGiftGalleryParam {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_BarrageTypeGiftGalleryParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fromUserId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_BarrageTypeGiftGalleryParam {
    return {
      fromUserId: isSet(object.fromUserId) ? globalThis.String(object.fromUserId) : "0",
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
    };
  },

  toJSON(message: WebcastBarrageMessage_BarrageTypeGiftGalleryParam): unknown {
    const obj: any = {};
    if (message.fromUserId !== "0") {
      obj.fromUserId = message.fromUserId;
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeGiftGalleryParam>, I>>(
    base?: I,
  ): WebcastBarrageMessage_BarrageTypeGiftGalleryParam {
    return WebcastBarrageMessage_BarrageTypeGiftGalleryParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_BarrageTypeGiftGalleryParam>, I>>(
    object: I,
  ): WebcastBarrageMessage_BarrageTypeGiftGalleryParam {
    const message = createBaseWebcastBarrageMessage_BarrageTypeGiftGalleryParam();
    message.fromUserId = object.fromUserId ?? "0";
    message.toUserId = object.toUserId ?? "0";
    return message;
  },
};

function createBaseWebcastBarrageMessage_DisplayControl(): WebcastBarrageMessage_DisplayControl {
  return { priority: 0, duration: "0", targetGroupShowRst: {}, horizontalTriggerType: 0 };
}

export const WebcastBarrageMessage_DisplayControlDecoder: MessageFns<WebcastBarrageMessage_DisplayControl> = {
  encode(message: WebcastBarrageMessage_DisplayControl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.priority !== 0) {
      writer.uint32(8).int32(message.priority);
    }
    if (message.duration !== "0") {
      writer.uint32(16).int64(message.duration);
    }
    Object.entries(message.targetGroupShowRst).forEach(([key, value]) => {
      WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntryDecoder.encode(
        { key: key as any, value },
        writer.uint32(26).fork(),
      ).join();
    });
    if (message.horizontalTriggerType !== 0) {
      writer.uint32(32).int32(message.horizontalTriggerType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_DisplayControl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_DisplayControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.priority = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntryDecoder.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.targetGroupShowRst[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.horizontalTriggerType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_DisplayControl {
    return {
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      targetGroupShowRst: isObject(object.targetGroupShowRst)
        ? Object.entries(object.targetGroupShowRst).reduce<
          { [key: number]: WebcastBarrageMessage_DisplayControl_ShowResult }
        >((acc, [key, value]) => {
          acc[globalThis.Number(key)] = WebcastBarrageMessage_DisplayControl_ShowResult.fromJSON(value);
          return acc;
        }, {})
        : {},
      horizontalTriggerType: isSet(object.horizontalTriggerType)
        ? horizontalOnclickTriggerTypeFromJSON(object.horizontalTriggerType)
        : 0,
    };
  },

  toJSON(message: WebcastBarrageMessage_DisplayControl): unknown {
    const obj: any = {};
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.targetGroupShowRst) {
      const entries = Object.entries(message.targetGroupShowRst);
      if (entries.length > 0) {
        obj.targetGroupShowRst = {};
        entries.forEach(([k, v]) => {
          obj.targetGroupShowRst[k] = WebcastBarrageMessage_DisplayControl_ShowResult.toJSON(v);
        });
      }
    }
    if (message.horizontalTriggerType !== 0) {
      obj.horizontalTriggerType = horizontalOnclickTriggerTypeToJSON(message.horizontalTriggerType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_DisplayControl>, I>>(
    base?: I,
  ): WebcastBarrageMessage_DisplayControl {
    return WebcastBarrageMessage_DisplayControl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_DisplayControl>, I>>(
    object: I,
  ): WebcastBarrageMessage_DisplayControl {
    const message = createBaseWebcastBarrageMessage_DisplayControl();
    message.priority = object.priority ?? 0;
    message.duration = object.duration ?? "0";
    message.targetGroupShowRst = Object.entries(object.targetGroupShowRst ?? {}).reduce<
      { [key: number]: WebcastBarrageMessage_DisplayControl_ShowResult }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = WebcastBarrageMessage_DisplayControl_ShowResult.fromPartial(value);
      }
      return acc;
    }, {});
    message.horizontalTriggerType = object.horizontalTriggerType ?? 0;
    return message;
  },
};

function createBaseWebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry(): WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry {
  return { key: 0, value: undefined };
}

export const WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntryDecoder: MessageFns<WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry> = {
  encode(
    message: WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      WebcastBarrageMessage_DisplayControl_ShowResultDecoder.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = WebcastBarrageMessage_DisplayControl_ShowResultDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? WebcastBarrageMessage_DisplayControl_ShowResult.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = WebcastBarrageMessage_DisplayControl_ShowResult.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry>, I>>(
    base?: I,
  ): WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry {
    return WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry>, I>>(
    object: I,
  ): WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry {
    const message = createBaseWebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? WebcastBarrageMessage_DisplayControl_ShowResult.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWebcastBarrageMessage_DisplayControl_ShowResult(): WebcastBarrageMessage_DisplayControl_ShowResult {
  return { banned: false };
}

export const WebcastBarrageMessage_DisplayControl_ShowResultDecoder: MessageFns<WebcastBarrageMessage_DisplayControl_ShowResult> = {
  encode(
    message: WebcastBarrageMessage_DisplayControl_ShowResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.banned !== false) {
      writer.uint32(8).bool(message.banned);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_DisplayControl_ShowResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_DisplayControl_ShowResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.banned = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_DisplayControl_ShowResult {
    return { banned: isSet(object.banned) ? globalThis.Boolean(object.banned) : false };
  },

  toJSON(message: WebcastBarrageMessage_DisplayControl_ShowResult): unknown {
    const obj: any = {};
    if (message.banned !== false) {
      obj.banned = message.banned;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_DisplayControl_ShowResult>, I>>(
    base?: I,
  ): WebcastBarrageMessage_DisplayControl_ShowResult {
    return WebcastBarrageMessage_DisplayControl_ShowResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_DisplayControl_ShowResult>, I>>(
    object: I,
  ): WebcastBarrageMessage_DisplayControl_ShowResult {
    const message = createBaseWebcastBarrageMessage_DisplayControl_ShowResult();
    message.banned = object.banned ?? false;
    return message;
  },
};

function createBaseWebcastBarrageMessage_RightLabel(): WebcastBarrageMessage_RightLabel {
  return { backgroundColor: "", content: undefined, height: "0" };
}

export const WebcastBarrageMessage_RightLabelDecoder: MessageFns<WebcastBarrageMessage_RightLabel> = {
  encode(message: WebcastBarrageMessage_RightLabel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backgroundColor !== "") {
      writer.uint32(10).string(message.backgroundColor);
    }
    if (message.content !== undefined) {
      TextDecoder.encode(message.content, writer.uint32(18).fork()).join();
    }
    if (message.height !== "0") {
      writer.uint32(24).int64(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessage_RightLabel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessage_RightLabel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessage_RightLabel {
    return {
      backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : "",
      content: isSet(object.content) ? Text.fromJSON(object.content) : undefined,
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
    };
  },

  toJSON(message: WebcastBarrageMessage_RightLabel): unknown {
    const obj: any = {};
    if (message.backgroundColor !== "") {
      obj.backgroundColor = message.backgroundColor;
    }
    if (message.content !== undefined) {
      obj.content = Text.toJSON(message.content);
    }
    if (message.height !== "0") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessage_RightLabel>, I>>(
    base?: I,
  ): WebcastBarrageMessage_RightLabel {
    return WebcastBarrageMessage_RightLabel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessage_RightLabel>, I>>(
    object: I,
  ): WebcastBarrageMessage_RightLabel {
    const message = createBaseWebcastBarrageMessage_RightLabel();
    message.backgroundColor = object.backgroundColor ?? "";
    message.content = (object.content !== undefined && object.content !== null)
      ? Text.fromPartial(object.content)
      : undefined;
    message.height = object.height ?? "0";
    return message;
  },
};

function createBaseWebcastPushFrame(): WebcastPushFrame {
  return {
    seqId: "0",
    id: "0",
    service: "0",
    method: "0",
    headers: {},
    payloadEncoding: "",
    type: "",
    binary: new Uint8Array(0),
  };
}

export const WebcastPushFrameDecoder: MessageFns<WebcastPushFrame> = {
  encode(message: WebcastPushFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seqId !== "0") {
      writer.uint32(8).int64(message.seqId);
    }
    if (message.id !== "0") {
      writer.uint32(16).int64(message.id);
    }
    if (message.service !== "0") {
      writer.uint32(24).int64(message.service);
    }
    if (message.method !== "0") {
      writer.uint32(32).int64(message.method);
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      WebcastPushFrame_HeadersEntryDecoder.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.payloadEncoding !== "") {
      writer.uint32(50).string(message.payloadEncoding);
    }
    if (message.type !== "") {
      writer.uint32(58).string(message.type);
    }
    if (message.binary.length !== 0) {
      writer.uint32(66).bytes(message.binary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastPushFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastPushFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seqId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.service = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.method = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = WebcastPushFrame_HeadersEntryDecoder.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.headers[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.payloadEncoding = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.binary = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastPushFrame {
    return {
      seqId: isSet(object.seqId) ? globalThis.String(object.seqId) : "0",
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      service: isSet(object.service) ? globalThis.String(object.service) : "0",
      method: isSet(object.method) ? globalThis.String(object.method) : "0",
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      payloadEncoding: isSet(object.payloadEncoding) ? globalThis.String(object.payloadEncoding) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      binary: isSet(object.binary) ? bytesFromBase64(object.binary) : new Uint8Array(0),
    };
  },

  toJSON(message: WebcastPushFrame): unknown {
    const obj: any = {};
    if (message.seqId !== "0") {
      obj.seqId = message.seqId;
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.service !== "0") {
      obj.service = message.service;
    }
    if (message.method !== "0") {
      obj.method = message.method;
    }
    if (message.headers) {
      const entries = Object.entries(message.headers);
      if (entries.length > 0) {
        obj.headers = {};
        entries.forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
    }
    if (message.payloadEncoding !== "") {
      obj.payloadEncoding = message.payloadEncoding;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.binary.length !== 0) {
      obj.binary = base64FromBytes(message.binary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastPushFrame>, I>>(base?: I): WebcastPushFrame {
    return WebcastPushFrame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastPushFrame>, I>>(object: I): WebcastPushFrame {
    const message = createBaseWebcastPushFrame();
    message.seqId = object.seqId ?? "0";
    message.id = object.id ?? "0";
    message.service = object.service ?? "0";
    message.method = object.method ?? "0";
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.payloadEncoding = object.payloadEncoding ?? "";
    message.type = object.type ?? "";
    message.binary = object.binary ?? new Uint8Array(0);
    return message;
  },
};

function createBaseWebcastPushFrame_HeadersEntry(): WebcastPushFrame_HeadersEntry {
  return { key: "", value: "" };
}

export const WebcastPushFrame_HeadersEntryDecoder: MessageFns<WebcastPushFrame_HeadersEntry> = {
  encode(message: WebcastPushFrame_HeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastPushFrame_HeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastPushFrame_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastPushFrame_HeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WebcastPushFrame_HeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastPushFrame_HeadersEntry>, I>>(base?: I): WebcastPushFrame_HeadersEntry {
    return WebcastPushFrame_HeadersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastPushFrame_HeadersEntry>, I>>(
    object: I,
  ): WebcastPushFrame_HeadersEntry {
    const message = createBaseWebcastPushFrame_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseProtoMessageFetchResult(): ProtoMessageFetchResult {
  return {
    messages: [],
    cursor: "",
    fetchInterval: "0",
    now: "0",
    internalExt: "",
    fetchType: 0,
    wsParams: {},
    heartBeatDuration: "0",
    needsAck: false,
    wsUrl: "",
    isFirst: false,
    historyCommentCursor: "",
    historyNoMore: false,
  };
}

export const ProtoMessageFetchResultDecoder: MessageFns<ProtoMessageFetchResult> = {
  encode(message: ProtoMessageFetchResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messages) {
      BaseProtoMessageDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.cursor !== "") {
      writer.uint32(18).string(message.cursor);
    }
    if (message.fetchInterval !== "0") {
      writer.uint32(24).int64(message.fetchInterval);
    }
    if (message.now !== "0") {
      writer.uint32(32).int64(message.now);
    }
    if (message.internalExt !== "") {
      writer.uint32(42).string(message.internalExt);
    }
    if (message.fetchType !== 0) {
      writer.uint32(48).int32(message.fetchType);
    }
    Object.entries(message.wsParams).forEach(([key, value]) => {
      ProtoMessageFetchResult_WsParamsEntryDecoder.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.heartBeatDuration !== "0") {
      writer.uint32(64).int64(message.heartBeatDuration);
    }
    if (message.needsAck !== false) {
      writer.uint32(72).bool(message.needsAck);
    }
    if (message.wsUrl !== "") {
      writer.uint32(82).string(message.wsUrl);
    }
    if (message.isFirst !== false) {
      writer.uint32(88).bool(message.isFirst);
    }
    if (message.historyCommentCursor !== "") {
      writer.uint32(98).string(message.historyCommentCursor);
    }
    if (message.historyNoMore !== false) {
      writer.uint32(104).bool(message.historyNoMore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoMessageFetchResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoMessageFetchResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messages.push(BaseProtoMessageDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fetchInterval = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.now = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.internalExt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fetchType = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = ProtoMessageFetchResult_WsParamsEntryDecoder.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.wsParams[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.heartBeatDuration = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.needsAck = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.wsUrl = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isFirst = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.historyCommentCursor = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.historyNoMore = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoMessageFetchResult {
    return {
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => BaseProtoMessage.fromJSON(e))
        : [],
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
      fetchInterval: isSet(object.fetchInterval) ? globalThis.String(object.fetchInterval) : "0",
      now: isSet(object.now) ? globalThis.String(object.now) : "0",
      internalExt: isSet(object.internalExt) ? globalThis.String(object.internalExt) : "",
      fetchType: isSet(object.fetchType) ? globalThis.Number(object.fetchType) : 0,
      wsParams: isObject(object.wsParams)
        ? Object.entries(object.wsParams).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      heartBeatDuration: isSet(object.heartBeatDuration) ? globalThis.String(object.heartBeatDuration) : "0",
      needsAck: isSet(object.needsAck) ? globalThis.Boolean(object.needsAck) : false,
      wsUrl: isSet(object.wsUrl) ? globalThis.String(object.wsUrl) : "",
      isFirst: isSet(object.isFirst) ? globalThis.Boolean(object.isFirst) : false,
      historyCommentCursor: isSet(object.historyCommentCursor) ? globalThis.String(object.historyCommentCursor) : "",
      historyNoMore: isSet(object.historyNoMore) ? globalThis.Boolean(object.historyNoMore) : false,
    };
  },

  toJSON(message: ProtoMessageFetchResult): unknown {
    const obj: any = {};
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => BaseProtoMessage.toJSON(e));
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    if (message.fetchInterval !== "0") {
      obj.fetchInterval = message.fetchInterval;
    }
    if (message.now !== "0") {
      obj.now = message.now;
    }
    if (message.internalExt !== "") {
      obj.internalExt = message.internalExt;
    }
    if (message.fetchType !== 0) {
      obj.fetchType = Math.round(message.fetchType);
    }
    if (message.wsParams) {
      const entries = Object.entries(message.wsParams);
      if (entries.length > 0) {
        obj.wsParams = {};
        entries.forEach(([k, v]) => {
          obj.wsParams[k] = v;
        });
      }
    }
    if (message.heartBeatDuration !== "0") {
      obj.heartBeatDuration = message.heartBeatDuration;
    }
    if (message.needsAck !== false) {
      obj.needsAck = message.needsAck;
    }
    if (message.wsUrl !== "") {
      obj.wsUrl = message.wsUrl;
    }
    if (message.isFirst !== false) {
      obj.isFirst = message.isFirst;
    }
    if (message.historyCommentCursor !== "") {
      obj.historyCommentCursor = message.historyCommentCursor;
    }
    if (message.historyNoMore !== false) {
      obj.historyNoMore = message.historyNoMore;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoMessageFetchResult>, I>>(base?: I): ProtoMessageFetchResult {
    return ProtoMessageFetchResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoMessageFetchResult>, I>>(object: I): ProtoMessageFetchResult {
    const message = createBaseProtoMessageFetchResult();
    message.messages = object.messages?.map((e) => BaseProtoMessage.fromPartial(e)) || [];
    message.cursor = object.cursor ?? "";
    message.fetchInterval = object.fetchInterval ?? "0";
    message.now = object.now ?? "0";
    message.internalExt = object.internalExt ?? "";
    message.fetchType = object.fetchType ?? 0;
    message.wsParams = Object.entries(object.wsParams ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.heartBeatDuration = object.heartBeatDuration ?? "0";
    message.needsAck = object.needsAck ?? false;
    message.wsUrl = object.wsUrl ?? "";
    message.isFirst = object.isFirst ?? false;
    message.historyCommentCursor = object.historyCommentCursor ?? "";
    message.historyNoMore = object.historyNoMore ?? false;
    return message;
  },
};

function createBaseProtoMessageFetchResult_WsParamsEntry(): ProtoMessageFetchResult_WsParamsEntry {
  return { key: "", value: "" };
}

export const ProtoMessageFetchResult_WsParamsEntryDecoder: MessageFns<ProtoMessageFetchResult_WsParamsEntry> = {
  encode(message: ProtoMessageFetchResult_WsParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoMessageFetchResult_WsParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoMessageFetchResult_WsParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoMessageFetchResult_WsParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ProtoMessageFetchResult_WsParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoMessageFetchResult_WsParamsEntry>, I>>(
    base?: I,
  ): ProtoMessageFetchResult_WsParamsEntry {
    return ProtoMessageFetchResult_WsParamsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoMessageFetchResult_WsParamsEntry>, I>>(
    object: I,
  ): ProtoMessageFetchResult_WsParamsEntry {
    const message = createBaseProtoMessageFetchResult_WsParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBaseProtoMessage(): BaseProtoMessage {
  return { type: "", payload: new Uint8Array(0), msgId: "0", msgType: 0, offset: "0", isHistory: false };
}

export const BaseProtoMessageDecoder: MessageFns<BaseProtoMessage> = {
  encode(message: BaseProtoMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    if (message.msgId !== "0") {
      writer.uint32(24).int64(message.msgId);
    }
    if (message.msgType !== 0) {
      writer.uint32(32).int32(message.msgType);
    }
    if (message.offset !== "0") {
      writer.uint32(40).int64(message.offset);
    }
    if (message.isHistory !== false) {
      writer.uint32(48).bool(message.isHistory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseProtoMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseProtoMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.msgId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.msgType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.offset = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isHistory = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseProtoMessage {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
      msgId: isSet(object.msgId) ? globalThis.String(object.msgId) : "0",
      msgType: isSet(object.msgType) ? globalThis.Number(object.msgType) : 0,
      offset: isSet(object.offset) ? globalThis.String(object.offset) : "0",
      isHistory: isSet(object.isHistory) ? globalThis.Boolean(object.isHistory) : false,
    };
  },

  toJSON(message: BaseProtoMessage): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.msgId !== "0") {
      obj.msgId = message.msgId;
    }
    if (message.msgType !== 0) {
      obj.msgType = Math.round(message.msgType);
    }
    if (message.offset !== "0") {
      obj.offset = message.offset;
    }
    if (message.isHistory !== false) {
      obj.isHistory = message.isHistory;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BaseProtoMessage>, I>>(base?: I): BaseProtoMessage {
    return BaseProtoMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BaseProtoMessage>, I>>(object: I): BaseProtoMessage {
    const message = createBaseBaseProtoMessage();
    message.type = object.type ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    message.msgId = object.msgId ?? "0";
    message.msgType = object.msgType ?? 0;
    message.offset = object.offset ?? "0";
    message.isHistory = object.isHistory ?? false;
    return message;
  },
};

function createBaseWebcastRoomMessage(): WebcastRoomMessage {
  return {
    common: undefined,
    content: "",
    supportLandscape: false,
    source: "0",
    icon: undefined,
    scene: 0,
    isWelcome: false,
    publicAreaCommon: undefined,
    showDurationMs: "0",
    subScene: "",
  };
}

export const WebcastRoomMessageDecoder: MessageFns<WebcastRoomMessage> = {
  encode(message: WebcastRoomMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.supportLandscape !== false) {
      writer.uint32(24).bool(message.supportLandscape);
    }
    if (message.source !== "0") {
      writer.uint32(32).int64(message.source);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(42).fork()).join();
    }
    if (message.scene !== 0) {
      writer.uint32(48).int32(message.scene);
    }
    if (message.isWelcome !== false) {
      writer.uint32(56).bool(message.isWelcome);
    }
    if (message.publicAreaCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaCommon, writer.uint32(66).fork()).join();
    }
    if (message.showDurationMs !== "0") {
      writer.uint32(72).int64(message.showDurationMs);
    }
    if (message.subScene !== "") {
      writer.uint32(82).string(message.subScene);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRoomMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRoomMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.supportLandscape = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.source = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.scene = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isWelcome = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.publicAreaCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.showDurationMs = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.subScene = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRoomMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      supportLandscape: isSet(object.supportLandscape) ? globalThis.Boolean(object.supportLandscape) : false,
      source: isSet(object.source) ? globalThis.String(object.source) : "0",
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      scene: isSet(object.scene) ? sceneFromJSON(object.scene) : 0,
      isWelcome: isSet(object.isWelcome) ? globalThis.Boolean(object.isWelcome) : false,
      publicAreaCommon: isSet(object.publicAreaCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaCommon)
        : undefined,
      showDurationMs: isSet(object.showDurationMs) ? globalThis.String(object.showDurationMs) : "0",
      subScene: isSet(object.subScene) ? globalThis.String(object.subScene) : "",
    };
  },

  toJSON(message: WebcastRoomMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.supportLandscape !== false) {
      obj.supportLandscape = message.supportLandscape;
    }
    if (message.source !== "0") {
      obj.source = message.source;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.scene !== 0) {
      obj.scene = sceneToJSON(message.scene);
    }
    if (message.isWelcome !== false) {
      obj.isWelcome = message.isWelcome;
    }
    if (message.publicAreaCommon !== undefined) {
      obj.publicAreaCommon = PublicAreaMessageCommon.toJSON(message.publicAreaCommon);
    }
    if (message.showDurationMs !== "0") {
      obj.showDurationMs = message.showDurationMs;
    }
    if (message.subScene !== "") {
      obj.subScene = message.subScene;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRoomMessage>, I>>(base?: I): WebcastRoomMessage {
    return WebcastRoomMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRoomMessage>, I>>(object: I): WebcastRoomMessage {
    const message = createBaseWebcastRoomMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.content = object.content ?? "";
    message.supportLandscape = object.supportLandscape ?? false;
    message.source = object.source ?? "0";
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.scene = object.scene ?? 0;
    message.isWelcome = object.isWelcome ?? false;
    message.publicAreaCommon = (object.publicAreaCommon !== undefined && object.publicAreaCommon !== null)
      ? PublicAreaMessageCommon.fromPartial(object.publicAreaCommon)
      : undefined;
    message.showDurationMs = object.showDurationMs ?? "0";
    message.subScene = object.subScene ?? "";
    return message;
  },
};

function createBaseWebcastCaptionMessage(): WebcastCaptionMessage {
  return {
    common: undefined,
    timestampMs: "0",
    durationMs: "0",
    content: [],
    sentenceId: "0",
    sequenceId: "0",
    definite: false,
  };
}

export const WebcastCaptionMessageDecoder: MessageFns<WebcastCaptionMessage> = {
  encode(message: WebcastCaptionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.timestampMs !== "0") {
      writer.uint32(16).int64(message.timestampMs);
    }
    if (message.durationMs !== "0") {
      writer.uint32(24).int64(message.durationMs);
    }
    for (const v of message.content) {
      WebcastCaptionMessage_CaptionContentDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.sentenceId !== "0") {
      writer.uint32(40).int64(message.sentenceId);
    }
    if (message.sequenceId !== "0") {
      writer.uint32(48).int64(message.sequenceId);
    }
    if (message.definite !== false) {
      writer.uint32(56).bool(message.definite);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastCaptionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastCaptionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestampMs = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.durationMs = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content.push(WebcastCaptionMessage_CaptionContentDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sentenceId = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sequenceId = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.definite = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastCaptionMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      timestampMs: isSet(object.timestampMs) ? globalThis.String(object.timestampMs) : "0",
      durationMs: isSet(object.durationMs) ? globalThis.String(object.durationMs) : "0",
      content: globalThis.Array.isArray(object?.content)
        ? object.content.map((e: any) => WebcastCaptionMessage_CaptionContent.fromJSON(e))
        : [],
      sentenceId: isSet(object.sentenceId) ? globalThis.String(object.sentenceId) : "0",
      sequenceId: isSet(object.sequenceId) ? globalThis.String(object.sequenceId) : "0",
      definite: isSet(object.definite) ? globalThis.Boolean(object.definite) : false,
    };
  },

  toJSON(message: WebcastCaptionMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.timestampMs !== "0") {
      obj.timestampMs = message.timestampMs;
    }
    if (message.durationMs !== "0") {
      obj.durationMs = message.durationMs;
    }
    if (message.content?.length) {
      obj.content = message.content.map((e) => WebcastCaptionMessage_CaptionContent.toJSON(e));
    }
    if (message.sentenceId !== "0") {
      obj.sentenceId = message.sentenceId;
    }
    if (message.sequenceId !== "0") {
      obj.sequenceId = message.sequenceId;
    }
    if (message.definite !== false) {
      obj.definite = message.definite;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastCaptionMessage>, I>>(base?: I): WebcastCaptionMessage {
    return WebcastCaptionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastCaptionMessage>, I>>(object: I): WebcastCaptionMessage {
    const message = createBaseWebcastCaptionMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.timestampMs = object.timestampMs ?? "0";
    message.durationMs = object.durationMs ?? "0";
    message.content = object.content?.map((e) => WebcastCaptionMessage_CaptionContent.fromPartial(e)) || [];
    message.sentenceId = object.sentenceId ?? "0";
    message.sequenceId = object.sequenceId ?? "0";
    message.definite = object.definite ?? false;
    return message;
  },
};

function createBaseWebcastCaptionMessage_CaptionContent(): WebcastCaptionMessage_CaptionContent {
  return { lang: "", content: "" };
}

export const WebcastCaptionMessage_CaptionContentDecoder: MessageFns<WebcastCaptionMessage_CaptionContent> = {
  encode(message: WebcastCaptionMessage_CaptionContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lang !== "") {
      writer.uint32(10).string(message.lang);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastCaptionMessage_CaptionContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastCaptionMessage_CaptionContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lang = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastCaptionMessage_CaptionContent {
    return {
      lang: isSet(object.lang) ? globalThis.String(object.lang) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: WebcastCaptionMessage_CaptionContent): unknown {
    const obj: any = {};
    if (message.lang !== "") {
      obj.lang = message.lang;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastCaptionMessage_CaptionContent>, I>>(
    base?: I,
  ): WebcastCaptionMessage_CaptionContent {
    return WebcastCaptionMessage_CaptionContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastCaptionMessage_CaptionContent>, I>>(
    object: I,
  ): WebcastCaptionMessage_CaptionContent {
    const message = createBaseWebcastCaptionMessage_CaptionContent();
    message.lang = object.lang ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseWebcastControlMessage(): WebcastControlMessage {
  return {
    common: undefined,
    action: 0,
    tips: "",
    extra: undefined,
    perceptionDialog: undefined,
    perceptionAudienceText: undefined,
    punishInfo: undefined,
    floatText: undefined,
    floatStyle: 0,
  };
}

export const WebcastControlMessageDecoder: MessageFns<WebcastControlMessage> = {
  encode(message: WebcastControlMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    if (message.tips !== "") {
      writer.uint32(26).string(message.tips);
    }
    if (message.extra !== undefined) {
      WebcastControlMessage_ExtraDecoder.encode(message.extra, writer.uint32(34).fork()).join();
    }
    if (message.perceptionDialog !== undefined) {
      WebcastControlMessage_PerceptionDialogInfoDecoder.encode(message.perceptionDialog, writer.uint32(42).fork()).join();
    }
    if (message.perceptionAudienceText !== undefined) {
      TextDecoder.encode(message.perceptionAudienceText, writer.uint32(50).fork()).join();
    }
    if (message.punishInfo !== undefined) {
      PunishEventInfoDecoder.encode(message.punishInfo, writer.uint32(58).fork()).join();
    }
    if (message.floatText !== undefined) {
      TextDecoder.encode(message.floatText, writer.uint32(66).fork()).join();
    }
    if (message.floatStyle !== 0) {
      writer.uint32(72).int32(message.floatStyle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastControlMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastControlMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tips = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.extra = WebcastControlMessage_ExtraDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.perceptionDialog = WebcastControlMessage_PerceptionDialogInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.perceptionAudienceText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.punishInfo = PunishEventInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.floatText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.floatStyle = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastControlMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      action: isSet(object.action) ? controlActionFromJSON(object.action) : 0,
      tips: isSet(object.tips) ? globalThis.String(object.tips) : "",
      extra: isSet(object.extra) ? WebcastControlMessage_Extra.fromJSON(object.extra) : undefined,
      perceptionDialog: isSet(object.perceptionDialog)
        ? WebcastControlMessage_PerceptionDialogInfo.fromJSON(object.perceptionDialog)
        : undefined,
      perceptionAudienceText: isSet(object.perceptionAudienceText)
        ? Text.fromJSON(object.perceptionAudienceText)
        : undefined,
      punishInfo: isSet(object.punishInfo) ? PunishEventInfo.fromJSON(object.punishInfo) : undefined,
      floatText: isSet(object.floatText) ? Text.fromJSON(object.floatText) : undefined,
      floatStyle: isSet(object.floatStyle) ? globalThis.Number(object.floatStyle) : 0,
    };
  },

  toJSON(message: WebcastControlMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.action !== 0) {
      obj.action = controlActionToJSON(message.action);
    }
    if (message.tips !== "") {
      obj.tips = message.tips;
    }
    if (message.extra !== undefined) {
      obj.extra = WebcastControlMessage_Extra.toJSON(message.extra);
    }
    if (message.perceptionDialog !== undefined) {
      obj.perceptionDialog = WebcastControlMessage_PerceptionDialogInfo.toJSON(message.perceptionDialog);
    }
    if (message.perceptionAudienceText !== undefined) {
      obj.perceptionAudienceText = Text.toJSON(message.perceptionAudienceText);
    }
    if (message.punishInfo !== undefined) {
      obj.punishInfo = PunishEventInfo.toJSON(message.punishInfo);
    }
    if (message.floatText !== undefined) {
      obj.floatText = Text.toJSON(message.floatText);
    }
    if (message.floatStyle !== 0) {
      obj.floatStyle = Math.round(message.floatStyle);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastControlMessage>, I>>(base?: I): WebcastControlMessage {
    return WebcastControlMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastControlMessage>, I>>(object: I): WebcastControlMessage {
    const message = createBaseWebcastControlMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.action = object.action ?? 0;
    message.tips = object.tips ?? "";
    message.extra = (object.extra !== undefined && object.extra !== null)
      ? WebcastControlMessage_Extra.fromPartial(object.extra)
      : undefined;
    message.perceptionDialog = (object.perceptionDialog !== undefined && object.perceptionDialog !== null)
      ? WebcastControlMessage_PerceptionDialogInfo.fromPartial(object.perceptionDialog)
      : undefined;
    message.perceptionAudienceText =
      (object.perceptionAudienceText !== undefined && object.perceptionAudienceText !== null)
        ? Text.fromPartial(object.perceptionAudienceText)
        : undefined;
    message.punishInfo = (object.punishInfo !== undefined && object.punishInfo !== null)
      ? PunishEventInfo.fromPartial(object.punishInfo)
      : undefined;
    message.floatText = (object.floatText !== undefined && object.floatText !== null)
      ? Text.fromPartial(object.floatText)
      : undefined;
    message.floatStyle = object.floatStyle ?? 0;
    return message;
  },
};

function createBaseWebcastControlMessage_Extra(): WebcastControlMessage_Extra {
  return {
    banInfoUrl: "",
    reasonNo: "0",
    title: undefined,
    violationReason: undefined,
    content: undefined,
    gotItButton: undefined,
    banDetailButton: undefined,
    source: "",
  };
}

export const WebcastControlMessage_ExtraDecoder: MessageFns<WebcastControlMessage_Extra> = {
  encode(message: WebcastControlMessage_Extra, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.banInfoUrl !== "") {
      writer.uint32(10).string(message.banInfoUrl);
    }
    if (message.reasonNo !== "0") {
      writer.uint32(16).int64(message.reasonNo);
    }
    if (message.title !== undefined) {
      TextDecoder.encode(message.title, writer.uint32(26).fork()).join();
    }
    if (message.violationReason !== undefined) {
      TextDecoder.encode(message.violationReason, writer.uint32(34).fork()).join();
    }
    if (message.content !== undefined) {
      TextDecoder.encode(message.content, writer.uint32(42).fork()).join();
    }
    if (message.gotItButton !== undefined) {
      TextDecoder.encode(message.gotItButton, writer.uint32(50).fork()).join();
    }
    if (message.banDetailButton !== undefined) {
      TextDecoder.encode(message.banDetailButton, writer.uint32(58).fork()).join();
    }
    if (message.source !== "") {
      writer.uint32(66).string(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastControlMessage_Extra {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastControlMessage_Extra();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.banInfoUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reasonNo = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.violationReason = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.content = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gotItButton = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.banDetailButton = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.source = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastControlMessage_Extra {
    return {
      banInfoUrl: isSet(object.banInfoUrl) ? globalThis.String(object.banInfoUrl) : "",
      reasonNo: isSet(object.reasonNo) ? globalThis.String(object.reasonNo) : "0",
      title: isSet(object.title) ? Text.fromJSON(object.title) : undefined,
      violationReason: isSet(object.violationReason) ? Text.fromJSON(object.violationReason) : undefined,
      content: isSet(object.content) ? Text.fromJSON(object.content) : undefined,
      gotItButton: isSet(object.gotItButton) ? Text.fromJSON(object.gotItButton) : undefined,
      banDetailButton: isSet(object.banDetailButton) ? Text.fromJSON(object.banDetailButton) : undefined,
      source: isSet(object.source) ? globalThis.String(object.source) : "",
    };
  },

  toJSON(message: WebcastControlMessage_Extra): unknown {
    const obj: any = {};
    if (message.banInfoUrl !== "") {
      obj.banInfoUrl = message.banInfoUrl;
    }
    if (message.reasonNo !== "0") {
      obj.reasonNo = message.reasonNo;
    }
    if (message.title !== undefined) {
      obj.title = Text.toJSON(message.title);
    }
    if (message.violationReason !== undefined) {
      obj.violationReason = Text.toJSON(message.violationReason);
    }
    if (message.content !== undefined) {
      obj.content = Text.toJSON(message.content);
    }
    if (message.gotItButton !== undefined) {
      obj.gotItButton = Text.toJSON(message.gotItButton);
    }
    if (message.banDetailButton !== undefined) {
      obj.banDetailButton = Text.toJSON(message.banDetailButton);
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastControlMessage_Extra>, I>>(base?: I): WebcastControlMessage_Extra {
    return WebcastControlMessage_Extra.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastControlMessage_Extra>, I>>(object: I): WebcastControlMessage_Extra {
    const message = createBaseWebcastControlMessage_Extra();
    message.banInfoUrl = object.banInfoUrl ?? "";
    message.reasonNo = object.reasonNo ?? "0";
    message.title = (object.title !== undefined && object.title !== null) ? Text.fromPartial(object.title) : undefined;
    message.violationReason = (object.violationReason !== undefined && object.violationReason !== null)
      ? Text.fromPartial(object.violationReason)
      : undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? Text.fromPartial(object.content)
      : undefined;
    message.gotItButton = (object.gotItButton !== undefined && object.gotItButton !== null)
      ? Text.fromPartial(object.gotItButton)
      : undefined;
    message.banDetailButton = (object.banDetailButton !== undefined && object.banDetailButton !== null)
      ? Text.fromPartial(object.banDetailButton)
      : undefined;
    message.source = object.source ?? "";
    return message;
  },
};

function createBaseWebcastControlMessage_PerceptionDialogInfo(): WebcastControlMessage_PerceptionDialogInfo {
  return {
    iconType: 0,
    title: undefined,
    subTitle: undefined,
    adviceActionText: undefined,
    defaultActionText: undefined,
    violationDetailUrl: "",
    scene: 0,
    targetUserId: "0",
    targetRoomId: "0",
    countDownTime: "0",
    showFeedback: false,
    feedbackOptions: [],
    policyTip: "0",
    appealPopup: 0,
  };
}

export const WebcastControlMessage_PerceptionDialogInfoDecoder: MessageFns<WebcastControlMessage_PerceptionDialogInfo> = {
  encode(message: WebcastControlMessage_PerceptionDialogInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iconType !== 0) {
      writer.uint32(8).int32(message.iconType);
    }
    if (message.title !== undefined) {
      TextDecoder.encode(message.title, writer.uint32(18).fork()).join();
    }
    if (message.subTitle !== undefined) {
      TextDecoder.encode(message.subTitle, writer.uint32(26).fork()).join();
    }
    if (message.adviceActionText !== undefined) {
      TextDecoder.encode(message.adviceActionText, writer.uint32(34).fork()).join();
    }
    if (message.defaultActionText !== undefined) {
      TextDecoder.encode(message.defaultActionText, writer.uint32(42).fork()).join();
    }
    if (message.violationDetailUrl !== "") {
      writer.uint32(50).string(message.violationDetailUrl);
    }
    if (message.scene !== 0) {
      writer.uint32(56).int32(message.scene);
    }
    if (message.targetUserId !== "0") {
      writer.uint32(64).int64(message.targetUserId);
    }
    if (message.targetRoomId !== "0") {
      writer.uint32(72).int64(message.targetRoomId);
    }
    if (message.countDownTime !== "0") {
      writer.uint32(80).int64(message.countDownTime);
    }
    if (message.showFeedback !== false) {
      writer.uint32(88).bool(message.showFeedback);
    }
    for (const v of message.feedbackOptions) {
      WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.policyTip !== "0") {
      writer.uint32(104).int64(message.policyTip);
    }
    if (message.appealPopup !== 0) {
      writer.uint32(112).int32(message.appealPopup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastControlMessage_PerceptionDialogInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastControlMessage_PerceptionDialogInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.iconType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.subTitle = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.adviceActionText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.defaultActionText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.violationDetailUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.scene = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.targetUserId = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.targetRoomId = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.countDownTime = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.showFeedback = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.feedbackOptions.push(
            WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.policyTip = reader.int64().toString();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.appealPopup = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastControlMessage_PerceptionDialogInfo {
    return {
      iconType: isSet(object.iconType) ? perceptionDialogIconTypeFromJSON(object.iconType) : 0,
      title: isSet(object.title) ? Text.fromJSON(object.title) : undefined,
      subTitle: isSet(object.subTitle) ? Text.fromJSON(object.subTitle) : undefined,
      adviceActionText: isSet(object.adviceActionText) ? Text.fromJSON(object.adviceActionText) : undefined,
      defaultActionText: isSet(object.defaultActionText) ? Text.fromJSON(object.defaultActionText) : undefined,
      violationDetailUrl: isSet(object.violationDetailUrl) ? globalThis.String(object.violationDetailUrl) : "",
      scene: isSet(object.scene) ? sceneFromJSON(object.scene) : 0,
      targetUserId: isSet(object.targetUserId) ? globalThis.String(object.targetUserId) : "0",
      targetRoomId: isSet(object.targetRoomId) ? globalThis.String(object.targetRoomId) : "0",
      countDownTime: isSet(object.countDownTime) ? globalThis.String(object.countDownTime) : "0",
      showFeedback: isSet(object.showFeedback) ? globalThis.Boolean(object.showFeedback) : false,
      feedbackOptions: globalThis.Array.isArray(object?.feedbackOptions)
        ? object.feedbackOptions.map((e: any) =>
          WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption.fromJSON(e)
        )
        : [],
      policyTip: isSet(object.policyTip) ? globalThis.String(object.policyTip) : "0",
      appealPopup: isSet(object.appealPopup) ? globalThis.Number(object.appealPopup) : 0,
    };
  },

  toJSON(message: WebcastControlMessage_PerceptionDialogInfo): unknown {
    const obj: any = {};
    if (message.iconType !== 0) {
      obj.iconType = perceptionDialogIconTypeToJSON(message.iconType);
    }
    if (message.title !== undefined) {
      obj.title = Text.toJSON(message.title);
    }
    if (message.subTitle !== undefined) {
      obj.subTitle = Text.toJSON(message.subTitle);
    }
    if (message.adviceActionText !== undefined) {
      obj.adviceActionText = Text.toJSON(message.adviceActionText);
    }
    if (message.defaultActionText !== undefined) {
      obj.defaultActionText = Text.toJSON(message.defaultActionText);
    }
    if (message.violationDetailUrl !== "") {
      obj.violationDetailUrl = message.violationDetailUrl;
    }
    if (message.scene !== 0) {
      obj.scene = sceneToJSON(message.scene);
    }
    if (message.targetUserId !== "0") {
      obj.targetUserId = message.targetUserId;
    }
    if (message.targetRoomId !== "0") {
      obj.targetRoomId = message.targetRoomId;
    }
    if (message.countDownTime !== "0") {
      obj.countDownTime = message.countDownTime;
    }
    if (message.showFeedback !== false) {
      obj.showFeedback = message.showFeedback;
    }
    if (message.feedbackOptions?.length) {
      obj.feedbackOptions = message.feedbackOptions.map((e) =>
        WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption.toJSON(e)
      );
    }
    if (message.policyTip !== "0") {
      obj.policyTip = message.policyTip;
    }
    if (message.appealPopup !== 0) {
      obj.appealPopup = Math.round(message.appealPopup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastControlMessage_PerceptionDialogInfo>, I>>(
    base?: I,
  ): WebcastControlMessage_PerceptionDialogInfo {
    return WebcastControlMessage_PerceptionDialogInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastControlMessage_PerceptionDialogInfo>, I>>(
    object: I,
  ): WebcastControlMessage_PerceptionDialogInfo {
    const message = createBaseWebcastControlMessage_PerceptionDialogInfo();
    message.iconType = object.iconType ?? 0;
    message.title = (object.title !== undefined && object.title !== null) ? Text.fromPartial(object.title) : undefined;
    message.subTitle = (object.subTitle !== undefined && object.subTitle !== null)
      ? Text.fromPartial(object.subTitle)
      : undefined;
    message.adviceActionText = (object.adviceActionText !== undefined && object.adviceActionText !== null)
      ? Text.fromPartial(object.adviceActionText)
      : undefined;
    message.defaultActionText = (object.defaultActionText !== undefined && object.defaultActionText !== null)
      ? Text.fromPartial(object.defaultActionText)
      : undefined;
    message.violationDetailUrl = object.violationDetailUrl ?? "";
    message.scene = object.scene ?? 0;
    message.targetUserId = object.targetUserId ?? "0";
    message.targetRoomId = object.targetRoomId ?? "0";
    message.countDownTime = object.countDownTime ?? "0";
    message.showFeedback = object.showFeedback ?? false;
    message.feedbackOptions =
      object.feedbackOptions?.map((e) =>
        WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption.fromPartial(e)
      ) || [];
    message.policyTip = object.policyTip ?? "0";
    message.appealPopup = object.appealPopup ?? 0;
    return message;
  },
};

function createBaseWebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption(): WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption {
  return { id: "0", contentKey: "" };
}

export const WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder: MessageFns<WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption> = {
  encode(
    message: WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.contentKey !== "") {
      writer.uint32(18).string(message.contentKey);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      contentKey: isSet(object.contentKey) ? globalThis.String(object.contentKey) : "",
    };
  },

  toJSON(message: WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.contentKey !== "") {
      obj.contentKey = message.contentKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption>, I>>(
    base?: I,
  ): WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption {
    return WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption>, I>>(
    object: I,
  ): WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption {
    const message = createBaseWebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption();
    message.id = object.id ?? "0";
    message.contentKey = object.contentKey ?? "";
    return message;
  },
};

function createBaseWebcastGoalUpdateMessage(): WebcastGoalUpdateMessage {
  return {
    common: undefined,
    indicator: undefined,
    goal: undefined,
    contributorId: "0",
    contributorAvatar: undefined,
    contributorDisplayId: "",
    contributeSubgoal: undefined,
    contributeCount: "0",
    contributeScore: "0",
    giftRepeatCount: "0",
    contributorIdStr: "",
    pin: false,
    unpin: false,
    pinInfo: undefined,
    updateSource: 0,
    goalExtra: "",
  };
}

export const WebcastGoalUpdateMessageDecoder: MessageFns<WebcastGoalUpdateMessage> = {
  encode(message: WebcastGoalUpdateMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.indicator !== undefined) {
      LiveStreamGoalIndicatorDecoder.encode(message.indicator, writer.uint32(18).fork()).join();
    }
    if (message.goal !== undefined) {
      LiveStreamGoalDecoder.encode(message.goal, writer.uint32(26).fork()).join();
    }
    if (message.contributorId !== "0") {
      writer.uint32(32).int64(message.contributorId);
    }
    if (message.contributorAvatar !== undefined) {
      ImageDecoder.encode(message.contributorAvatar, writer.uint32(42).fork()).join();
    }
    if (message.contributorDisplayId !== "") {
      writer.uint32(50).string(message.contributorDisplayId);
    }
    if (message.contributeSubgoal !== undefined) {
      WebcastGoalUpdateMessage_LiveStreamSubGoalDecoder.encode(message.contributeSubgoal, writer.uint32(58).fork()).join();
    }
    if (message.contributeCount !== "0") {
      writer.uint32(72).int64(message.contributeCount);
    }
    if (message.contributeScore !== "0") {
      writer.uint32(80).int64(message.contributeScore);
    }
    if (message.giftRepeatCount !== "0") {
      writer.uint32(88).int64(message.giftRepeatCount);
    }
    if (message.contributorIdStr !== "") {
      writer.uint32(98).string(message.contributorIdStr);
    }
    if (message.pin !== false) {
      writer.uint32(104).bool(message.pin);
    }
    if (message.unpin !== false) {
      writer.uint32(112).bool(message.unpin);
    }
    if (message.pinInfo !== undefined) {
      WebcastGoalUpdateMessage_GoalPinInfoDecoder.encode(message.pinInfo, writer.uint32(122).fork()).join();
    }
    if (message.updateSource !== 0) {
      writer.uint32(128).int32(message.updateSource);
    }
    if (message.goalExtra !== "") {
      writer.uint32(138).string(message.goalExtra);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGoalUpdateMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGoalUpdateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.indicator = LiveStreamGoalIndicatorDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.goal = LiveStreamGoalDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.contributorId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contributorAvatar = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.contributorDisplayId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contributeSubgoal = WebcastGoalUpdateMessage_LiveStreamSubGoalDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.contributeCount = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.contributeScore = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.giftRepeatCount = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.contributorIdStr = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.pin = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.unpin = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.pinInfo = WebcastGoalUpdateMessage_GoalPinInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.updateSource = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.goalExtra = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGoalUpdateMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      indicator: isSet(object.indicator) ? LiveStreamGoalIndicator.fromJSON(object.indicator) : undefined,
      goal: isSet(object.goal) ? LiveStreamGoal.fromJSON(object.goal) : undefined,
      contributorId: isSet(object.contributorId) ? globalThis.String(object.contributorId) : "0",
      contributorAvatar: isSet(object.contributorAvatar) ? Image.fromJSON(object.contributorAvatar) : undefined,
      contributorDisplayId: isSet(object.contributorDisplayId) ? globalThis.String(object.contributorDisplayId) : "",
      contributeSubgoal: isSet(object.contributeSubgoal)
        ? WebcastGoalUpdateMessage_LiveStreamSubGoal.fromJSON(object.contributeSubgoal)
        : undefined,
      contributeCount: isSet(object.contributeCount) ? globalThis.String(object.contributeCount) : "0",
      contributeScore: isSet(object.contributeScore) ? globalThis.String(object.contributeScore) : "0",
      giftRepeatCount: isSet(object.giftRepeatCount) ? globalThis.String(object.giftRepeatCount) : "0",
      contributorIdStr: isSet(object.contributorIdStr) ? globalThis.String(object.contributorIdStr) : "",
      pin: isSet(object.pin) ? globalThis.Boolean(object.pin) : false,
      unpin: isSet(object.unpin) ? globalThis.Boolean(object.unpin) : false,
      pinInfo: isSet(object.pinInfo) ? WebcastGoalUpdateMessage_GoalPinInfo.fromJSON(object.pinInfo) : undefined,
      updateSource: isSet(object.updateSource) ? goalMessageSourceFromJSON(object.updateSource) : 0,
      goalExtra: isSet(object.goalExtra) ? globalThis.String(object.goalExtra) : "",
    };
  },

  toJSON(message: WebcastGoalUpdateMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.indicator !== undefined) {
      obj.indicator = LiveStreamGoalIndicator.toJSON(message.indicator);
    }
    if (message.goal !== undefined) {
      obj.goal = LiveStreamGoal.toJSON(message.goal);
    }
    if (message.contributorId !== "0") {
      obj.contributorId = message.contributorId;
    }
    if (message.contributorAvatar !== undefined) {
      obj.contributorAvatar = Image.toJSON(message.contributorAvatar);
    }
    if (message.contributorDisplayId !== "") {
      obj.contributorDisplayId = message.contributorDisplayId;
    }
    if (message.contributeSubgoal !== undefined) {
      obj.contributeSubgoal = WebcastGoalUpdateMessage_LiveStreamSubGoal.toJSON(message.contributeSubgoal);
    }
    if (message.contributeCount !== "0") {
      obj.contributeCount = message.contributeCount;
    }
    if (message.contributeScore !== "0") {
      obj.contributeScore = message.contributeScore;
    }
    if (message.giftRepeatCount !== "0") {
      obj.giftRepeatCount = message.giftRepeatCount;
    }
    if (message.contributorIdStr !== "") {
      obj.contributorIdStr = message.contributorIdStr;
    }
    if (message.pin !== false) {
      obj.pin = message.pin;
    }
    if (message.unpin !== false) {
      obj.unpin = message.unpin;
    }
    if (message.pinInfo !== undefined) {
      obj.pinInfo = WebcastGoalUpdateMessage_GoalPinInfo.toJSON(message.pinInfo);
    }
    if (message.updateSource !== 0) {
      obj.updateSource = goalMessageSourceToJSON(message.updateSource);
    }
    if (message.goalExtra !== "") {
      obj.goalExtra = message.goalExtra;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGoalUpdateMessage>, I>>(base?: I): WebcastGoalUpdateMessage {
    return WebcastGoalUpdateMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGoalUpdateMessage>, I>>(object: I): WebcastGoalUpdateMessage {
    const message = createBaseWebcastGoalUpdateMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.indicator = (object.indicator !== undefined && object.indicator !== null)
      ? LiveStreamGoalIndicator.fromPartial(object.indicator)
      : undefined;
    message.goal = (object.goal !== undefined && object.goal !== null)
      ? LiveStreamGoal.fromPartial(object.goal)
      : undefined;
    message.contributorId = object.contributorId ?? "0";
    message.contributorAvatar = (object.contributorAvatar !== undefined && object.contributorAvatar !== null)
      ? Image.fromPartial(object.contributorAvatar)
      : undefined;
    message.contributorDisplayId = object.contributorDisplayId ?? "";
    message.contributeSubgoal = (object.contributeSubgoal !== undefined && object.contributeSubgoal !== null)
      ? WebcastGoalUpdateMessage_LiveStreamSubGoal.fromPartial(object.contributeSubgoal)
      : undefined;
    message.contributeCount = object.contributeCount ?? "0";
    message.contributeScore = object.contributeScore ?? "0";
    message.giftRepeatCount = object.giftRepeatCount ?? "0";
    message.contributorIdStr = object.contributorIdStr ?? "";
    message.pin = object.pin ?? false;
    message.unpin = object.unpin ?? false;
    message.pinInfo = (object.pinInfo !== undefined && object.pinInfo !== null)
      ? WebcastGoalUpdateMessage_GoalPinInfo.fromPartial(object.pinInfo)
      : undefined;
    message.updateSource = object.updateSource ?? 0;
    message.goalExtra = object.goalExtra ?? "";
    return message;
  },
};

function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal(): WebcastGoalUpdateMessage_LiveStreamSubGoal {
  return {
    type: 0,
    id: "0",
    progress: "0",
    target: "0",
    gift: undefined,
    idStr: "",
    pinInfo: undefined,
    source: 0,
    recommendedText: "",
    recommendedCommon: "",
  };
}

export const WebcastGoalUpdateMessage_LiveStreamSubGoalDecoder: MessageFns<WebcastGoalUpdateMessage_LiveStreamSubGoal> = {
  encode(message: WebcastGoalUpdateMessage_LiveStreamSubGoal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.id !== "0") {
      writer.uint32(16).int64(message.id);
    }
    if (message.progress !== "0") {
      writer.uint32(24).int64(message.progress);
    }
    if (message.target !== "0") {
      writer.uint32(32).int64(message.target);
    }
    if (message.gift !== undefined) {
      WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGiftDecoder.encode(message.gift, writer.uint32(42).fork())
        .join();
    }
    if (message.idStr !== "") {
      writer.uint32(50).string(message.idStr);
    }
    if (message.pinInfo !== undefined) {
      WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfoDecoder.encode(message.pinInfo, writer.uint32(58).fork())
        .join();
    }
    if (message.source !== 0) {
      writer.uint32(64).int32(message.source);
    }
    if (message.recommendedText !== "") {
      writer.uint32(74).string(message.recommendedText);
    }
    if (message.recommendedCommon !== "") {
      writer.uint32(82).string(message.recommendedCommon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGoalUpdateMessage_LiveStreamSubGoal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.progress = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.target = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gift = WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGiftDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.idStr = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pinInfo = WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.source = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.recommendedText = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.recommendedCommon = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGoalUpdateMessage_LiveStreamSubGoal {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      progress: isSet(object.progress) ? globalThis.String(object.progress) : "0",
      target: isSet(object.target) ? globalThis.String(object.target) : "0",
      gift: isSet(object.gift)
        ? WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift.fromJSON(object.gift)
        : undefined,
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      pinInfo: isSet(object.pinInfo)
        ? WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo.fromJSON(object.pinInfo)
        : undefined,
      source: isSet(object.source) ? globalThis.Number(object.source) : 0,
      recommendedText: isSet(object.recommendedText) ? globalThis.String(object.recommendedText) : "",
      recommendedCommon: isSet(object.recommendedCommon) ? globalThis.String(object.recommendedCommon) : "",
    };
  },

  toJSON(message: WebcastGoalUpdateMessage_LiveStreamSubGoal): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.progress !== "0") {
      obj.progress = message.progress;
    }
    if (message.target !== "0") {
      obj.target = message.target;
    }
    if (message.gift !== undefined) {
      obj.gift = WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift.toJSON(message.gift);
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.pinInfo !== undefined) {
      obj.pinInfo = WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo.toJSON(message.pinInfo);
    }
    if (message.source !== 0) {
      obj.source = Math.round(message.source);
    }
    if (message.recommendedText !== "") {
      obj.recommendedText = message.recommendedText;
    }
    if (message.recommendedCommon !== "") {
      obj.recommendedCommon = message.recommendedCommon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_LiveStreamSubGoal>, I>>(
    base?: I,
  ): WebcastGoalUpdateMessage_LiveStreamSubGoal {
    return WebcastGoalUpdateMessage_LiveStreamSubGoal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_LiveStreamSubGoal>, I>>(
    object: I,
  ): WebcastGoalUpdateMessage_LiveStreamSubGoal {
    const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal();
    message.type = object.type ?? 0;
    message.id = object.id ?? "0";
    message.progress = object.progress ?? "0";
    message.target = object.target ?? "0";
    message.gift = (object.gift !== undefined && object.gift !== null)
      ? WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift.fromPartial(object.gift)
      : undefined;
    message.idStr = object.idStr ?? "";
    message.pinInfo = (object.pinInfo !== undefined && object.pinInfo !== null)
      ? WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo.fromPartial(object.pinInfo)
      : undefined;
    message.source = object.source ?? 0;
    message.recommendedText = object.recommendedText ?? "";
    message.recommendedCommon = object.recommendedCommon ?? "";
    return message;
  },
};

function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift(): WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift {
  return { name: "", icon: undefined, diamondCount: "0", type: 0 };
}

export const WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGiftDecoder: MessageFns<WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift> = {
  encode(
    message: WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
    }
    if (message.diamondCount !== "0") {
      writer.uint32(24).int64(message.diamondCount);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.diamondCount = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      diamondCount: isSet(object.diamondCount) ? globalThis.String(object.diamondCount) : "0",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
    };
  },

  toJSON(message: WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.diamondCount !== "0") {
      obj.diamondCount = message.diamondCount;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift>, I>>(
    base?: I,
  ): WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift {
    return WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift>, I>>(
    object: I,
  ): WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift {
    const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift();
    message.name = object.name ?? "";
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.diamondCount = object.diamondCount ?? "0";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo(): WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo {
  return { pinStartTime: "0", pinEndTime: "0", pinReadyTime: "0" };
}

export const WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfoDecoder: MessageFns<WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo> = {
  encode(
    message: WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.pinStartTime !== "0") {
      writer.uint32(8).int64(message.pinStartTime);
    }
    if (message.pinEndTime !== "0") {
      writer.uint32(16).int64(message.pinEndTime);
    }
    if (message.pinReadyTime !== "0") {
      writer.uint32(24).int64(message.pinReadyTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pinStartTime = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pinEndTime = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pinReadyTime = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo {
    return {
      pinStartTime: isSet(object.pinStartTime) ? globalThis.String(object.pinStartTime) : "0",
      pinEndTime: isSet(object.pinEndTime) ? globalThis.String(object.pinEndTime) : "0",
      pinReadyTime: isSet(object.pinReadyTime) ? globalThis.String(object.pinReadyTime) : "0",
    };
  },

  toJSON(message: WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo): unknown {
    const obj: any = {};
    if (message.pinStartTime !== "0") {
      obj.pinStartTime = message.pinStartTime;
    }
    if (message.pinEndTime !== "0") {
      obj.pinEndTime = message.pinEndTime;
    }
    if (message.pinReadyTime !== "0") {
      obj.pinReadyTime = message.pinReadyTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo>, I>>(
    base?: I,
  ): WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo {
    return WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo>, I>>(
    object: I,
  ): WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo {
    const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo();
    message.pinStartTime = object.pinStartTime ?? "0";
    message.pinEndTime = object.pinEndTime ?? "0";
    message.pinReadyTime = object.pinReadyTime ?? "0";
    return message;
  },
};

function createBaseWebcastGoalUpdateMessage_GoalPinInfo(): WebcastGoalUpdateMessage_GoalPinInfo {
  return { pin: false, unpin: false, pinEndTime: "0", subGoalId: "0", subGoalIdStr: "" };
}

export const WebcastGoalUpdateMessage_GoalPinInfoDecoder: MessageFns<WebcastGoalUpdateMessage_GoalPinInfo> = {
  encode(message: WebcastGoalUpdateMessage_GoalPinInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pin !== false) {
      writer.uint32(8).bool(message.pin);
    }
    if (message.unpin !== false) {
      writer.uint32(16).bool(message.unpin);
    }
    if (message.pinEndTime !== "0") {
      writer.uint32(24).int64(message.pinEndTime);
    }
    if (message.subGoalId !== "0") {
      writer.uint32(32).int64(message.subGoalId);
    }
    if (message.subGoalIdStr !== "") {
      writer.uint32(42).string(message.subGoalIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastGoalUpdateMessage_GoalPinInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastGoalUpdateMessage_GoalPinInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pin = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.unpin = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pinEndTime = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.subGoalId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subGoalIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastGoalUpdateMessage_GoalPinInfo {
    return {
      pin: isSet(object.pin) ? globalThis.Boolean(object.pin) : false,
      unpin: isSet(object.unpin) ? globalThis.Boolean(object.unpin) : false,
      pinEndTime: isSet(object.pinEndTime) ? globalThis.String(object.pinEndTime) : "0",
      subGoalId: isSet(object.subGoalId) ? globalThis.String(object.subGoalId) : "0",
      subGoalIdStr: isSet(object.subGoalIdStr) ? globalThis.String(object.subGoalIdStr) : "",
    };
  },

  toJSON(message: WebcastGoalUpdateMessage_GoalPinInfo): unknown {
    const obj: any = {};
    if (message.pin !== false) {
      obj.pin = message.pin;
    }
    if (message.unpin !== false) {
      obj.unpin = message.unpin;
    }
    if (message.pinEndTime !== "0") {
      obj.pinEndTime = message.pinEndTime;
    }
    if (message.subGoalId !== "0") {
      obj.subGoalId = message.subGoalId;
    }
    if (message.subGoalIdStr !== "") {
      obj.subGoalIdStr = message.subGoalIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_GoalPinInfo>, I>>(
    base?: I,
  ): WebcastGoalUpdateMessage_GoalPinInfo {
    return WebcastGoalUpdateMessage_GoalPinInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastGoalUpdateMessage_GoalPinInfo>, I>>(
    object: I,
  ): WebcastGoalUpdateMessage_GoalPinInfo {
    const message = createBaseWebcastGoalUpdateMessage_GoalPinInfo();
    message.pin = object.pin ?? false;
    message.unpin = object.unpin ?? false;
    message.pinEndTime = object.pinEndTime ?? "0";
    message.subGoalId = object.subGoalId ?? "0";
    message.subGoalIdStr = object.subGoalIdStr ?? "";
    return message;
  },
};

function createBaseWebcastImDeleteMessage(): WebcastImDeleteMessage {
  return { common: undefined, deleteMsgIdsList: [], deleteUserIdsList: [] };
}

export const WebcastImDeleteMessageDecoder: MessageFns<WebcastImDeleteMessage> = {
  encode(message: WebcastImDeleteMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.deleteMsgIdsList) {
      writer.int64(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.deleteUserIdsList) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastImDeleteMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastImDeleteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.deleteMsgIdsList.push(reader.int64().toString());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.deleteMsgIdsList.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.deleteUserIdsList.push(reader.int64().toString());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.deleteUserIdsList.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastImDeleteMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      deleteMsgIdsList: globalThis.Array.isArray(object?.deleteMsgIdsList)
        ? object.deleteMsgIdsList.map((e: any) => globalThis.String(e))
        : [],
      deleteUserIdsList: globalThis.Array.isArray(object?.deleteUserIdsList)
        ? object.deleteUserIdsList.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: WebcastImDeleteMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.deleteMsgIdsList?.length) {
      obj.deleteMsgIdsList = message.deleteMsgIdsList;
    }
    if (message.deleteUserIdsList?.length) {
      obj.deleteUserIdsList = message.deleteUserIdsList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastImDeleteMessage>, I>>(base?: I): WebcastImDeleteMessage {
    return WebcastImDeleteMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastImDeleteMessage>, I>>(object: I): WebcastImDeleteMessage {
    const message = createBaseWebcastImDeleteMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.deleteMsgIdsList = object.deleteMsgIdsList?.map((e) => e) || [];
    message.deleteUserIdsList = object.deleteUserIdsList?.map((e) => e) || [];
    return message;
  },
};

function createBaseWebcastInRoomBannerMessage(): WebcastInRoomBannerMessage {
  return { common: undefined, data: {}, position: 0, actionType: 0 };
}

export const WebcastInRoomBannerMessageDecoder: MessageFns<WebcastInRoomBannerMessage> = {
  encode(message: WebcastInRoomBannerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    Object.entries(message.data).forEach(([key, value]) => {
      WebcastInRoomBannerMessage_DataEntryDecoder.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.position !== 0) {
      writer.uint32(24).int32(message.position);
    }
    if (message.actionType !== 0) {
      writer.uint32(32).int32(message.actionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastInRoomBannerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastInRoomBannerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = WebcastInRoomBannerMessage_DataEntryDecoder.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.data[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.position = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.actionType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastInRoomBannerMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
      actionType: isSet(object.actionType) ? globalThis.Number(object.actionType) : 0,
    };
  },

  toJSON(message: WebcastInRoomBannerMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.data) {
      const entries = Object.entries(message.data);
      if (entries.length > 0) {
        obj.data = {};
        entries.forEach(([k, v]) => {
          obj.data[k] = v;
        });
      }
    }
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    if (message.actionType !== 0) {
      obj.actionType = Math.round(message.actionType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastInRoomBannerMessage>, I>>(base?: I): WebcastInRoomBannerMessage {
    return WebcastInRoomBannerMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastInRoomBannerMessage>, I>>(object: I): WebcastInRoomBannerMessage {
    const message = createBaseWebcastInRoomBannerMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.position = object.position ?? 0;
    message.actionType = object.actionType ?? 0;
    return message;
  },
};

function createBaseWebcastInRoomBannerMessage_DataEntry(): WebcastInRoomBannerMessage_DataEntry {
  return { key: "", value: "" };
}

export const WebcastInRoomBannerMessage_DataEntryDecoder: MessageFns<WebcastInRoomBannerMessage_DataEntry> = {
  encode(message: WebcastInRoomBannerMessage_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastInRoomBannerMessage_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastInRoomBannerMessage_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastInRoomBannerMessage_DataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WebcastInRoomBannerMessage_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastInRoomBannerMessage_DataEntry>, I>>(
    base?: I,
  ): WebcastInRoomBannerMessage_DataEntry {
    return WebcastInRoomBannerMessage_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastInRoomBannerMessage_DataEntry>, I>>(
    object: I,
  ): WebcastInRoomBannerMessage_DataEntry {
    const message = createBaseWebcastInRoomBannerMessage_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseWebcastRankUpdateMessage(): WebcastRankUpdateMessage {
  return {
    common: undefined,
    updatesList: [],
    groupType: "0",
    priority: "0",
    tabsList: [],
    isAnimationLoopPlay: false,
    animationLoopForOff: false,
    unionAnimation: [],
    tabInfo: [],
  };
}

export const WebcastRankUpdateMessageDecoder: MessageFns<WebcastRankUpdateMessage> = {
  encode(message: WebcastRankUpdateMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    for (const v of message.updatesList) {
      WebcastRankUpdateMessage_RankUpdateDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.groupType !== "0") {
      writer.uint32(24).int64(message.groupType);
    }
    if (message.priority !== "0") {
      writer.uint32(40).int64(message.priority);
    }
    for (const v of message.tabsList) {
      WebcastRankUpdateMessage_RankTabInfoDecoder.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.isAnimationLoopPlay !== false) {
      writer.uint32(56).bool(message.isAnimationLoopPlay);
    }
    if (message.animationLoopForOff !== false) {
      writer.uint32(64).bool(message.animationLoopForOff);
    }
    for (const v of message.unionAnimation) {
      WebcastRankUpdateMessage_UnionAnimationInfoDecoder.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.tabInfo) {
      WebcastRankUpdateMessage_RankListTabInfoDecoder.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRankUpdateMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRankUpdateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updatesList.push(WebcastRankUpdateMessage_RankUpdateDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.groupType = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.priority = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tabsList.push(WebcastRankUpdateMessage_RankTabInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isAnimationLoopPlay = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.animationLoopForOff = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.unionAnimation.push(WebcastRankUpdateMessage_UnionAnimationInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.tabInfo.push(WebcastRankUpdateMessage_RankListTabInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRankUpdateMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      updatesList: globalThis.Array.isArray(object?.updatesList)
        ? object.updatesList.map((e: any) => WebcastRankUpdateMessage_RankUpdate.fromJSON(e))
        : [],
      groupType: isSet(object.groupType) ? globalThis.String(object.groupType) : "0",
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "0",
      tabsList: globalThis.Array.isArray(object?.tabsList)
        ? object.tabsList.map((e: any) => WebcastRankUpdateMessage_RankTabInfo.fromJSON(e))
        : [],
      isAnimationLoopPlay: isSet(object.isAnimationLoopPlay) ? globalThis.Boolean(object.isAnimationLoopPlay) : false,
      animationLoopForOff: isSet(object.animationLoopForOff) ? globalThis.Boolean(object.animationLoopForOff) : false,
      unionAnimation: globalThis.Array.isArray(object?.unionAnimation)
        ? object.unionAnimation.map((e: any) => WebcastRankUpdateMessage_UnionAnimationInfo.fromJSON(e))
        : [],
      tabInfo: globalThis.Array.isArray(object?.tabInfo)
        ? object.tabInfo.map((e: any) => WebcastRankUpdateMessage_RankListTabInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebcastRankUpdateMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.updatesList?.length) {
      obj.updatesList = message.updatesList.map((e) => WebcastRankUpdateMessage_RankUpdate.toJSON(e));
    }
    if (message.groupType !== "0") {
      obj.groupType = message.groupType;
    }
    if (message.priority !== "0") {
      obj.priority = message.priority;
    }
    if (message.tabsList?.length) {
      obj.tabsList = message.tabsList.map((e) => WebcastRankUpdateMessage_RankTabInfo.toJSON(e));
    }
    if (message.isAnimationLoopPlay !== false) {
      obj.isAnimationLoopPlay = message.isAnimationLoopPlay;
    }
    if (message.animationLoopForOff !== false) {
      obj.animationLoopForOff = message.animationLoopForOff;
    }
    if (message.unionAnimation?.length) {
      obj.unionAnimation = message.unionAnimation.map((e) => WebcastRankUpdateMessage_UnionAnimationInfo.toJSON(e));
    }
    if (message.tabInfo?.length) {
      obj.tabInfo = message.tabInfo.map((e) => WebcastRankUpdateMessage_RankListTabInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRankUpdateMessage>, I>>(base?: I): WebcastRankUpdateMessage {
    return WebcastRankUpdateMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRankUpdateMessage>, I>>(object: I): WebcastRankUpdateMessage {
    const message = createBaseWebcastRankUpdateMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.updatesList = object.updatesList?.map((e) => WebcastRankUpdateMessage_RankUpdate.fromPartial(e)) || [];
    message.groupType = object.groupType ?? "0";
    message.priority = object.priority ?? "0";
    message.tabsList = object.tabsList?.map((e) => WebcastRankUpdateMessage_RankTabInfo.fromPartial(e)) || [];
    message.isAnimationLoopPlay = object.isAnimationLoopPlay ?? false;
    message.animationLoopForOff = object.animationLoopForOff ?? false;
    message.unionAnimation =
      object.unionAnimation?.map((e) => WebcastRankUpdateMessage_UnionAnimationInfo.fromPartial(e)) || [];
    message.tabInfo = object.tabInfo?.map((e) => WebcastRankUpdateMessage_RankListTabInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebcastRankUpdateMessage_UnionAnimationInfo(): WebcastRankUpdateMessage_UnionAnimationInfo {
  return { unionType: 0, rankTypeArray: 0, supportedVersion: "0" };
}

export const WebcastRankUpdateMessage_UnionAnimationInfoDecoder: MessageFns<WebcastRankUpdateMessage_UnionAnimationInfo> = {
  encode(
    message: WebcastRankUpdateMessage_UnionAnimationInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.unionType !== 0) {
      writer.uint32(8).int32(message.unionType);
    }
    if (message.rankTypeArray !== 0) {
      writer.uint32(16).int32(message.rankTypeArray);
    }
    if (message.supportedVersion !== "0") {
      writer.uint32(24).int64(message.supportedVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRankUpdateMessage_UnionAnimationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRankUpdateMessage_UnionAnimationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unionType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rankTypeArray = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.supportedVersion = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRankUpdateMessage_UnionAnimationInfo {
    return {
      unionType: isSet(object.unionType) ? unionAnimationInfoTypeFromJSON(object.unionType) : 0,
      rankTypeArray: isSet(object.rankTypeArray) ? profitRankTypeFromJSON(object.rankTypeArray) : 0,
      supportedVersion: isSet(object.supportedVersion) ? globalThis.String(object.supportedVersion) : "0",
    };
  },

  toJSON(message: WebcastRankUpdateMessage_UnionAnimationInfo): unknown {
    const obj: any = {};
    if (message.unionType !== 0) {
      obj.unionType = unionAnimationInfoTypeToJSON(message.unionType);
    }
    if (message.rankTypeArray !== 0) {
      obj.rankTypeArray = profitRankTypeToJSON(message.rankTypeArray);
    }
    if (message.supportedVersion !== "0") {
      obj.supportedVersion = message.supportedVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRankUpdateMessage_UnionAnimationInfo>, I>>(
    base?: I,
  ): WebcastRankUpdateMessage_UnionAnimationInfo {
    return WebcastRankUpdateMessage_UnionAnimationInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRankUpdateMessage_UnionAnimationInfo>, I>>(
    object: I,
  ): WebcastRankUpdateMessage_UnionAnimationInfo {
    const message = createBaseWebcastRankUpdateMessage_UnionAnimationInfo();
    message.unionType = object.unionType ?? 0;
    message.rankTypeArray = object.rankTypeArray ?? 0;
    message.supportedVersion = object.supportedVersion ?? "0";
    return message;
  },
};

function createBaseWebcastRankUpdateMessage_RankListTabInfo(): WebcastRankUpdateMessage_RankListTabInfo {
  return { tabs: [], supportedVersion: "0" };
}

export const WebcastRankUpdateMessage_RankListTabInfoDecoder: MessageFns<WebcastRankUpdateMessage_RankListTabInfo> = {
  encode(message: WebcastRankUpdateMessage_RankListTabInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tabs) {
      WebcastRankUpdateMessage_RankTabInfoDecoder.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.supportedVersion !== "0") {
      writer.uint32(16).int64(message.supportedVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRankUpdateMessage_RankListTabInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRankUpdateMessage_RankListTabInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tabs.push(WebcastRankUpdateMessage_RankTabInfoDecoder.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.supportedVersion = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRankUpdateMessage_RankListTabInfo {
    return {
      tabs: globalThis.Array.isArray(object?.tabs)
        ? object.tabs.map((e: any) => WebcastRankUpdateMessage_RankTabInfo.fromJSON(e))
        : [],
      supportedVersion: isSet(object.supportedVersion) ? globalThis.String(object.supportedVersion) : "0",
    };
  },

  toJSON(message: WebcastRankUpdateMessage_RankListTabInfo): unknown {
    const obj: any = {};
    if (message.tabs?.length) {
      obj.tabs = message.tabs.map((e) => WebcastRankUpdateMessage_RankTabInfo.toJSON(e));
    }
    if (message.supportedVersion !== "0") {
      obj.supportedVersion = message.supportedVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRankUpdateMessage_RankListTabInfo>, I>>(
    base?: I,
  ): WebcastRankUpdateMessage_RankListTabInfo {
    return WebcastRankUpdateMessage_RankListTabInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRankUpdateMessage_RankListTabInfo>, I>>(
    object: I,
  ): WebcastRankUpdateMessage_RankListTabInfo {
    const message = createBaseWebcastRankUpdateMessage_RankListTabInfo();
    message.tabs = object.tabs?.map((e) => WebcastRankUpdateMessage_RankTabInfo.fromPartial(e)) || [];
    message.supportedVersion = object.supportedVersion ?? "0";
    return message;
  },
};

function createBaseWebcastRankUpdateMessage_RankTabInfo(): WebcastRankUpdateMessage_RankTabInfo {
  return { rankType: 0, title: "", titleText: undefined, listLynxType: "0" };
}

export const WebcastRankUpdateMessage_RankTabInfoDecoder: MessageFns<WebcastRankUpdateMessage_RankTabInfo> = {
  encode(message: WebcastRankUpdateMessage_RankTabInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rankType !== 0) {
      writer.uint32(8).int32(message.rankType);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.titleText !== undefined) {
      TextDecoder.encode(message.titleText, writer.uint32(26).fork()).join();
    }
    if (message.listLynxType !== "0") {
      writer.uint32(32).int64(message.listLynxType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRankUpdateMessage_RankTabInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRankUpdateMessage_RankTabInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rankType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.titleText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.listLynxType = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRankUpdateMessage_RankTabInfo {
    return {
      rankType: isSet(object.rankType) ? profitRankTypeFromJSON(object.rankType) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      titleText: isSet(object.titleText) ? Text.fromJSON(object.titleText) : undefined,
      listLynxType: isSet(object.listLynxType) ? globalThis.String(object.listLynxType) : "0",
    };
  },

  toJSON(message: WebcastRankUpdateMessage_RankTabInfo): unknown {
    const obj: any = {};
    if (message.rankType !== 0) {
      obj.rankType = profitRankTypeToJSON(message.rankType);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.titleText !== undefined) {
      obj.titleText = Text.toJSON(message.titleText);
    }
    if (message.listLynxType !== "0") {
      obj.listLynxType = message.listLynxType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRankUpdateMessage_RankTabInfo>, I>>(
    base?: I,
  ): WebcastRankUpdateMessage_RankTabInfo {
    return WebcastRankUpdateMessage_RankTabInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRankUpdateMessage_RankTabInfo>, I>>(
    object: I,
  ): WebcastRankUpdateMessage_RankTabInfo {
    const message = createBaseWebcastRankUpdateMessage_RankTabInfo();
    message.rankType = object.rankType ?? 0;
    message.title = object.title ?? "";
    message.titleText = (object.titleText !== undefined && object.titleText !== null)
      ? Text.fromPartial(object.titleText)
      : undefined;
    message.listLynxType = object.listLynxType ?? "0";
    return message;
  },
};

function createBaseWebcastRankUpdateMessage_RankUpdate(): WebcastRankUpdateMessage_RankUpdate {
  return {
    rankType: "0",
    ownerRank: "0",
    defaultContent: undefined,
    showEntranceAnimation: false,
    countdown: "0",
    relatedTabRankType: "0",
    requestFirstShowType: "0",
    supportedVersion: "0",
    owneronrank: false,
  };
}

export const WebcastRankUpdateMessage_RankUpdateDecoder: MessageFns<WebcastRankUpdateMessage_RankUpdate> = {
  encode(message: WebcastRankUpdateMessage_RankUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rankType !== "0") {
      writer.uint32(8).int64(message.rankType);
    }
    if (message.ownerRank !== "0") {
      writer.uint32(16).int64(message.ownerRank);
    }
    if (message.defaultContent !== undefined) {
      TextDecoder.encode(message.defaultContent, writer.uint32(26).fork()).join();
    }
    if (message.showEntranceAnimation !== false) {
      writer.uint32(40).bool(message.showEntranceAnimation);
    }
    if (message.countdown !== "0") {
      writer.uint32(48).int64(message.countdown);
    }
    if (message.relatedTabRankType !== "0") {
      writer.uint32(64).int64(message.relatedTabRankType);
    }
    if (message.requestFirstShowType !== "0") {
      writer.uint32(72).int64(message.requestFirstShowType);
    }
    if (message.supportedVersion !== "0") {
      writer.uint32(80).int64(message.supportedVersion);
    }
    if (message.owneronrank !== false) {
      writer.uint32(88).bool(message.owneronrank);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRankUpdateMessage_RankUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRankUpdateMessage_RankUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rankType = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ownerRank = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.defaultContent = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.showEntranceAnimation = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.countdown = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.relatedTabRankType = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.requestFirstShowType = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.supportedVersion = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.owneronrank = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRankUpdateMessage_RankUpdate {
    return {
      rankType: isSet(object.rankType) ? globalThis.String(object.rankType) : "0",
      ownerRank: isSet(object.ownerRank) ? globalThis.String(object.ownerRank) : "0",
      defaultContent: isSet(object.defaultContent) ? Text.fromJSON(object.defaultContent) : undefined,
      showEntranceAnimation: isSet(object.showEntranceAnimation)
        ? globalThis.Boolean(object.showEntranceAnimation)
        : false,
      countdown: isSet(object.countdown) ? globalThis.String(object.countdown) : "0",
      relatedTabRankType: isSet(object.relatedTabRankType) ? globalThis.String(object.relatedTabRankType) : "0",
      requestFirstShowType: isSet(object.requestFirstShowType) ? globalThis.String(object.requestFirstShowType) : "0",
      supportedVersion: isSet(object.supportedVersion) ? globalThis.String(object.supportedVersion) : "0",
      owneronrank: isSet(object.owneronrank) ? globalThis.Boolean(object.owneronrank) : false,
    };
  },

  toJSON(message: WebcastRankUpdateMessage_RankUpdate): unknown {
    const obj: any = {};
    if (message.rankType !== "0") {
      obj.rankType = message.rankType;
    }
    if (message.ownerRank !== "0") {
      obj.ownerRank = message.ownerRank;
    }
    if (message.defaultContent !== undefined) {
      obj.defaultContent = Text.toJSON(message.defaultContent);
    }
    if (message.showEntranceAnimation !== false) {
      obj.showEntranceAnimation = message.showEntranceAnimation;
    }
    if (message.countdown !== "0") {
      obj.countdown = message.countdown;
    }
    if (message.relatedTabRankType !== "0") {
      obj.relatedTabRankType = message.relatedTabRankType;
    }
    if (message.requestFirstShowType !== "0") {
      obj.requestFirstShowType = message.requestFirstShowType;
    }
    if (message.supportedVersion !== "0") {
      obj.supportedVersion = message.supportedVersion;
    }
    if (message.owneronrank !== false) {
      obj.owneronrank = message.owneronrank;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRankUpdateMessage_RankUpdate>, I>>(
    base?: I,
  ): WebcastRankUpdateMessage_RankUpdate {
    return WebcastRankUpdateMessage_RankUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRankUpdateMessage_RankUpdate>, I>>(
    object: I,
  ): WebcastRankUpdateMessage_RankUpdate {
    const message = createBaseWebcastRankUpdateMessage_RankUpdate();
    message.rankType = object.rankType ?? "0";
    message.ownerRank = object.ownerRank ?? "0";
    message.defaultContent = (object.defaultContent !== undefined && object.defaultContent !== null)
      ? Text.fromPartial(object.defaultContent)
      : undefined;
    message.showEntranceAnimation = object.showEntranceAnimation ?? false;
    message.countdown = object.countdown ?? "0";
    message.relatedTabRankType = object.relatedTabRankType ?? "0";
    message.requestFirstShowType = object.requestFirstShowType ?? "0";
    message.supportedVersion = object.supportedVersion ?? "0";
    message.owneronrank = object.owneronrank ?? false;
    return message;
  },
};

function createBaseWebcastPollMessage(): WebcastPollMessage {
  return {
    common: undefined,
    messageType: 0,
    pollId: "0",
    startContent: undefined,
    endContent: undefined,
    updateContent: undefined,
    pollKind: 0,
    pollBasicInfo: undefined,
    templateContent: undefined,
  };
}

export const WebcastPollMessageDecoder: MessageFns<WebcastPollMessage> = {
  encode(message: WebcastPollMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.messageType !== 0) {
      writer.uint32(16).int32(message.messageType);
    }
    if (message.pollId !== "0") {
      writer.uint32(24).int64(message.pollId);
    }
    if (message.startContent !== undefined) {
      PollStartContentDecoder.encode(message.startContent, writer.uint32(34).fork()).join();
    }
    if (message.endContent !== undefined) {
      PollEndContentDecoder.encode(message.endContent, writer.uint32(42).fork()).join();
    }
    if (message.updateContent !== undefined) {
      PollUpdateVotesContentDecoder.encode(message.updateContent, writer.uint32(50).fork()).join();
    }
    if (message.pollKind !== 0) {
      writer.uint32(56).int32(message.pollKind);
    }
    if (message.pollBasicInfo !== undefined) {
      WebcastPollMessage_PollBasicInfoDecoder.encode(message.pollBasicInfo, writer.uint32(66).fork()).join();
    }
    if (message.templateContent !== undefined) {
      WebcastPollMessage_TemplateContentDecoder.encode(message.templateContent, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastPollMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastPollMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.messageType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pollId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startContent = PollStartContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endContent = PollEndContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateContent = PollUpdateVotesContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.pollKind = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.pollBasicInfo = WebcastPollMessage_PollBasicInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.templateContent = WebcastPollMessage_TemplateContentDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastPollMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      messageType: isSet(object.messageType) ? messageTypeFromJSON(object.messageType) : 0,
      pollId: isSet(object.pollId) ? globalThis.String(object.pollId) : "0",
      startContent: isSet(object.startContent) ? PollStartContent.fromJSON(object.startContent) : undefined,
      endContent: isSet(object.endContent) ? PollEndContent.fromJSON(object.endContent) : undefined,
      updateContent: isSet(object.updateContent) ? PollUpdateVotesContent.fromJSON(object.updateContent) : undefined,
      pollKind: isSet(object.pollKind) ? pollKindFromJSON(object.pollKind) : 0,
      pollBasicInfo: isSet(object.pollBasicInfo)
        ? WebcastPollMessage_PollBasicInfo.fromJSON(object.pollBasicInfo)
        : undefined,
      templateContent: isSet(object.templateContent)
        ? WebcastPollMessage_TemplateContent.fromJSON(object.templateContent)
        : undefined,
    };
  },

  toJSON(message: WebcastPollMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.messageType !== 0) {
      obj.messageType = messageTypeToJSON(message.messageType);
    }
    if (message.pollId !== "0") {
      obj.pollId = message.pollId;
    }
    if (message.startContent !== undefined) {
      obj.startContent = PollStartContent.toJSON(message.startContent);
    }
    if (message.endContent !== undefined) {
      obj.endContent = PollEndContent.toJSON(message.endContent);
    }
    if (message.updateContent !== undefined) {
      obj.updateContent = PollUpdateVotesContent.toJSON(message.updateContent);
    }
    if (message.pollKind !== 0) {
      obj.pollKind = pollKindToJSON(message.pollKind);
    }
    if (message.pollBasicInfo !== undefined) {
      obj.pollBasicInfo = WebcastPollMessage_PollBasicInfo.toJSON(message.pollBasicInfo);
    }
    if (message.templateContent !== undefined) {
      obj.templateContent = WebcastPollMessage_TemplateContent.toJSON(message.templateContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastPollMessage>, I>>(base?: I): WebcastPollMessage {
    return WebcastPollMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastPollMessage>, I>>(object: I): WebcastPollMessage {
    const message = createBaseWebcastPollMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.messageType = object.messageType ?? 0;
    message.pollId = object.pollId ?? "0";
    message.startContent = (object.startContent !== undefined && object.startContent !== null)
      ? PollStartContent.fromPartial(object.startContent)
      : undefined;
    message.endContent = (object.endContent !== undefined && object.endContent !== null)
      ? PollEndContent.fromPartial(object.endContent)
      : undefined;
    message.updateContent = (object.updateContent !== undefined && object.updateContent !== null)
      ? PollUpdateVotesContent.fromPartial(object.updateContent)
      : undefined;
    message.pollKind = object.pollKind ?? 0;
    message.pollBasicInfo = (object.pollBasicInfo !== undefined && object.pollBasicInfo !== null)
      ? WebcastPollMessage_PollBasicInfo.fromPartial(object.pollBasicInfo)
      : undefined;
    message.templateContent = (object.templateContent !== undefined && object.templateContent !== null)
      ? WebcastPollMessage_TemplateContent.fromPartial(object.templateContent)
      : undefined;
    return message;
  },
};

function createBaseWebcastPollMessage_TemplateContent(): WebcastPollMessage_TemplateContent {
  return { templateId: "0", templateIdStr: "", status: 0, pollKind: 0, appealStatus: 0, violationIdStr: "" };
}

export const WebcastPollMessage_TemplateContentDecoder: MessageFns<WebcastPollMessage_TemplateContent> = {
  encode(message: WebcastPollMessage_TemplateContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.templateId !== "0") {
      writer.uint32(8).int64(message.templateId);
    }
    if (message.templateIdStr !== "") {
      writer.uint32(18).string(message.templateIdStr);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.pollKind !== 0) {
      writer.uint32(32).int32(message.pollKind);
    }
    if (message.appealStatus !== 0) {
      writer.uint32(40).int32(message.appealStatus);
    }
    if (message.violationIdStr !== "") {
      writer.uint32(50).string(message.violationIdStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastPollMessage_TemplateContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastPollMessage_TemplateContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.templateId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.templateIdStr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pollKind = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.appealStatus = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.violationIdStr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastPollMessage_TemplateContent {
    return {
      templateId: isSet(object.templateId) ? globalThis.String(object.templateId) : "0",
      templateIdStr: isSet(object.templateIdStr) ? globalThis.String(object.templateIdStr) : "",
      status: isSet(object.status) ? pollTemplateStatusFromJSON(object.status) : 0,
      pollKind: isSet(object.pollKind) ? pollKindFromJSON(object.pollKind) : 0,
      appealStatus: isSet(object.appealStatus) ? pollAppealStatusFromJSON(object.appealStatus) : 0,
      violationIdStr: isSet(object.violationIdStr) ? globalThis.String(object.violationIdStr) : "",
    };
  },

  toJSON(message: WebcastPollMessage_TemplateContent): unknown {
    const obj: any = {};
    if (message.templateId !== "0") {
      obj.templateId = message.templateId;
    }
    if (message.templateIdStr !== "") {
      obj.templateIdStr = message.templateIdStr;
    }
    if (message.status !== 0) {
      obj.status = pollTemplateStatusToJSON(message.status);
    }
    if (message.pollKind !== 0) {
      obj.pollKind = pollKindToJSON(message.pollKind);
    }
    if (message.appealStatus !== 0) {
      obj.appealStatus = pollAppealStatusToJSON(message.appealStatus);
    }
    if (message.violationIdStr !== "") {
      obj.violationIdStr = message.violationIdStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastPollMessage_TemplateContent>, I>>(
    base?: I,
  ): WebcastPollMessage_TemplateContent {
    return WebcastPollMessage_TemplateContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastPollMessage_TemplateContent>, I>>(
    object: I,
  ): WebcastPollMessage_TemplateContent {
    const message = createBaseWebcastPollMessage_TemplateContent();
    message.templateId = object.templateId ?? "0";
    message.templateIdStr = object.templateIdStr ?? "";
    message.status = object.status ?? 0;
    message.pollKind = object.pollKind ?? 0;
    message.appealStatus = object.appealStatus ?? 0;
    message.violationIdStr = object.violationIdStr ?? "";
    return message;
  },
};

function createBaseWebcastPollMessage_PollBasicInfo(): WebcastPollMessage_PollBasicInfo {
  return {
    pollSponsor: "",
    giftId: "0",
    title: "",
    isSuggestedQuestion: false,
    userCnt: "0",
    gift: undefined,
    pollIdStr: "",
    suggestedQuestionKey: "",
    pollDuration: "0",
    timeRemain: "0",
    pollIndex: "0",
    templateId: "0",
  };
}

export const WebcastPollMessage_PollBasicInfoDecoder: MessageFns<WebcastPollMessage_PollBasicInfo> = {
  encode(message: WebcastPollMessage_PollBasicInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pollSponsor !== "") {
      writer.uint32(10).string(message.pollSponsor);
    }
    if (message.giftId !== "0") {
      writer.uint32(16).int64(message.giftId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.isSuggestedQuestion !== false) {
      writer.uint32(32).bool(message.isSuggestedQuestion);
    }
    if (message.userCnt !== "0") {
      writer.uint32(40).int64(message.userCnt);
    }
    if (message.gift !== undefined) {
      GiftDecoder.encode(message.gift, writer.uint32(50).fork()).join();
    }
    if (message.pollIdStr !== "") {
      writer.uint32(58).string(message.pollIdStr);
    }
    if (message.suggestedQuestionKey !== "") {
      writer.uint32(66).string(message.suggestedQuestionKey);
    }
    if (message.pollDuration !== "0") {
      writer.uint32(72).int64(message.pollDuration);
    }
    if (message.timeRemain !== "0") {
      writer.uint32(80).int64(message.timeRemain);
    }
    if (message.pollIndex !== "0") {
      writer.uint32(88).int64(message.pollIndex);
    }
    if (message.templateId !== "0") {
      writer.uint32(96).int64(message.templateId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastPollMessage_PollBasicInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastPollMessage_PollBasicInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pollSponsor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.giftId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isSuggestedQuestion = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userCnt = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gift = GiftDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pollIdStr = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.suggestedQuestionKey = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.pollDuration = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.timeRemain = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.pollIndex = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.templateId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastPollMessage_PollBasicInfo {
    return {
      pollSponsor: isSet(object.pollSponsor) ? globalThis.String(object.pollSponsor) : "",
      giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "0",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      isSuggestedQuestion: isSet(object.isSuggestedQuestion) ? globalThis.Boolean(object.isSuggestedQuestion) : false,
      userCnt: isSet(object.userCnt) ? globalThis.String(object.userCnt) : "0",
      gift: isSet(object.gift) ? Gift.fromJSON(object.gift) : undefined,
      pollIdStr: isSet(object.pollIdStr) ? globalThis.String(object.pollIdStr) : "",
      suggestedQuestionKey: isSet(object.suggestedQuestionKey) ? globalThis.String(object.suggestedQuestionKey) : "",
      pollDuration: isSet(object.pollDuration) ? globalThis.String(object.pollDuration) : "0",
      timeRemain: isSet(object.timeRemain) ? globalThis.String(object.timeRemain) : "0",
      pollIndex: isSet(object.pollIndex) ? globalThis.String(object.pollIndex) : "0",
      templateId: isSet(object.templateId) ? globalThis.String(object.templateId) : "0",
    };
  },

  toJSON(message: WebcastPollMessage_PollBasicInfo): unknown {
    const obj: any = {};
    if (message.pollSponsor !== "") {
      obj.pollSponsor = message.pollSponsor;
    }
    if (message.giftId !== "0") {
      obj.giftId = message.giftId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.isSuggestedQuestion !== false) {
      obj.isSuggestedQuestion = message.isSuggestedQuestion;
    }
    if (message.userCnt !== "0") {
      obj.userCnt = message.userCnt;
    }
    if (message.gift !== undefined) {
      obj.gift = Gift.toJSON(message.gift);
    }
    if (message.pollIdStr !== "") {
      obj.pollIdStr = message.pollIdStr;
    }
    if (message.suggestedQuestionKey !== "") {
      obj.suggestedQuestionKey = message.suggestedQuestionKey;
    }
    if (message.pollDuration !== "0") {
      obj.pollDuration = message.pollDuration;
    }
    if (message.timeRemain !== "0") {
      obj.timeRemain = message.timeRemain;
    }
    if (message.pollIndex !== "0") {
      obj.pollIndex = message.pollIndex;
    }
    if (message.templateId !== "0") {
      obj.templateId = message.templateId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastPollMessage_PollBasicInfo>, I>>(
    base?: I,
  ): WebcastPollMessage_PollBasicInfo {
    return WebcastPollMessage_PollBasicInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastPollMessage_PollBasicInfo>, I>>(
    object: I,
  ): WebcastPollMessage_PollBasicInfo {
    const message = createBaseWebcastPollMessage_PollBasicInfo();
    message.pollSponsor = object.pollSponsor ?? "";
    message.giftId = object.giftId ?? "0";
    message.title = object.title ?? "";
    message.isSuggestedQuestion = object.isSuggestedQuestion ?? false;
    message.userCnt = object.userCnt ?? "0";
    message.gift = (object.gift !== undefined && object.gift !== null) ? Gift.fromPartial(object.gift) : undefined;
    message.pollIdStr = object.pollIdStr ?? "";
    message.suggestedQuestionKey = object.suggestedQuestionKey ?? "";
    message.pollDuration = object.pollDuration ?? "0";
    message.timeRemain = object.timeRemain ?? "0";
    message.pollIndex = object.pollIndex ?? "0";
    message.templateId = object.templateId ?? "0";
    return message;
  },
};

function createBaseWebcastRankTextMessage(): WebcastRankTextMessage {
  return {
    common: undefined,
    scene: 0,
    ownerIdxBeforeUpdate: "0",
    ownerIdxAfterUpdate: "0",
    selfGetBadgeMsg: undefined,
    otherGetBadgeMsg: undefined,
    curUserId: "0",
  };
}

export const WebcastRankTextMessageDecoder: MessageFns<WebcastRankTextMessage> = {
  encode(message: WebcastRankTextMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.scene !== 0) {
      writer.uint32(16).int32(message.scene);
    }
    if (message.ownerIdxBeforeUpdate !== "0") {
      writer.uint32(24).int64(message.ownerIdxBeforeUpdate);
    }
    if (message.ownerIdxAfterUpdate !== "0") {
      writer.uint32(32).int64(message.ownerIdxAfterUpdate);
    }
    if (message.selfGetBadgeMsg !== undefined) {
      TextDecoder.encode(message.selfGetBadgeMsg, writer.uint32(42).fork()).join();
    }
    if (message.otherGetBadgeMsg !== undefined) {
      TextDecoder.encode(message.otherGetBadgeMsg, writer.uint32(50).fork()).join();
    }
    if (message.curUserId !== "0") {
      writer.uint32(56).int64(message.curUserId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRankTextMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRankTextMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.scene = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ownerIdxBeforeUpdate = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ownerIdxAfterUpdate = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.selfGetBadgeMsg = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.otherGetBadgeMsg = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.curUserId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRankTextMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      scene: isSet(object.scene) ? rankTestMessageSceneFromJSON(object.scene) : 0,
      ownerIdxBeforeUpdate: isSet(object.ownerIdxBeforeUpdate) ? globalThis.String(object.ownerIdxBeforeUpdate) : "0",
      ownerIdxAfterUpdate: isSet(object.ownerIdxAfterUpdate) ? globalThis.String(object.ownerIdxAfterUpdate) : "0",
      selfGetBadgeMsg: isSet(object.selfGetBadgeMsg) ? Text.fromJSON(object.selfGetBadgeMsg) : undefined,
      otherGetBadgeMsg: isSet(object.otherGetBadgeMsg) ? Text.fromJSON(object.otherGetBadgeMsg) : undefined,
      curUserId: isSet(object.curUserId) ? globalThis.String(object.curUserId) : "0",
    };
  },

  toJSON(message: WebcastRankTextMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.scene !== 0) {
      obj.scene = rankTestMessageSceneToJSON(message.scene);
    }
    if (message.ownerIdxBeforeUpdate !== "0") {
      obj.ownerIdxBeforeUpdate = message.ownerIdxBeforeUpdate;
    }
    if (message.ownerIdxAfterUpdate !== "0") {
      obj.ownerIdxAfterUpdate = message.ownerIdxAfterUpdate;
    }
    if (message.selfGetBadgeMsg !== undefined) {
      obj.selfGetBadgeMsg = Text.toJSON(message.selfGetBadgeMsg);
    }
    if (message.otherGetBadgeMsg !== undefined) {
      obj.otherGetBadgeMsg = Text.toJSON(message.otherGetBadgeMsg);
    }
    if (message.curUserId !== "0") {
      obj.curUserId = message.curUserId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRankTextMessage>, I>>(base?: I): WebcastRankTextMessage {
    return WebcastRankTextMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRankTextMessage>, I>>(object: I): WebcastRankTextMessage {
    const message = createBaseWebcastRankTextMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.scene = object.scene ?? 0;
    message.ownerIdxBeforeUpdate = object.ownerIdxBeforeUpdate ?? "0";
    message.ownerIdxAfterUpdate = object.ownerIdxAfterUpdate ?? "0";
    message.selfGetBadgeMsg = (object.selfGetBadgeMsg !== undefined && object.selfGetBadgeMsg !== null)
      ? Text.fromPartial(object.selfGetBadgeMsg)
      : undefined;
    message.otherGetBadgeMsg = (object.otherGetBadgeMsg !== undefined && object.otherGetBadgeMsg !== null)
      ? Text.fromPartial(object.otherGetBadgeMsg)
      : undefined;
    message.curUserId = object.curUserId ?? "0";
    return message;
  },
};

function createBaseWebcastLinkMicBattlePunishFinish(): WebcastLinkMicBattlePunishFinish {
  return { common: undefined, channelId: "0", opUid: "0", reason: 0, battleId: "0", battleSettings: undefined };
}

export const WebcastLinkMicBattlePunishFinishDecoder: MessageFns<WebcastLinkMicBattlePunishFinish> = {
  encode(message: WebcastLinkMicBattlePunishFinish, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.channelId !== "0") {
      writer.uint32(16).int64(message.channelId);
    }
    if (message.opUid !== "0") {
      writer.uint32(24).int64(message.opUid);
    }
    if (message.reason !== 0) {
      writer.uint32(32).int32(message.reason);
    }
    if (message.battleId !== "0") {
      writer.uint32(40).int64(message.battleId);
    }
    if (message.battleSettings !== undefined) {
      BattleSettingDecoder.encode(message.battleSettings, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicBattlePunishFinish {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicBattlePunishFinish();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.channelId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.opUid = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.battleId = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.battleSettings = BattleSettingDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicBattlePunishFinish {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "0",
      opUid: isSet(object.opUid) ? globalThis.String(object.opUid) : "0",
      reason: isSet(object.reason) ? reasonFromJSON(object.reason) : 0,
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "0",
      battleSettings: isSet(object.battleSettings) ? BattleSetting.fromJSON(object.battleSettings) : undefined,
    };
  },

  toJSON(message: WebcastLinkMicBattlePunishFinish): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.channelId !== "0") {
      obj.channelId = message.channelId;
    }
    if (message.opUid !== "0") {
      obj.opUid = message.opUid;
    }
    if (message.reason !== 0) {
      obj.reason = reasonToJSON(message.reason);
    }
    if (message.battleId !== "0") {
      obj.battleId = message.battleId;
    }
    if (message.battleSettings !== undefined) {
      obj.battleSettings = BattleSetting.toJSON(message.battleSettings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicBattlePunishFinish>, I>>(
    base?: I,
  ): WebcastLinkMicBattlePunishFinish {
    return WebcastLinkMicBattlePunishFinish.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicBattlePunishFinish>, I>>(
    object: I,
  ): WebcastLinkMicBattlePunishFinish {
    const message = createBaseWebcastLinkMicBattlePunishFinish();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.channelId = object.channelId ?? "0";
    message.opUid = object.opUid ?? "0";
    message.reason = object.reason ?? 0;
    message.battleId = object.battleId ?? "0";
    message.battleSettings = (object.battleSettings !== undefined && object.battleSettings !== null)
      ? BattleSetting.fromPartial(object.battleSettings)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage(): WebcastLinkmicBattleTaskMessage {
  return {
    common: undefined,
    battleTaskMessageType: 0,
    taskStart: undefined,
    taskUpdate: undefined,
    taskSettle: undefined,
    rewardSettle: undefined,
    battleId: "0",
  };
}

export const WebcastLinkmicBattleTaskMessageDecoder: MessageFns<WebcastLinkmicBattleTaskMessage> = {
  encode(message: WebcastLinkmicBattleTaskMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.battleTaskMessageType !== 0) {
      writer.uint32(16).int32(message.battleTaskMessageType);
    }
    if (message.taskStart !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleTaskStartDecoder.encode(message.taskStart, writer.uint32(26).fork()).join();
    }
    if (message.taskUpdate !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleTaskUpdateDecoder.encode(message.taskUpdate, writer.uint32(34).fork()).join();
    }
    if (message.taskSettle !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleTaskSettleDecoder.encode(message.taskSettle, writer.uint32(42).fork()).join();
    }
    if (message.rewardSettle !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleRewardSettleDecoder.encode(message.rewardSettle, writer.uint32(50).fork()).join();
    }
    if (message.battleId !== "0") {
      writer.uint32(160).int64(message.battleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkmicBattleTaskMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.battleTaskMessageType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.taskStart = WebcastLinkmicBattleTaskMessage_BattleTaskStartDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.taskUpdate = WebcastLinkmicBattleTaskMessage_BattleTaskUpdateDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.taskSettle = WebcastLinkmicBattleTaskMessage_BattleTaskSettleDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rewardSettle = WebcastLinkmicBattleTaskMessage_BattleRewardSettleDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.battleId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      battleTaskMessageType: isSet(object.battleTaskMessageType)
        ? battleTaskMessageTypeFromJSON(object.battleTaskMessageType)
        : 0,
      taskStart: isSet(object.taskStart)
        ? WebcastLinkmicBattleTaskMessage_BattleTaskStart.fromJSON(object.taskStart)
        : undefined,
      taskUpdate: isSet(object.taskUpdate)
        ? WebcastLinkmicBattleTaskMessage_BattleTaskUpdate.fromJSON(object.taskUpdate)
        : undefined,
      taskSettle: isSet(object.taskSettle)
        ? WebcastLinkmicBattleTaskMessage_BattleTaskSettle.fromJSON(object.taskSettle)
        : undefined,
      rewardSettle: isSet(object.rewardSettle)
        ? WebcastLinkmicBattleTaskMessage_BattleRewardSettle.fromJSON(object.rewardSettle)
        : undefined,
      battleId: isSet(object.battleId) ? globalThis.String(object.battleId) : "0",
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.battleTaskMessageType !== 0) {
      obj.battleTaskMessageType = battleTaskMessageTypeToJSON(message.battleTaskMessageType);
    }
    if (message.taskStart !== undefined) {
      obj.taskStart = WebcastLinkmicBattleTaskMessage_BattleTaskStart.toJSON(message.taskStart);
    }
    if (message.taskUpdate !== undefined) {
      obj.taskUpdate = WebcastLinkmicBattleTaskMessage_BattleTaskUpdate.toJSON(message.taskUpdate);
    }
    if (message.taskSettle !== undefined) {
      obj.taskSettle = WebcastLinkmicBattleTaskMessage_BattleTaskSettle.toJSON(message.taskSettle);
    }
    if (message.rewardSettle !== undefined) {
      obj.rewardSettle = WebcastLinkmicBattleTaskMessage_BattleRewardSettle.toJSON(message.rewardSettle);
    }
    if (message.battleId !== "0") {
      obj.battleId = message.battleId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage>, I>>(base?: I): WebcastLinkmicBattleTaskMessage {
    return WebcastLinkmicBattleTaskMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage {
    const message = createBaseWebcastLinkmicBattleTaskMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.battleTaskMessageType = object.battleTaskMessageType ?? 0;
    message.taskStart = (object.taskStart !== undefined && object.taskStart !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleTaskStart.fromPartial(object.taskStart)
      : undefined;
    message.taskUpdate = (object.taskUpdate !== undefined && object.taskUpdate !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleTaskUpdate.fromPartial(object.taskUpdate)
      : undefined;
    message.taskSettle = (object.taskSettle !== undefined && object.taskSettle !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleTaskSettle.fromPartial(object.taskSettle)
      : undefined;
    message.rewardSettle = (object.rewardSettle !== undefined && object.rewardSettle !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleRewardSettle.fromPartial(object.rewardSettle)
      : undefined;
    message.battleId = object.battleId ?? "0";
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt(): WebcastLinkmicBattleTaskMessage_BattlePrompt {
  return { promptKey: "", promptElements: [] };
}

export const WebcastLinkmicBattleTaskMessage_BattlePromptDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattlePrompt> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattlePrompt,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.promptKey !== "") {
      writer.uint32(10).string(message.promptKey);
    }
    for (const v of message.promptElements) {
      WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElemDecoder.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkmicBattleTaskMessage_BattlePrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.promptKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.promptElements.push(
            WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElemDecoder.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattlePrompt {
    return {
      promptKey: isSet(object.promptKey) ? globalThis.String(object.promptKey) : "",
      promptElements: globalThis.Array.isArray(object?.promptElements)
        ? object.promptElements.map((e: any) =>
          WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattlePrompt): unknown {
    const obj: any = {};
    if (message.promptKey !== "") {
      obj.promptKey = message.promptKey;
    }
    if (message.promptElements?.length) {
      obj.promptElements = message.promptElements.map((e) =>
        WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattlePrompt>, I>>(
    base?: I,
  ): WebcastLinkmicBattleTaskMessage_BattlePrompt {
    return WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattlePrompt>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage_BattlePrompt {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt();
    message.promptKey = object.promptKey ?? "";
    message.promptElements =
      object.promptElements?.map((e) => WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem(): WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem {
  return { promptFieldKey: "", promptFieldValue: "" };
}

export const WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElemDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.promptFieldKey !== "") {
      writer.uint32(10).string(message.promptFieldKey);
    }
    if (message.promptFieldValue !== "") {
      writer.uint32(18).string(message.promptFieldValue);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.promptFieldKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.promptFieldValue = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem {
    return {
      promptFieldKey: isSet(object.promptFieldKey) ? globalThis.String(object.promptFieldKey) : "",
      promptFieldValue: isSet(object.promptFieldValue) ? globalThis.String(object.promptFieldValue) : "",
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem): unknown {
    const obj: any = {};
    if (message.promptFieldKey !== "") {
      obj.promptFieldKey = message.promptFieldKey;
    }
    if (message.promptFieldValue !== "") {
      obj.promptFieldValue = message.promptFieldValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem>, I>>(
    base?: I,
  ): WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem {
    return WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem();
    message.promptFieldKey = object.promptFieldKey ?? "";
    message.promptFieldValue = object.promptFieldValue ?? "";
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart(): WebcastLinkmicBattleTaskMessage_BattleTaskStart {
  return { battleBonusConfig: undefined };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskStartDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskStart> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.battleBonusConfig !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfigDecoder.encode(
        message.battleBonusConfig,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkmicBattleTaskMessage_BattleTaskStart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.battleBonusConfig = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfigDecoder.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskStart {
    return {
      battleBonusConfig: isSet(object.battleBonusConfig)
        ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig.fromJSON(object.battleBonusConfig)
        : undefined,
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskStart): unknown {
    const obj: any = {};
    if (message.battleBonusConfig !== undefined) {
      obj.battleBonusConfig = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig.toJSON(
        message.battleBonusConfig,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart>, I>>(
    base?: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart {
    return WebcastLinkmicBattleTaskMessage_BattleTaskStart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart();
    message.battleBonusConfig = (object.battleBonusConfig !== undefined && object.battleBonusConfig !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig.fromPartial(object.battleBonusConfig)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig(): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig {
  return {
    previewStartTime: "0",
    previewPeriodConfig: [],
    taskPeriodConfig: undefined,
    rewardPeriodConfig: undefined,
    taskGiftGuide: {},
    previewStartTimestamp: "0",
    previewClickActionSchemaUrl: "",
  };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfigDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.previewStartTime !== "0") {
      writer.uint32(8).int64(message.previewStartTime);
    }
    for (const v of message.previewPeriodConfig) {
      WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriodDecoder.encode(
        v!,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.taskPeriodConfig !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfigDecoder.encode(
        message.taskPeriodConfig,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.rewardPeriodConfig !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfigDecoder.encode(
        message.rewardPeriodConfig,
        writer.uint32(34).fork(),
      ).join();
    }
    Object.entries(message.taskGiftGuide).forEach(([key, value]) => {
      WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntryDecoder.encode({
        key: key as any,
        value,
      }, writer.uint32(42).fork()).join();
    });
    if (message.previewStartTimestamp !== "0") {
      writer.uint32(48).int64(message.previewStartTimestamp);
    }
    if (message.previewClickActionSchemaUrl !== "") {
      writer.uint32(58).string(message.previewClickActionSchemaUrl);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.previewStartTime = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.previewPeriodConfig.push(
            WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriodDecoder.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.taskPeriodConfig = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfigDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rewardPeriodConfig =
            WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfigDecoder.decode(
              reader,
              reader.uint32(),
            );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntryDecoder.decode(
            reader,
            reader.uint32(),
          );
          if (entry5.value !== undefined) {
            message.taskGiftGuide[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.previewStartTimestamp = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.previewClickActionSchemaUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig {
    return {
      previewStartTime: isSet(object.previewStartTime) ? globalThis.String(object.previewStartTime) : "0",
      previewPeriodConfig: globalThis.Array.isArray(object?.previewPeriodConfig)
        ? object.previewPeriodConfig.map((e: any) =>
          WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod.fromJSON(e)
        )
        : [],
      taskPeriodConfig: isSet(object.taskPeriodConfig)
        ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig.fromJSON(
          object.taskPeriodConfig,
        )
        : undefined,
      rewardPeriodConfig: isSet(object.rewardPeriodConfig)
        ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig.fromJSON(
          object.rewardPeriodConfig,
        )
        : undefined,
      taskGiftGuide: isObject(object.taskGiftGuide)
        ? Object.entries(object.taskGiftGuide).reduce<
          { [key: string]: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide }
        >((acc, [key, value]) => {
          acc[key] = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide
            .fromJSON(value);
          return acc;
        }, {})
        : {},
      previewStartTimestamp: isSet(object.previewStartTimestamp)
        ? globalThis.String(object.previewStartTimestamp)
        : "0",
      previewClickActionSchemaUrl: isSet(object.previewClickActionSchemaUrl)
        ? globalThis.String(object.previewClickActionSchemaUrl)
        : "",
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig): unknown {
    const obj: any = {};
    if (message.previewStartTime !== "0") {
      obj.previewStartTime = message.previewStartTime;
    }
    if (message.previewPeriodConfig?.length) {
      obj.previewPeriodConfig = message.previewPeriodConfig.map((e) =>
        WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod.toJSON(e)
      );
    }
    if (message.taskPeriodConfig !== undefined) {
      obj.taskPeriodConfig = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig.toJSON(
        message.taskPeriodConfig,
      );
    }
    if (message.rewardPeriodConfig !== undefined) {
      obj.rewardPeriodConfig = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig
        .toJSON(message.rewardPeriodConfig);
    }
    if (message.taskGiftGuide) {
      const entries = Object.entries(message.taskGiftGuide);
      if (entries.length > 0) {
        obj.taskGiftGuide = {};
        entries.forEach(([k, v]) => {
          obj.taskGiftGuide[k] =
            WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide.toJSON(v);
        });
      }
    }
    if (message.previewStartTimestamp !== "0") {
      obj.previewStartTimestamp = message.previewStartTimestamp;
    }
    if (message.previewClickActionSchemaUrl !== "") {
      obj.previewClickActionSchemaUrl = message.previewClickActionSchemaUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig>, I>>(
    base?: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig {
    return WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig();
    message.previewStartTime = object.previewStartTime ?? "0";
    message.previewPeriodConfig =
      object.previewPeriodConfig?.map((e) =>
        WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod.fromPartial(e)
      ) || [];
    message.taskPeriodConfig = (object.taskPeriodConfig !== undefined && object.taskPeriodConfig !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig.fromPartial(
        object.taskPeriodConfig,
      )
      : undefined;
    message.rewardPeriodConfig = (object.rewardPeriodConfig !== undefined && object.rewardPeriodConfig !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig.fromPartial(
        object.rewardPeriodConfig,
      )
      : undefined;
    message.taskGiftGuide = Object.entries(object.taskGiftGuide ?? {}).reduce<
      { [key: string]: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide
          .fromPartial(value);
      }
      return acc;
    }, {});
    message.previewStartTimestamp = object.previewStartTimestamp ?? "0";
    message.previewClickActionSchemaUrl = object.previewClickActionSchemaUrl ?? "";
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry(): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry {
  return { key: "0", value: undefined };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntryDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "0") {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuideDecoder.encode(
        message.value,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuideDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "0",
      value: isSet(object.value)
        ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide.fromJSON(
          object.value,
        )
        : undefined,
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry): unknown {
    const obj: any = {};
    if (message.key !== "0") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide.toJSON(
        message.value,
      );
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry>,
      I
    >,
  >(base?: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry {
    return WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry>,
      I
    >,
  >(object: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry();
    message.key = object.key ?? "0";
    message.value = (object.value !== undefined && object.value !== null)
      ? WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide.fromPartial(
        object.value,
      )
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod(): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod {
  return { duration: "0", promot: undefined, icon: undefined };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriodDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.duration !== "0") {
      writer.uint32(8).int64(message.duration);
    }
    if (message.promot !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.promot, writer.uint32(18).fork()).join();
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(202).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.promot = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod {
    return {
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      promot: isSet(object.promot) ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.promot) : undefined,
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod): unknown {
    const obj: any = {};
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.promot !== undefined) {
      obj.promot = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.promot);
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod>, I>,
  >(base?: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod {
    return WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod>, I>,
  >(object: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod();
    message.duration = object.duration ?? "0";
    message.promot = (object.promot !== undefined && object.promot !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.promot)
      : undefined;
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig(): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig {
  return {
    taskStartTime: "0",
    duration: "0",
    targetStartTimestamp: "0",
    clickAction: 0,
    clickToastPrompt: undefined,
    promptType: 0,
    taskStaticPrompt: undefined,
    progressTarget: "0",
    targetType: 0,
    icon: undefined,
    clickActionSchemaUrl: "",
  };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfigDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.taskStartTime !== "0") {
      writer.uint32(8).int64(message.taskStartTime);
    }
    if (message.duration !== "0") {
      writer.uint32(16).int64(message.duration);
    }
    if (message.targetStartTimestamp !== "0") {
      writer.uint32(24).int64(message.targetStartTimestamp);
    }
    if (message.clickAction !== 0) {
      writer.uint32(88).int32(message.clickAction);
    }
    if (message.clickToastPrompt !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.clickToastPrompt, writer.uint32(98).fork()).join();
    }
    if (message.promptType !== 0) {
      writer.uint32(168).int32(message.promptType);
    }
    if (message.taskStaticPrompt !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.taskStaticPrompt, writer.uint32(178).fork()).join();
    }
    if (message.progressTarget !== "0") {
      writer.uint32(184).int64(message.progressTarget);
    }
    if (message.targetType !== 0) {
      writer.uint32(192).int32(message.targetType);
    }
    if (message.icon !== undefined) {
      ImageDecoder.encode(message.icon, writer.uint32(202).fork()).join();
    }
    if (message.clickActionSchemaUrl !== "") {
      writer.uint32(210).string(message.clickActionSchemaUrl);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.taskStartTime = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetStartTimestamp = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.clickAction = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.clickToastPrompt = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.promptType = reader.int32();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.taskStaticPrompt = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.progressTarget = reader.int64().toString();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.targetType = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.icon = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.clickActionSchemaUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig {
    return {
      taskStartTime: isSet(object.taskStartTime) ? globalThis.String(object.taskStartTime) : "0",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      targetStartTimestamp: isSet(object.targetStartTimestamp) ? globalThis.String(object.targetStartTimestamp) : "0",
      clickAction: isSet(object.clickAction) ? globalThis.Number(object.clickAction) : 0,
      clickToastPrompt: isSet(object.clickToastPrompt)
        ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.clickToastPrompt)
        : undefined,
      promptType: isSet(object.promptType) ? globalThis.Number(object.promptType) : 0,
      taskStaticPrompt: isSet(object.taskStaticPrompt)
        ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.taskStaticPrompt)
        : undefined,
      progressTarget: isSet(object.progressTarget) ? globalThis.String(object.progressTarget) : "0",
      targetType: isSet(object.targetType) ? globalThis.Number(object.targetType) : 0,
      icon: isSet(object.icon) ? Image.fromJSON(object.icon) : undefined,
      clickActionSchemaUrl: isSet(object.clickActionSchemaUrl) ? globalThis.String(object.clickActionSchemaUrl) : "",
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig): unknown {
    const obj: any = {};
    if (message.taskStartTime !== "0") {
      obj.taskStartTime = message.taskStartTime;
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.targetStartTimestamp !== "0") {
      obj.targetStartTimestamp = message.targetStartTimestamp;
    }
    if (message.clickAction !== 0) {
      obj.clickAction = Math.round(message.clickAction);
    }
    if (message.clickToastPrompt !== undefined) {
      obj.clickToastPrompt = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.clickToastPrompt);
    }
    if (message.promptType !== 0) {
      obj.promptType = Math.round(message.promptType);
    }
    if (message.taskStaticPrompt !== undefined) {
      obj.taskStaticPrompt = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.taskStaticPrompt);
    }
    if (message.progressTarget !== "0") {
      obj.progressTarget = message.progressTarget;
    }
    if (message.targetType !== 0) {
      obj.targetType = Math.round(message.targetType);
    }
    if (message.icon !== undefined) {
      obj.icon = Image.toJSON(message.icon);
    }
    if (message.clickActionSchemaUrl !== "") {
      obj.clickActionSchemaUrl = message.clickActionSchemaUrl;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig>, I>,
  >(base?: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig {
    return WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig>, I>,
  >(object: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig();
    message.taskStartTime = object.taskStartTime ?? "0";
    message.duration = object.duration ?? "0";
    message.targetStartTimestamp = object.targetStartTimestamp ?? "0";
    message.clickAction = object.clickAction ?? 0;
    message.clickToastPrompt = (object.clickToastPrompt !== undefined && object.clickToastPrompt !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.clickToastPrompt)
      : undefined;
    message.promptType = object.promptType ?? 0;
    message.taskStaticPrompt = (object.taskStaticPrompt !== undefined && object.taskStaticPrompt !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.taskStaticPrompt)
      : undefined;
    message.progressTarget = object.progressTarget ?? "0";
    message.targetType = object.targetType ?? 0;
    message.icon = (object.icon !== undefined && object.icon !== null) ? Image.fromPartial(object.icon) : undefined;
    message.clickActionSchemaUrl = object.clickActionSchemaUrl ?? "";
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig(): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig {
  return {
    rewardStartTime: "0",
    duration: "0",
    rewardMultiple: 0,
    rewardStartTimestamp: "0",
    rewardPraparePrompt: undefined,
    rewardingPrompt: undefined,
    clickPrompt: undefined,
  };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfigDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.rewardStartTime !== "0") {
      writer.uint32(8).int64(message.rewardStartTime);
    }
    if (message.duration !== "0") {
      writer.uint32(16).int64(message.duration);
    }
    if (message.rewardMultiple !== 0) {
      writer.uint32(24).int32(message.rewardMultiple);
    }
    if (message.rewardStartTimestamp !== "0") {
      writer.uint32(32).int64(message.rewardStartTimestamp);
    }
    if (message.rewardPraparePrompt !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.rewardPraparePrompt, writer.uint32(90).fork()).join();
    }
    if (message.rewardingPrompt !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.rewardingPrompt, writer.uint32(98).fork()).join();
    }
    if (message.clickPrompt !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.clickPrompt, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rewardStartTime = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rewardMultiple = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rewardStartTimestamp = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.rewardPraparePrompt = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.rewardingPrompt = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.clickPrompt = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig {
    return {
      rewardStartTime: isSet(object.rewardStartTime) ? globalThis.String(object.rewardStartTime) : "0",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      rewardMultiple: isSet(object.rewardMultiple) ? globalThis.Number(object.rewardMultiple) : 0,
      rewardStartTimestamp: isSet(object.rewardStartTimestamp) ? globalThis.String(object.rewardStartTimestamp) : "0",
      rewardPraparePrompt: isSet(object.rewardPraparePrompt)
        ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.rewardPraparePrompt)
        : undefined,
      rewardingPrompt: isSet(object.rewardingPrompt)
        ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.rewardingPrompt)
        : undefined,
      clickPrompt: isSet(object.clickPrompt)
        ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.clickPrompt)
        : undefined,
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig): unknown {
    const obj: any = {};
    if (message.rewardStartTime !== "0") {
      obj.rewardStartTime = message.rewardStartTime;
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.rewardMultiple !== 0) {
      obj.rewardMultiple = Math.round(message.rewardMultiple);
    }
    if (message.rewardStartTimestamp !== "0") {
      obj.rewardStartTimestamp = message.rewardStartTimestamp;
    }
    if (message.rewardPraparePrompt !== undefined) {
      obj.rewardPraparePrompt = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.rewardPraparePrompt);
    }
    if (message.rewardingPrompt !== undefined) {
      obj.rewardingPrompt = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.rewardingPrompt);
    }
    if (message.clickPrompt !== undefined) {
      obj.clickPrompt = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.clickPrompt);
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig>,
      I
    >,
  >(base?: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig {
    return WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig>,
      I
    >,
  >(object: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig();
    message.rewardStartTime = object.rewardStartTime ?? "0";
    message.duration = object.duration ?? "0";
    message.rewardMultiple = object.rewardMultiple ?? 0;
    message.rewardStartTimestamp = object.rewardStartTimestamp ?? "0";
    message.rewardPraparePrompt = (object.rewardPraparePrompt !== undefined && object.rewardPraparePrompt !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.rewardPraparePrompt)
      : undefined;
    message.rewardingPrompt = (object.rewardingPrompt !== undefined && object.rewardingPrompt !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.rewardingPrompt)
      : undefined;
    message.clickPrompt = (object.clickPrompt !== undefined && object.clickPrompt !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.clickPrompt)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide(): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide {
  return {
    guidePrompt: undefined,
    promptType: 0,
    disappearDuration: 0,
    iconImage: undefined,
    giftImage: undefined,
    recommendGiftId: "0",
    recommendGiftCount: 0,
    guideContent: undefined,
  };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuideDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.guidePrompt !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.guidePrompt, writer.uint32(10).fork()).join();
    }
    if (message.promptType !== 0) {
      writer.uint32(16).int32(message.promptType);
    }
    if (message.disappearDuration !== 0) {
      writer.uint32(24).int32(message.disappearDuration);
    }
    if (message.iconImage !== undefined) {
      ImageDecoder.encode(message.iconImage, writer.uint32(90).fork()).join();
    }
    if (message.giftImage !== undefined) {
      ImageDecoder.encode(message.giftImage, writer.uint32(98).fork()).join();
    }
    if (message.recommendGiftId !== "0") {
      writer.uint32(168).int64(message.recommendGiftId);
    }
    if (message.recommendGiftCount !== 0) {
      writer.uint32(176).int32(message.recommendGiftCount);
    }
    if (message.guideContent !== undefined) {
      TextDecoder.encode(message.guideContent, writer.uint32(186).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guidePrompt = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.promptType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.disappearDuration = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.iconImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.giftImage = ImageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.recommendGiftId = reader.int64().toString();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.recommendGiftCount = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.guideContent = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide {
    return {
      guidePrompt: isSet(object.guidePrompt)
        ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.guidePrompt)
        : undefined,
      promptType: isSet(object.promptType) ? globalThis.Number(object.promptType) : 0,
      disappearDuration: isSet(object.disappearDuration) ? globalThis.Number(object.disappearDuration) : 0,
      iconImage: isSet(object.iconImage) ? Image.fromJSON(object.iconImage) : undefined,
      giftImage: isSet(object.giftImage) ? Image.fromJSON(object.giftImage) : undefined,
      recommendGiftId: isSet(object.recommendGiftId) ? globalThis.String(object.recommendGiftId) : "0",
      recommendGiftCount: isSet(object.recommendGiftCount) ? globalThis.Number(object.recommendGiftCount) : 0,
      guideContent: isSet(object.guideContent) ? Text.fromJSON(object.guideContent) : undefined,
    };
  },

  toJSON(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide,
  ): unknown {
    const obj: any = {};
    if (message.guidePrompt !== undefined) {
      obj.guidePrompt = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.guidePrompt);
    }
    if (message.promptType !== 0) {
      obj.promptType = Math.round(message.promptType);
    }
    if (message.disappearDuration !== 0) {
      obj.disappearDuration = Math.round(message.disappearDuration);
    }
    if (message.iconImage !== undefined) {
      obj.iconImage = Image.toJSON(message.iconImage);
    }
    if (message.giftImage !== undefined) {
      obj.giftImage = Image.toJSON(message.giftImage);
    }
    if (message.recommendGiftId !== "0") {
      obj.recommendGiftId = message.recommendGiftId;
    }
    if (message.recommendGiftCount !== 0) {
      obj.recommendGiftCount = Math.round(message.recommendGiftCount);
    }
    if (message.guideContent !== undefined) {
      obj.guideContent = Text.toJSON(message.guideContent);
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide>,
      I
    >,
  >(base?: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide {
    return WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide>,
      I
    >,
  >(object: I): WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide {
    const message =
      createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide();
    message.guidePrompt = (object.guidePrompt !== undefined && object.guidePrompt !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.guidePrompt)
      : undefined;
    message.promptType = object.promptType ?? 0;
    message.disappearDuration = object.disappearDuration ?? 0;
    message.iconImage = (object.iconImage !== undefined && object.iconImage !== null)
      ? Image.fromPartial(object.iconImage)
      : undefined;
    message.giftImage = (object.giftImage !== undefined && object.giftImage !== null)
      ? Image.fromPartial(object.giftImage)
      : undefined;
    message.recommendGiftId = object.recommendGiftId ?? "0";
    message.recommendGiftCount = object.recommendGiftCount ?? 0;
    message.guideContent = (object.guideContent !== undefined && object.guideContent !== null)
      ? Text.fromPartial(object.guideContent)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskUpdate(): WebcastLinkmicBattleTaskMessage_BattleTaskUpdate {
  return { taskProgress: "0", fromUserUid: "0", promptKey: "", logId: "" };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskUpdateDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskUpdate> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskUpdate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.taskProgress !== "0") {
      writer.uint32(8).int64(message.taskProgress);
    }
    if (message.fromUserUid !== "0") {
      writer.uint32(16).int64(message.fromUserUid);
    }
    if (message.promptKey !== "") {
      writer.uint32(26).string(message.promptKey);
    }
    if (message.logId !== "") {
      writer.uint32(170).string(message.logId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkmicBattleTaskMessage_BattleTaskUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.taskProgress = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromUserUid = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.promptKey = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.logId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskUpdate {
    return {
      taskProgress: isSet(object.taskProgress) ? globalThis.String(object.taskProgress) : "0",
      fromUserUid: isSet(object.fromUserUid) ? globalThis.String(object.fromUserUid) : "0",
      promptKey: isSet(object.promptKey) ? globalThis.String(object.promptKey) : "",
      logId: isSet(object.logId) ? globalThis.String(object.logId) : "",
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskUpdate): unknown {
    const obj: any = {};
    if (message.taskProgress !== "0") {
      obj.taskProgress = message.taskProgress;
    }
    if (message.fromUserUid !== "0") {
      obj.fromUserUid = message.fromUserUid;
    }
    if (message.promptKey !== "") {
      obj.promptKey = message.promptKey;
    }
    if (message.logId !== "") {
      obj.logId = message.logId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskUpdate>, I>>(
    base?: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskUpdate {
    return WebcastLinkmicBattleTaskMessage_BattleTaskUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskUpdate>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskUpdate {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskUpdate();
    message.taskProgress = object.taskProgress ?? "0";
    message.fromUserUid = object.fromUserUid ?? "0";
    message.promptKey = object.promptKey ?? "";
    message.logId = object.logId ?? "";
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskSettle(): WebcastLinkmicBattleTaskMessage_BattleTaskSettle {
  return { taskResult: 0, rewardStartTime: "0", rewardStartTimestamp: "0" };
}

export const WebcastLinkmicBattleTaskMessage_BattleTaskSettleDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleTaskSettle> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleTaskSettle,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.taskResult !== 0) {
      writer.uint32(8).int32(message.taskResult);
    }
    if (message.rewardStartTime !== "0") {
      writer.uint32(16).int64(message.rewardStartTime);
    }
    if (message.rewardStartTimestamp !== "0") {
      writer.uint32(24).int64(message.rewardStartTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkmicBattleTaskMessage_BattleTaskSettle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskSettle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.taskResult = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rewardStartTime = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rewardStartTimestamp = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleTaskSettle {
    return {
      taskResult: isSet(object.taskResult)
        ? webcastLinkmicBattleTaskMessage_BattleTaskSettle_ResultFromJSON(object.taskResult)
        : 0,
      rewardStartTime: isSet(object.rewardStartTime) ? globalThis.String(object.rewardStartTime) : "0",
      rewardStartTimestamp: isSet(object.rewardStartTimestamp) ? globalThis.String(object.rewardStartTimestamp) : "0",
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleTaskSettle): unknown {
    const obj: any = {};
    if (message.taskResult !== 0) {
      obj.taskResult = webcastLinkmicBattleTaskMessage_BattleTaskSettle_ResultToJSON(message.taskResult);
    }
    if (message.rewardStartTime !== "0") {
      obj.rewardStartTime = message.rewardStartTime;
    }
    if (message.rewardStartTimestamp !== "0") {
      obj.rewardStartTimestamp = message.rewardStartTimestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskSettle>, I>>(
    base?: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskSettle {
    return WebcastLinkmicBattleTaskMessage_BattleTaskSettle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleTaskSettle>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage_BattleTaskSettle {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskSettle();
    message.taskResult = object.taskResult ?? 0;
    message.rewardStartTime = object.rewardStartTime ?? "0";
    message.rewardStartTimestamp = object.rewardStartTimestamp ?? "0";
    return message;
  },
};

function createBaseWebcastLinkmicBattleTaskMessage_BattleRewardSettle(): WebcastLinkmicBattleTaskMessage_BattleRewardSettle {
  return { rewardSettlePrompt: undefined, status: 0 };
}

export const WebcastLinkmicBattleTaskMessage_BattleRewardSettleDecoder: MessageFns<WebcastLinkmicBattleTaskMessage_BattleRewardSettle> = {
  encode(
    message: WebcastLinkmicBattleTaskMessage_BattleRewardSettle,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.rewardSettlePrompt !== undefined) {
      WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.rewardSettlePrompt, writer.uint32(10).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkmicBattleTaskMessage_BattleRewardSettle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleRewardSettle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewardSettlePrompt = WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkmicBattleTaskMessage_BattleRewardSettle {
    return {
      rewardSettlePrompt: isSet(object.rewardSettlePrompt)
        ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromJSON(object.rewardSettlePrompt)
        : undefined,
      status: isSet(object.status) ? rewardStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: WebcastLinkmicBattleTaskMessage_BattleRewardSettle): unknown {
    const obj: any = {};
    if (message.rewardSettlePrompt !== undefined) {
      obj.rewardSettlePrompt = WebcastLinkmicBattleTaskMessage_BattlePrompt.toJSON(message.rewardSettlePrompt);
    }
    if (message.status !== 0) {
      obj.status = rewardStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleRewardSettle>, I>>(
    base?: I,
  ): WebcastLinkmicBattleTaskMessage_BattleRewardSettle {
    return WebcastLinkmicBattleTaskMessage_BattleRewardSettle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkmicBattleTaskMessage_BattleRewardSettle>, I>>(
    object: I,
  ): WebcastLinkmicBattleTaskMessage_BattleRewardSettle {
    const message = createBaseWebcastLinkmicBattleTaskMessage_BattleRewardSettle();
    message.rewardSettlePrompt = (object.rewardSettlePrompt !== undefined && object.rewardSettlePrompt !== null)
      ? WebcastLinkmicBattleTaskMessage_BattlePrompt.fromPartial(object.rewardSettlePrompt)
      : undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseWebcastLinkMicFanTicketMethod(): WebcastLinkMicFanTicketMethod {
  return { common: undefined, FanTicketRoomNotice: undefined };
}

export const WebcastLinkMicFanTicketMethodDecoder: MessageFns<WebcastLinkMicFanTicketMethod> = {
  encode(message: WebcastLinkMicFanTicketMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.FanTicketRoomNotice !== undefined) {
      FanTicketRoomNoticeContentDecoder.encode(message.FanTicketRoomNotice, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicFanTicketMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicFanTicketMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.FanTicketRoomNotice = FanTicketRoomNoticeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicFanTicketMethod {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      FanTicketRoomNotice: isSet(object.FanTicketRoomNotice)
        ? FanTicketRoomNoticeContent.fromJSON(object.FanTicketRoomNotice)
        : undefined,
    };
  },

  toJSON(message: WebcastLinkMicFanTicketMethod): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.FanTicketRoomNotice !== undefined) {
      obj.FanTicketRoomNotice = FanTicketRoomNoticeContent.toJSON(message.FanTicketRoomNotice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicFanTicketMethod>, I>>(base?: I): WebcastLinkMicFanTicketMethod {
    return WebcastLinkMicFanTicketMethod.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicFanTicketMethod>, I>>(
    object: I,
  ): WebcastLinkMicFanTicketMethod {
    const message = createBaseWebcastLinkMicFanTicketMethod();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.FanTicketRoomNotice = (object.FanTicketRoomNotice !== undefined && object.FanTicketRoomNotice !== null)
      ? FanTicketRoomNoticeContent.fromPartial(object.FanTicketRoomNotice)
      : undefined;
    return message;
  },
};

function createBaseWebcastLinkMicMethod(): WebcastLinkMicMethod {
  return {
    common: undefined,
    messageType: 0,
    accessKey: "",
    anchorLinkmicId: "0",
    userId: "0",
    fanTicket: "0",
    totalLinkMicFanTicket: "0",
    channelId: "0",
    layout: "0",
    vendor: "0",
    dimension: "0",
    theme: "",
    inviteUid: "0",
    reply: 0,
    duration: 0,
    matchType: 0,
    win: false,
    prompts: "",
    toUserId: "0",
    tips: "",
    startTimeMs: "0",
    confluenceType: 0,
    fromRoomId: "0",
    inviteType: 0,
    subType: "0",
    rtcExtInfo: "",
    appId: "",
    appSign: "",
    anchorLinkMicIdStr: "",
    rivalAnchorId: "0",
    rivalLinkmicId: 0,
    rivalLinkmicIdStr: "",
    shouldShowPopup: false,
    rtcJoinChannel: false,
    fanTicketType: 0,
  };
}

export const WebcastLinkMicMethodDecoder: MessageFns<WebcastLinkMicMethod> = {
  encode(message: WebcastLinkMicMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.messageType !== 0) {
      writer.uint32(16).int32(message.messageType);
    }
    if (message.accessKey !== "") {
      writer.uint32(26).string(message.accessKey);
    }
    if (message.anchorLinkmicId !== "0") {
      writer.uint32(32).int64(message.anchorLinkmicId);
    }
    if (message.userId !== "0") {
      writer.uint32(40).int64(message.userId);
    }
    if (message.fanTicket !== "0") {
      writer.uint32(48).int64(message.fanTicket);
    }
    if (message.totalLinkMicFanTicket !== "0") {
      writer.uint32(56).int64(message.totalLinkMicFanTicket);
    }
    if (message.channelId !== "0") {
      writer.uint32(64).int64(message.channelId);
    }
    if (message.layout !== "0") {
      writer.uint32(72).int64(message.layout);
    }
    if (message.vendor !== "0") {
      writer.uint32(80).int64(message.vendor);
    }
    if (message.dimension !== "0") {
      writer.uint32(88).int64(message.dimension);
    }
    if (message.theme !== "") {
      writer.uint32(98).string(message.theme);
    }
    if (message.inviteUid !== "0") {
      writer.uint32(104).int64(message.inviteUid);
    }
    if (message.reply !== 0) {
      writer.uint32(112).int32(message.reply);
    }
    if (message.duration !== 0) {
      writer.uint32(128).int32(message.duration);
    }
    if (message.matchType !== 0) {
      writer.uint32(144).int32(message.matchType);
    }
    if (message.win !== false) {
      writer.uint32(152).bool(message.win);
    }
    if (message.prompts !== "") {
      writer.uint32(162).string(message.prompts);
    }
    if (message.toUserId !== "0") {
      writer.uint32(168).int64(message.toUserId);
    }
    if (message.tips !== "") {
      writer.uint32(202).string(message.tips);
    }
    if (message.startTimeMs !== "0") {
      writer.uint32(208).int64(message.startTimeMs);
    }
    if (message.confluenceType !== 0) {
      writer.uint32(216).int32(message.confluenceType);
    }
    if (message.fromRoomId !== "0") {
      writer.uint32(224).int64(message.fromRoomId);
    }
    if (message.inviteType !== 0) {
      writer.uint32(232).int32(message.inviteType);
    }
    if (message.subType !== "0") {
      writer.uint32(240).int64(message.subType);
    }
    if (message.rtcExtInfo !== "") {
      writer.uint32(258).string(message.rtcExtInfo);
    }
    if (message.appId !== "") {
      writer.uint32(274).string(message.appId);
    }
    if (message.appSign !== "") {
      writer.uint32(282).string(message.appSign);
    }
    if (message.anchorLinkMicIdStr !== "") {
      writer.uint32(298).string(message.anchorLinkMicIdStr);
    }
    if (message.rivalAnchorId !== "0") {
      writer.uint32(304).int64(message.rivalAnchorId);
    }
    if (message.rivalLinkmicId !== 0) {
      writer.uint32(312).int32(message.rivalLinkmicId);
    }
    if (message.rivalLinkmicIdStr !== "") {
      writer.uint32(322).string(message.rivalLinkmicIdStr);
    }
    if (message.shouldShowPopup !== false) {
      writer.uint32(328).bool(message.shouldShowPopup);
    }
    if (message.rtcJoinChannel !== false) {
      writer.uint32(408).bool(message.rtcJoinChannel);
    }
    if (message.fanTicketType !== 0) {
      writer.uint32(416).int32(message.fanTicketType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMicMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMicMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.messageType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.anchorLinkmicId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fanTicket = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.totalLinkMicFanTicket = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.channelId = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.layout = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.vendor = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.dimension = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.theme = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.inviteUid = reader.int64().toString();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.reply = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.matchType = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.win = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.prompts = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.toUserId = reader.int64().toString();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.tips = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.startTimeMs = reader.int64().toString();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.confluenceType = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.fromRoomId = reader.int64().toString();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.inviteType = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.subType = reader.int64().toString();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.rtcExtInfo = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.appId = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.appSign = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.anchorLinkMicIdStr = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.rivalAnchorId = reader.int64().toString();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.rivalLinkmicId = reader.int32();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.rivalLinkmicIdStr = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.shouldShowPopup = reader.bool();
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.rtcJoinChannel = reader.bool();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.fanTicketType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMicMethod {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      messageType: isSet(object.messageType) ? messageTypeFromJSON(object.messageType) : 0,
      accessKey: isSet(object.accessKey) ? globalThis.String(object.accessKey) : "",
      anchorLinkmicId: isSet(object.anchorLinkmicId) ? globalThis.String(object.anchorLinkmicId) : "0",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "0",
      fanTicket: isSet(object.fanTicket) ? globalThis.String(object.fanTicket) : "0",
      totalLinkMicFanTicket: isSet(object.totalLinkMicFanTicket)
        ? globalThis.String(object.totalLinkMicFanTicket)
        : "0",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "0",
      layout: isSet(object.layout) ? globalThis.String(object.layout) : "0",
      vendor: isSet(object.vendor) ? globalThis.String(object.vendor) : "0",
      dimension: isSet(object.dimension) ? globalThis.String(object.dimension) : "0",
      theme: isSet(object.theme) ? globalThis.String(object.theme) : "",
      inviteUid: isSet(object.inviteUid) ? globalThis.String(object.inviteUid) : "0",
      reply: isSet(object.reply) ? globalThis.Number(object.reply) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      matchType: isSet(object.matchType) ? globalThis.Number(object.matchType) : 0,
      win: isSet(object.win) ? globalThis.Boolean(object.win) : false,
      prompts: isSet(object.prompts) ? globalThis.String(object.prompts) : "",
      toUserId: isSet(object.toUserId) ? globalThis.String(object.toUserId) : "0",
      tips: isSet(object.tips) ? globalThis.String(object.tips) : "",
      startTimeMs: isSet(object.startTimeMs) ? globalThis.String(object.startTimeMs) : "0",
      confluenceType: isSet(object.confluenceType) ? globalThis.Number(object.confluenceType) : 0,
      fromRoomId: isSet(object.fromRoomId) ? globalThis.String(object.fromRoomId) : "0",
      inviteType: isSet(object.inviteType) ? globalThis.Number(object.inviteType) : 0,
      subType: isSet(object.subType) ? globalThis.String(object.subType) : "0",
      rtcExtInfo: isSet(object.rtcExtInfo) ? globalThis.String(object.rtcExtInfo) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      appSign: isSet(object.appSign) ? globalThis.String(object.appSign) : "",
      anchorLinkMicIdStr: isSet(object.anchorLinkMicIdStr) ? globalThis.String(object.anchorLinkMicIdStr) : "",
      rivalAnchorId: isSet(object.rivalAnchorId) ? globalThis.String(object.rivalAnchorId) : "0",
      rivalLinkmicId: isSet(object.rivalLinkmicId) ? globalThis.Number(object.rivalLinkmicId) : 0,
      rivalLinkmicIdStr: isSet(object.rivalLinkmicIdStr) ? globalThis.String(object.rivalLinkmicIdStr) : "",
      shouldShowPopup: isSet(object.shouldShowPopup) ? globalThis.Boolean(object.shouldShowPopup) : false,
      rtcJoinChannel: isSet(object.rtcJoinChannel) ? globalThis.Boolean(object.rtcJoinChannel) : false,
      fanTicketType: isSet(object.fanTicketType) ? globalThis.Number(object.fanTicketType) : 0,
    };
  },

  toJSON(message: WebcastLinkMicMethod): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.messageType !== 0) {
      obj.messageType = messageTypeToJSON(message.messageType);
    }
    if (message.accessKey !== "") {
      obj.accessKey = message.accessKey;
    }
    if (message.anchorLinkmicId !== "0") {
      obj.anchorLinkmicId = message.anchorLinkmicId;
    }
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    if (message.fanTicket !== "0") {
      obj.fanTicket = message.fanTicket;
    }
    if (message.totalLinkMicFanTicket !== "0") {
      obj.totalLinkMicFanTicket = message.totalLinkMicFanTicket;
    }
    if (message.channelId !== "0") {
      obj.channelId = message.channelId;
    }
    if (message.layout !== "0") {
      obj.layout = message.layout;
    }
    if (message.vendor !== "0") {
      obj.vendor = message.vendor;
    }
    if (message.dimension !== "0") {
      obj.dimension = message.dimension;
    }
    if (message.theme !== "") {
      obj.theme = message.theme;
    }
    if (message.inviteUid !== "0") {
      obj.inviteUid = message.inviteUid;
    }
    if (message.reply !== 0) {
      obj.reply = Math.round(message.reply);
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.matchType !== 0) {
      obj.matchType = Math.round(message.matchType);
    }
    if (message.win !== false) {
      obj.win = message.win;
    }
    if (message.prompts !== "") {
      obj.prompts = message.prompts;
    }
    if (message.toUserId !== "0") {
      obj.toUserId = message.toUserId;
    }
    if (message.tips !== "") {
      obj.tips = message.tips;
    }
    if (message.startTimeMs !== "0") {
      obj.startTimeMs = message.startTimeMs;
    }
    if (message.confluenceType !== 0) {
      obj.confluenceType = Math.round(message.confluenceType);
    }
    if (message.fromRoomId !== "0") {
      obj.fromRoomId = message.fromRoomId;
    }
    if (message.inviteType !== 0) {
      obj.inviteType = Math.round(message.inviteType);
    }
    if (message.subType !== "0") {
      obj.subType = message.subType;
    }
    if (message.rtcExtInfo !== "") {
      obj.rtcExtInfo = message.rtcExtInfo;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.appSign !== "") {
      obj.appSign = message.appSign;
    }
    if (message.anchorLinkMicIdStr !== "") {
      obj.anchorLinkMicIdStr = message.anchorLinkMicIdStr;
    }
    if (message.rivalAnchorId !== "0") {
      obj.rivalAnchorId = message.rivalAnchorId;
    }
    if (message.rivalLinkmicId !== 0) {
      obj.rivalLinkmicId = Math.round(message.rivalLinkmicId);
    }
    if (message.rivalLinkmicIdStr !== "") {
      obj.rivalLinkmicIdStr = message.rivalLinkmicIdStr;
    }
    if (message.shouldShowPopup !== false) {
      obj.shouldShowPopup = message.shouldShowPopup;
    }
    if (message.rtcJoinChannel !== false) {
      obj.rtcJoinChannel = message.rtcJoinChannel;
    }
    if (message.fanTicketType !== 0) {
      obj.fanTicketType = Math.round(message.fanTicketType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMicMethod>, I>>(base?: I): WebcastLinkMicMethod {
    return WebcastLinkMicMethod.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMicMethod>, I>>(object: I): WebcastLinkMicMethod {
    const message = createBaseWebcastLinkMicMethod();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.messageType = object.messageType ?? 0;
    message.accessKey = object.accessKey ?? "";
    message.anchorLinkmicId = object.anchorLinkmicId ?? "0";
    message.userId = object.userId ?? "0";
    message.fanTicket = object.fanTicket ?? "0";
    message.totalLinkMicFanTicket = object.totalLinkMicFanTicket ?? "0";
    message.channelId = object.channelId ?? "0";
    message.layout = object.layout ?? "0";
    message.vendor = object.vendor ?? "0";
    message.dimension = object.dimension ?? "0";
    message.theme = object.theme ?? "";
    message.inviteUid = object.inviteUid ?? "0";
    message.reply = object.reply ?? 0;
    message.duration = object.duration ?? 0;
    message.matchType = object.matchType ?? 0;
    message.win = object.win ?? false;
    message.prompts = object.prompts ?? "";
    message.toUserId = object.toUserId ?? "0";
    message.tips = object.tips ?? "";
    message.startTimeMs = object.startTimeMs ?? "0";
    message.confluenceType = object.confluenceType ?? 0;
    message.fromRoomId = object.fromRoomId ?? "0";
    message.inviteType = object.inviteType ?? 0;
    message.subType = object.subType ?? "0";
    message.rtcExtInfo = object.rtcExtInfo ?? "";
    message.appId = object.appId ?? "";
    message.appSign = object.appSign ?? "";
    message.anchorLinkMicIdStr = object.anchorLinkMicIdStr ?? "";
    message.rivalAnchorId = object.rivalAnchorId ?? "0";
    message.rivalLinkmicId = object.rivalLinkmicId ?? 0;
    message.rivalLinkmicIdStr = object.rivalLinkmicIdStr ?? "";
    message.shouldShowPopup = object.shouldShowPopup ?? false;
    message.rtcJoinChannel = object.rtcJoinChannel ?? false;
    message.fanTicketType = object.fanTicketType ?? 0;
    return message;
  },
};

function createBaseWebcastUnauthorizedMemberMessage(): WebcastUnauthorizedMemberMessage {
  return {
    common: undefined,
    action: 0,
    nickNamePrefix: undefined,
    nickName: "",
    enterText: undefined,
    publicAreaCommon: undefined,
  };
}

export const WebcastUnauthorizedMemberMessageDecoder: MessageFns<WebcastUnauthorizedMemberMessage> = {
  encode(message: WebcastUnauthorizedMemberMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    if (message.nickNamePrefix !== undefined) {
      TextDecoder.encode(message.nickNamePrefix, writer.uint32(26).fork()).join();
    }
    if (message.nickName !== "") {
      writer.uint32(34).string(message.nickName);
    }
    if (message.enterText !== undefined) {
      TextDecoder.encode(message.enterText, writer.uint32(42).fork()).join();
    }
    if (message.publicAreaCommon !== undefined) {
      PublicAreaMessageCommonDecoder.encode(message.publicAreaCommon, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastUnauthorizedMemberMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastUnauthorizedMemberMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickNamePrefix = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nickName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.enterText = TextDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.publicAreaCommon = PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastUnauthorizedMemberMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      action: isSet(object.action) ? globalThis.Number(object.action) : 0,
      nickNamePrefix: isSet(object.nickNamePrefix) ? Text.fromJSON(object.nickNamePrefix) : undefined,
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      enterText: isSet(object.enterText) ? Text.fromJSON(object.enterText) : undefined,
      publicAreaCommon: isSet(object.publicAreaCommon)
        ? PublicAreaMessageCommon.fromJSON(object.publicAreaCommon)
        : undefined,
    };
  },

  toJSON(message: WebcastUnauthorizedMemberMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.action !== 0) {
      obj.action = Math.round(message.action);
    }
    if (message.nickNamePrefix !== undefined) {
      obj.nickNamePrefix = Text.toJSON(message.nickNamePrefix);
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.enterText !== undefined) {
      obj.enterText = Text.toJSON(message.enterText);
    }
    if (message.publicAreaCommon !== undefined) {
      obj.publicAreaCommon = PublicAreaMessageCommon.toJSON(message.publicAreaCommon);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastUnauthorizedMemberMessage>, I>>(
    base?: I,
  ): WebcastUnauthorizedMemberMessage {
    return WebcastUnauthorizedMemberMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastUnauthorizedMemberMessage>, I>>(
    object: I,
  ): WebcastUnauthorizedMemberMessage {
    const message = createBaseWebcastUnauthorizedMemberMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.action = object.action ?? 0;
    message.nickNamePrefix = (object.nickNamePrefix !== undefined && object.nickNamePrefix !== null)
      ? Text.fromPartial(object.nickNamePrefix)
      : undefined;
    message.nickName = object.nickName ?? "";
    message.enterText = (object.enterText !== undefined && object.enterText !== null)
      ? Text.fromPartial(object.enterText)
      : undefined;
    message.publicAreaCommon = (object.publicAreaCommon !== undefined && object.publicAreaCommon !== null)
      ? PublicAreaMessageCommon.fromPartial(object.publicAreaCommon)
      : undefined;
    return message;
  },
};

function createBaseWebcastMsgDetectMessage(): WebcastMsgDetectMessage {
  return {
    common: undefined,
    detectType: 0,
    triggerCondition: undefined,
    timeInfo: undefined,
    triggerBy: 0,
    fromRegion: "",
  };
}

export const WebcastMsgDetectMessageDecoder: MessageFns<WebcastMsgDetectMessage> = {
  encode(message: WebcastMsgDetectMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.detectType !== 0) {
      writer.uint32(16).int32(message.detectType);
    }
    if (message.triggerCondition !== undefined) {
      WebcastMsgDetectMessage_TriggerConditionDecoder.encode(message.triggerCondition, writer.uint32(26).fork()).join();
    }
    if (message.timeInfo !== undefined) {
      WebcastMsgDetectMessage_TimeInfoDecoder.encode(message.timeInfo, writer.uint32(34).fork()).join();
    }
    if (message.triggerBy !== 0) {
      writer.uint32(40).int32(message.triggerBy);
    }
    if (message.fromRegion !== "") {
      writer.uint32(50).string(message.fromRegion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMsgDetectMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMsgDetectMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.detectType = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.triggerCondition = WebcastMsgDetectMessage_TriggerConditionDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timeInfo = WebcastMsgDetectMessage_TimeInfoDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.triggerBy = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fromRegion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMsgDetectMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      detectType: isSet(object.detectType) ? globalThis.Number(object.detectType) : 0,
      triggerCondition: isSet(object.triggerCondition)
        ? WebcastMsgDetectMessage_TriggerCondition.fromJSON(object.triggerCondition)
        : undefined,
      timeInfo: isSet(object.timeInfo) ? WebcastMsgDetectMessage_TimeInfo.fromJSON(object.timeInfo) : undefined,
      triggerBy: isSet(object.triggerBy) ? globalThis.Number(object.triggerBy) : 0,
      fromRegion: isSet(object.fromRegion) ? globalThis.String(object.fromRegion) : "",
    };
  },

  toJSON(message: WebcastMsgDetectMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.detectType !== 0) {
      obj.detectType = Math.round(message.detectType);
    }
    if (message.triggerCondition !== undefined) {
      obj.triggerCondition = WebcastMsgDetectMessage_TriggerCondition.toJSON(message.triggerCondition);
    }
    if (message.timeInfo !== undefined) {
      obj.timeInfo = WebcastMsgDetectMessage_TimeInfo.toJSON(message.timeInfo);
    }
    if (message.triggerBy !== 0) {
      obj.triggerBy = Math.round(message.triggerBy);
    }
    if (message.fromRegion !== "") {
      obj.fromRegion = message.fromRegion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMsgDetectMessage>, I>>(base?: I): WebcastMsgDetectMessage {
    return WebcastMsgDetectMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMsgDetectMessage>, I>>(object: I): WebcastMsgDetectMessage {
    const message = createBaseWebcastMsgDetectMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.detectType = object.detectType ?? 0;
    message.triggerCondition = (object.triggerCondition !== undefined && object.triggerCondition !== null)
      ? WebcastMsgDetectMessage_TriggerCondition.fromPartial(object.triggerCondition)
      : undefined;
    message.timeInfo = (object.timeInfo !== undefined && object.timeInfo !== null)
      ? WebcastMsgDetectMessage_TimeInfo.fromPartial(object.timeInfo)
      : undefined;
    message.triggerBy = object.triggerBy ?? 0;
    message.fromRegion = object.fromRegion ?? "";
    return message;
  },
};

function createBaseWebcastMsgDetectMessage_TimeInfo(): WebcastMsgDetectMessage_TimeInfo {
  return { clientStartMs: "0", apiRecvTimeMs: "0", apiSendToGoimMs: "0" };
}

export const WebcastMsgDetectMessage_TimeInfoDecoder: MessageFns<WebcastMsgDetectMessage_TimeInfo> = {
  encode(message: WebcastMsgDetectMessage_TimeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientStartMs !== "0") {
      writer.uint32(8).int64(message.clientStartMs);
    }
    if (message.apiRecvTimeMs !== "0") {
      writer.uint32(16).int64(message.apiRecvTimeMs);
    }
    if (message.apiSendToGoimMs !== "0") {
      writer.uint32(24).int64(message.apiSendToGoimMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMsgDetectMessage_TimeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMsgDetectMessage_TimeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.clientStartMs = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.apiRecvTimeMs = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.apiSendToGoimMs = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMsgDetectMessage_TimeInfo {
    return {
      clientStartMs: isSet(object.clientStartMs) ? globalThis.String(object.clientStartMs) : "0",
      apiRecvTimeMs: isSet(object.apiRecvTimeMs) ? globalThis.String(object.apiRecvTimeMs) : "0",
      apiSendToGoimMs: isSet(object.apiSendToGoimMs) ? globalThis.String(object.apiSendToGoimMs) : "0",
    };
  },

  toJSON(message: WebcastMsgDetectMessage_TimeInfo): unknown {
    const obj: any = {};
    if (message.clientStartMs !== "0") {
      obj.clientStartMs = message.clientStartMs;
    }
    if (message.apiRecvTimeMs !== "0") {
      obj.apiRecvTimeMs = message.apiRecvTimeMs;
    }
    if (message.apiSendToGoimMs !== "0") {
      obj.apiSendToGoimMs = message.apiSendToGoimMs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMsgDetectMessage_TimeInfo>, I>>(
    base?: I,
  ): WebcastMsgDetectMessage_TimeInfo {
    return WebcastMsgDetectMessage_TimeInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMsgDetectMessage_TimeInfo>, I>>(
    object: I,
  ): WebcastMsgDetectMessage_TimeInfo {
    const message = createBaseWebcastMsgDetectMessage_TimeInfo();
    message.clientStartMs = object.clientStartMs ?? "0";
    message.apiRecvTimeMs = object.apiRecvTimeMs ?? "0";
    message.apiSendToGoimMs = object.apiSendToGoimMs ?? "0";
    return message;
  },
};

function createBaseWebcastMsgDetectMessage_TriggerCondition(): WebcastMsgDetectMessage_TriggerCondition {
  return {
    uplinkDetectHttp: false,
    uplinkDetectWebSocket: false,
    detectP2PMsg: false,
    detectRoomMsg: false,
    httpOptimize: false,
  };
}

export const WebcastMsgDetectMessage_TriggerConditionDecoder: MessageFns<WebcastMsgDetectMessage_TriggerCondition> = {
  encode(message: WebcastMsgDetectMessage_TriggerCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uplinkDetectHttp !== false) {
      writer.uint32(8).bool(message.uplinkDetectHttp);
    }
    if (message.uplinkDetectWebSocket !== false) {
      writer.uint32(16).bool(message.uplinkDetectWebSocket);
    }
    if (message.detectP2PMsg !== false) {
      writer.uint32(24).bool(message.detectP2PMsg);
    }
    if (message.detectRoomMsg !== false) {
      writer.uint32(32).bool(message.detectRoomMsg);
    }
    if (message.httpOptimize !== false) {
      writer.uint32(40).bool(message.httpOptimize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastMsgDetectMessage_TriggerCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastMsgDetectMessage_TriggerCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uplinkDetectHttp = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.uplinkDetectWebSocket = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.detectP2PMsg = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.detectRoomMsg = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.httpOptimize = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastMsgDetectMessage_TriggerCondition {
    return {
      uplinkDetectHttp: isSet(object.uplinkDetectHttp) ? globalThis.Boolean(object.uplinkDetectHttp) : false,
      uplinkDetectWebSocket: isSet(object.uplinkDetectWebSocket)
        ? globalThis.Boolean(object.uplinkDetectWebSocket)
        : false,
      detectP2PMsg: isSet(object.detectP2PMsg) ? globalThis.Boolean(object.detectP2PMsg) : false,
      detectRoomMsg: isSet(object.detectRoomMsg) ? globalThis.Boolean(object.detectRoomMsg) : false,
      httpOptimize: isSet(object.httpOptimize) ? globalThis.Boolean(object.httpOptimize) : false,
    };
  },

  toJSON(message: WebcastMsgDetectMessage_TriggerCondition): unknown {
    const obj: any = {};
    if (message.uplinkDetectHttp !== false) {
      obj.uplinkDetectHttp = message.uplinkDetectHttp;
    }
    if (message.uplinkDetectWebSocket !== false) {
      obj.uplinkDetectWebSocket = message.uplinkDetectWebSocket;
    }
    if (message.detectP2PMsg !== false) {
      obj.detectP2PMsg = message.detectP2PMsg;
    }
    if (message.detectRoomMsg !== false) {
      obj.detectRoomMsg = message.detectRoomMsg;
    }
    if (message.httpOptimize !== false) {
      obj.httpOptimize = message.httpOptimize;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastMsgDetectMessage_TriggerCondition>, I>>(
    base?: I,
  ): WebcastMsgDetectMessage_TriggerCondition {
    return WebcastMsgDetectMessage_TriggerCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastMsgDetectMessage_TriggerCondition>, I>>(
    object: I,
  ): WebcastMsgDetectMessage_TriggerCondition {
    const message = createBaseWebcastMsgDetectMessage_TriggerCondition();
    message.uplinkDetectHttp = object.uplinkDetectHttp ?? false;
    message.uplinkDetectWebSocket = object.uplinkDetectWebSocket ?? false;
    message.detectP2PMsg = object.detectP2PMsg ?? false;
    message.detectRoomMsg = object.detectRoomMsg ?? false;
    message.httpOptimize = object.httpOptimize ?? false;
    return message;
  },
};

function createBaseWebcastOecLiveShoppingMessage(): WebcastOecLiveShoppingMessage {
  return { common: undefined, data1: 0, shopData: undefined, shopTimings: undefined, details: undefined };
}

export const WebcastOecLiveShoppingMessageDecoder: MessageFns<WebcastOecLiveShoppingMessage> = {
  encode(message: WebcastOecLiveShoppingMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.data1 !== 0) {
      writer.uint32(16).uint32(message.data1);
    }
    if (message.shopData !== undefined) {
      WebcastOecLiveShoppingMessage_LiveShoppingDataDecoder.encode(message.shopData, writer.uint32(34).fork()).join();
    }
    if (message.shopTimings !== undefined) {
      TimeStampContainerDecoder.encode(message.shopTimings, writer.uint32(42).fork()).join();
    }
    if (message.details !== undefined) {
      WebcastOecLiveShoppingMessage_LiveShoppingDetailsDecoder.encode(message.details, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastOecLiveShoppingMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastOecLiveShoppingMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.data1 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shopData = WebcastOecLiveShoppingMessage_LiveShoppingDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shopTimings = TimeStampContainerDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.details = WebcastOecLiveShoppingMessage_LiveShoppingDetailsDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastOecLiveShoppingMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      data1: isSet(object.data1) ? globalThis.Number(object.data1) : 0,
      shopData: isSet(object.shopData)
        ? WebcastOecLiveShoppingMessage_LiveShoppingData.fromJSON(object.shopData)
        : undefined,
      shopTimings: isSet(object.shopTimings) ? TimeStampContainer.fromJSON(object.shopTimings) : undefined,
      details: isSet(object.details)
        ? WebcastOecLiveShoppingMessage_LiveShoppingDetails.fromJSON(object.details)
        : undefined,
    };
  },

  toJSON(message: WebcastOecLiveShoppingMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.data1 !== 0) {
      obj.data1 = Math.round(message.data1);
    }
    if (message.shopData !== undefined) {
      obj.shopData = WebcastOecLiveShoppingMessage_LiveShoppingData.toJSON(message.shopData);
    }
    if (message.shopTimings !== undefined) {
      obj.shopTimings = TimeStampContainer.toJSON(message.shopTimings);
    }
    if (message.details !== undefined) {
      obj.details = WebcastOecLiveShoppingMessage_LiveShoppingDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastOecLiveShoppingMessage>, I>>(base?: I): WebcastOecLiveShoppingMessage {
    return WebcastOecLiveShoppingMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastOecLiveShoppingMessage>, I>>(
    object: I,
  ): WebcastOecLiveShoppingMessage {
    const message = createBaseWebcastOecLiveShoppingMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.data1 = object.data1 ?? 0;
    message.shopData = (object.shopData !== undefined && object.shopData !== null)
      ? WebcastOecLiveShoppingMessage_LiveShoppingData.fromPartial(object.shopData)
      : undefined;
    message.shopTimings = (object.shopTimings !== undefined && object.shopTimings !== null)
      ? TimeStampContainer.fromPartial(object.shopTimings)
      : undefined;
    message.details = (object.details !== undefined && object.details !== null)
      ? WebcastOecLiveShoppingMessage_LiveShoppingDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseWebcastOecLiveShoppingMessage_LiveShoppingData(): WebcastOecLiveShoppingMessage_LiveShoppingData {
  return {
    title: "",
    priceString: "",
    imageUrl: "",
    shopUrl: "",
    data1: "0",
    shopName: "",
    data2: "0",
    shopUrl2: "",
    data3: "0",
    data4: "0",
  };
}

export const WebcastOecLiveShoppingMessage_LiveShoppingDataDecoder: MessageFns<WebcastOecLiveShoppingMessage_LiveShoppingData> = {
  encode(
    message: WebcastOecLiveShoppingMessage_LiveShoppingData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.priceString !== "") {
      writer.uint32(18).string(message.priceString);
    }
    if (message.imageUrl !== "") {
      writer.uint32(26).string(message.imageUrl);
    }
    if (message.shopUrl !== "") {
      writer.uint32(34).string(message.shopUrl);
    }
    if (message.data1 !== "0") {
      writer.uint32(48).uint64(message.data1);
    }
    if (message.shopName !== "") {
      writer.uint32(58).string(message.shopName);
    }
    if (message.data2 !== "0") {
      writer.uint32(64).uint64(message.data2);
    }
    if (message.shopUrl2 !== "") {
      writer.uint32(74).string(message.shopUrl2);
    }
    if (message.data3 !== "0") {
      writer.uint32(80).uint64(message.data3);
    }
    if (message.data4 !== "0") {
      writer.uint32(88).uint64(message.data4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastOecLiveShoppingMessage_LiveShoppingData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.priceString = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shopUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.data1 = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.shopName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.data2 = reader.uint64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.shopUrl2 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.data3 = reader.uint64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.data4 = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastOecLiveShoppingMessage_LiveShoppingData {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      priceString: isSet(object.priceString) ? globalThis.String(object.priceString) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      shopUrl: isSet(object.shopUrl) ? globalThis.String(object.shopUrl) : "",
      data1: isSet(object.data1) ? globalThis.String(object.data1) : "0",
      shopName: isSet(object.shopName) ? globalThis.String(object.shopName) : "",
      data2: isSet(object.data2) ? globalThis.String(object.data2) : "0",
      shopUrl2: isSet(object.shopUrl2) ? globalThis.String(object.shopUrl2) : "",
      data3: isSet(object.data3) ? globalThis.String(object.data3) : "0",
      data4: isSet(object.data4) ? globalThis.String(object.data4) : "0",
    };
  },

  toJSON(message: WebcastOecLiveShoppingMessage_LiveShoppingData): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.priceString !== "") {
      obj.priceString = message.priceString;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.shopUrl !== "") {
      obj.shopUrl = message.shopUrl;
    }
    if (message.data1 !== "0") {
      obj.data1 = message.data1;
    }
    if (message.shopName !== "") {
      obj.shopName = message.shopName;
    }
    if (message.data2 !== "0") {
      obj.data2 = message.data2;
    }
    if (message.shopUrl2 !== "") {
      obj.shopUrl2 = message.shopUrl2;
    }
    if (message.data3 !== "0") {
      obj.data3 = message.data3;
    }
    if (message.data4 !== "0") {
      obj.data4 = message.data4;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastOecLiveShoppingMessage_LiveShoppingData>, I>>(
    base?: I,
  ): WebcastOecLiveShoppingMessage_LiveShoppingData {
    return WebcastOecLiveShoppingMessage_LiveShoppingData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastOecLiveShoppingMessage_LiveShoppingData>, I>>(
    object: I,
  ): WebcastOecLiveShoppingMessage_LiveShoppingData {
    const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingData();
    message.title = object.title ?? "";
    message.priceString = object.priceString ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.shopUrl = object.shopUrl ?? "";
    message.data1 = object.data1 ?? "0";
    message.shopName = object.shopName ?? "";
    message.data2 = object.data2 ?? "0";
    message.shopUrl2 = object.shopUrl2 ?? "";
    message.data3 = object.data3 ?? "0";
    message.data4 = object.data4 ?? "0";
    return message;
  },
};

function createBaseWebcastOecLiveShoppingMessage_LiveShoppingDetails(): WebcastOecLiveShoppingMessage_LiveShoppingDetails {
  return { id1: "", data1: "", data2: 0, timestamp: "0", data: undefined };
}

export const WebcastOecLiveShoppingMessage_LiveShoppingDetailsDecoder: MessageFns<WebcastOecLiveShoppingMessage_LiveShoppingDetails> = {
  encode(
    message: WebcastOecLiveShoppingMessage_LiveShoppingDetails,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id1 !== "") {
      writer.uint32(10).string(message.id1);
    }
    if (message.data1 !== "") {
      writer.uint32(26).string(message.data1);
    }
    if (message.data2 !== 0) {
      writer.uint32(32).uint32(message.data2);
    }
    if (message.timestamp !== "0") {
      writer.uint32(40).uint64(message.timestamp);
    }
    if (message.data !== undefined) {
      ValueLabelDecoder.encode(message.data, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastOecLiveShoppingMessage_LiveShoppingDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id1 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data1 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.data2 = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.timestamp = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.data = ValueLabelDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastOecLiveShoppingMessage_LiveShoppingDetails {
    return {
      id1: isSet(object.id1) ? globalThis.String(object.id1) : "",
      data1: isSet(object.data1) ? globalThis.String(object.data1) : "",
      data2: isSet(object.data2) ? globalThis.Number(object.data2) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
      data: isSet(object.data) ? ValueLabel.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: WebcastOecLiveShoppingMessage_LiveShoppingDetails): unknown {
    const obj: any = {};
    if (message.id1 !== "") {
      obj.id1 = message.id1;
    }
    if (message.data1 !== "") {
      obj.data1 = message.data1;
    }
    if (message.data2 !== 0) {
      obj.data2 = Math.round(message.data2);
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    if (message.data !== undefined) {
      obj.data = ValueLabel.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastOecLiveShoppingMessage_LiveShoppingDetails>, I>>(
    base?: I,
  ): WebcastOecLiveShoppingMessage_LiveShoppingDetails {
    return WebcastOecLiveShoppingMessage_LiveShoppingDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastOecLiveShoppingMessage_LiveShoppingDetails>, I>>(
    object: I,
  ): WebcastOecLiveShoppingMessage_LiveShoppingDetails {
    const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingDetails();
    message.id1 = object.id1 ?? "";
    message.data1 = object.data1 ?? "";
    message.data2 = object.data2 ?? 0;
    message.timestamp = object.timestamp ?? "0";
    message.data = (object.data !== undefined && object.data !== null)
      ? ValueLabel.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseWebcastRoomPinMessage(): WebcastRoomPinMessage {
  return {
    common: undefined,
    chatMessage: undefined,
    socialMessage: undefined,
    giftMessage: undefined,
    memberMessage: undefined,
    likeMessage: undefined,
    method: "",
    pinTime: "0",
    operator: undefined,
    action: 0,
    displayDuration: "0",
    pinId: "0",
    ecStreamerKey: "",
  };
}

export const WebcastRoomPinMessageDecoder: MessageFns<WebcastRoomPinMessage> = {
  encode(message: WebcastRoomPinMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.chatMessage !== undefined) {
      WebcastChatMessageDecoder.encode(message.chatMessage, writer.uint32(18).fork()).join();
    }
    if (message.socialMessage !== undefined) {
      WebcastSocialMessageDecoder.encode(message.socialMessage, writer.uint32(26).fork()).join();
    }
    if (message.giftMessage !== undefined) {
      WebcastGiftMessageDecoder.encode(message.giftMessage, writer.uint32(34).fork()).join();
    }
    if (message.memberMessage !== undefined) {
      WebcastMemberMessageDecoder.encode(message.memberMessage, writer.uint32(42).fork()).join();
    }
    if (message.likeMessage !== undefined) {
      WebcastLikeMessageDecoder.encode(message.likeMessage, writer.uint32(50).fork()).join();
    }
    if (message.method !== "") {
      writer.uint32(242).string(message.method);
    }
    if (message.pinTime !== "0") {
      writer.uint32(248).int64(message.pinTime);
    }
    if (message.operator !== undefined) {
      UserDecoder.encode(message.operator, writer.uint32(258).fork()).join();
    }
    if (message.action !== 0) {
      writer.uint32(264).int32(message.action);
    }
    if (message.displayDuration !== "0") {
      writer.uint32(272).int64(message.displayDuration);
    }
    if (message.pinId !== "0") {
      writer.uint32(280).int64(message.pinId);
    }
    if (message.ecStreamerKey !== "") {
      writer.uint32(290).string(message.ecStreamerKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastRoomPinMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastRoomPinMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chatMessage = WebcastChatMessageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.socialMessage = WebcastSocialMessageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.giftMessage = WebcastGiftMessageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.memberMessage = WebcastMemberMessageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.likeMessage = WebcastLikeMessageDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.pinTime = reader.int64().toString();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.operator = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.action = reader.int32();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.displayDuration = reader.int64().toString();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.pinId = reader.int64().toString();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.ecStreamerKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastRoomPinMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      chatMessage: isSet(object.chatMessage) ? WebcastChatMessage.fromJSON(object.chatMessage) : undefined,
      socialMessage: isSet(object.socialMessage) ? WebcastSocialMessage.fromJSON(object.socialMessage) : undefined,
      giftMessage: isSet(object.giftMessage) ? WebcastGiftMessage.fromJSON(object.giftMessage) : undefined,
      memberMessage: isSet(object.memberMessage) ? WebcastMemberMessage.fromJSON(object.memberMessage) : undefined,
      likeMessage: isSet(object.likeMessage) ? WebcastLikeMessage.fromJSON(object.likeMessage) : undefined,
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      pinTime: isSet(object.pinTime) ? globalThis.String(object.pinTime) : "0",
      operator: isSet(object.operator) ? User.fromJSON(object.operator) : undefined,
      action: isSet(object.action) ? globalThis.Number(object.action) : 0,
      displayDuration: isSet(object.displayDuration) ? globalThis.String(object.displayDuration) : "0",
      pinId: isSet(object.pinId) ? globalThis.String(object.pinId) : "0",
      ecStreamerKey: isSet(object.ecStreamerKey) ? globalThis.String(object.ecStreamerKey) : "",
    };
  },

  toJSON(message: WebcastRoomPinMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.chatMessage !== undefined) {
      obj.chatMessage = WebcastChatMessage.toJSON(message.chatMessage);
    }
    if (message.socialMessage !== undefined) {
      obj.socialMessage = WebcastSocialMessage.toJSON(message.socialMessage);
    }
    if (message.giftMessage !== undefined) {
      obj.giftMessage = WebcastGiftMessage.toJSON(message.giftMessage);
    }
    if (message.memberMessage !== undefined) {
      obj.memberMessage = WebcastMemberMessage.toJSON(message.memberMessage);
    }
    if (message.likeMessage !== undefined) {
      obj.likeMessage = WebcastLikeMessage.toJSON(message.likeMessage);
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.pinTime !== "0") {
      obj.pinTime = message.pinTime;
    }
    if (message.operator !== undefined) {
      obj.operator = User.toJSON(message.operator);
    }
    if (message.action !== 0) {
      obj.action = Math.round(message.action);
    }
    if (message.displayDuration !== "0") {
      obj.displayDuration = message.displayDuration;
    }
    if (message.pinId !== "0") {
      obj.pinId = message.pinId;
    }
    if (message.ecStreamerKey !== "") {
      obj.ecStreamerKey = message.ecStreamerKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastRoomPinMessage>, I>>(base?: I): WebcastRoomPinMessage {
    return WebcastRoomPinMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastRoomPinMessage>, I>>(object: I): WebcastRoomPinMessage {
    const message = createBaseWebcastRoomPinMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.chatMessage = (object.chatMessage !== undefined && object.chatMessage !== null)
      ? WebcastChatMessage.fromPartial(object.chatMessage)
      : undefined;
    message.socialMessage = (object.socialMessage !== undefined && object.socialMessage !== null)
      ? WebcastSocialMessage.fromPartial(object.socialMessage)
      : undefined;
    message.giftMessage = (object.giftMessage !== undefined && object.giftMessage !== null)
      ? WebcastGiftMessage.fromPartial(object.giftMessage)
      : undefined;
    message.memberMessage = (object.memberMessage !== undefined && object.memberMessage !== null)
      ? WebcastMemberMessage.fromPartial(object.memberMessage)
      : undefined;
    message.likeMessage = (object.likeMessage !== undefined && object.likeMessage !== null)
      ? WebcastLikeMessage.fromPartial(object.likeMessage)
      : undefined;
    message.method = object.method ?? "";
    message.pinTime = object.pinTime ?? "0";
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? User.fromPartial(object.operator)
      : undefined;
    message.action = object.action ?? 0;
    message.displayDuration = object.displayDuration ?? "0";
    message.pinId = object.pinId ?? "0";
    message.ecStreamerKey = object.ecStreamerKey ?? "";
    return message;
  },
};

function createBaseWebcastLinkMessage(): WebcastLinkMessage {
  return {
    common: undefined,
    MessageType: 0,
    LinkerId: "0",
    Scene: 0,
    InviteContent: undefined,
    ReplyContent: undefined,
    CreateContent: undefined,
    CloseContent: undefined,
    EnterContent: undefined,
    LeaveContent: undefined,
    CancelContent: undefined,
    KickOutContent: undefined,
    LinkedListChangeContent: undefined,
    UpdateUserContent: undefined,
    WaitingListChangeContent: undefined,
    MuteContent: undefined,
    RandomMatchContent: undefined,
    UpdateUserSettingContent: undefined,
    MicIdxUpdateContent: undefined,
    ListChangeContent: undefined,
    CohostListChangeContent: undefined,
    MediaChangeContent: undefined,
    AcceptNoticeContent: undefined,
    SysKickOutContent: undefined,
    UserToastContent: undefined,
    extra: "",
    expireTimestamp: "0",
    transferExtra: "",
  };
}

export const WebcastLinkMessageDecoder: MessageFns<WebcastLinkMessage> = {
  encode(message: WebcastLinkMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.MessageType !== 0) {
      writer.uint32(16).int32(message.MessageType);
    }
    if (message.LinkerId !== "0") {
      writer.uint32(24).int64(message.LinkerId);
    }
    if (message.Scene !== 0) {
      writer.uint32(32).int32(message.Scene);
    }
    if (message.InviteContent !== undefined) {
      LinkerInviteContentDecoder.encode(message.InviteContent, writer.uint32(42).fork()).join();
    }
    if (message.ReplyContent !== undefined) {
      LinkerReplyContentDecoder.encode(message.ReplyContent, writer.uint32(50).fork()).join();
    }
    if (message.CreateContent !== undefined) {
      LinkerCreateContentDecoder.encode(message.CreateContent, writer.uint32(58).fork()).join();
    }
    if (message.CloseContent !== undefined) {
      LinkerCloseContentDecoder.encode(message.CloseContent, writer.uint32(66).fork()).join();
    }
    if (message.EnterContent !== undefined) {
      LinkerEnterContentDecoder.encode(message.EnterContent, writer.uint32(74).fork()).join();
    }
    if (message.LeaveContent !== undefined) {
      LinkerLeaveContentDecoder.encode(message.LeaveContent, writer.uint32(82).fork()).join();
    }
    if (message.CancelContent !== undefined) {
      LinkerCancelContentDecoder.encode(message.CancelContent, writer.uint32(90).fork()).join();
    }
    if (message.KickOutContent !== undefined) {
      LinkerKickOutContentDecoder.encode(message.KickOutContent, writer.uint32(98).fork()).join();
    }
    if (message.LinkedListChangeContent !== undefined) {
      LinkerLinkedListChangeContentDecoder.encode(message.LinkedListChangeContent, writer.uint32(106).fork()).join();
    }
    if (message.UpdateUserContent !== undefined) {
      LinkerUpdateUserContentDecoder.encode(message.UpdateUserContent, writer.uint32(114).fork()).join();
    }
    if (message.WaitingListChangeContent !== undefined) {
      LinkerWaitingListChangeContentDecoder.encode(message.WaitingListChangeContent, writer.uint32(122).fork()).join();
    }
    if (message.MuteContent !== undefined) {
      LinkerMuteContentDecoder.encode(message.MuteContent, writer.uint32(130).fork()).join();
    }
    if (message.RandomMatchContent !== undefined) {
      LinkerRandomMatchContentDecoder.encode(message.RandomMatchContent, writer.uint32(138).fork()).join();
    }
    if (message.UpdateUserSettingContent !== undefined) {
      LinkerUpdateUserSettingContentDecoder.encode(message.UpdateUserSettingContent, writer.uint32(146).fork()).join();
    }
    if (message.MicIdxUpdateContent !== undefined) {
      LinkerMicIdxUpdateContentDecoder.encode(message.MicIdxUpdateContent, writer.uint32(154).fork()).join();
    }
    if (message.ListChangeContent !== undefined) {
      LinkerListChangeContentDecoder.encode(message.ListChangeContent, writer.uint32(162).fork()).join();
    }
    if (message.CohostListChangeContent !== undefined) {
      CohostListChangeContentDecoder.encode(message.CohostListChangeContent, writer.uint32(170).fork()).join();
    }
    if (message.MediaChangeContent !== undefined) {
      LinkerMediaChangeContentDecoder.encode(message.MediaChangeContent, writer.uint32(178).fork()).join();
    }
    if (message.AcceptNoticeContent !== undefined) {
      LinkerAcceptNoticeContentDecoder.encode(message.AcceptNoticeContent, writer.uint32(186).fork()).join();
    }
    if (message.SysKickOutContent !== undefined) {
      LinkerSysKickOutContentDecoder.encode(message.SysKickOutContent, writer.uint32(810).fork()).join();
    }
    if (message.UserToastContent !== undefined) {
      LinkmicUserToastContentDecoder.encode(message.UserToastContent, writer.uint32(818).fork()).join();
    }
    if (message.extra !== "") {
      writer.uint32(1602).string(message.extra);
    }
    if (message.expireTimestamp !== "0") {
      writer.uint32(1608).int64(message.expireTimestamp);
    }
    if (message.transferExtra !== "") {
      writer.uint32(1618).string(message.transferExtra);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.MessageType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.LinkerId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.Scene = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.InviteContent = LinkerInviteContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ReplyContent = LinkerReplyContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.CreateContent = LinkerCreateContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.CloseContent = LinkerCloseContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.EnterContent = LinkerEnterContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.LeaveContent = LinkerLeaveContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.CancelContent = LinkerCancelContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.KickOutContent = LinkerKickOutContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.LinkedListChangeContent = LinkerLinkedListChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.UpdateUserContent = LinkerUpdateUserContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.WaitingListChangeContent = LinkerWaitingListChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.MuteContent = LinkerMuteContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.RandomMatchContent = LinkerRandomMatchContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.UpdateUserSettingContent = LinkerUpdateUserSettingContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.MicIdxUpdateContent = LinkerMicIdxUpdateContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.ListChangeContent = LinkerListChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.CohostListChangeContent = CohostListChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.MediaChangeContent = LinkerMediaChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.AcceptNoticeContent = LinkerAcceptNoticeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.SysKickOutContent = LinkerSysKickOutContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.UserToastContent = LinkmicUserToastContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 200: {
          if (tag !== 1602) {
            break;
          }

          message.extra = reader.string();
          continue;
        }
        case 201: {
          if (tag !== 1608) {
            break;
          }

          message.expireTimestamp = reader.int64().toString();
          continue;
        }
        case 202: {
          if (tag !== 1618) {
            break;
          }

          message.transferExtra = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      MessageType: isSet(object.MessageType) ? linkMessageTypeFromJSON(object.MessageType) : 0,
      LinkerId: isSet(object.LinkerId) ? globalThis.String(object.LinkerId) : "0",
      Scene: isSet(object.Scene) ? sceneFromJSON(object.Scene) : 0,
      InviteContent: isSet(object.InviteContent) ? LinkerInviteContent.fromJSON(object.InviteContent) : undefined,
      ReplyContent: isSet(object.ReplyContent) ? LinkerReplyContent.fromJSON(object.ReplyContent) : undefined,
      CreateContent: isSet(object.CreateContent) ? LinkerCreateContent.fromJSON(object.CreateContent) : undefined,
      CloseContent: isSet(object.CloseContent) ? LinkerCloseContent.fromJSON(object.CloseContent) : undefined,
      EnterContent: isSet(object.EnterContent) ? LinkerEnterContent.fromJSON(object.EnterContent) : undefined,
      LeaveContent: isSet(object.LeaveContent) ? LinkerLeaveContent.fromJSON(object.LeaveContent) : undefined,
      CancelContent: isSet(object.CancelContent) ? LinkerCancelContent.fromJSON(object.CancelContent) : undefined,
      KickOutContent: isSet(object.KickOutContent) ? LinkerKickOutContent.fromJSON(object.KickOutContent) : undefined,
      LinkedListChangeContent: isSet(object.LinkedListChangeContent)
        ? LinkerLinkedListChangeContent.fromJSON(object.LinkedListChangeContent)
        : undefined,
      UpdateUserContent: isSet(object.UpdateUserContent)
        ? LinkerUpdateUserContent.fromJSON(object.UpdateUserContent)
        : undefined,
      WaitingListChangeContent: isSet(object.WaitingListChangeContent)
        ? LinkerWaitingListChangeContent.fromJSON(object.WaitingListChangeContent)
        : undefined,
      MuteContent: isSet(object.MuteContent) ? LinkerMuteContent.fromJSON(object.MuteContent) : undefined,
      RandomMatchContent: isSet(object.RandomMatchContent)
        ? LinkerRandomMatchContent.fromJSON(object.RandomMatchContent)
        : undefined,
      UpdateUserSettingContent: isSet(object.UpdateUserSettingContent)
        ? LinkerUpdateUserSettingContent.fromJSON(object.UpdateUserSettingContent)
        : undefined,
      MicIdxUpdateContent: isSet(object.MicIdxUpdateContent)
        ? LinkerMicIdxUpdateContent.fromJSON(object.MicIdxUpdateContent)
        : undefined,
      ListChangeContent: isSet(object.ListChangeContent)
        ? LinkerListChangeContent.fromJSON(object.ListChangeContent)
        : undefined,
      CohostListChangeContent: isSet(object.CohostListChangeContent)
        ? CohostListChangeContent.fromJSON(object.CohostListChangeContent)
        : undefined,
      MediaChangeContent: isSet(object.MediaChangeContent)
        ? LinkerMediaChangeContent.fromJSON(object.MediaChangeContent)
        : undefined,
      AcceptNoticeContent: isSet(object.AcceptNoticeContent)
        ? LinkerAcceptNoticeContent.fromJSON(object.AcceptNoticeContent)
        : undefined,
      SysKickOutContent: isSet(object.SysKickOutContent)
        ? LinkerSysKickOutContent.fromJSON(object.SysKickOutContent)
        : undefined,
      UserToastContent: isSet(object.UserToastContent)
        ? LinkmicUserToastContent.fromJSON(object.UserToastContent)
        : undefined,
      extra: isSet(object.extra) ? globalThis.String(object.extra) : "",
      expireTimestamp: isSet(object.expireTimestamp) ? globalThis.String(object.expireTimestamp) : "0",
      transferExtra: isSet(object.transferExtra) ? globalThis.String(object.transferExtra) : "",
    };
  },

  toJSON(message: WebcastLinkMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.MessageType !== 0) {
      obj.MessageType = linkMessageTypeToJSON(message.MessageType);
    }
    if (message.LinkerId !== "0") {
      obj.LinkerId = message.LinkerId;
    }
    if (message.Scene !== 0) {
      obj.Scene = sceneToJSON(message.Scene);
    }
    if (message.InviteContent !== undefined) {
      obj.InviteContent = LinkerInviteContent.toJSON(message.InviteContent);
    }
    if (message.ReplyContent !== undefined) {
      obj.ReplyContent = LinkerReplyContent.toJSON(message.ReplyContent);
    }
    if (message.CreateContent !== undefined) {
      obj.CreateContent = LinkerCreateContent.toJSON(message.CreateContent);
    }
    if (message.CloseContent !== undefined) {
      obj.CloseContent = LinkerCloseContent.toJSON(message.CloseContent);
    }
    if (message.EnterContent !== undefined) {
      obj.EnterContent = LinkerEnterContent.toJSON(message.EnterContent);
    }
    if (message.LeaveContent !== undefined) {
      obj.LeaveContent = LinkerLeaveContent.toJSON(message.LeaveContent);
    }
    if (message.CancelContent !== undefined) {
      obj.CancelContent = LinkerCancelContent.toJSON(message.CancelContent);
    }
    if (message.KickOutContent !== undefined) {
      obj.KickOutContent = LinkerKickOutContent.toJSON(message.KickOutContent);
    }
    if (message.LinkedListChangeContent !== undefined) {
      obj.LinkedListChangeContent = LinkerLinkedListChangeContent.toJSON(message.LinkedListChangeContent);
    }
    if (message.UpdateUserContent !== undefined) {
      obj.UpdateUserContent = LinkerUpdateUserContent.toJSON(message.UpdateUserContent);
    }
    if (message.WaitingListChangeContent !== undefined) {
      obj.WaitingListChangeContent = LinkerWaitingListChangeContent.toJSON(message.WaitingListChangeContent);
    }
    if (message.MuteContent !== undefined) {
      obj.MuteContent = LinkerMuteContent.toJSON(message.MuteContent);
    }
    if (message.RandomMatchContent !== undefined) {
      obj.RandomMatchContent = LinkerRandomMatchContent.toJSON(message.RandomMatchContent);
    }
    if (message.UpdateUserSettingContent !== undefined) {
      obj.UpdateUserSettingContent = LinkerUpdateUserSettingContent.toJSON(message.UpdateUserSettingContent);
    }
    if (message.MicIdxUpdateContent !== undefined) {
      obj.MicIdxUpdateContent = LinkerMicIdxUpdateContent.toJSON(message.MicIdxUpdateContent);
    }
    if (message.ListChangeContent !== undefined) {
      obj.ListChangeContent = LinkerListChangeContent.toJSON(message.ListChangeContent);
    }
    if (message.CohostListChangeContent !== undefined) {
      obj.CohostListChangeContent = CohostListChangeContent.toJSON(message.CohostListChangeContent);
    }
    if (message.MediaChangeContent !== undefined) {
      obj.MediaChangeContent = LinkerMediaChangeContent.toJSON(message.MediaChangeContent);
    }
    if (message.AcceptNoticeContent !== undefined) {
      obj.AcceptNoticeContent = LinkerAcceptNoticeContent.toJSON(message.AcceptNoticeContent);
    }
    if (message.SysKickOutContent !== undefined) {
      obj.SysKickOutContent = LinkerSysKickOutContent.toJSON(message.SysKickOutContent);
    }
    if (message.UserToastContent !== undefined) {
      obj.UserToastContent = LinkmicUserToastContent.toJSON(message.UserToastContent);
    }
    if (message.extra !== "") {
      obj.extra = message.extra;
    }
    if (message.expireTimestamp !== "0") {
      obj.expireTimestamp = message.expireTimestamp;
    }
    if (message.transferExtra !== "") {
      obj.transferExtra = message.transferExtra;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkMessage>, I>>(base?: I): WebcastLinkMessage {
    return WebcastLinkMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkMessage>, I>>(object: I): WebcastLinkMessage {
    const message = createBaseWebcastLinkMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.MessageType = object.MessageType ?? 0;
    message.LinkerId = object.LinkerId ?? "0";
    message.Scene = object.Scene ?? 0;
    message.InviteContent = (object.InviteContent !== undefined && object.InviteContent !== null)
      ? LinkerInviteContent.fromPartial(object.InviteContent)
      : undefined;
    message.ReplyContent = (object.ReplyContent !== undefined && object.ReplyContent !== null)
      ? LinkerReplyContent.fromPartial(object.ReplyContent)
      : undefined;
    message.CreateContent = (object.CreateContent !== undefined && object.CreateContent !== null)
      ? LinkerCreateContent.fromPartial(object.CreateContent)
      : undefined;
    message.CloseContent = (object.CloseContent !== undefined && object.CloseContent !== null)
      ? LinkerCloseContent.fromPartial(object.CloseContent)
      : undefined;
    message.EnterContent = (object.EnterContent !== undefined && object.EnterContent !== null)
      ? LinkerEnterContent.fromPartial(object.EnterContent)
      : undefined;
    message.LeaveContent = (object.LeaveContent !== undefined && object.LeaveContent !== null)
      ? LinkerLeaveContent.fromPartial(object.LeaveContent)
      : undefined;
    message.CancelContent = (object.CancelContent !== undefined && object.CancelContent !== null)
      ? LinkerCancelContent.fromPartial(object.CancelContent)
      : undefined;
    message.KickOutContent = (object.KickOutContent !== undefined && object.KickOutContent !== null)
      ? LinkerKickOutContent.fromPartial(object.KickOutContent)
      : undefined;
    message.LinkedListChangeContent =
      (object.LinkedListChangeContent !== undefined && object.LinkedListChangeContent !== null)
        ? LinkerLinkedListChangeContent.fromPartial(object.LinkedListChangeContent)
        : undefined;
    message.UpdateUserContent = (object.UpdateUserContent !== undefined && object.UpdateUserContent !== null)
      ? LinkerUpdateUserContent.fromPartial(object.UpdateUserContent)
      : undefined;
    message.WaitingListChangeContent =
      (object.WaitingListChangeContent !== undefined && object.WaitingListChangeContent !== null)
        ? LinkerWaitingListChangeContent.fromPartial(object.WaitingListChangeContent)
        : undefined;
    message.MuteContent = (object.MuteContent !== undefined && object.MuteContent !== null)
      ? LinkerMuteContent.fromPartial(object.MuteContent)
      : undefined;
    message.RandomMatchContent = (object.RandomMatchContent !== undefined && object.RandomMatchContent !== null)
      ? LinkerRandomMatchContent.fromPartial(object.RandomMatchContent)
      : undefined;
    message.UpdateUserSettingContent =
      (object.UpdateUserSettingContent !== undefined && object.UpdateUserSettingContent !== null)
        ? LinkerUpdateUserSettingContent.fromPartial(object.UpdateUserSettingContent)
        : undefined;
    message.MicIdxUpdateContent = (object.MicIdxUpdateContent !== undefined && object.MicIdxUpdateContent !== null)
      ? LinkerMicIdxUpdateContent.fromPartial(object.MicIdxUpdateContent)
      : undefined;
    message.ListChangeContent = (object.ListChangeContent !== undefined && object.ListChangeContent !== null)
      ? LinkerListChangeContent.fromPartial(object.ListChangeContent)
      : undefined;
    message.CohostListChangeContent =
      (object.CohostListChangeContent !== undefined && object.CohostListChangeContent !== null)
        ? CohostListChangeContent.fromPartial(object.CohostListChangeContent)
        : undefined;
    message.MediaChangeContent = (object.MediaChangeContent !== undefined && object.MediaChangeContent !== null)
      ? LinkerMediaChangeContent.fromPartial(object.MediaChangeContent)
      : undefined;
    message.AcceptNoticeContent = (object.AcceptNoticeContent !== undefined && object.AcceptNoticeContent !== null)
      ? LinkerAcceptNoticeContent.fromPartial(object.AcceptNoticeContent)
      : undefined;
    message.SysKickOutContent = (object.SysKickOutContent !== undefined && object.SysKickOutContent !== null)
      ? LinkerSysKickOutContent.fromPartial(object.SysKickOutContent)
      : undefined;
    message.UserToastContent = (object.UserToastContent !== undefined && object.UserToastContent !== null)
      ? LinkmicUserToastContent.fromPartial(object.UserToastContent)
      : undefined;
    message.extra = object.extra ?? "";
    message.expireTimestamp = object.expireTimestamp ?? "0";
    message.transferExtra = object.transferExtra ?? "";
    return message;
  },
};

function createBaseWebcastLinkLayerMessage(): WebcastLinkLayerMessage {
  return {
    common: undefined,
    messageType: 0,
    channelId: "0",
    scene: 0,
    source: "",
    centerizedIdc: "",
    rtcRoomId: "0",
    createChannelContent: undefined,
    listChangeContent: undefined,
    inviteContent: undefined,
    applyContent: undefined,
    permitApplyContent: undefined,
    replyInviteContent: undefined,
    kickOutContent: undefined,
    cancelApplyContent: undefined,
    cancelInviteContent: undefined,
    leaveContent: undefined,
    finishContent: undefined,
    joinDirectContent: undefined,
    joinGroupContent: undefined,
    permitGroupContent: undefined,
    cancelGroupContent: undefined,
    leaveGroupContent: undefined,
    p2pGroupChangeContent: undefined,
    groupChangeContent: undefined,
    businessContent: undefined,
  };
}

export const WebcastLinkLayerMessageDecoder: MessageFns<WebcastLinkLayerMessage> = {
  encode(message: WebcastLinkLayerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.messageType !== 0) {
      writer.uint32(16).int32(message.messageType);
    }
    if (message.channelId !== "0") {
      writer.uint32(24).int64(message.channelId);
    }
    if (message.scene !== 0) {
      writer.uint32(32).int32(message.scene);
    }
    if (message.source !== "") {
      writer.uint32(42).string(message.source);
    }
    if (message.centerizedIdc !== "") {
      writer.uint32(50).string(message.centerizedIdc);
    }
    if (message.rtcRoomId !== "0") {
      writer.uint32(56).int64(message.rtcRoomId);
    }
    if (message.createChannelContent !== undefined) {
      CreateChannelContentDecoder.encode(message.createChannelContent, writer.uint32(802).fork()).join();
    }
    if (message.listChangeContent !== undefined) {
      ListChangeContentDecoder.encode(message.listChangeContent, writer.uint32(818).fork()).join();
    }
    if (message.inviteContent !== undefined) {
      InviteContentDecoder.encode(message.inviteContent, writer.uint32(826).fork()).join();
    }
    if (message.applyContent !== undefined) {
      ApplyContentDecoder.encode(message.applyContent, writer.uint32(834).fork()).join();
    }
    if (message.permitApplyContent !== undefined) {
      PermitApplyContentDecoder.encode(message.permitApplyContent, writer.uint32(842).fork()).join();
    }
    if (message.replyInviteContent !== undefined) {
      ReplyInviteContentDecoder.encode(message.replyInviteContent, writer.uint32(850).fork()).join();
    }
    if (message.kickOutContent !== undefined) {
      KickOutContentDecoder.encode(message.kickOutContent, writer.uint32(858).fork()).join();
    }
    if (message.cancelApplyContent !== undefined) {
      CancelApplyContentDecoder.encode(message.cancelApplyContent, writer.uint32(866).fork()).join();
    }
    if (message.cancelInviteContent !== undefined) {
      CancelInviteContentDecoder.encode(message.cancelInviteContent, writer.uint32(874).fork()).join();
    }
    if (message.leaveContent !== undefined) {
      LeaveContentDecoder.encode(message.leaveContent, writer.uint32(882).fork()).join();
    }
    if (message.finishContent !== undefined) {
      FinishChannelContentDecoder.encode(message.finishContent, writer.uint32(890).fork()).join();
    }
    if (message.joinDirectContent !== undefined) {
      JoinDirectContentDecoder.encode(message.joinDirectContent, writer.uint32(898).fork()).join();
    }
    if (message.joinGroupContent !== undefined) {
      JoinGroupContentDecoder.encode(message.joinGroupContent, writer.uint32(906).fork()).join();
    }
    if (message.permitGroupContent !== undefined) {
      PermitJoinGroupContentDecoder.encode(message.permitGroupContent, writer.uint32(914).fork()).join();
    }
    if (message.cancelGroupContent !== undefined) {
      CancelJoinGroupContentDecoder.encode(message.cancelGroupContent, writer.uint32(922).fork()).join();
    }
    if (message.leaveGroupContent !== undefined) {
      LeaveJoinGroupContentDecoder.encode(message.leaveGroupContent, writer.uint32(930).fork()).join();
    }
    if (message.p2pGroupChangeContent !== undefined) {
      P2PGroupChangeContentDecoder.encode(message.p2pGroupChangeContent, writer.uint32(938).fork()).join();
    }
    if (message.groupChangeContent !== undefined) {
      GroupChangeContentDecoder.encode(message.groupChangeContent, writer.uint32(946).fork()).join();
    }
    if (message.businessContent !== undefined) {
      BusinessContentDecoder.encode(message.businessContent, writer.uint32(1602).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastLinkLayerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastLinkLayerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.messageType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.channelId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.scene = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.centerizedIdc = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.rtcRoomId = reader.int64().toString();
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.createChannelContent = CreateChannelContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.listChangeContent = ListChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.inviteContent = InviteContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.applyContent = ApplyContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 105: {
          if (tag !== 842) {
            break;
          }

          message.permitApplyContent = PermitApplyContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 106: {
          if (tag !== 850) {
            break;
          }

          message.replyInviteContent = ReplyInviteContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 107: {
          if (tag !== 858) {
            break;
          }

          message.kickOutContent = KickOutContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 108: {
          if (tag !== 866) {
            break;
          }

          message.cancelApplyContent = CancelApplyContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 109: {
          if (tag !== 874) {
            break;
          }

          message.cancelInviteContent = CancelInviteContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 110: {
          if (tag !== 882) {
            break;
          }

          message.leaveContent = LeaveContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 111: {
          if (tag !== 890) {
            break;
          }

          message.finishContent = FinishChannelContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 112: {
          if (tag !== 898) {
            break;
          }

          message.joinDirectContent = JoinDirectContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 113: {
          if (tag !== 906) {
            break;
          }

          message.joinGroupContent = JoinGroupContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 114: {
          if (tag !== 914) {
            break;
          }

          message.permitGroupContent = PermitJoinGroupContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 115: {
          if (tag !== 922) {
            break;
          }

          message.cancelGroupContent = CancelJoinGroupContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 116: {
          if (tag !== 930) {
            break;
          }

          message.leaveGroupContent = LeaveJoinGroupContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 117: {
          if (tag !== 938) {
            break;
          }

          message.p2pGroupChangeContent = P2PGroupChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 118: {
          if (tag !== 946) {
            break;
          }

          message.groupChangeContent = GroupChangeContentDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 200: {
          if (tag !== 1602) {
            break;
          }

          message.businessContent = BusinessContentDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastLinkLayerMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      messageType: isSet(object.messageType) ? messageTypeFromJSON(object.messageType) : 0,
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "0",
      scene: isSet(object.scene) ? sceneFromJSON(object.scene) : 0,
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      centerizedIdc: isSet(object.centerizedIdc) ? globalThis.String(object.centerizedIdc) : "",
      rtcRoomId: isSet(object.rtcRoomId) ? globalThis.String(object.rtcRoomId) : "0",
      createChannelContent: isSet(object.createChannelContent)
        ? CreateChannelContent.fromJSON(object.createChannelContent)
        : undefined,
      listChangeContent: isSet(object.listChangeContent)
        ? ListChangeContent.fromJSON(object.listChangeContent)
        : undefined,
      inviteContent: isSet(object.inviteContent) ? InviteContent.fromJSON(object.inviteContent) : undefined,
      applyContent: isSet(object.applyContent) ? ApplyContent.fromJSON(object.applyContent) : undefined,
      permitApplyContent: isSet(object.permitApplyContent)
        ? PermitApplyContent.fromJSON(object.permitApplyContent)
        : undefined,
      replyInviteContent: isSet(object.replyInviteContent)
        ? ReplyInviteContent.fromJSON(object.replyInviteContent)
        : undefined,
      kickOutContent: isSet(object.kickOutContent) ? KickOutContent.fromJSON(object.kickOutContent) : undefined,
      cancelApplyContent: isSet(object.cancelApplyContent)
        ? CancelApplyContent.fromJSON(object.cancelApplyContent)
        : undefined,
      cancelInviteContent: isSet(object.cancelInviteContent)
        ? CancelInviteContent.fromJSON(object.cancelInviteContent)
        : undefined,
      leaveContent: isSet(object.leaveContent) ? LeaveContent.fromJSON(object.leaveContent) : undefined,
      finishContent: isSet(object.finishContent) ? FinishChannelContent.fromJSON(object.finishContent) : undefined,
      joinDirectContent: isSet(object.joinDirectContent)
        ? JoinDirectContent.fromJSON(object.joinDirectContent)
        : undefined,
      joinGroupContent: isSet(object.joinGroupContent) ? JoinGroupContent.fromJSON(object.joinGroupContent) : undefined,
      permitGroupContent: isSet(object.permitGroupContent)
        ? PermitJoinGroupContent.fromJSON(object.permitGroupContent)
        : undefined,
      cancelGroupContent: isSet(object.cancelGroupContent)
        ? CancelJoinGroupContent.fromJSON(object.cancelGroupContent)
        : undefined,
      leaveGroupContent: isSet(object.leaveGroupContent)
        ? LeaveJoinGroupContent.fromJSON(object.leaveGroupContent)
        : undefined,
      p2pGroupChangeContent: isSet(object.p2pGroupChangeContent)
        ? P2PGroupChangeContent.fromJSON(object.p2pGroupChangeContent)
        : undefined,
      groupChangeContent: isSet(object.groupChangeContent)
        ? GroupChangeContent.fromJSON(object.groupChangeContent)
        : undefined,
      businessContent: isSet(object.businessContent) ? BusinessContent.fromJSON(object.businessContent) : undefined,
    };
  },

  toJSON(message: WebcastLinkLayerMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.messageType !== 0) {
      obj.messageType = messageTypeToJSON(message.messageType);
    }
    if (message.channelId !== "0") {
      obj.channelId = message.channelId;
    }
    if (message.scene !== 0) {
      obj.scene = sceneToJSON(message.scene);
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.centerizedIdc !== "") {
      obj.centerizedIdc = message.centerizedIdc;
    }
    if (message.rtcRoomId !== "0") {
      obj.rtcRoomId = message.rtcRoomId;
    }
    if (message.createChannelContent !== undefined) {
      obj.createChannelContent = CreateChannelContent.toJSON(message.createChannelContent);
    }
    if (message.listChangeContent !== undefined) {
      obj.listChangeContent = ListChangeContent.toJSON(message.listChangeContent);
    }
    if (message.inviteContent !== undefined) {
      obj.inviteContent = InviteContent.toJSON(message.inviteContent);
    }
    if (message.applyContent !== undefined) {
      obj.applyContent = ApplyContent.toJSON(message.applyContent);
    }
    if (message.permitApplyContent !== undefined) {
      obj.permitApplyContent = PermitApplyContent.toJSON(message.permitApplyContent);
    }
    if (message.replyInviteContent !== undefined) {
      obj.replyInviteContent = ReplyInviteContent.toJSON(message.replyInviteContent);
    }
    if (message.kickOutContent !== undefined) {
      obj.kickOutContent = KickOutContent.toJSON(message.kickOutContent);
    }
    if (message.cancelApplyContent !== undefined) {
      obj.cancelApplyContent = CancelApplyContent.toJSON(message.cancelApplyContent);
    }
    if (message.cancelInviteContent !== undefined) {
      obj.cancelInviteContent = CancelInviteContent.toJSON(message.cancelInviteContent);
    }
    if (message.leaveContent !== undefined) {
      obj.leaveContent = LeaveContent.toJSON(message.leaveContent);
    }
    if (message.finishContent !== undefined) {
      obj.finishContent = FinishChannelContent.toJSON(message.finishContent);
    }
    if (message.joinDirectContent !== undefined) {
      obj.joinDirectContent = JoinDirectContent.toJSON(message.joinDirectContent);
    }
    if (message.joinGroupContent !== undefined) {
      obj.joinGroupContent = JoinGroupContent.toJSON(message.joinGroupContent);
    }
    if (message.permitGroupContent !== undefined) {
      obj.permitGroupContent = PermitJoinGroupContent.toJSON(message.permitGroupContent);
    }
    if (message.cancelGroupContent !== undefined) {
      obj.cancelGroupContent = CancelJoinGroupContent.toJSON(message.cancelGroupContent);
    }
    if (message.leaveGroupContent !== undefined) {
      obj.leaveGroupContent = LeaveJoinGroupContent.toJSON(message.leaveGroupContent);
    }
    if (message.p2pGroupChangeContent !== undefined) {
      obj.p2pGroupChangeContent = P2PGroupChangeContent.toJSON(message.p2pGroupChangeContent);
    }
    if (message.groupChangeContent !== undefined) {
      obj.groupChangeContent = GroupChangeContent.toJSON(message.groupChangeContent);
    }
    if (message.businessContent !== undefined) {
      obj.businessContent = BusinessContent.toJSON(message.businessContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastLinkLayerMessage>, I>>(base?: I): WebcastLinkLayerMessage {
    return WebcastLinkLayerMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastLinkLayerMessage>, I>>(object: I): WebcastLinkLayerMessage {
    const message = createBaseWebcastLinkLayerMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.messageType = object.messageType ?? 0;
    message.channelId = object.channelId ?? "0";
    message.scene = object.scene ?? 0;
    message.source = object.source ?? "";
    message.centerizedIdc = object.centerizedIdc ?? "";
    message.rtcRoomId = object.rtcRoomId ?? "0";
    message.createChannelContent = (object.createChannelContent !== undefined && object.createChannelContent !== null)
      ? CreateChannelContent.fromPartial(object.createChannelContent)
      : undefined;
    message.listChangeContent = (object.listChangeContent !== undefined && object.listChangeContent !== null)
      ? ListChangeContent.fromPartial(object.listChangeContent)
      : undefined;
    message.inviteContent = (object.inviteContent !== undefined && object.inviteContent !== null)
      ? InviteContent.fromPartial(object.inviteContent)
      : undefined;
    message.applyContent = (object.applyContent !== undefined && object.applyContent !== null)
      ? ApplyContent.fromPartial(object.applyContent)
      : undefined;
    message.permitApplyContent = (object.permitApplyContent !== undefined && object.permitApplyContent !== null)
      ? PermitApplyContent.fromPartial(object.permitApplyContent)
      : undefined;
    message.replyInviteContent = (object.replyInviteContent !== undefined && object.replyInviteContent !== null)
      ? ReplyInviteContent.fromPartial(object.replyInviteContent)
      : undefined;
    message.kickOutContent = (object.kickOutContent !== undefined && object.kickOutContent !== null)
      ? KickOutContent.fromPartial(object.kickOutContent)
      : undefined;
    message.cancelApplyContent = (object.cancelApplyContent !== undefined && object.cancelApplyContent !== null)
      ? CancelApplyContent.fromPartial(object.cancelApplyContent)
      : undefined;
    message.cancelInviteContent = (object.cancelInviteContent !== undefined && object.cancelInviteContent !== null)
      ? CancelInviteContent.fromPartial(object.cancelInviteContent)
      : undefined;
    message.leaveContent = (object.leaveContent !== undefined && object.leaveContent !== null)
      ? LeaveContent.fromPartial(object.leaveContent)
      : undefined;
    message.finishContent = (object.finishContent !== undefined && object.finishContent !== null)
      ? FinishChannelContent.fromPartial(object.finishContent)
      : undefined;
    message.joinDirectContent = (object.joinDirectContent !== undefined && object.joinDirectContent !== null)
      ? JoinDirectContent.fromPartial(object.joinDirectContent)
      : undefined;
    message.joinGroupContent = (object.joinGroupContent !== undefined && object.joinGroupContent !== null)
      ? JoinGroupContent.fromPartial(object.joinGroupContent)
      : undefined;
    message.permitGroupContent = (object.permitGroupContent !== undefined && object.permitGroupContent !== null)
      ? PermitJoinGroupContent.fromPartial(object.permitGroupContent)
      : undefined;
    message.cancelGroupContent = (object.cancelGroupContent !== undefined && object.cancelGroupContent !== null)
      ? CancelJoinGroupContent.fromPartial(object.cancelGroupContent)
      : undefined;
    message.leaveGroupContent = (object.leaveGroupContent !== undefined && object.leaveGroupContent !== null)
      ? LeaveJoinGroupContent.fromPartial(object.leaveGroupContent)
      : undefined;
    message.p2pGroupChangeContent =
      (object.p2pGroupChangeContent !== undefined && object.p2pGroupChangeContent !== null)
        ? P2PGroupChangeContent.fromPartial(object.p2pGroupChangeContent)
        : undefined;
    message.groupChangeContent = (object.groupChangeContent !== undefined && object.groupChangeContent !== null)
      ? GroupChangeContent.fromPartial(object.groupChangeContent)
      : undefined;
    message.businessContent = (object.businessContent !== undefined && object.businessContent !== null)
      ? BusinessContent.fromPartial(object.businessContent)
      : undefined;
    return message;
  },
};

function createBaseRoomVerifyMessage(): RoomVerifyMessage {
  return { common: undefined, action: 0, content: "", noticeType: "0", closeRoom: false };
}

export const RoomVerifyMessageDecoder: MessageFns<RoomVerifyMessage> = {
  encode(message: RoomVerifyMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common !== undefined) {
      CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.noticeType !== "0") {
      writer.uint32(32).int64(message.noticeType);
    }
    if (message.closeRoom !== false) {
      writer.uint32(40).bool(message.closeRoom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomVerifyMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomVerifyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.noticeType = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.closeRoom = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomVerifyMessage {
    return {
      common: isSet(object.common) ? CommonMessageData.fromJSON(object.common) : undefined,
      action: isSet(object.action) ? globalThis.Number(object.action) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      noticeType: isSet(object.noticeType) ? globalThis.String(object.noticeType) : "0",
      closeRoom: isSet(object.closeRoom) ? globalThis.Boolean(object.closeRoom) : false,
    };
  },

  toJSON(message: RoomVerifyMessage): unknown {
    const obj: any = {};
    if (message.common !== undefined) {
      obj.common = CommonMessageData.toJSON(message.common);
    }
    if (message.action !== 0) {
      obj.action = Math.round(message.action);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.noticeType !== "0") {
      obj.noticeType = message.noticeType;
    }
    if (message.closeRoom !== false) {
      obj.closeRoom = message.closeRoom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomVerifyMessage>, I>>(base?: I): RoomVerifyMessage {
    return RoomVerifyMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomVerifyMessage>, I>>(object: I): RoomVerifyMessage {
    const message = createBaseRoomVerifyMessage();
    message.common = (object.common !== undefined && object.common !== null)
      ? CommonMessageData.fromPartial(object.common)
      : undefined;
    message.action = object.action ?? 0;
    message.content = object.content ?? "";
    message.noticeType = object.noticeType ?? "0";
    message.closeRoom = object.closeRoom ?? false;
    return message;
  },
};

function createBaseWebcastBarrageMessageOld(): WebcastBarrageMessageOld {
  return { event: undefined, msgType: 0, content: undefined };
}

export const WebcastBarrageMessageOldDecoder: MessageFns<WebcastBarrageMessageOld> = {
  encode(message: WebcastBarrageMessageOld, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      CommonMessageDataDecoder.encode(message.event, writer.uint32(10).fork()).join();
    }
    if (message.msgType !== 0) {
      writer.uint32(24).int32(message.msgType);
    }
    if (message.content !== undefined) {
      WebcastBarrageMessageOld_TextDecoder.encode(message.content, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessageOld {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessageOld();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event = CommonMessageDataDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.msgType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.content = WebcastBarrageMessageOld_TextDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessageOld {
    return {
      event: isSet(object.event) ? CommonMessageData.fromJSON(object.event) : undefined,
      msgType: isSet(object.msgType) ? globalThis.Number(object.msgType) : 0,
      content: isSet(object.content) ? WebcastBarrageMessageOld_Text.fromJSON(object.content) : undefined,
    };
  },

  toJSON(message: WebcastBarrageMessageOld): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = CommonMessageData.toJSON(message.event);
    }
    if (message.msgType !== 0) {
      obj.msgType = Math.round(message.msgType);
    }
    if (message.content !== undefined) {
      obj.content = WebcastBarrageMessageOld_Text.toJSON(message.content);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessageOld>, I>>(base?: I): WebcastBarrageMessageOld {
    return WebcastBarrageMessageOld.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessageOld>, I>>(object: I): WebcastBarrageMessageOld {
    const message = createBaseWebcastBarrageMessageOld();
    message.event = (object.event !== undefined && object.event !== null)
      ? CommonMessageData.fromPartial(object.event)
      : undefined;
    message.msgType = object.msgType ?? 0;
    message.content = (object.content !== undefined && object.content !== null)
      ? WebcastBarrageMessageOld_Text.fromPartial(object.content)
      : undefined;
    return message;
  },
};

function createBaseWebcastBarrageMessageOld_Text(): WebcastBarrageMessageOld_Text {
  return { key: "", defaultPattern: "", pieces: [] };
}

export const WebcastBarrageMessageOld_TextDecoder: MessageFns<WebcastBarrageMessageOld_Text> = {
  encode(message: WebcastBarrageMessageOld_Text, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.defaultPattern !== "") {
      writer.uint32(18).string(message.defaultPattern);
    }
    for (const v of message.pieces) {
      WebcastBarrageMessageOld_TextPieceDecoder.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessageOld_Text {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessageOld_Text();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultPattern = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pieces.push(WebcastBarrageMessageOld_TextPieceDecoder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessageOld_Text {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      defaultPattern: isSet(object.defaultPattern) ? globalThis.String(object.defaultPattern) : "",
      pieces: globalThis.Array.isArray(object?.pieces)
        ? object.pieces.map((e: any) => WebcastBarrageMessageOld_TextPiece.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebcastBarrageMessageOld_Text): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.defaultPattern !== "") {
      obj.defaultPattern = message.defaultPattern;
    }
    if (message.pieces?.length) {
      obj.pieces = message.pieces.map((e) => WebcastBarrageMessageOld_TextPiece.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessageOld_Text>, I>>(base?: I): WebcastBarrageMessageOld_Text {
    return WebcastBarrageMessageOld_Text.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessageOld_Text>, I>>(
    object: I,
  ): WebcastBarrageMessageOld_Text {
    const message = createBaseWebcastBarrageMessageOld_Text();
    message.key = object.key ?? "";
    message.defaultPattern = object.defaultPattern ?? "";
    message.pieces = object.pieces?.map((e) => WebcastBarrageMessageOld_TextPiece.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebcastBarrageMessageOld_TextPiece(): WebcastBarrageMessageOld_TextPiece {
  return { type: 0, stringValue: "", userValue: undefined };
}

export const WebcastBarrageMessageOld_TextPieceDecoder: MessageFns<WebcastBarrageMessageOld_TextPiece> = {
  encode(message: WebcastBarrageMessageOld_TextPiece, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.stringValue !== "") {
      writer.uint32(90).string(message.stringValue);
    }
    if (message.userValue !== undefined) {
      WebcastBarrageMessageOld_TextPieceUserDecoder.encode(message.userValue, writer.uint32(170).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessageOld_TextPiece {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessageOld_TextPiece();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.userValue = WebcastBarrageMessageOld_TextPieceUserDecoder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessageOld_TextPiece {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
      userValue: isSet(object.userValue)
        ? WebcastBarrageMessageOld_TextPieceUser.fromJSON(object.userValue)
        : undefined,
    };
  },

  toJSON(message: WebcastBarrageMessageOld_TextPiece): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    if (message.userValue !== undefined) {
      obj.userValue = WebcastBarrageMessageOld_TextPieceUser.toJSON(message.userValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessageOld_TextPiece>, I>>(
    base?: I,
  ): WebcastBarrageMessageOld_TextPiece {
    return WebcastBarrageMessageOld_TextPiece.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessageOld_TextPiece>, I>>(
    object: I,
  ): WebcastBarrageMessageOld_TextPiece {
    const message = createBaseWebcastBarrageMessageOld_TextPiece();
    message.type = object.type ?? 0;
    message.stringValue = object.stringValue ?? "";
    message.userValue = (object.userValue !== undefined && object.userValue !== null)
      ? WebcastBarrageMessageOld_TextPieceUser.fromPartial(object.userValue)
      : undefined;
    return message;
  },
};

function createBaseWebcastBarrageMessageOld_TextPieceUser(): WebcastBarrageMessageOld_TextPieceUser {
  return { user: undefined, withColon: false };
}

export const WebcastBarrageMessageOld_TextPieceUserDecoder: MessageFns<WebcastBarrageMessageOld_TextPieceUser> = {
  encode(message: WebcastBarrageMessageOld_TextPieceUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.withColon !== false) {
      writer.uint32(16).bool(message.withColon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebcastBarrageMessageOld_TextPieceUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebcastBarrageMessageOld_TextPieceUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserDecoder.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.withColon = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebcastBarrageMessageOld_TextPieceUser {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      withColon: isSet(object.withColon) ? globalThis.Boolean(object.withColon) : false,
    };
  },

  toJSON(message: WebcastBarrageMessageOld_TextPieceUser): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.withColon !== false) {
      obj.withColon = message.withColon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebcastBarrageMessageOld_TextPieceUser>, I>>(
    base?: I,
  ): WebcastBarrageMessageOld_TextPieceUser {
    return WebcastBarrageMessageOld_TextPieceUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebcastBarrageMessageOld_TextPieceUser>, I>>(
    object: I,
  ): WebcastBarrageMessageOld_TextPieceUser {
    const message = createBaseWebcastBarrageMessageOld_TextPieceUser();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.withColon = object.withColon ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
