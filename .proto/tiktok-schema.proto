syntax = "proto3";
package TikTok;


enum ControlAction {
    CONTROL_ACTION_FALLBACK_UNKNOWN = 0;
    CONTROL_ACTION_STREAM_PAUSED = 1;
    CONTROL_ACTION_STREAM_UNPAUSED = 2;
    CONTROL_ACTION_STREAM_ENDED = 3;
    CONTROL_ACTION_STREAM_SUSPENDED = 4;
}

// Data structure from im/fetch/ response
message WebcastResponse {
    repeated Message messages = 1;
    string cursor = 2;
    int32 fetchInterval = 3;
    int64 serverTimestamp = 4;
    string internalExt = 5;
    int32 fetchType = 6; // ws (1) or polling (2)
    repeated WebsocketParam wsParams = 7;
    int32 heartbeatDuration = 8;
    bool needAck = 9;
    string wsUrl = 10;
}

message Message {
    string type = 1;
    bytes binary = 2;
}

message WebsocketParam {
    string name = 1;
    string value = 2;
}

// Message types depending on Message.tyoe
message WebcastControlMessage {
    ControlAction action = 2;
}

// Statistics like viewer count
message WebcastRoomUserSeqMessage {
    repeated TopUser topViewers = 2;
    int32 viewerCount = 3;
}

message TopUser {
    uint64 coinCount = 1;
    User user = 2;
}

message ImageModel {
    repeated string m_urls = 1;
    string m_uri = 2;
    int32 height = 3;
    int32 width = 4;
    string avg_color = 5;
    int32 image_type = 6;
    string schema = 7;
    Content content = 8;
    bool is_animated = 9;

    message Content {
        string name = 1;
        string font_color = 2;
        int64 level = 3;

    }
}

message WebcastChatMessage {
    WebcastMessageEvent event = 1;
    User user = 2;
    string comment = 3;
    bool visible_to_sender = 4;
    ImageModel background = 5;
    string full_screen_text_color = 6;
    ImageModel background_image_v2 = 7;
    ImageModel gift_image = 10;
    int32 input_type = 11;
    User at_user = 12;
    repeated WebcastSubEmote emotes = 13;
    string content_language = 14;

    int32 quick_chat_scene = 16;
    int32 communityflagged_status = 17;
    repeated CommentQualityScore comment_quality_scores = 19;
    UserIdentity user_identity = 18;
    repeated CommentTag comment_tag = 20;
    int64 screen_time = 22;
    string signature = 23;
    string signature_version = 24;
    string ec_streamer_key = 25;

    message UserIdentity {
        bool is_gift_giver_of_anchor = 1;
        bool is_subscriber_of_anchor = 2;
        bool is_mutual_following_with_anchor = 3;
        bool is_follower_of_anchor = 4;
        bool is_moderator_of_anchor = 5;
        bool is_anchor = 6;

    }

    message CommentQualityScore {
        string version = 1;
        int64 score = 2;

    }

    enum CommentTag {
        COMMENT_TAG_NORMAL = 0;
        COMMENT_TAG_CANDIDATE = 1;
        COMMENT_TAG_OVERAGE = 2;
    }

}


message EmoteUploadInfo {
    int64 user_id = 1;
    optional UserEmoteUploadSource emote_upload_source = 2;
    User user_info = 3;
    string user_id_str = 4;

    enum UserEmoteUploadSource {
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0;
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1;
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2;
    }
}



// Chat Emotes (Subscriber)
message WebcastEmoteChatMessage {
    User user = 2;
    EmoteDetails emote = 3;
}

message WebcastSubEmote {
    int32 placeInComment = 1; //starting at 0, you insert the emote itself into the comment at that place
    EmoteDetails emote = 2;
}

message WebcastMemberMessage {
    WebcastMessageEvent event = 1;
    User user = 2;
    int32 actionId = 10;
}

message WebcastGiftMessage {
    WebcastMessageEvent event = 1;
    int32 giftId = 2;
    int32 repeatCount = 5;
    User user = 7;
    int32 repeatEnd = 9;
    uint64 groupId = 11;
    WebcastGiftMessageGiftDetails giftDetails = 15;
    string monitorExtra = 22;
    WebcastGiftMessageGiftExtra giftExtra = 23;
}

message WebcastGiftMessageGiftDetails {
    WebcastGiftMessageGiftImage giftImage = 1;
    string giftName = 16;
    string describe = 2;
    int32 giftType = 11;
    int32 diamondCount = 12;
}

// Taken from https://github.com/Davincible/gotiktoklive/blob/da4630622bc586629a53faae64e8c53509af29de/proto/tiktok.proto#L57
message WebcastGiftMessageGiftExtra {
    uint64 timestamp = 6;
    uint64 receiverUserId = 8;
}

message WebcastGiftMessageGiftImage {
    string giftPictureUrl = 1;
}


// Battle start
message WebcastLinkMicBattle {
    repeated WebcastLinkMicBattleItems battleUsers = 10;
}

message WebcastLinkMicBattleItems {
    WebcastLinkMicBattleGroup battleGroup = 2;
}

message WebcastLinkMicBattleGroup {
    LinkUser user = 1;
}


// Battle status
message WebcastLinkMicArmies {
    repeated WebcastLinkMicArmiesItems battleItems = 3;
    int32 battleStatus = 7;
}

message WebcastLinkMicArmiesItems {
    uint64 hostUserId = 1;
    repeated WebcastLinkMicArmiesGroup battleGroups = 2;
}

message WebcastLinkMicArmiesGroup {
    repeated User users = 1;
    int32 points = 2;
}


// Follow & share event
message WebcastSocialMessage {
    WebcastMessageEvent event = 1;
    User user = 2;
}

// Like event (is only sent from time to time, not with every like)
message WebcastLikeMessage {
    WebcastMessageEvent event = 1;
    User user = 5;
    int32 likeCount = 2;
    int32 totalLikeCount = 3;
}

// New question event
message WebcastQuestionNewMessage {
    QuestionDetails questionDetails = 2;
}

message QuestionDetails {
    string questionText = 2;
    User user = 5;
}

message WebcastMessageEvent {
    uint64 msgId = 2;
    uint64 createTime = 4;
    WebcastMessageEventDetails eventDetails = 8;
}

// Contains UI information
message WebcastMessageEventDetails {
    string displayType = 1;
    string label = 2;
}

// Source: Co-opted https://github.com/zerodytrash/TikTok-Livestream-Chat-Connector/issues/19#issuecomment-1074150342
message WebcastLiveIntroMessage {
    uint64 id = 2;
    string description = 4;
    User user = 5;
}

message SystemMessage {
    string description = 2;
}

message WebcastInRoomBannerMessage {
    string data = 2;
}

message RankItem {
    string colour = 1;
    uint64 id = 4;
}

message WeeklyRanking {
    string type = 1;
    string label = 2;
    RankItem rank = 3;
}

message RankContainer {
    WeeklyRanking rankings = 4;
}

message WebcastHourlyRankMessage {
    RankContainer data = 2;
}

message EmoteDetails {
    string emoteId = 1;
    EmoteImage image = 2;
}

message EmoteImage {
    string imageUrl = 1;
}

// Envelope (treasure boxes)
// Taken from https://github.com/ThanoFish/TikTok-Live-Connector/blob/9b215b96792adfddfb638344b152fa9efa581b4c/src/proto/tiktokSchema.proto
message WebcastEnvelopeMessage {
    TreasureBoxData treasureBoxData = 2;
    TreasureBoxUser treasureBoxUser = 1;
}

message TreasureBoxUser {
    TreasureBoxUser2 user2 = 8;
}

message TreasureBoxUser2 {
    repeated TreasureBoxUser3 user3 = 4;
}

message TreasureBoxUser3 {
    TreasureBoxUser4 user4 = 21;
}

message TreasureBoxUser4 {
    User user = 1;
}

message TreasureBoxData {
    uint32 coins = 5;
    uint32 canOpen = 6;
    uint64 timestamp = 7;
}

// New Subscriber message
message WebcastSubNotifyMessage {
    WebcastMessageEvent event = 1;
    User user = 2;
    int32 exhibitionType = 3;
    int32 subMonth = 4;
    int32 subscribeType = 5;
    int32 oldSubscribeStatus = 6;
    int32 subscribingStatus = 8;
}

// ==================================
// Generic stuff

message User {
    uint64 userId = 1;
    string nickname = 3;
    ProfilePicture profilePicture = 9;
    string uniqueId = 38;
    string secUid = 46;
    repeated UserBadgesAttributes badges = 64;
    uint64 createTime = 16;
    string bioDescription = 5;
    FollowInfo followInfo = 22;
}

message FollowInfo {
    int32 followingCount = 1;
    int32 followerCount = 2;
    int32 followStatus = 3;
    int32 pushStatus = 4;
}

message LinkUser {
    uint64 userId = 1;
    string nickname = 2;
    ProfilePicture profilePicture = 3;
    string uniqueId = 4;
}

message ProfilePicture {
    repeated string urls = 1;
}


message UserBadgesAttributes {
    int32 badgeSceneType = 3;
    repeated UserImageBadge imageBadges = 20;
    repeated UserBadge badges = 21;
    PrivilegeLogExtra privilegeLogExtra = 12;
}

message PrivilegeLogExtra {
    string privilegeId = 2;
    string level = 5;
}

message UserBadge {
    string type = 2;
    string name = 3;
}

message UserImageBadge {
    int32 displayType = 1;
    UserImageBadgeImage image = 2;
}

message UserImageBadgeImage {
    string url = 1;
}

// Websocket incoming message structure
message WebcastWebsocketMessage {
    uint64 id = 2;
    string type = 7;
    bytes binary = 8;
}

// Websocket acknowledgment message
message WebcastWebsocketAck {
    uint64 id = 2;
    string type = 7;
}


// Message representing the room info
message HeartbeatFrameRoomInfo {
    uint64 room_id = 1;
}

// Message representing metadata field 6
message HeartbeatFrameMetadataField6 {
    uint32 unknown_1 = 14;
}

// Message representing metadata field 7
message HeartbeatFrameMetadataField7 {
    uint32 unknown_1 = 13;
}

// Heartbeat keepalive message
message HeartbeatFrame {
    HeartbeatFrameMetadataField6 metadata_field_6 = 6;
    HeartbeatFrameMetadataField7 metadata_field_7 = 7;
    HeartbeatFrameRoomInfo room_info = 8;
}

// TODO: In a future release, set client_enter=1 on both /im/fetch and WS url; this is what the web client does
// Didn't do it because it requires an agent update & sign server update
//         // Create a room enter container
//        const container = ImEnterRoomMessagePushFrame.fromPartial({
//            payloadType: "im_enter_room",
//            payload: {
//                roomId: roomId,
//                unknown1: 12,
//                role: "audience",
//                cursor: cursor,
//                unknown2: 0,
//                unknown3: "0",
//                unknown4: 0
//            },
//            metadata: {
//                unknown1: 98
//            }
//        });
message ImEnterRoomMessagePushFrame {

    Metadata metadata = 6;
    string payload_type = 7; // "im_enter_room"
    ImEnterRoomMessage payload = 8;

    message Metadata {
        uint32 unknown1 = 14; // "98"
    }

    message ImEnterRoomMessage {
        uint64 room_id = 1; // Room ID
        uint32 unknown1 = 4; // "12"
        string role = 5; // "audience"
        string cursor = 6; // Cursor
        optional int32  unknown2 = 7; // "0"
        string unknown3 = 9; // "0"
        optional int32 unknown4 = 10; // "0"
    }

}
message WebcastBarrageMessage {
    WebcastMessageEvent base_message = 1;
    BarrageEvent event = 2;
    optional BarrageType msg_type = 3;
    ImageModel icon = 4;
    int64 duration = 6;
    ImageModel back_ground = 7;
    ImageModel right_icon = 8;
    int32 display_config = 9;
    int64 gallery_gift_id = 10;
    bool use_marquee = 14;
    optional ShowType show_type = 15;
    optional RenderType render_type = 17;
    optional IconDisplayType left_icon_display_type = 18;
    ImageModel ribbon_animation = 19;
    string hybrid_url = 21;
    string schema = 22;
    string sub_type = 23;
    PrivilegeLogExtra privilege_log_extra = 103;

    enum BarrageType {
        BARRAGE_TYPE_UNKNOWN = 0;
        BARRAGE_TYPE_E_COM_ORDERING = 1;
        BARRAGE_TYPE_E_COM_BUYING = 2;
        BARRAGE_TYPE_NORMAL = 3;
        BARRAGE_TYPE_SUBSCRIBE = 4;
        BARRAGE_TYPE_EVENT_VIEW = 5;
        BARRAGE_TYPE_EVENT_REGISTERED = 6;
        BARRAGE_TYPE_SUBSCRIBE_GIFT = 7;
        BARRAGE_TYPE_USER_UPGRADE = 8;
        BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION = 9;
        BARRAGE_TYPE_FANS_LEVEL_UPGRADE = 10;
        BARRAGE_TYPE_FANS_LEVEL_ENTRANCE = 11;
        BARRAGE_TYPE_GAME_PARTNERSHIP = 12;
        BARRAGE_TYPE_GIFT_GALLERY = 13;
        BARRAGE_TYPE_E_COM_BOUGHT = 14;
        BARRAGE_TYPE_COMMON_BARRAGE = 100;}
    enum ShowType {
        SHOW_TYPE_NORMAL = 0;
        SHOW_TYPE_FADE_IN_OUT = 1;}
    enum RenderType {
        RENDER_TYPE_NATIVE = 0;
        RENDER_TYPE_HYBRID = 1;
        RENDER_TYPE_ALPHA = 2;}
    enum IconDisplayType {
        ICON_DISPLAY_TYPE_IMAGE = 0;
        ICON_DISPLAY_TYPE_BADGE = 1;}
    message BarrageEvent {
        string event_name = 1;
        map<string, string> params = 2;

    }

}
